
STM32CubeIDE_F746G-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021fe4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b24  080221b4  080221b4  000321b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003814  08025cd8  08025cd8  00035cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000a43c0  080294ec  080294ec  000394ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000016c  080cd8ac  080cd8ac  000dd8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080cda18  080cda18  000e00c0  2**0
                  CONTENTS
  7 .ARM          00000008  080cda18  080cda18  000dda18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080cda20  080cda20  000e00c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000010  080cda20  080cda20  000dda20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080cda30  080cda30  000dda30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000c0  20000000  080cda38  000e0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000d9c4  200000c0  080cdaf8  000e00c0  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000da84  080cdaf8  000eda84  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000e00c0  2**0
                  CONTENTS, READONLY
 15 .debug_info   000c64fa  00000000  00000000  000e00f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0001adeb  00000000  00000000  001a65ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00008250  00000000  00000000  001c13d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00007978  00000000  00000000  001c9628  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00042c18  00000000  00000000  001d0fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00068711  00000000  00000000  00213bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0014c044  00000000  00000000  0027c2c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  003c830d  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00023c14  00000000  00000000  003c8408  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .stabstr      0000004e  00000000  00000000  003ec01c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802219c 	.word	0x0802219c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	0802219c 	.word	0x0802219c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005ba:	20c8      	movs	r0, #200	; 0xc8
 80005bc:	f000 fc32 	bl	8000e24 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005c0:	f000 fa7a 	bl	8000ab8 <ft5336_I2C_InitializeIfRequired>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	4603      	mov	r3, r0
 80005ea:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005f4:	2300      	movs	r3, #0
 80005f6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f8:	f000 fa5e 	bl	8000ab8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e010      	b.n	8000624 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	21a8      	movs	r1, #168	; 0xa8
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fbed 	bl	8000de8 <TS_IO_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000612:	7b7b      	ldrb	r3, [r7, #13]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b51      	cmp	r3, #81	; 0x51
 8000618:	d101      	bne.n	800061e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	3301      	adds	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d802      	bhi.n	8000630 <ft5336_ReadID+0x4e>
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0e8      	beq.n	8000602 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b29b      	uxth	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fa44 	bl	8000ad8 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f932 	bl	80008bc <ft5336_TS_DisableIT>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fbb7 	bl	8000de8 <TS_IO_Read>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b05      	cmp	r3, #5
 8000690:	d901      	bls.n	8000696 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 800069c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200000dc 	.word	0x200000dc

080006b4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006d6:	4b6d      	ldr	r3, [pc, #436]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006d8:	789a      	ldrb	r2, [r3, #2]
 80006da:	4b6c      	ldr	r3, [pc, #432]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006dc:	785b      	ldrb	r3, [r3, #1]
 80006de:	429a      	cmp	r2, r3
 80006e0:	f080 80cf 	bcs.w	8000882 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006e4:	4b69      	ldr	r3, [pc, #420]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d871      	bhi.n	80007d0 <ft5336_TS_GetXY+0x11c>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <ft5336_TS_GetXY+0x40>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	0800072f 	.word	0x0800072f
 80006fc:	08000741 	.word	0x08000741
 8000700:	08000753 	.word	0x08000753
 8000704:	08000765 	.word	0x08000765
 8000708:	08000777 	.word	0x08000777
 800070c:	08000789 	.word	0x08000789
 8000710:	0800079b 	.word	0x0800079b
 8000714:	080007ad 	.word	0x080007ad
 8000718:	080007bf 	.word	0x080007bf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800071c:	2304      	movs	r3, #4
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000720:	2303      	movs	r3, #3
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000724:	2306      	movs	r3, #6
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000728:	2305      	movs	r3, #5
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e051      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800072e:	230a      	movs	r3, #10
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000732:	2309      	movs	r3, #9
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000736:	230c      	movs	r3, #12
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800073a:	230b      	movs	r3, #11
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e048      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000740:	2310      	movs	r3, #16
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000744:	230f      	movs	r3, #15
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000748:	2312      	movs	r3, #18
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800074c:	2311      	movs	r3, #17
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e03f      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000752:	2316      	movs	r3, #22
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000756:	2315      	movs	r3, #21
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800075a:	2318      	movs	r3, #24
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800075e:	2317      	movs	r3, #23
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e036      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000764:	231c      	movs	r3, #28
 8000766:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000768:	231b      	movs	r3, #27
 800076a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800076c:	231e      	movs	r3, #30
 800076e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000770:	231d      	movs	r3, #29
 8000772:	753b      	strb	r3, [r7, #20]
      break;
 8000774:	e02d      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000776:	2322      	movs	r3, #34	; 0x22
 8000778:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800077a:	2321      	movs	r3, #33	; 0x21
 800077c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800077e:	2324      	movs	r3, #36	; 0x24
 8000780:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000782:	2323      	movs	r3, #35	; 0x23
 8000784:	753b      	strb	r3, [r7, #20]
      break;
 8000786:	e024      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000788:	2328      	movs	r3, #40	; 0x28
 800078a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800078c:	2327      	movs	r3, #39	; 0x27
 800078e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000790:	232a      	movs	r3, #42	; 0x2a
 8000792:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000794:	2329      	movs	r3, #41	; 0x29
 8000796:	753b      	strb	r3, [r7, #20]
      break;
 8000798:	e01b      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800079a:	232e      	movs	r3, #46	; 0x2e
 800079c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800079e:	232d      	movs	r3, #45	; 0x2d
 80007a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007a2:	2330      	movs	r3, #48	; 0x30
 80007a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007a6:	232f      	movs	r3, #47	; 0x2f
 80007a8:	753b      	strb	r3, [r7, #20]
      break;
 80007aa:	e012      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007ac:	2334      	movs	r3, #52	; 0x34
 80007ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007b0:	2333      	movs	r3, #51	; 0x33
 80007b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007b4:	2336      	movs	r3, #54	; 0x36
 80007b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007b8:	2335      	movs	r3, #53	; 0x35
 80007ba:	753b      	strb	r3, [r7, #20]
      break;
 80007bc:	e009      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007be:	233a      	movs	r3, #58	; 0x3a
 80007c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007c2:	2339      	movs	r3, #57	; 0x39
 80007c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007c6:	233c      	movs	r3, #60	; 0x3c
 80007c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007ca:	233b      	movs	r3, #59	; 0x3b
 80007cc:	753b      	strb	r3, [r7, #20]
      break;
 80007ce:	e000      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007d0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007d2:	89fb      	ldrh	r3, [r7, #14]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fb04 	bl	8000de8 <TS_IO_Read>
 80007e0:	4603      	mov	r3, r0
 80007e2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 80007ec:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	7dba      	ldrb	r2, [r7, #22]
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 faf6 	bl	8000de8 <TS_IO_Read>
 80007fc:	4603      	mov	r3, r0
 80007fe:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	7d7a      	ldrb	r2, [r7, #21]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fadb 	bl	8000de8 <TS_IO_Read>
 8000832:	4603      	mov	r3, r0
 8000834:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800083e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	7d3a      	ldrb	r2, [r7, #20]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f000 facd 	bl	8000de8 <TS_IO_Read>
 800084e:	4603      	mov	r3, r0
 8000850:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000852:	7cfb      	ldrb	r3, [r7, #19]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21b      	sxth	r3, r3
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800086c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000870:	881a      	ldrh	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000878:	789b      	ldrb	r3, [r3, #2]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000880:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000dc 	.word	0x200000dc
 8000890:	200000e0 	.word	0x200000e0

08000894 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	21a4      	movs	r1, #164	; 0xa4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fa80 	bl	8000db4 <TS_IO_Write>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	21a4      	movs	r1, #164	; 0xa4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fa6c 	bl	8000db4 <TS_IO_Write>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b084      	sub	sp, #16
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	6039      	str	r1, [r7, #0]
 800091c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2101      	movs	r1, #1
 8000928:	4618      	mov	r0, r3
 800092a:	f000 fa5d 	bl	8000de8 <TS_IO_Read>
 800092e:	4603      	mov	r3, r0
 8000930:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	601a      	str	r2, [r3, #0]
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	4603      	mov	r3, r0
 8000952:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000964:	4b4d      	ldr	r3, [pc, #308]	; (8000a9c <ft5336_TS_GetTouchInfo+0x158>)
 8000966:	785b      	ldrb	r3, [r3, #1]
 8000968:	461a      	mov	r2, r3
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	4293      	cmp	r3, r2
 800096e:	f080 8090 	bcs.w	8000a92 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	2b09      	cmp	r3, #9
 8000976:	d85d      	bhi.n	8000a34 <ft5336_TS_GetTouchInfo+0xf0>
 8000978:	a201      	add	r2, pc, #4	; (adr r2, 8000980 <ft5336_TS_GetTouchInfo+0x3c>)
 800097a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097e:	bf00      	nop
 8000980:	080009a9 	.word	0x080009a9
 8000984:	080009b7 	.word	0x080009b7
 8000988:	080009c5 	.word	0x080009c5
 800098c:	080009d3 	.word	0x080009d3
 8000990:	080009e1 	.word	0x080009e1
 8000994:	080009ef 	.word	0x080009ef
 8000998:	080009fd 	.word	0x080009fd
 800099c:	08000a0b 	.word	0x08000a0b
 80009a0:	08000a19 	.word	0x08000a19
 80009a4:	08000a27 	.word	0x08000a27
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80009a8:	2303      	movs	r3, #3
 80009aa:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80009ac:	2307      	movs	r3, #7
 80009ae:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80009b0:	2308      	movs	r3, #8
 80009b2:	757b      	strb	r3, [r7, #21]
      break;
 80009b4:	e03f      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80009b6:	2309      	movs	r3, #9
 80009b8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80009ba:	230d      	movs	r3, #13
 80009bc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80009be:	230e      	movs	r3, #14
 80009c0:	757b      	strb	r3, [r7, #21]
      break;
 80009c2:	e038      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80009c4:	230f      	movs	r3, #15
 80009c6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80009c8:	2313      	movs	r3, #19
 80009ca:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80009cc:	2314      	movs	r3, #20
 80009ce:	757b      	strb	r3, [r7, #21]
      break;
 80009d0:	e031      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80009d2:	2315      	movs	r3, #21
 80009d4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80009d6:	2319      	movs	r3, #25
 80009d8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80009da:	231a      	movs	r3, #26
 80009dc:	757b      	strb	r3, [r7, #21]
      break;
 80009de:	e02a      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80009e0:	231b      	movs	r3, #27
 80009e2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80009e4:	231f      	movs	r3, #31
 80009e6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80009e8:	2320      	movs	r3, #32
 80009ea:	757b      	strb	r3, [r7, #21]
      break;
 80009ec:	e023      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80009ee:	2321      	movs	r3, #33	; 0x21
 80009f0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80009f2:	2325      	movs	r3, #37	; 0x25
 80009f4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80009f6:	2326      	movs	r3, #38	; 0x26
 80009f8:	757b      	strb	r3, [r7, #21]
      break;
 80009fa:	e01c      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80009fc:	2327      	movs	r3, #39	; 0x27
 80009fe:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000a00:	232b      	movs	r3, #43	; 0x2b
 8000a02:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000a04:	232c      	movs	r3, #44	; 0x2c
 8000a06:	757b      	strb	r3, [r7, #21]
      break;
 8000a08:	e015      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000a0a:	232d      	movs	r3, #45	; 0x2d
 8000a0c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000a0e:	2331      	movs	r3, #49	; 0x31
 8000a10:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000a12:	2332      	movs	r3, #50	; 0x32
 8000a14:	757b      	strb	r3, [r7, #21]
      break;
 8000a16:	e00e      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000a18:	2333      	movs	r3, #51	; 0x33
 8000a1a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000a1c:	2337      	movs	r3, #55	; 0x37
 8000a1e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000a20:	2338      	movs	r3, #56	; 0x38
 8000a22:	757b      	strb	r3, [r7, #21]
      break;
 8000a24:	e007      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000a26:	2339      	movs	r3, #57	; 0x39
 8000a28:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000a2a:	233d      	movs	r3, #61	; 0x3d
 8000a2c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000a2e:	233e      	movs	r3, #62	; 0x3e
 8000a30:	757b      	strb	r3, [r7, #21]
      break;
 8000a32:	e000      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000a34:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000a36:	89fb      	ldrh	r3, [r7, #14]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	7dfa      	ldrb	r2, [r7, #23]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f9d2 	bl	8000de8 <TS_IO_Read>
 8000a44:	4603      	mov	r3, r0
 8000a46:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000a48:	7d3b      	ldrb	r3, [r7, #20]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	119b      	asrs	r3, r3, #6
 8000a4e:	f003 0203 	and.w	r2, r3, #3
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000a56:	89fb      	ldrh	r3, [r7, #14]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	7dba      	ldrb	r2, [r7, #22]
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f9c2 	bl	8000de8 <TS_IO_Read>
 8000a64:	4603      	mov	r3, r0
 8000a66:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000a68:	7d3b      	ldrb	r3, [r7, #20]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000a72:	89fb      	ldrh	r3, [r7, #14]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	7d7a      	ldrb	r2, [r7, #21]
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f9b4 	bl	8000de8 <TS_IO_Read>
 8000a80:	4603      	mov	r3, r0
 8000a82:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000a84:	7d3b      	ldrb	r3, [r7, #20]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	111b      	asrs	r3, r3, #4
 8000a8a:	f003 0204 	and.w	r2, r3, #4
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000a92:	bf00      	nop
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200000dc 	.word	0x200000dc

08000aa0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	200000dc 	.word	0x200000dc

08000ab8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000abc:	f7ff fff0 	bl	8000aa0 <ft5336_Get_I2C_InitializedStatus>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d104      	bne.n	8000ad0 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000ac6:	f000 f96b 	bl	8000da0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000aca:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200000dc 	.word	0x200000dc

08000ad8 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08c      	sub	sp, #48	; 0x30
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a51      	ldr	r2, [pc, #324]	; (8000c44 <I2Cx_MspInit+0x150>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d14d      	bne.n	8000ba0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000b04:	4b50      	ldr	r3, [pc, #320]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	4a4f      	ldr	r2, [pc, #316]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b10:	4b4d      	ldr	r3, [pc, #308]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000b20:	2312      	movs	r3, #18
 8000b22:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	4845      	ldr	r0, [pc, #276]	; (8000c4c <I2Cx_MspInit+0x158>)
 8000b38:	f002 f9a8 	bl	8002e8c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000b3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	4840      	ldr	r0, [pc, #256]	; (8000c4c <I2Cx_MspInit+0x158>)
 8000b4a:	f002 f99f 	bl	8002e8c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000b4e:	4b3e      	ldr	r3, [pc, #248]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a3d      	ldr	r2, [pc, #244]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000b54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b3b      	ldr	r3, [pc, #236]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000b66:	4b38      	ldr	r3, [pc, #224]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000b68:	6a1b      	ldr	r3, [r3, #32]
 8000b6a:	4a37      	ldr	r2, [pc, #220]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000b6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b70:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000b72:	4b35      	ldr	r3, [pc, #212]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000b74:	6a1b      	ldr	r3, [r3, #32]
 8000b76:	4a34      	ldr	r2, [pc, #208]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000b78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000b7c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	210f      	movs	r1, #15
 8000b82:	2048      	movs	r0, #72	; 0x48
 8000b84:	f001 f924 	bl	8001dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000b88:	2048      	movs	r0, #72	; 0x48
 8000b8a:	f001 f93d 	bl	8001e08 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	210f      	movs	r1, #15
 8000b92:	2049      	movs	r0, #73	; 0x49
 8000b94:	f001 f91c 	bl	8001dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8000b98:	2049      	movs	r0, #73	; 0x49
 8000b9a:	f001 f935 	bl	8001e08 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8000b9e:	e04d      	b.n	8000c3c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000ba0:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	4a28      	ldr	r2, [pc, #160]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000ba6:	f043 0302 	orr.w	r3, r3, #2
 8000baa:	6313      	str	r3, [r2, #48]	; 0x30
 8000bac:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000bb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bbc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000bbe:	2312      	movs	r3, #18
 8000bc0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	481e      	ldr	r0, [pc, #120]	; (8000c50 <I2Cx_MspInit+0x15c>)
 8000bd6:	f002 f959 	bl	8002e8c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	481a      	ldr	r0, [pc, #104]	; (8000c50 <I2Cx_MspInit+0x15c>)
 8000be8:	f002 f950 	bl	8002e8c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	4a15      	ldr	r2, [pc, #84]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000bf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000c06:	6a1b      	ldr	r3, [r3, #32]
 8000c08:	4a0f      	ldr	r2, [pc, #60]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000c0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c0e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000c12:	6a1b      	ldr	r3, [r3, #32]
 8000c14:	4a0c      	ldr	r2, [pc, #48]	; (8000c48 <I2Cx_MspInit+0x154>)
 8000c16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000c1a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	210f      	movs	r1, #15
 8000c20:	201f      	movs	r0, #31
 8000c22:	f001 f8d5 	bl	8001dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000c26:	201f      	movs	r0, #31
 8000c28:	f001 f8ee 	bl	8001e08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	210f      	movs	r1, #15
 8000c30:	2020      	movs	r0, #32
 8000c32:	f001 f8cd 	bl	8001dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000c36:	2020      	movs	r0, #32
 8000c38:	f001 f8e6 	bl	8001e08 <HAL_NVIC_EnableIRQ>
}
 8000c3c:	bf00      	nop
 8000c3e:	3730      	adds	r7, #48	; 0x30
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200000e4 	.word	0x200000e4
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40021c00 	.word	0x40021c00
 8000c50:	40020400 	.word	0x40020400

08000c54 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f004 f8cd 	bl	8004dfc <HAL_I2C_GetState>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d125      	bne.n	8000cb4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <I2Cx_Init+0x68>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d103      	bne.n	8000c78 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <I2Cx_Init+0x6c>)
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	e002      	b.n	8000c7e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <I2Cx_Init+0x70>)
 8000c7c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a11      	ldr	r2, [pc, #68]	; (8000cc8 <I2Cx_Init+0x74>)
 8000c82:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ff23 	bl	8000af4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f003 fdb6 	bl	8004820 <HAL_I2C_Init>
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200000e4 	.word	0x200000e4
 8000cc0:	40005c00 	.word	0x40005c00
 8000cc4:	40005400 	.word	0x40005400
 8000cc8:	40912732 	.word	0x40912732

08000ccc <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af04      	add	r7, sp, #16
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4603      	mov	r3, r0
 8000cdc:	72fb      	strb	r3, [r7, #11]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	813b      	strh	r3, [r7, #8]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000cea:	7afb      	ldrb	r3, [r7, #11]
 8000cec:	b299      	uxth	r1, r3
 8000cee:	88f8      	ldrh	r0, [r7, #6]
 8000cf0:	893a      	ldrh	r2, [r7, #8]
 8000cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf6:	9302      	str	r3, [sp, #8]
 8000cf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cfa:	9301      	str	r3, [sp, #4]
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	4603      	mov	r3, r0
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f003 ff60 	bl	8004bc8 <HAL_I2C_Mem_Read>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000d0c:	7dfb      	ldrb	r3, [r7, #23]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d004      	beq.n	8000d1c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8000d12:	7afb      	ldrb	r3, [r7, #11]
 8000d14:	4619      	mov	r1, r3
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f000 f832 	bl	8000d80 <I2Cx_Error>
  }
  return status;    
 8000d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b08a      	sub	sp, #40	; 0x28
 8000d2a:	af04      	add	r7, sp, #16
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	4611      	mov	r1, r2
 8000d32:	461a      	mov	r2, r3
 8000d34:	4603      	mov	r3, r0
 8000d36:	72fb      	strb	r3, [r7, #11]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	813b      	strh	r3, [r7, #8]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000d44:	7afb      	ldrb	r3, [r7, #11]
 8000d46:	b299      	uxth	r1, r3
 8000d48:	88f8      	ldrh	r0, [r7, #6]
 8000d4a:	893a      	ldrh	r2, [r7, #8]
 8000d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d50:	9302      	str	r3, [sp, #8]
 8000d52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d54:	9301      	str	r3, [sp, #4]
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	68f8      	ldr	r0, [r7, #12]
 8000d5e:	f003 fe1f 	bl	80049a0 <HAL_I2C_Mem_Write>
 8000d62:	4603      	mov	r3, r0
 8000d64:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000d66:	7dfb      	ldrb	r3, [r7, #23]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d004      	beq.n	8000d76 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000d6c:	7afb      	ldrb	r3, [r7, #11]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	68f8      	ldr	r0, [r7, #12]
 8000d72:	f000 f805 	bl	8000d80 <I2Cx_Error>
  }
  return status;
 8000d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f003 fdd7 	bl	8004940 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ff5e 	bl	8000c54 <I2Cx_Init>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <TS_IO_Init+0x10>)
 8000da6:	f7ff ff55 	bl	8000c54 <I2Cx_Init>
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200000e4 	.word	0x200000e4

08000db4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af02      	add	r7, sp, #8
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	71bb      	strb	r3, [r7, #6]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000dc6:	79bb      	ldrb	r3, [r7, #6]
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	79f9      	ldrb	r1, [r7, #7]
 8000dcc:	2301      	movs	r3, #1
 8000dce:	9301      	str	r3, [sp, #4]
 8000dd0:	1d7b      	adds	r3, r7, #5
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	4803      	ldr	r0, [pc, #12]	; (8000de4 <TS_IO_Write+0x30>)
 8000dd8:	f7ff ffa5 	bl	8000d26 <I2Cx_WriteMultiple>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200000e4 	.word	0x200000e4

08000de8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af02      	add	r7, sp, #8
 8000dee:	4603      	mov	r3, r0
 8000df0:	460a      	mov	r2, r1
 8000df2:	71fb      	strb	r3, [r7, #7]
 8000df4:	4613      	mov	r3, r2
 8000df6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8000dfc:	79bb      	ldrb	r3, [r7, #6]
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	79f9      	ldrb	r1, [r7, #7]
 8000e02:	2301      	movs	r3, #1
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	f107 030f 	add.w	r3, r7, #15
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	4804      	ldr	r0, [pc, #16]	; (8000e20 <TS_IO_Read+0x38>)
 8000e10:	f7ff ff5c 	bl	8000ccc <I2Cx_ReadMultiple>

  return read_value;
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200000e4 	.word	0x200000e4

08000e24 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 fc61 	bl	80016f4 <HAL_Delay>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{ 
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	71fb      	strb	r3, [r7, #7]
  
  /* uSD device interface configuration */
  uSdHandle.Instance = SDMMC1;
 8000e46:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <BSP_SD_Init+0x8c>)
 8000e48:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <BSP_SD_Init+0x90>)
 8000e4a:	601a      	str	r2, [r3, #0]

  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <BSP_SD_Init+0x8c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8000e52:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <BSP_SD_Init+0x8c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <BSP_SD_Init+0x8c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <BSP_SD_Init+0x8c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <BSP_SD_Init+0x8c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <BSP_SD_Init+0x8c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  
  /* Msp SD Detect pin initialization */
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 8000e70:	2100      	movs	r1, #0
 8000e72:	4815      	ldr	r0, [pc, #84]	; (8000ec8 <BSP_SD_Init+0x8c>)
 8000e74:	f000 f960 	bl	8001138 <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 8000e78:	f000 f82a 	bl	8000ed0 <BSP_SD_IsDetected>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d001      	beq.n	8000e86 <BSP_SD_Init+0x4a>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8000e82:	2302      	movs	r3, #2
 8000e84:	e01c      	b.n	8000ec0 <BSP_SD_Init+0x84>
  }
  
  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 8000e86:	2100      	movs	r1, #0
 8000e88:	480f      	ldr	r0, [pc, #60]	; (8000ec8 <BSP_SD_Init+0x8c>)
 8000e8a:	f000 f869 	bl	8000f60 <BSP_SD_MspInit>

  /* HAL SD initialization */
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 8000e8e:	480e      	ldr	r0, [pc, #56]	; (8000ec8 <BSP_SD_Init+0x8c>)
 8000e90:	f006 ff02 	bl	8007c98 <HAL_SD_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <BSP_SD_Init+0x62>
  {
    sd_state = MSD_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	71fb      	strb	r3, [r7, #7]
  }
  
  /* Configure SD Bus width */
  if(sd_state == MSD_OK)
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10c      	bne.n	8000ebe <BSP_SD_Init+0x82>
  {
    /* Enable wide operation */ 
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000ea4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ea8:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <BSP_SD_Init+0x8c>)
 8000eaa:	f007 fb7f 	bl	80085ac <HAL_SD_ConfigWideBusOperation>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <BSP_SD_Init+0x7e>
    {
      sd_state = MSD_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	71fb      	strb	r3, [r7, #7]
 8000eb8:	e001      	b.n	8000ebe <BSP_SD_Init+0x82>
    }
    else
    {
      sd_state = MSD_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	71fb      	strb	r3, [r7, #7]
    }
  }
  
  return  sd_state;
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	2000a460 	.word	0x2000a460
 8000ecc:	40012c00 	.word	0x40012c00

08000ed0 <BSP_SD_IsDetected>:
/**
  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @retval Returns if SD is detected or not
  */
uint8_t BSP_SD_IsDetected(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
  __IO uint8_t      status = SD_PRESENT;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	71fb      	strb	r3, [r7, #7]
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 8000eda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ede:	4807      	ldr	r0, [pc, #28]	; (8000efc <BSP_SD_IsDetected+0x2c>)
 8000ee0:	f002 fa88 	bl	80033f4 <HAL_GPIO_ReadPin>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d101      	bne.n	8000eee <BSP_SD_IsDetected+0x1e>
  {
    status = SD_NOT_PRESENT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	b2db      	uxtb	r3, r3
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40020800 	.word	0x40020800

08000f00 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{  
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  /* Read block(s) in DMA transfer mode */
  if(HAL_SD_ReadBlocks_DMA(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	68f9      	ldr	r1, [r7, #12]
 8000f12:	4806      	ldr	r0, [pc, #24]	; (8000f2c <BSP_SD_ReadBlocks_DMA+0x2c>)
 8000f14:	f006 ff50 	bl	8007db8 <HAL_SD_ReadBlocks_DMA>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <BSP_SD_ReadBlocks_DMA+0x22>
  {
    return MSD_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e000      	b.n	8000f24 <BSP_SD_ReadBlocks_DMA+0x24>
  }
  else
  {
    return MSD_OK;
 8000f22:	2300      	movs	r3, #0
  }
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	2000a460 	.word	0x2000a460

08000f30 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{ 
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  /* Write block(s) in DMA transfer mode */
  if(HAL_SD_WriteBlocks_DMA(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	68f9      	ldr	r1, [r7, #12]
 8000f42:	4806      	ldr	r0, [pc, #24]	; (8000f5c <BSP_SD_WriteBlocks_DMA+0x2c>)
 8000f44:	f007 f806 	bl	8007f54 <HAL_SD_WriteBlocks_DMA>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <BSP_SD_WriteBlocks_DMA+0x22>
  {
    return MSD_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <BSP_SD_WriteBlocks_DMA+0x24>
  }
  else
  {
    return MSD_OK;
 8000f52:	2300      	movs	r3, #0
  }
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000a460 	.word	0x2000a460

08000f60 <BSP_SD_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	; 0x30
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000f6a:	4b6c      	ldr	r3, [pc, #432]	; (800111c <BSP_SD_MspInit+0x1bc>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	4a6b      	ldr	r2, [pc, #428]	; (800111c <BSP_SD_MspInit+0x1bc>)
 8000f70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f74:	6453      	str	r3, [r2, #68]	; 0x44
 8000f76:	4b69      	ldr	r3, [pc, #420]	; (800111c <BSP_SD_MspInit+0x1bc>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f7e:	61bb      	str	r3, [r7, #24]
 8000f80:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 8000f82:	4b66      	ldr	r3, [pc, #408]	; (800111c <BSP_SD_MspInit+0x1bc>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a65      	ldr	r2, [pc, #404]	; (800111c <BSP_SD_MspInit+0x1bc>)
 8000f88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b63      	ldr	r3, [pc, #396]	; (800111c <BSP_SD_MspInit+0x1bc>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b60      	ldr	r3, [pc, #384]	; (800111c <BSP_SD_MspInit+0x1bc>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a5f      	ldr	r2, [pc, #380]	; (800111c <BSP_SD_MspInit+0x1bc>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b5d      	ldr	r3, [pc, #372]	; (800111c <BSP_SD_MspInit+0x1bc>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb2:	4b5a      	ldr	r3, [pc, #360]	; (800111c <BSP_SD_MspInit+0x1bc>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a59      	ldr	r2, [pc, #356]	; (800111c <BSP_SD_MspInit+0x1bc>)
 8000fb8:	f043 0308 	orr.w	r3, r3, #8
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b57      	ldr	r3, [pc, #348]	; (800111c <BSP_SD_MspInit+0x1bc>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8000fda:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000fde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	484e      	ldr	r0, [pc, #312]	; (8001120 <BSP_SD_MspInit+0x1c0>)
 8000fe8:	f001 ff50 	bl	8002e8c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 8000fec:	2304      	movs	r3, #4
 8000fee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	484b      	ldr	r0, [pc, #300]	; (8001124 <BSP_SD_MspInit+0x1c4>)
 8000ff8:	f001 ff48 	bl	8002e8c <HAL_GPIO_Init>

  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	210e      	movs	r1, #14
 8001000:	2031      	movs	r0, #49	; 0x31
 8001002:	f000 fee5 	bl	8001dd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001006:	2031      	movs	r0, #49	; 0x31
 8001008:	f000 fefe 	bl	8001e08 <HAL_NVIC_EnableIRQ>
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 800100c:	4b46      	ldr	r3, [pc, #280]	; (8001128 <BSP_SD_MspInit+0x1c8>)
 800100e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001012:	605a      	str	r2, [r3, #4]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001014:	4b44      	ldr	r3, [pc, #272]	; (8001128 <BSP_SD_MspInit+0x1c8>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 800101a:	4b43      	ldr	r3, [pc, #268]	; (8001128 <BSP_SD_MspInit+0x1c8>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001020:	4b41      	ldr	r3, [pc, #260]	; (8001128 <BSP_SD_MspInit+0x1c8>)
 8001022:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001026:	611a      	str	r2, [r3, #16]
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001028:	4b3f      	ldr	r3, [pc, #252]	; (8001128 <BSP_SD_MspInit+0x1c8>)
 800102a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800102e:	615a      	str	r2, [r3, #20]
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001030:	4b3d      	ldr	r3, [pc, #244]	; (8001128 <BSP_SD_MspInit+0x1c8>)
 8001032:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001036:	619a      	str	r2, [r3, #24]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8001038:	4b3b      	ldr	r3, [pc, #236]	; (8001128 <BSP_SD_MspInit+0x1c8>)
 800103a:	2220      	movs	r2, #32
 800103c:	61da      	str	r2, [r3, #28]
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800103e:	4b3a      	ldr	r3, [pc, #232]	; (8001128 <BSP_SD_MspInit+0x1c8>)
 8001040:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001044:	621a      	str	r2, [r3, #32]
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8001046:	4b38      	ldr	r3, [pc, #224]	; (8001128 <BSP_SD_MspInit+0x1c8>)
 8001048:	2204      	movs	r2, #4
 800104a:	625a      	str	r2, [r3, #36]	; 0x24
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800104c:	4b36      	ldr	r3, [pc, #216]	; (8001128 <BSP_SD_MspInit+0x1c8>)
 800104e:	2203      	movs	r2, #3
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 8001052:	4b35      	ldr	r3, [pc, #212]	; (8001128 <BSP_SD_MspInit+0x1c8>)
 8001054:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001058:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 800105a:	4b33      	ldr	r3, [pc, #204]	; (8001128 <BSP_SD_MspInit+0x1c8>)
 800105c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001060:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 8001062:	4b31      	ldr	r3, [pc, #196]	; (8001128 <BSP_SD_MspInit+0x1c8>)
 8001064:	4a31      	ldr	r2, [pc, #196]	; (800112c <BSP_SD_MspInit+0x1cc>)
 8001066:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a2f      	ldr	r2, [pc, #188]	; (8001128 <BSP_SD_MspInit+0x1c8>)
 800106c:	63da      	str	r2, [r3, #60]	; 0x3c
 800106e:	4a2e      	ldr	r2, [pc, #184]	; (8001128 <BSP_SD_MspInit+0x1c8>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 8001074:	482c      	ldr	r0, [pc, #176]	; (8001128 <BSP_SD_MspInit+0x1c8>)
 8001076:	f001 f8ed 	bl	8002254 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 800107a:	482b      	ldr	r0, [pc, #172]	; (8001128 <BSP_SD_MspInit+0x1c8>)
 800107c:	f001 f83c 	bl	80020f8 <HAL_DMA_Init>
  
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 8001080:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <BSP_SD_MspInit+0x1d0>)
 8001082:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001086:	605a      	str	r2, [r3, #4]
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001088:	4b29      	ldr	r3, [pc, #164]	; (8001130 <BSP_SD_MspInit+0x1d0>)
 800108a:	2240      	movs	r2, #64	; 0x40
 800108c:	609a      	str	r2, [r3, #8]
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 800108e:	4b28      	ldr	r3, [pc, #160]	; (8001130 <BSP_SD_MspInit+0x1d0>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <BSP_SD_MspInit+0x1d0>)
 8001096:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800109a:	611a      	str	r2, [r3, #16]
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <BSP_SD_MspInit+0x1d0>)
 800109e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010a2:	615a      	str	r2, [r3, #20]
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80010a4:	4b22      	ldr	r3, [pc, #136]	; (8001130 <BSP_SD_MspInit+0x1d0>)
 80010a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010aa:	619a      	str	r2, [r3, #24]
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 80010ac:	4b20      	ldr	r3, [pc, #128]	; (8001130 <BSP_SD_MspInit+0x1d0>)
 80010ae:	2220      	movs	r2, #32
 80010b0:	61da      	str	r2, [r3, #28]
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <BSP_SD_MspInit+0x1d0>)
 80010b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010b8:	621a      	str	r2, [r3, #32]
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <BSP_SD_MspInit+0x1d0>)
 80010bc:	2204      	movs	r2, #4
 80010be:	625a      	str	r2, [r3, #36]	; 0x24
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <BSP_SD_MspInit+0x1d0>)
 80010c2:	2203      	movs	r2, #3
 80010c4:	629a      	str	r2, [r3, #40]	; 0x28
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <BSP_SD_MspInit+0x1d0>)
 80010c8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80010cc:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <BSP_SD_MspInit+0x1d0>)
 80010d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010d4:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <BSP_SD_MspInit+0x1d0>)
 80010d8:	4a16      	ldr	r2, [pc, #88]	; (8001134 <BSP_SD_MspInit+0x1d4>)
 80010da:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a14      	ldr	r2, [pc, #80]	; (8001130 <BSP_SD_MspInit+0x1d0>)
 80010e0:	641a      	str	r2, [r3, #64]	; 0x40
 80010e2:	4a13      	ldr	r2, [pc, #76]	; (8001130 <BSP_SD_MspInit+0x1d0>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 80010e8:	4811      	ldr	r0, [pc, #68]	; (8001130 <BSP_SD_MspInit+0x1d0>)
 80010ea:	f001 f8b3 	bl	8002254 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 80010ee:	4810      	ldr	r0, [pc, #64]	; (8001130 <BSP_SD_MspInit+0x1d0>)
 80010f0:	f001 f802 	bl	80020f8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	210f      	movs	r1, #15
 80010f8:	203b      	movs	r0, #59	; 0x3b
 80010fa:	f000 fe69 	bl	8001dd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 80010fe:	203b      	movs	r0, #59	; 0x3b
 8001100:	f000 fe82 	bl	8001e08 <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	210f      	movs	r1, #15
 8001108:	2045      	movs	r0, #69	; 0x45
 800110a:	f000 fe61 	bl	8001dd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 800110e:	2045      	movs	r0, #69	; 0x45
 8001110:	f000 fe7a 	bl	8001e08 <HAL_NVIC_EnableIRQ>
}
 8001114:	bf00      	nop
 8001116:	3730      	adds	r7, #48	; 0x30
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800
 8001120:	40020800 	.word	0x40020800
 8001124:	40020c00 	.word	0x40020c00
 8001128:	20000130 	.word	0x20000130
 800112c:	40026458 	.word	0x40026458
 8001130:	20000190 	.word	0x20000190
 8001134:	400264a0 	.word	0x400264a0

08001138 <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <BSP_SD_Detect_MspInit+0x48>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <BSP_SD_Detect_MspInit+0x48>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <BSP_SD_Detect_MspInit+0x48>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 800115a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001164:	2301      	movs	r3, #1
 8001166:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	4619      	mov	r1, r3
 8001172:	4804      	ldr	r0, [pc, #16]	; (8001184 <BSP_SD_Detect_MspInit+0x4c>)
 8001174:	f001 fe8a 	bl	8002e8c <HAL_GPIO_Init>
}
 8001178:	bf00      	nop
 800117a:	3720      	adds	r7, #32
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40023800 	.word	0x40023800
 8001184:	40020800 	.word	0x40020800

08001188 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <BSP_SD_GetCardState+0x1c>)
 800118e:	f007 fa89 	bl	80086a4 <HAL_SD_GetCardState>
 8001192:	4603      	mov	r3, r0
 8001194:	2b04      	cmp	r3, #4
 8001196:	bf14      	ite	ne
 8001198:	2301      	movne	r3, #1
 800119a:	2300      	moveq	r3, #0
 800119c:	b2db      	uxtb	r3, r3
}
 800119e:	4618      	mov	r0, r3
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000a460 	.word	0x2000a460

080011a8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	4803      	ldr	r0, [pc, #12]	; (80011c0 <BSP_SD_GetCardInfo+0x18>)
 80011b4:	f007 f9ce 	bl	8008554 <HAL_SD_GetCardInfo>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000a460 	.word	0x2000a460

080011c4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80011cc:	f011 f848 	bl	8012260 <BSP_SD_ReadCpltCallback>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	460a      	mov	r2, r1
 80011e2:	80fb      	strh	r3, [r7, #6]
 80011e4:	4613      	mov	r3, r2
 80011e6:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80011ec:	4a14      	ldr	r2, [pc, #80]	; (8001240 <BSP_TS_Init+0x68>)
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 80011f2:	4a14      	ldr	r2, [pc, #80]	; (8001244 <BSP_TS_Init+0x6c>)
 80011f4:	88bb      	ldrh	r3, [r7, #4]
 80011f6:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <BSP_TS_Init+0x70>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2070      	movs	r0, #112	; 0x70
 80011fe:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <BSP_TS_Init+0x70>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2070      	movs	r0, #112	; 0x70
 8001206:	4798      	blx	r3
 8001208:	4603      	mov	r3, r0
 800120a:	2b51      	cmp	r3, #81	; 0x51
 800120c:	d111      	bne.n	8001232 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <BSP_TS_Init+0x74>)
 8001210:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <BSP_TS_Init+0x70>)
 8001212:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <BSP_TS_Init+0x78>)
 8001216:	2270      	movs	r2, #112	; 0x70
 8001218:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <BSP_TS_Init+0x7c>)
 800121c:	2208      	movs	r2, #8
 800121e:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <BSP_TS_Init+0x74>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <BSP_TS_Init+0x78>)
 8001228:	7812      	ldrb	r2, [r2, #0]
 800122a:	b292      	uxth	r2, r2
 800122c:	4610      	mov	r0, r2
 800122e:	4798      	blx	r3
 8001230:	e001      	b.n	8001236 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8001232:	2303      	movs	r3, #3
 8001234:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200001f4 	.word	0x200001f4
 8001244:	200001f6 	.word	0x200001f6
 8001248:	20000000 	.word	0x20000000
 800124c:	200001f0 	.word	0x200001f0
 8001250:	200001f9 	.word	0x200001f9
 8001254:	200001f8 	.word	0x200001f8

08001258 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b097      	sub	sp, #92	; 0x5c
 800125c:	af02      	add	r7, sp, #8
 800125e:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8001272:	4b97      	ldr	r3, [pc, #604]	; (80014d0 <BSP_TS_GetState+0x278>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	4a96      	ldr	r2, [pc, #600]	; (80014d4 <BSP_TS_GetState+0x27c>)
 800127a:	7812      	ldrb	r2, [r2, #0]
 800127c:	b292      	uxth	r2, r2
 800127e:	4610      	mov	r0, r2
 8001280:	4798      	blx	r3
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 81a8 	beq.w	80015e4 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8001294:	2300      	movs	r3, #0
 8001296:	64bb      	str	r3, [r7, #72]	; 0x48
 8001298:	e197      	b.n	80015ca <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800129a:	4b8d      	ldr	r3, [pc, #564]	; (80014d0 <BSP_TS_GetState+0x278>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	4a8c      	ldr	r2, [pc, #560]	; (80014d4 <BSP_TS_GetState+0x27c>)
 80012a2:	7812      	ldrb	r2, [r2, #0]
 80012a4:	b290      	uxth	r0, r2
 80012a6:	f107 0120 	add.w	r1, r7, #32
 80012aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012ac:	0052      	lsls	r2, r2, #1
 80012ae:	188c      	adds	r4, r1, r2
 80012b0:	f107 0114 	add.w	r1, r7, #20
 80012b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012b6:	0052      	lsls	r2, r2, #1
 80012b8:	440a      	add	r2, r1
 80012ba:	4621      	mov	r1, r4
 80012bc:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80012be:	4b86      	ldr	r3, [pc, #536]	; (80014d8 <BSP_TS_GetState+0x280>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d11b      	bne.n	80012fe <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 80012c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80012ce:	4413      	add	r3, r2
 80012d0:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80012d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80012dc:	440b      	add	r3, r1
 80012de:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 80012e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80012ea:	4413      	add	r3, r2
 80012ec:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80012f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80012f8:	440b      	add	r3, r1
 80012fa:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 80012fe:	4b76      	ldr	r3, [pc, #472]	; (80014d8 <BSP_TS_GetState+0x280>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d010      	beq.n	800132c <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 800130a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001312:	4413      	add	r3, r2
 8001314:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8001318:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800131c:	b29a      	uxth	r2, r3
 800131e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001326:	440b      	add	r3, r1
 8001328:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 800132c:	4b6a      	ldr	r3, [pc, #424]	; (80014d8 <BSP_TS_GetState+0x280>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	d010      	beq.n	800135a <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8001338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001340:	4413      	add	r3, r2
 8001342:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8001346:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800134a:	b29a      	uxth	r2, r3
 800134c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001354:	440b      	add	r3, r1
 8001356:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800135a:	4b5f      	ldr	r3, [pc, #380]	; (80014d8 <BSP_TS_GetState+0x280>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	2b00      	cmp	r3, #0
 8001364:	d01b      	beq.n	800139e <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8001366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800136e:	4413      	add	r3, r2
 8001370:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8001374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800137c:	440b      	add	r3, r1
 800137e:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8001382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800138a:	4413      	add	r3, r2
 800138c:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8001390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001398:	440b      	add	r3, r1
 800139a:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800139e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80013a6:	4413      	add	r3, r2
 80013a8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80013ac:	4619      	mov	r1, r3
 80013ae:	4a4b      	ldr	r2, [pc, #300]	; (80014dc <BSP_TS_GetState+0x284>)
 80013b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b6:	4299      	cmp	r1, r3
 80013b8:	d90e      	bls.n	80013d8 <BSP_TS_GetState+0x180>
 80013ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80013c2:	4413      	add	r3, r2
 80013c4:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80013c8:	4944      	ldr	r1, [pc, #272]	; (80014dc <BSP_TS_GetState+0x284>)
 80013ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	e00d      	b.n	80013f4 <BSP_TS_GetState+0x19c>
 80013d8:	4a40      	ldr	r2, [pc, #256]	; (80014dc <BSP_TS_GetState+0x284>)
 80013da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80013ea:	440b      	add	r3, r1
 80013ec:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80013f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001400:	4413      	add	r3, r2
 8001402:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001406:	4619      	mov	r1, r3
 8001408:	4a35      	ldr	r2, [pc, #212]	; (80014e0 <BSP_TS_GetState+0x288>)
 800140a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800140c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001410:	4299      	cmp	r1, r3
 8001412:	d90e      	bls.n	8001432 <BSP_TS_GetState+0x1da>
 8001414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800141c:	4413      	add	r3, r2
 800141e:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001422:	492f      	ldr	r1, [pc, #188]	; (80014e0 <BSP_TS_GetState+0x288>)
 8001424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001426:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800142a:	b29b      	uxth	r3, r3
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	b29b      	uxth	r3, r3
 8001430:	e00d      	b.n	800144e <BSP_TS_GetState+0x1f6>
 8001432:	4a2b      	ldr	r2, [pc, #172]	; (80014e0 <BSP_TS_GetState+0x288>)
 8001434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143a:	b29a      	uxth	r2, r3
 800143c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001444:	440b      	add	r3, r1
 8001446:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	b29b      	uxth	r3, r3
 800144e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8001452:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001456:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800145a:	4413      	add	r3, r2
 800145c:	2b05      	cmp	r3, #5
 800145e:	dd17      	ble.n	8001490 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8001460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001468:	4413      	add	r3, r2
 800146a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800146e:	4619      	mov	r1, r3
 8001470:	4a1a      	ldr	r2, [pc, #104]	; (80014dc <BSP_TS_GetState+0x284>)
 8001472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001474:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8001478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001480:	4413      	add	r3, r2
 8001482:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001486:	4619      	mov	r1, r3
 8001488:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <BSP_TS_GetState+0x288>)
 800148a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800148c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <BSP_TS_GetState+0x27c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b70      	cmp	r3, #112	; 0x70
 8001496:	d125      	bne.n	80014e4 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8001498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80014a0:	4413      	add	r3, r2
 80014a2:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4413      	add	r3, r2
 80014ae:	460a      	mov	r2, r1
 80014b0:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80014b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80014ba:	4413      	add	r3, r2
 80014bc:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014c4:	3304      	adds	r3, #4
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	460a      	mov	r2, r1
 80014cc:	809a      	strh	r2, [r3, #4]
 80014ce:	e02c      	b.n	800152a <BSP_TS_GetState+0x2d2>
 80014d0:	200001f0 	.word	0x200001f0
 80014d4:	200001f9 	.word	0x200001f9
 80014d8:	200001f8 	.word	0x200001f8
 80014dc:	200001fc 	.word	0x200001fc
 80014e0:	20000210 	.word	0x20000210
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80014e4:	4b42      	ldr	r3, [pc, #264]	; (80015f0 <BSP_TS_GetState+0x398>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	4a42      	ldr	r2, [pc, #264]	; (80015f4 <BSP_TS_GetState+0x39c>)
 80014ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f2:	fb03 f301 	mul.w	r3, r3, r1
 80014f6:	0b1b      	lsrs	r3, r3, #12
 80014f8:	b299      	uxth	r1, r3
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	460a      	mov	r2, r1
 8001504:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8001506:	4b3c      	ldr	r3, [pc, #240]	; (80015f8 <BSP_TS_GetState+0x3a0>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	4619      	mov	r1, r3
 800150c:	4a3b      	ldr	r2, [pc, #236]	; (80015fc <BSP_TS_GetState+0x3a4>)
 800150e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001514:	fb03 f301 	mul.w	r3, r3, r1
 8001518:	0b1b      	lsrs	r3, r3, #12
 800151a:	b299      	uxth	r1, r3
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001520:	3304      	adds	r3, #4
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4413      	add	r3, r2
 8001526:	460a      	mov	r2, r1
 8001528:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800152a:	4b35      	ldr	r3, [pc, #212]	; (8001600 <BSP_TS_GetState+0x3a8>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	b298      	uxth	r0, r3
 8001530:	f107 010c 	add.w	r1, r7, #12
 8001534:	f107 0210 	add.w	r2, r7, #16
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	460b      	mov	r3, r1
 8001540:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001542:	f7ff f9ff 	bl	8000944 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	b2d9      	uxtb	r1, r3
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800154e:	4413      	add	r3, r2
 8001550:	3316      	adds	r3, #22
 8001552:	460a      	mov	r2, r1
 8001554:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	b2d9      	uxtb	r1, r3
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800155e:	4413      	add	r3, r2
 8001560:	3320      	adds	r3, #32
 8001562:	460a      	mov	r2, r1
 8001564:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	2b03      	cmp	r3, #3
 800156a:	d827      	bhi.n	80015bc <BSP_TS_GetState+0x364>
 800156c:	a201      	add	r2, pc, #4	; (adr r2, 8001574 <BSP_TS_GetState+0x31c>)
 800156e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001572:	bf00      	nop
 8001574:	08001585 	.word	0x08001585
 8001578:	08001593 	.word	0x08001593
 800157c:	080015a1 	.word	0x080015a1
 8001580:	080015af 	.word	0x080015af
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001588:	4413      	add	r3, r2
 800158a:	331b      	adds	r3, #27
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
          break;
 8001590:	e018      	b.n	80015c4 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001596:	4413      	add	r3, r2
 8001598:	331b      	adds	r3, #27
 800159a:	2202      	movs	r2, #2
 800159c:	701a      	strb	r2, [r3, #0]
          break;
 800159e:	e011      	b.n	80015c4 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015a4:	4413      	add	r3, r2
 80015a6:	331b      	adds	r3, #27
 80015a8:	2203      	movs	r2, #3
 80015aa:	701a      	strb	r2, [r3, #0]
          break;
 80015ac:	e00a      	b.n	80015c4 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015b2:	4413      	add	r3, r2
 80015b4:	331b      	adds	r3, #27
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
          break;
 80015ba:	e003      	b.n	80015c4 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 80015c2:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80015c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015c6:	3301      	adds	r3, #1
 80015c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015d2:	4293      	cmp	r3, r2
 80015d4:	f4ff ae61 	bcc.w	800129a <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f813 	bl	8001604 <BSP_TS_Get_GestureId>
 80015de:	4603      	mov	r3, r0
 80015e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80015e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3754      	adds	r7, #84	; 0x54
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd90      	pop	{r4, r7, pc}
 80015f0:	200001f4 	.word	0x200001f4
 80015f4:	200001fc 	.word	0x200001fc
 80015f8:	200001f6 	.word	0x200001f6
 80015fc:	20000210 	.word	0x20000210
 8001600:	200001f9 	.word	0x200001f9

08001604 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8001614:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <BSP_TS_Get_GestureId+0x90>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	b29b      	uxth	r3, r3
 800161a:	f107 0208 	add.w	r2, r7, #8
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff f976 	bl	8000912 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	2b18      	cmp	r3, #24
 800162a:	d01b      	beq.n	8001664 <BSP_TS_Get_GestureId+0x60>
 800162c:	2b18      	cmp	r3, #24
 800162e:	d806      	bhi.n	800163e <BSP_TS_Get_GestureId+0x3a>
 8001630:	2b10      	cmp	r3, #16
 8001632:	d00f      	beq.n	8001654 <BSP_TS_Get_GestureId+0x50>
 8001634:	2b14      	cmp	r3, #20
 8001636:	d011      	beq.n	800165c <BSP_TS_Get_GestureId+0x58>
 8001638:	2b00      	cmp	r3, #0
 800163a:	d007      	beq.n	800164c <BSP_TS_Get_GestureId+0x48>
 800163c:	e022      	b.n	8001684 <BSP_TS_Get_GestureId+0x80>
 800163e:	2b40      	cmp	r3, #64	; 0x40
 8001640:	d018      	beq.n	8001674 <BSP_TS_Get_GestureId+0x70>
 8001642:	2b49      	cmp	r3, #73	; 0x49
 8001644:	d01a      	beq.n	800167c <BSP_TS_Get_GestureId+0x78>
 8001646:	2b1c      	cmp	r3, #28
 8001648:	d010      	beq.n	800166c <BSP_TS_Get_GestureId+0x68>
 800164a:	e01b      	b.n	8001684 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8001652:	e01a      	b.n	800168a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800165a:	e016      	b.n	800168a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2202      	movs	r2, #2
 8001660:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8001662:	e012      	b.n	800168a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2203      	movs	r2, #3
 8001668:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800166a:	e00e      	b.n	800168a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2204      	movs	r2, #4
 8001670:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8001672:	e00a      	b.n	800168a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2205      	movs	r2, #5
 8001678:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800167a:	e006      	b.n	800168a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2206      	movs	r2, #6
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8001682:	e002      	b.n	800168a <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	73fb      	strb	r3, [r7, #15]
      break;
 8001688:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 800168a:	7bfb      	ldrb	r3, [r7, #15]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200001f9 	.word	0x200001f9

08001698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169c:	2003      	movs	r0, #3
 800169e:	f000 fb8c 	bl	8001dba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a2:	2000      	movs	r0, #0
 80016a4:	f011 fc40 	bl	8012f28 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80016a8:	f010 fde8 	bl	801227c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_IncTick+0x20>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_IncTick+0x24>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <HAL_IncTick+0x24>)
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000028 	.word	0x20000028
 80016d8:	2000a4e4 	.word	0x2000a4e4

080016dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return uwTick;
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <HAL_GetTick+0x14>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	2000a4e4 	.word	0x2000a4e4

080016f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016fc:	f7ff ffee 	bl	80016dc <HAL_GetTick>
 8001700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170c:	d005      	beq.n	800171a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_Delay+0x40>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4413      	add	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800171a:	bf00      	nop
 800171c:	f7ff ffde 	bl	80016dc <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	429a      	cmp	r2, r3
 800172a:	d8f7      	bhi.n	800171c <HAL_Delay+0x28>
  {
  }
}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000028 	.word	0x20000028

08001738 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e031      	b.n	80017b2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f010 fdb8 	bl	80122cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f003 0310 	and.w	r3, r3, #16
 8001772:	2b00      	cmp	r3, #0
 8001774:	d116      	bne.n	80017a4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <HAL_ADC_Init+0x84>)
 800177c:	4013      	ands	r3, r2
 800177e:	f043 0202 	orr.w	r2, r3, #2
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f94e 	bl	8001a28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f023 0303 	bic.w	r3, r3, #3
 800179a:	f043 0201 	orr.w	r2, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40
 80017a2:	e001      	b.n	80017a8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	ffffeefd 	.word	0xffffeefd

080017c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x1c>
 80017d8:	2302      	movs	r3, #2
 80017da:	e115      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x248>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b09      	cmp	r3, #9
 80017ea:	d935      	bls.n	8001858 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68d9      	ldr	r1, [r3, #12]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	461a      	mov	r2, r3
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	3b1e      	subs	r3, #30
 8001802:	2207      	movs	r2, #7
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43da      	mvns	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	400a      	ands	r2, r1
 8001810:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a7f      	ldr	r2, [pc, #508]	; (8001a14 <HAL_ADC_ConfigChannel+0x254>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d10a      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68d9      	ldr	r1, [r3, #12]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	061a      	lsls	r2, r3, #24
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	e035      	b.n	800189e <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68d9      	ldr	r1, [r3, #12]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	b29b      	uxth	r3, r3
 8001842:	4618      	mov	r0, r3
 8001844:	4603      	mov	r3, r0
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4403      	add	r3, r0
 800184a:	3b1e      	subs	r3, #30
 800184c:	409a      	lsls	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	e022      	b.n	800189e <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6919      	ldr	r1, [r3, #16]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	b29b      	uxth	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	4613      	mov	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4413      	add	r3, r2
 800186c:	2207      	movs	r2, #7
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	400a      	ands	r2, r1
 800187a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6919      	ldr	r1, [r3, #16]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	4618      	mov	r0, r3
 800188e:	4603      	mov	r3, r0
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4403      	add	r3, r0
 8001894:	409a      	lsls	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d824      	bhi.n	80018f0 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	3b05      	subs	r3, #5
 80018b8:	221f      	movs	r2, #31
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	400a      	ands	r2, r1
 80018c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	3b05      	subs	r3, #5
 80018e2:	fa00 f203 	lsl.w	r2, r0, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	635a      	str	r2, [r3, #52]	; 0x34
 80018ee:	e04c      	b.n	800198a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b0c      	cmp	r3, #12
 80018f6:	d824      	bhi.n	8001942 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	3b23      	subs	r3, #35	; 0x23
 800190a:	221f      	movs	r2, #31
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43da      	mvns	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	400a      	ands	r2, r1
 8001918:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	4618      	mov	r0, r3
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	3b23      	subs	r3, #35	; 0x23
 8001934:	fa00 f203 	lsl.w	r2, r0, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	631a      	str	r2, [r3, #48]	; 0x30
 8001940:	e023      	b.n	800198a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	3b41      	subs	r3, #65	; 0x41
 8001954:	221f      	movs	r2, #31
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43da      	mvns	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	400a      	ands	r2, r1
 8001962:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	b29b      	uxth	r3, r3
 8001970:	4618      	mov	r0, r3
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	3b41      	subs	r3, #65	; 0x41
 800197e:	fa00 f203 	lsl.w	r2, r0, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a22      	ldr	r2, [pc, #136]	; (8001a18 <HAL_ADC_ConfigChannel+0x258>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d109      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x1e8>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b12      	cmp	r3, #18
 800199a:	d105      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800199c:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <HAL_ADC_ConfigChannel+0x25c>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4a1e      	ldr	r2, [pc, #120]	; (8001a1c <HAL_ADC_ConfigChannel+0x25c>)
 80019a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019a6:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a1a      	ldr	r2, [pc, #104]	; (8001a18 <HAL_ADC_ConfigChannel+0x258>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d125      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x23e>
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a17      	ldr	r2, [pc, #92]	; (8001a14 <HAL_ADC_ConfigChannel+0x254>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d003      	beq.n	80019c4 <HAL_ADC_ConfigChannel+0x204>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b11      	cmp	r3, #17
 80019c2:	d11c      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80019c4:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <HAL_ADC_ConfigChannel+0x25c>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <HAL_ADC_ConfigChannel+0x25c>)
 80019ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019ce:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0f      	ldr	r2, [pc, #60]	; (8001a14 <HAL_ADC_ConfigChannel+0x254>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d111      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_ADC_ConfigChannel+0x260>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a11      	ldr	r2, [pc, #68]	; (8001a24 <HAL_ADC_ConfigChannel+0x264>)
 80019e0:	fba2 2303 	umull	r2, r3, r2, r3
 80019e4:	0c9a      	lsrs	r2, r3, #18
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80019f0:	e002      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f9      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	10000012 	.word	0x10000012
 8001a18:	40012000 	.word	0x40012000
 8001a1c:	40012300 	.word	0x40012300
 8001a20:	20000034 	.word	0x20000034
 8001a24:	431bde83 	.word	0x431bde83

08001a28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001a30:	4b78      	ldr	r3, [pc, #480]	; (8001c14 <ADC_Init+0x1ec>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	4a77      	ldr	r2, [pc, #476]	; (8001c14 <ADC_Init+0x1ec>)
 8001a36:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001a3a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001a3c:	4b75      	ldr	r3, [pc, #468]	; (8001c14 <ADC_Init+0x1ec>)
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	4973      	ldr	r1, [pc, #460]	; (8001c14 <ADC_Init+0x1ec>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6859      	ldr	r1, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	021a      	lsls	r2, r3, #8
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6859      	ldr	r1, [r3, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6899      	ldr	r1, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	4a58      	ldr	r2, [pc, #352]	; (8001c18 <ADC_Init+0x1f0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d022      	beq.n	8001b02 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6899      	ldr	r1, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001aec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6899      	ldr	r1, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	e00f      	b.n	8001b22 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0202 	bic.w	r2, r2, #2
 8001b30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6899      	ldr	r1, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	005a      	lsls	r2, r3, #1
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d01b      	beq.n	8001b88 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6859      	ldr	r1, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	035a      	lsls	r2, r3, #13
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	e007      	b.n	8001b98 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	051a      	lsls	r2, r3, #20
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6899      	ldr	r1, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bda:	025a      	lsls	r2, r3, #9
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6899      	ldr	r1, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	029a      	lsls	r2, r3, #10
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	609a      	str	r2, [r3, #8]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	40012300 	.word	0x40012300
 8001c18:	0f000001 	.word	0x0f000001

08001c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <__NVIC_SetPriorityGrouping+0x40>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4a:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <__NVIC_SetPriorityGrouping+0x40>)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	60d3      	str	r3, [r2, #12]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000ed00 	.word	0xe000ed00
 8001c60:	05fa0000 	.word	0x05fa0000

08001c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <__NVIC_GetPriorityGrouping+0x18>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	f003 0307 	and.w	r3, r3, #7
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	db0b      	blt.n	8001caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	f003 021f 	and.w	r2, r3, #31
 8001c98:	4907      	ldr	r1, [pc, #28]	; (8001cb8 <__NVIC_EnableIRQ+0x38>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000e100 	.word	0xe000e100

08001cbc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	db10      	blt.n	8001cf0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	f003 021f 	and.w	r2, r3, #31
 8001cd4:	4909      	ldr	r1, [pc, #36]	; (8001cfc <__NVIC_DisableIRQ+0x40>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	2001      	movs	r0, #1
 8001cde:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce2:	3320      	adds	r3, #32
 8001ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ce8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cec:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000e100 	.word	0xe000e100

08001d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	db0a      	blt.n	8001d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	490c      	ldr	r1, [pc, #48]	; (8001d4c <__NVIC_SetPriority+0x4c>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	0112      	lsls	r2, r2, #4
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	440b      	add	r3, r1
 8001d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d28:	e00a      	b.n	8001d40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4908      	ldr	r1, [pc, #32]	; (8001d50 <__NVIC_SetPriority+0x50>)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	3b04      	subs	r3, #4
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	761a      	strb	r2, [r3, #24]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000e100 	.word	0xe000e100
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f1c3 0307 	rsb	r3, r3, #7
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	bf28      	it	cs
 8001d72:	2304      	movcs	r3, #4
 8001d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d902      	bls.n	8001d84 <NVIC_EncodePriority+0x30>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b03      	subs	r3, #3
 8001d82:	e000      	b.n	8001d86 <NVIC_EncodePriority+0x32>
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	401a      	ands	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43d9      	mvns	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	4313      	orrs	r3, r2
         );
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3724      	adds	r7, #36	; 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ff2a 	bl	8001c1c <__NVIC_SetPriorityGrouping>
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
 8001ddc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de2:	f7ff ff3f 	bl	8001c64 <__NVIC_GetPriorityGrouping>
 8001de6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	68b9      	ldr	r1, [r7, #8]
 8001dec:	6978      	ldr	r0, [r7, #20]
 8001dee:	f7ff ffb1 	bl	8001d54 <NVIC_EncodePriority>
 8001df2:	4602      	mov	r2, r0
 8001df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff80 	bl	8001d00 <__NVIC_SetPriority>
}
 8001e00:	bf00      	nop
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff32 	bl	8001c80 <__NVIC_EnableIRQ>
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ff42 	bl	8001cbc <__NVIC_DisableIRQ>
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e054      	b.n	8001efc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7f5b      	ldrb	r3, [r3, #29]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d105      	bne.n	8001e68 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f010 fa8c 	bl	8012380 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	791b      	ldrb	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10c      	bne.n	8001e90 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a22      	ldr	r2, [pc, #136]	; (8001f04 <HAL_CRC_Init+0xc4>)
 8001e7c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0218 	bic.w	r2, r2, #24
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	e00c      	b.n	8001eaa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6899      	ldr	r1, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f834 	bl	8001f08 <HAL_CRCEx_Polynomial_Set>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e028      	b.n	8001efc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	795b      	ldrb	r3, [r3, #5]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d105      	bne.n	8001ebe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eba:	611a      	str	r2, [r3, #16]
 8001ebc:	e004      	b.n	8001ec8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6912      	ldr	r2, [r2, #16]
 8001ec6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699a      	ldr	r2, [r3, #24]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	04c11db7 	.word	0x04c11db7

08001f08 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001f18:	231f      	movs	r3, #31
 8001f1a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001f1c:	bf00      	nop
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1e5a      	subs	r2, r3, #1
 8001f22:	613a      	str	r2, [r7, #16]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d009      	beq.n	8001f3c <HAL_CRCEx_Polynomial_Set+0x34>
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	f003 031f 	and.w	r3, r3, #31
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b18      	cmp	r3, #24
 8001f40:	d846      	bhi.n	8001fd0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001f42:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f48:	08001fd7 	.word	0x08001fd7
 8001f4c:	08001fd1 	.word	0x08001fd1
 8001f50:	08001fd1 	.word	0x08001fd1
 8001f54:	08001fd1 	.word	0x08001fd1
 8001f58:	08001fd1 	.word	0x08001fd1
 8001f5c:	08001fd1 	.word	0x08001fd1
 8001f60:	08001fd1 	.word	0x08001fd1
 8001f64:	08001fd1 	.word	0x08001fd1
 8001f68:	08001fc5 	.word	0x08001fc5
 8001f6c:	08001fd1 	.word	0x08001fd1
 8001f70:	08001fd1 	.word	0x08001fd1
 8001f74:	08001fd1 	.word	0x08001fd1
 8001f78:	08001fd1 	.word	0x08001fd1
 8001f7c:	08001fd1 	.word	0x08001fd1
 8001f80:	08001fd1 	.word	0x08001fd1
 8001f84:	08001fd1 	.word	0x08001fd1
 8001f88:	08001fb9 	.word	0x08001fb9
 8001f8c:	08001fd1 	.word	0x08001fd1
 8001f90:	08001fd1 	.word	0x08001fd1
 8001f94:	08001fd1 	.word	0x08001fd1
 8001f98:	08001fd1 	.word	0x08001fd1
 8001f9c:	08001fd1 	.word	0x08001fd1
 8001fa0:	08001fd1 	.word	0x08001fd1
 8001fa4:	08001fd1 	.word	0x08001fd1
 8001fa8:	08001fad 	.word	0x08001fad
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d913      	bls.n	8001fda <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001fb6:	e010      	b.n	8001fda <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	2b07      	cmp	r3, #7
 8001fbc:	d90f      	bls.n	8001fde <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001fc2:	e00c      	b.n	8001fde <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	2b0f      	cmp	r3, #15
 8001fc8:	d90b      	bls.n	8001fe2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001fce:	e008      	b.n	8001fe2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8001fd4:	e006      	b.n	8001fe4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001fd6:	bf00      	nop
 8001fd8:	e004      	b.n	8001fe4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001fda:	bf00      	nop
 8001fdc:	e002      	b.n	8001fe4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001fde:	bf00      	nop
 8001fe0:	e000      	b.n	8001fe4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001fe2:	bf00      	nop
  }
  if (status == HAL_OK)
 8001fe4:	7dfb      	ldrb	r3, [r7, #23]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10d      	bne.n	8002006 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f023 0118 	bic.w	r1, r3, #24
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	430a      	orrs	r2, r1
 8002004:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002006:	7dfb      	ldrb	r3, [r7, #23]
}
 8002008:	4618      	mov	r0, r3
 800200a:	371c      	adds	r7, #28
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e062      	b.n	80020ec <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f010 f9c4 	bl	80123c0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6819      	ldr	r1, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <HAL_DCMI_Init+0xe0>)
 800204c:	400b      	ands	r3, r1
 800204e:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6819      	ldr	r1, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002064:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002070:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800207c:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8002088:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8002094:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b10      	cmp	r3, #16
 80020a4:	d112      	bne.n	80020cc <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	7f1b      	ldrb	r3, [r3, #28]
 80020aa:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	7f5b      	ldrb	r3, [r3, #29]
 80020b0:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 80020b2:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	7f9b      	ldrb	r3, [r3, #30]
 80020b8:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80020ba:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	7fdb      	ldrb	r3, [r3, #31]
 80020c2:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80020c8:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 80020ca:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 021e 	orr.w	r2, r2, #30
 80020da:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	ffe0f007 	.word	0xffe0f007

080020f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002104:	f7ff faea 	bl	80016dc <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e099      	b.n	8002248 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002134:	e00f      	b.n	8002156 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002136:	f7ff fad1 	bl	80016dc <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b05      	cmp	r3, #5
 8002142:	d908      	bls.n	8002156 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2220      	movs	r2, #32
 8002148:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2203      	movs	r2, #3
 800214e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e078      	b.n	8002248 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1e8      	bne.n	8002136 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	4b38      	ldr	r3, [pc, #224]	; (8002250 <HAL_DMA_Init+0x158>)
 8002170:	4013      	ands	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002182:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800218e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800219a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d107      	bne.n	80021c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	4313      	orrs	r3, r2
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4313      	orrs	r3, r2
 80021be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f023 0307 	bic.w	r3, r3, #7
 80021d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	4313      	orrs	r3, r2
 80021e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d117      	bne.n	800221a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00e      	beq.n	800221a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f957 	bl	80024b0 <DMA_CheckFifoParam>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2240      	movs	r2, #64	; 0x40
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002216:	2301      	movs	r3, #1
 8002218:	e016      	b.n	8002248 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f90e 	bl	8002444 <DMA_CalcBaseAndBitshift>
 8002228:	4603      	mov	r3, r0
 800222a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002230:	223f      	movs	r2, #63	; 0x3f
 8002232:	409a      	lsls	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	f010803f 	.word	0xf010803f

08002254 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e050      	b.n	8002308 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d101      	bne.n	8002276 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002272:	2302      	movs	r3, #2
 8002274:	e048      	b.n	8002308 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0201 	bic.w	r2, r2, #1
 8002284:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2200      	movs	r2, #0
 8002294:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2200      	movs	r2, #0
 80022a4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2200      	movs	r2, #0
 80022ac:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2221      	movs	r2, #33	; 0x21
 80022b4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f8c4 	bl	8002444 <DMA_CalcBaseAndBitshift>
 80022bc:	4603      	mov	r3, r0
 80022be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c4:	223f      	movs	r2, #63	; 0x3f
 80022c6:	409a      	lsls	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_DMA_Start_IT+0x26>
 8002332:	2302      	movs	r3, #2
 8002334:	e048      	b.n	80023c8 <HAL_DMA_Start_IT+0xb8>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b01      	cmp	r3, #1
 8002348:	d137      	bne.n	80023ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2202      	movs	r2, #2
 800234e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	68b9      	ldr	r1, [r7, #8]
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f842 	bl	80023e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002368:	223f      	movs	r2, #63	; 0x3f
 800236a:	409a      	lsls	r2, r3
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0216 	orr.w	r2, r2, #22
 800237e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800238e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	2b00      	cmp	r3, #0
 8002396:	d007      	beq.n	80023a8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0208 	orr.w	r2, r2, #8
 80023a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e005      	b.n	80023c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023c2:	2302      	movs	r3, #2
 80023c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002404:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b40      	cmp	r3, #64	; 0x40
 8002414:	d108      	bne.n	8002428 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002426:	e007      	b.n	8002438 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	60da      	str	r2, [r3, #12]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	3b10      	subs	r3, #16
 8002454:	4a13      	ldr	r2, [pc, #76]	; (80024a4 <DMA_CalcBaseAndBitshift+0x60>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	091b      	lsrs	r3, r3, #4
 800245c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800245e:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4413      	add	r3, r2
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b03      	cmp	r3, #3
 8002470:	d908      	bls.n	8002484 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <DMA_CalcBaseAndBitshift+0x68>)
 800247a:	4013      	ands	r3, r2
 800247c:	1d1a      	adds	r2, r3, #4
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	659a      	str	r2, [r3, #88]	; 0x58
 8002482:	e006      	b.n	8002492 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <DMA_CalcBaseAndBitshift+0x68>)
 800248c:	4013      	ands	r3, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	aaaaaaab 	.word	0xaaaaaaab
 80024a8:	08022cf4 	.word	0x08022cf4
 80024ac:	fffffc00 	.word	0xfffffc00

080024b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d11f      	bne.n	800250a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d855      	bhi.n	800257c <DMA_CheckFifoParam+0xcc>
 80024d0:	a201      	add	r2, pc, #4	; (adr r2, 80024d8 <DMA_CheckFifoParam+0x28>)
 80024d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d6:	bf00      	nop
 80024d8:	080024e9 	.word	0x080024e9
 80024dc:	080024fb 	.word	0x080024fb
 80024e0:	080024e9 	.word	0x080024e9
 80024e4:	0800257d 	.word	0x0800257d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d045      	beq.n	8002580 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f8:	e042      	b.n	8002580 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002502:	d13f      	bne.n	8002584 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002508:	e03c      	b.n	8002584 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002512:	d121      	bne.n	8002558 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2b03      	cmp	r3, #3
 8002518:	d836      	bhi.n	8002588 <DMA_CheckFifoParam+0xd8>
 800251a:	a201      	add	r2, pc, #4	; (adr r2, 8002520 <DMA_CheckFifoParam+0x70>)
 800251c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002520:	08002531 	.word	0x08002531
 8002524:	08002537 	.word	0x08002537
 8002528:	08002531 	.word	0x08002531
 800252c:	08002549 	.word	0x08002549
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
      break;
 8002534:	e02f      	b.n	8002596 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d024      	beq.n	800258c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002546:	e021      	b.n	800258c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002550:	d11e      	bne.n	8002590 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002556:	e01b      	b.n	8002590 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d902      	bls.n	8002564 <DMA_CheckFifoParam+0xb4>
 800255e:	2b03      	cmp	r3, #3
 8002560:	d003      	beq.n	800256a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002562:	e018      	b.n	8002596 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
      break;
 8002568:	e015      	b.n	8002596 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00e      	beq.n	8002594 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	73fb      	strb	r3, [r7, #15]
      break;
 800257a:	e00b      	b.n	8002594 <DMA_CheckFifoParam+0xe4>
      break;
 800257c:	bf00      	nop
 800257e:	e00a      	b.n	8002596 <DMA_CheckFifoParam+0xe6>
      break;
 8002580:	bf00      	nop
 8002582:	e008      	b.n	8002596 <DMA_CheckFifoParam+0xe6>
      break;
 8002584:	bf00      	nop
 8002586:	e006      	b.n	8002596 <DMA_CheckFifoParam+0xe6>
      break;
 8002588:	bf00      	nop
 800258a:	e004      	b.n	8002596 <DMA_CheckFifoParam+0xe6>
      break;
 800258c:	bf00      	nop
 800258e:	e002      	b.n	8002596 <DMA_CheckFifoParam+0xe6>
      break;   
 8002590:	bf00      	nop
 8002592:	e000      	b.n	8002596 <DMA_CheckFifoParam+0xe6>
      break;
 8002594:	bf00      	nop
    }
  } 
  
  return status; 
 8002596:	7bfb      	ldrb	r3, [r7, #15]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e039      	b.n	800262a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f019 f848 	bl	801b660 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f4:	f023 0107 	bic.w	r1, r3, #7
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_DMA2D_Init+0x90>)
 800260c:	4013      	ands	r3, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68d1      	ldr	r1, [r2, #12]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	430b      	orrs	r3, r1
 8002618:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	ffffc000 	.word	0xffffc000

08002638 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e05f      	b.n	800270a <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800264a:	4b32      	ldr	r3, [pc, #200]	; (8002714 <HAL_DMA2D_DeInit+0xdc>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d02e      	beq.n	80026b4 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b01      	cmp	r3, #1
 8002662:	d107      	bne.n	8002674 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f8c1 	bl	80027ec <HAL_DMA2D_Abort>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d021      	beq.n	80026b4 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e04a      	b.n	800270a <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	2b20      	cmp	r3, #32
 8002680:	d108      	bne.n	8002694 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8002682:	2100      	movs	r1, #0
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f8f7 	bl	8002878 <HAL_DMA2D_CLUTLoading_Abort>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d011      	beq.n	80026b4 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e03a      	b.n	800270a <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d108      	bne.n	80026b4 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 80026a2:	2101      	movs	r1, #1
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f8e7 	bl	8002878 <HAL_DMA2D_CLUTLoading_Abort>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e02a      	b.n	800270a <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	223f      	movs	r2, #63	; 0x3f
 80026c2:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2200      	movs	r2, #0
 80026d2:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2200      	movs	r2, #0
 80026da:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2200      	movs	r2, #0
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2200      	movs	r2, #0
 80026ea:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f018 ffdd 	bl	801b6ac <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800

08002718 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af02      	add	r7, sp, #8
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_DMA2D_Start_IT+0x1c>
 8002730:	2302      	movs	r3, #2
 8002732:	e020      	b.n	8002776 <HAL_DMA2D_Start_IT+0x5e>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fa84 	bl	8002c5c <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8002762:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b086      	sub	sp, #24
 8002782:	af02      	add	r7, sp, #8
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_DMA2D_BlendingStart_IT+0x1c>
 8002796:	2302      	movs	r3, #2
 8002798:	e024      	b.n	80027e4 <HAL_DMA2D_BlendingStart_IT+0x66>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2202      	movs	r2, #2
 80027a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 fa4d 	bl	8002c5c <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80027d0:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 0201 	orr.w	r2, r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 0205 	bic.w	r2, r3, #5
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0204 	orr.w	r2, r2, #4
 8002806:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002808:	f7fe ff68 	bl	80016dc <HAL_GetTick>
 800280c:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800280e:	e017      	b.n	8002840 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8002810:	f7fe ff64 	bl	80016dc <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800281e:	d90f      	bls.n	8002840 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002824:	f043 0220 	orr.w	r2, r3, #32
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2203      	movs	r2, #3
 8002830:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e017      	b.n	8002870 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1e0      	bne.n	8002810 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 800285c:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3324      	adds	r3, #36	; 0x24
 8002888:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f042 0204 	orr.w	r2, r2, #4
 8002898:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d103      	bne.n	80028a8 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	331c      	adds	r3, #28
 80028a6:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 80028a8:	f7fe ff18 	bl	80016dc <HAL_GetTick>
 80028ac:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80028ae:	e017      	b.n	80028e0 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80028b0:	f7fe ff14 	bl	80016dc <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028be:	d90f      	bls.n	80028e0 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c4:	f043 0220 	orr.w	r2, r3, #32
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2203      	movs	r2, #3
 80028d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e016      	b.n	800290e <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0320 	and.w	r3, r3, #32
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1e1      	bne.n	80028b0 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 80028fa:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d026      	beq.n	8002986 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d021      	beq.n	8002986 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002950:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002956:	f043 0201 	orr.w	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2201      	movs	r2, #1
 8002964:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2204      	movs	r2, #4
 800296a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b00      	cmp	r3, #0
 800298e:	d026      	beq.n	80029de <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d021      	beq.n	80029de <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029a8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2220      	movs	r2, #32
 80029b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b6:	f043 0202 	orr.w	r2, r3, #2
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2204      	movs	r2, #4
 80029c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d026      	beq.n	8002a36 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d021      	beq.n	8002a36 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a00:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2208      	movs	r2, #8
 8002a08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	f043 0204 	orr.w	r2, r3, #4
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2204      	movs	r2, #4
 8002a1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d013      	beq.n	8002a68 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00e      	beq.n	8002a68 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a58:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2204      	movs	r2, #4
 8002a60:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f853 	bl	8002b0e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d024      	beq.n	8002abc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01f      	beq.n	8002abc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a8a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2202      	movs	r2, #2
 8002a92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d01f      	beq.n	8002b06 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d01a      	beq.n	8002b06 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ade:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2210      	movs	r2, #16
 8002ae6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f80e 	bl	8002b22 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_DMA2D_ConfigLayer+0x20>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e079      	b.n	8002c4c <HAL_DMA2D_ConfigLayer+0x114>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	3318      	adds	r3, #24
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	041b      	lsls	r3, r3, #16
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002b82:	4b35      	ldr	r3, [pc, #212]	; (8002c58 <HAL_DMA2D_ConfigLayer+0x120>)
 8002b84:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b0a      	cmp	r3, #10
 8002b8c:	d003      	beq.n	8002b96 <HAL_DMA2D_ConfigLayer+0x5e>
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b09      	cmp	r3, #9
 8002b94:	d107      	bne.n	8002ba6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	e005      	b.n	8002bb2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	061b      	lsls	r3, r3, #24
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d120      	bne.n	8002bfa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	ea02 0103 	and.w	r1, r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b0a      	cmp	r3, #10
 8002be0:	d003      	beq.n	8002bea <HAL_DMA2D_ConfigLayer+0xb2>
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b09      	cmp	r3, #9
 8002be8:	d127      	bne.n	8002c3a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002bf6:	629a      	str	r2, [r3, #40]	; 0x28
 8002bf8:	e01f      	b.n	8002c3a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69da      	ldr	r2, [r3, #28]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	43db      	mvns	r3, r3
 8002c04:	ea02 0103 	and.w	r1, r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b0a      	cmp	r3, #10
 8002c22:	d003      	beq.n	8002c2c <HAL_DMA2D_ConfigLayer+0xf4>
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b09      	cmp	r3, #9
 8002c2a:	d106      	bne.n	8002c3a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002c38:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	371c      	adds	r7, #28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	ff03000f 	.word	0xff03000f

08002c5c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b08b      	sub	sp, #44	; 0x2c
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
 8002c68:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c70:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	041a      	lsls	r2, r3, #16
 8002c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c94:	d174      	bne.n	8002d80 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002c9c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002ca4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002cac:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d108      	bne.n	8002cce <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ccc:	e053      	b.n	8002d76 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d106      	bne.n	8002ce4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce2:	e048      	b.n	8002d76 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d111      	bne.n	8002d10 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	0cdb      	lsrs	r3, r3, #19
 8002cf0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	0a9b      	lsrs	r3, r3, #10
 8002cf6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	08db      	lsrs	r3, r3, #3
 8002cfc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	02db      	lsls	r3, r3, #11
 8002d06:	4313      	orrs	r3, r2
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0e:	e032      	b.n	8002d76 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d117      	bne.n	8002d48 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	0fdb      	lsrs	r3, r3, #31
 8002d1c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	0cdb      	lsrs	r3, r3, #19
 8002d22:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	0adb      	lsrs	r3, r3, #11
 8002d28:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	08db      	lsrs	r3, r3, #3
 8002d2e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	029b      	lsls	r3, r3, #10
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	03db      	lsls	r3, r3, #15
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
 8002d46:	e016      	b.n	8002d76 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	0f1b      	lsrs	r3, r3, #28
 8002d4c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	0d1b      	lsrs	r3, r3, #20
 8002d52:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	0b1b      	lsrs	r3, r3, #12
 8002d58:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	011a      	lsls	r2, r3, #4
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	031b      	lsls	r3, r3, #12
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002d7e:	e003      	b.n	8002d88 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	60da      	str	r2, [r3, #12]
}
 8002d88:	bf00      	nop
 8002d8a:	372c      	adds	r7, #44	; 0x2c
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	f241 0314 	movw	r3, #4116	; 0x1014
 8002da4:	4413      	add	r3, r2
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dac:	2b40      	cmp	r3, #64	; 0x40
 8002dae:	d112      	bne.n	8002dd6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f00d ff07 	bl	8010bc4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	f241 0314 	movw	r3, #4116	; 0x1014
 8002dbe:	4413      	add	r3, r2
 8002dc0:	2240      	movs	r2, #64	; 0x40
 8002dc2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dd4:	e01b      	b.n	8002e0e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	f241 0314 	movw	r3, #4116	; 0x1014
 8002dde:	4413      	add	r3, r2
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d111      	bne.n	8002e0e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f839 	bl	8002e62 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	f241 0314 	movw	r3, #4116	; 0x1014
 8002df8:	4413      	add	r3, r2
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	f241 0314 	movw	r3, #4116	; 0x1014
 8002e16:	4413      	add	r3, r2
 8002e18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e1c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	f241 0314 	movw	r3, #4116	; 0x1014
 8002e26:	4413      	add	r3, r2
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e32:	d112      	bne.n	8002e5a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f81e 	bl	8002e76 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002e42:	4413      	add	r3, r2
 8002e44:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e48:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b089      	sub	sp, #36	; 0x24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
 8002eaa:	e175      	b.n	8003198 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002eac:	2201      	movs	r2, #1
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	f040 8164 	bne.w	8003192 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_Init+0x4e>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b12      	cmp	r3, #18
 8002ed8:	d123      	bne.n	8002f22 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	08da      	lsrs	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3208      	adds	r2, #8
 8002ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	220f      	movs	r2, #15
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	08da      	lsrs	r2, r3, #3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3208      	adds	r2, #8
 8002f1c:	69b9      	ldr	r1, [r7, #24]
 8002f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0203 	and.w	r2, r3, #3
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d00b      	beq.n	8002f76 <HAL_GPIO_Init+0xea>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d007      	beq.n	8002f76 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f6a:	2b11      	cmp	r3, #17
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b12      	cmp	r3, #18
 8002f74:	d130      	bne.n	8002fd8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	2203      	movs	r2, #3
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fac:	2201      	movs	r2, #1
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 0201 	and.w	r2, r3, #1
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 80be 	beq.w	8003192 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003016:	4b65      	ldr	r3, [pc, #404]	; (80031ac <HAL_GPIO_Init+0x320>)
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	4a64      	ldr	r2, [pc, #400]	; (80031ac <HAL_GPIO_Init+0x320>)
 800301c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003020:	6453      	str	r3, [r2, #68]	; 0x44
 8003022:	4b62      	ldr	r3, [pc, #392]	; (80031ac <HAL_GPIO_Init+0x320>)
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800302e:	4a60      	ldr	r2, [pc, #384]	; (80031b0 <HAL_GPIO_Init+0x324>)
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	089b      	lsrs	r3, r3, #2
 8003034:	3302      	adds	r3, #2
 8003036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800303a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	220f      	movs	r2, #15
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a57      	ldr	r2, [pc, #348]	; (80031b4 <HAL_GPIO_Init+0x328>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d037      	beq.n	80030ca <HAL_GPIO_Init+0x23e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a56      	ldr	r2, [pc, #344]	; (80031b8 <HAL_GPIO_Init+0x32c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d031      	beq.n	80030c6 <HAL_GPIO_Init+0x23a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a55      	ldr	r2, [pc, #340]	; (80031bc <HAL_GPIO_Init+0x330>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d02b      	beq.n	80030c2 <HAL_GPIO_Init+0x236>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a54      	ldr	r2, [pc, #336]	; (80031c0 <HAL_GPIO_Init+0x334>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d025      	beq.n	80030be <HAL_GPIO_Init+0x232>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a53      	ldr	r2, [pc, #332]	; (80031c4 <HAL_GPIO_Init+0x338>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d01f      	beq.n	80030ba <HAL_GPIO_Init+0x22e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a52      	ldr	r2, [pc, #328]	; (80031c8 <HAL_GPIO_Init+0x33c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d019      	beq.n	80030b6 <HAL_GPIO_Init+0x22a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a51      	ldr	r2, [pc, #324]	; (80031cc <HAL_GPIO_Init+0x340>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d013      	beq.n	80030b2 <HAL_GPIO_Init+0x226>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a50      	ldr	r2, [pc, #320]	; (80031d0 <HAL_GPIO_Init+0x344>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00d      	beq.n	80030ae <HAL_GPIO_Init+0x222>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a4f      	ldr	r2, [pc, #316]	; (80031d4 <HAL_GPIO_Init+0x348>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d007      	beq.n	80030aa <HAL_GPIO_Init+0x21e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a4e      	ldr	r2, [pc, #312]	; (80031d8 <HAL_GPIO_Init+0x34c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d101      	bne.n	80030a6 <HAL_GPIO_Init+0x21a>
 80030a2:	2309      	movs	r3, #9
 80030a4:	e012      	b.n	80030cc <HAL_GPIO_Init+0x240>
 80030a6:	230a      	movs	r3, #10
 80030a8:	e010      	b.n	80030cc <HAL_GPIO_Init+0x240>
 80030aa:	2308      	movs	r3, #8
 80030ac:	e00e      	b.n	80030cc <HAL_GPIO_Init+0x240>
 80030ae:	2307      	movs	r3, #7
 80030b0:	e00c      	b.n	80030cc <HAL_GPIO_Init+0x240>
 80030b2:	2306      	movs	r3, #6
 80030b4:	e00a      	b.n	80030cc <HAL_GPIO_Init+0x240>
 80030b6:	2305      	movs	r3, #5
 80030b8:	e008      	b.n	80030cc <HAL_GPIO_Init+0x240>
 80030ba:	2304      	movs	r3, #4
 80030bc:	e006      	b.n	80030cc <HAL_GPIO_Init+0x240>
 80030be:	2303      	movs	r3, #3
 80030c0:	e004      	b.n	80030cc <HAL_GPIO_Init+0x240>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e002      	b.n	80030cc <HAL_GPIO_Init+0x240>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <HAL_GPIO_Init+0x240>
 80030ca:	2300      	movs	r3, #0
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	f002 0203 	and.w	r2, r2, #3
 80030d2:	0092      	lsls	r2, r2, #2
 80030d4:	4093      	lsls	r3, r2
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80030dc:	4934      	ldr	r1, [pc, #208]	; (80031b0 <HAL_GPIO_Init+0x324>)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	089b      	lsrs	r3, r3, #2
 80030e2:	3302      	adds	r3, #2
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030ea:	4b3c      	ldr	r3, [pc, #240]	; (80031dc <HAL_GPIO_Init+0x350>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800310e:	4a33      	ldr	r2, [pc, #204]	; (80031dc <HAL_GPIO_Init+0x350>)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003114:	4b31      	ldr	r3, [pc, #196]	; (80031dc <HAL_GPIO_Init+0x350>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003138:	4a28      	ldr	r2, [pc, #160]	; (80031dc <HAL_GPIO_Init+0x350>)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800313e:	4b27      	ldr	r3, [pc, #156]	; (80031dc <HAL_GPIO_Init+0x350>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003162:	4a1e      	ldr	r2, [pc, #120]	; (80031dc <HAL_GPIO_Init+0x350>)
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003168:	4b1c      	ldr	r3, [pc, #112]	; (80031dc <HAL_GPIO_Init+0x350>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800318c:	4a13      	ldr	r2, [pc, #76]	; (80031dc <HAL_GPIO_Init+0x350>)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3301      	adds	r3, #1
 8003196:	61fb      	str	r3, [r7, #28]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	2b0f      	cmp	r3, #15
 800319c:	f67f ae86 	bls.w	8002eac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031a0:	bf00      	nop
 80031a2:	3724      	adds	r7, #36	; 0x24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	40023800 	.word	0x40023800
 80031b0:	40013800 	.word	0x40013800
 80031b4:	40020000 	.word	0x40020000
 80031b8:	40020400 	.word	0x40020400
 80031bc:	40020800 	.word	0x40020800
 80031c0:	40020c00 	.word	0x40020c00
 80031c4:	40021000 	.word	0x40021000
 80031c8:	40021400 	.word	0x40021400
 80031cc:	40021800 	.word	0x40021800
 80031d0:	40021c00 	.word	0x40021c00
 80031d4:	40022000 	.word	0x40022000
 80031d8:	40022400 	.word	0x40022400
 80031dc:	40013c00 	.word	0x40013c00

080031e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	e0d9      	b.n	80033b0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031fc:	2201      	movs	r2, #1
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4013      	ands	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	429a      	cmp	r2, r3
 8003214:	f040 80c9 	bne.w	80033aa <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003218:	4a6a      	ldr	r2, [pc, #424]	; (80033c4 <HAL_GPIO_DeInit+0x1e4>)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	089b      	lsrs	r3, r3, #2
 800321e:	3302      	adds	r3, #2
 8003220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003224:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	220f      	movs	r2, #15
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	4013      	ands	r3, r2
 8003238:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a62      	ldr	r2, [pc, #392]	; (80033c8 <HAL_GPIO_DeInit+0x1e8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d037      	beq.n	80032b2 <HAL_GPIO_DeInit+0xd2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a61      	ldr	r2, [pc, #388]	; (80033cc <HAL_GPIO_DeInit+0x1ec>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d031      	beq.n	80032ae <HAL_GPIO_DeInit+0xce>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a60      	ldr	r2, [pc, #384]	; (80033d0 <HAL_GPIO_DeInit+0x1f0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d02b      	beq.n	80032aa <HAL_GPIO_DeInit+0xca>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a5f      	ldr	r2, [pc, #380]	; (80033d4 <HAL_GPIO_DeInit+0x1f4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d025      	beq.n	80032a6 <HAL_GPIO_DeInit+0xc6>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a5e      	ldr	r2, [pc, #376]	; (80033d8 <HAL_GPIO_DeInit+0x1f8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d01f      	beq.n	80032a2 <HAL_GPIO_DeInit+0xc2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a5d      	ldr	r2, [pc, #372]	; (80033dc <HAL_GPIO_DeInit+0x1fc>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d019      	beq.n	800329e <HAL_GPIO_DeInit+0xbe>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a5c      	ldr	r2, [pc, #368]	; (80033e0 <HAL_GPIO_DeInit+0x200>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d013      	beq.n	800329a <HAL_GPIO_DeInit+0xba>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a5b      	ldr	r2, [pc, #364]	; (80033e4 <HAL_GPIO_DeInit+0x204>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00d      	beq.n	8003296 <HAL_GPIO_DeInit+0xb6>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a5a      	ldr	r2, [pc, #360]	; (80033e8 <HAL_GPIO_DeInit+0x208>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d007      	beq.n	8003292 <HAL_GPIO_DeInit+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a59      	ldr	r2, [pc, #356]	; (80033ec <HAL_GPIO_DeInit+0x20c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d101      	bne.n	800328e <HAL_GPIO_DeInit+0xae>
 800328a:	2309      	movs	r3, #9
 800328c:	e012      	b.n	80032b4 <HAL_GPIO_DeInit+0xd4>
 800328e:	230a      	movs	r3, #10
 8003290:	e010      	b.n	80032b4 <HAL_GPIO_DeInit+0xd4>
 8003292:	2308      	movs	r3, #8
 8003294:	e00e      	b.n	80032b4 <HAL_GPIO_DeInit+0xd4>
 8003296:	2307      	movs	r3, #7
 8003298:	e00c      	b.n	80032b4 <HAL_GPIO_DeInit+0xd4>
 800329a:	2306      	movs	r3, #6
 800329c:	e00a      	b.n	80032b4 <HAL_GPIO_DeInit+0xd4>
 800329e:	2305      	movs	r3, #5
 80032a0:	e008      	b.n	80032b4 <HAL_GPIO_DeInit+0xd4>
 80032a2:	2304      	movs	r3, #4
 80032a4:	e006      	b.n	80032b4 <HAL_GPIO_DeInit+0xd4>
 80032a6:	2303      	movs	r3, #3
 80032a8:	e004      	b.n	80032b4 <HAL_GPIO_DeInit+0xd4>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e002      	b.n	80032b4 <HAL_GPIO_DeInit+0xd4>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <HAL_GPIO_DeInit+0xd4>
 80032b2:	2300      	movs	r3, #0
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	f002 0203 	and.w	r2, r2, #3
 80032ba:	0092      	lsls	r2, r2, #2
 80032bc:	4093      	lsls	r3, r2
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d132      	bne.n	800332a <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	220f      	movs	r2, #15
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80032d4:	4a3b      	ldr	r2, [pc, #236]	; (80033c4 <HAL_GPIO_DeInit+0x1e4>)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	089b      	lsrs	r3, r3, #2
 80032da:	3302      	adds	r3, #2
 80032dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	43da      	mvns	r2, r3
 80032e4:	4837      	ldr	r0, [pc, #220]	; (80033c4 <HAL_GPIO_DeInit+0x1e4>)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	089b      	lsrs	r3, r3, #2
 80032ea:	400a      	ands	r2, r1
 80032ec:	3302      	adds	r3, #2
 80032ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80032f2:	4b3f      	ldr	r3, [pc, #252]	; (80033f0 <HAL_GPIO_DeInit+0x210>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	43db      	mvns	r3, r3
 80032fa:	493d      	ldr	r1, [pc, #244]	; (80033f0 <HAL_GPIO_DeInit+0x210>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003300:	4b3b      	ldr	r3, [pc, #236]	; (80033f0 <HAL_GPIO_DeInit+0x210>)
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	43db      	mvns	r3, r3
 8003308:	4939      	ldr	r1, [pc, #228]	; (80033f0 <HAL_GPIO_DeInit+0x210>)
 800330a:	4013      	ands	r3, r2
 800330c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800330e:	4b38      	ldr	r3, [pc, #224]	; (80033f0 <HAL_GPIO_DeInit+0x210>)
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	43db      	mvns	r3, r3
 8003316:	4936      	ldr	r1, [pc, #216]	; (80033f0 <HAL_GPIO_DeInit+0x210>)
 8003318:	4013      	ands	r3, r2
 800331a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800331c:	4b34      	ldr	r3, [pc, #208]	; (80033f0 <HAL_GPIO_DeInit+0x210>)
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	43db      	mvns	r3, r3
 8003324:	4932      	ldr	r1, [pc, #200]	; (80033f0 <HAL_GPIO_DeInit+0x210>)
 8003326:	4013      	ands	r3, r2
 8003328:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	2103      	movs	r1, #3
 8003334:	fa01 f303 	lsl.w	r3, r1, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	401a      	ands	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	08da      	lsrs	r2, r3, #3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3208      	adds	r2, #8
 8003348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	220f      	movs	r2, #15
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	08d2      	lsrs	r2, r2, #3
 8003360:	4019      	ands	r1, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3208      	adds	r2, #8
 8003366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	2103      	movs	r1, #3
 8003374:	fa01 f303 	lsl.w	r3, r1, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	401a      	ands	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	2101      	movs	r1, #1
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	fa01 f303 	lsl.w	r3, r1, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	401a      	ands	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	2103      	movs	r1, #3
 800339e:	fa01 f303 	lsl.w	r3, r1, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	401a      	ands	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	3301      	adds	r3, #1
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b0f      	cmp	r3, #15
 80033b4:	f67f af22 	bls.w	80031fc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80033b8:	bf00      	nop
 80033ba:	371c      	adds	r7, #28
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	40013800 	.word	0x40013800
 80033c8:	40020000 	.word	0x40020000
 80033cc:	40020400 	.word	0x40020400
 80033d0:	40020800 	.word	0x40020800
 80033d4:	40020c00 	.word	0x40020c00
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40021400 	.word	0x40021400
 80033e0:	40021800 	.word	0x40021800
 80033e4:	40021c00 	.word	0x40021c00
 80033e8:	40022000 	.word	0x40022000
 80033ec:	40022400 	.word	0x40022400
 80033f0:	40013c00 	.word	0x40013c00

080033f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	887b      	ldrh	r3, [r7, #2]
 8003406:	4013      	ands	r3, r2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800340c:	2301      	movs	r3, #1
 800340e:	73fb      	strb	r3, [r7, #15]
 8003410:	e001      	b.n	8003416 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003412:	2300      	movs	r3, #0
 8003414:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003416:	7bfb      	ldrb	r3, [r7, #15]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	807b      	strh	r3, [r7, #2]
 8003430:	4613      	mov	r3, r2
 8003432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003434:	787b      	ldrb	r3, [r7, #1]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800343a:	887a      	ldrh	r2, [r7, #2]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003440:	e003      	b.n	800344a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003442:	887b      	ldrh	r3, [r7, #2]
 8003444:	041a      	lsls	r2, r3, #16
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	619a      	str	r2, [r3, #24]
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003456:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003458:	b08d      	sub	sp, #52	; 0x34
 800345a:	af0a      	add	r7, sp, #40	; 0x28
 800345c:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e048      	b.n	80034fa <HAL_HCD_Init+0xa4>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d106      	bne.n	8003482 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f00f fc93 	bl	8012da8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2203      	movs	r2, #3
 8003486:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f008 f8e2 	bl	800b658 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	603b      	str	r3, [r7, #0]
 800349a:	687e      	ldr	r6, [r7, #4]
 800349c:	466d      	mov	r5, sp
 800349e:	f106 0410 	add.w	r4, r6, #16
 80034a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80034b2:	1d33      	adds	r3, r6, #4
 80034b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034b6:	6838      	ldr	r0, [r7, #0]
 80034b8:	f008 f876 	bl	800b5a8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2101      	movs	r1, #1
 80034c2:	4618      	mov	r0, r3
 80034c4:	f008 f8d9 	bl	800b67a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	603b      	str	r3, [r7, #0]
 80034ce:	687e      	ldr	r6, [r7, #4]
 80034d0:	466d      	mov	r5, sp
 80034d2:	f106 0410 	add.w	r4, r6, #16
 80034d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80034e6:	1d33      	adds	r3, r6, #4
 80034e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034ea:	6838      	ldr	r0, [r7, #0]
 80034ec:	f008 f9b6 	bl	800b85c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003502 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b086      	sub	sp, #24
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f008 f95d 	bl	800b7d8 <USB_GetMode>
 800351e:	4603      	mov	r3, r0
 8003520:	2b01      	cmp	r3, #1
 8003522:	f040 80f1 	bne.w	8003708 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f008 f941 	bl	800b7b2 <USB_ReadInterrupts>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 80e7 	beq.w	8003706 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f008 f938 	bl	800b7b2 <USB_ReadInterrupts>
 8003542:	4603      	mov	r3, r0
 8003544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003548:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800354c:	d104      	bne.n	8003558 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003556:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f008 f928 	bl	800b7b2 <USB_ReadInterrupts>
 8003562:	4603      	mov	r3, r0
 8003564:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800356c:	d104      	bne.n	8003578 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003576:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f008 f918 	bl	800b7b2 <USB_ReadInterrupts>
 8003582:	4603      	mov	r3, r0
 8003584:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800358c:	d104      	bne.n	8003598 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003596:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f008 f908 	bl	800b7b2 <USB_ReadInterrupts>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d103      	bne.n	80035b4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2202      	movs	r2, #2
 80035b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f008 f8fa 	bl	800b7b2 <USB_ReadInterrupts>
 80035be:	4603      	mov	r3, r0
 80035c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035c8:	d117      	bne.n	80035fa <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80035d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80035dc:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f8a9 	bl	8003736 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2101      	movs	r1, #1
 80035ea:	4618      	mov	r0, r3
 80035ec:	f008 f9e6 	bl	800b9bc <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80035f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f008 f8d7 	bl	800b7b2 <USB_ReadInterrupts>
 8003604:	4603      	mov	r3, r0
 8003606:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800360a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800360e:	d102      	bne.n	8003616 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f001 f875 	bl	8004700 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f008 f8c9 	bl	800b7b2 <USB_ReadInterrupts>
 8003620:	4603      	mov	r3, r0
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b08      	cmp	r3, #8
 8003628:	d106      	bne.n	8003638 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f86f 	bl	800370e <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2208      	movs	r2, #8
 8003636:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f008 f8b8 	bl	800b7b2 <USB_ReadInterrupts>
 8003642:	4603      	mov	r3, r0
 8003644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003648:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800364c:	d138      	bne.n	80036c0 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f008 fa25 	bl	800baa2 <USB_HC_ReadInterrupt>
 8003658:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e025      	b.n	80036ac <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d018      	beq.n	80036a6 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4413      	add	r3, r2
 800367c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800368a:	d106      	bne.n	800369a <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	4619      	mov	r1, r3
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f87b 	bl	800378e <HCD_HC_IN_IRQHandler>
 8003698:	e005      	b.n	80036a6 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	4619      	mov	r1, r3
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fc0b 	bl	8003ebc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	3301      	adds	r3, #1
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d3d4      	bcc.n	8003660 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f008 f874 	bl	800b7b2 <USB_ReadInterrupts>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b10      	cmp	r3, #16
 80036d2:	d101      	bne.n	80036d8 <HAL_HCD_IRQHandler+0x1d6>
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <HAL_HCD_IRQHandler+0x1d8>
 80036d8:	2300      	movs	r3, #0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d014      	beq.n	8003708 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699a      	ldr	r2, [r3, #24]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0210 	bic.w	r2, r2, #16
 80036ec:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 ff5a 	bl	80045a8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699a      	ldr	r2, [r3, #24]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0210 	orr.w	r2, r2, #16
 8003702:	619a      	str	r2, [r3, #24]
 8003704:	e000      	b.n	8003708 <HAL_HCD_IRQHandler+0x206>
      return;
 8003706:	bf00      	nop
    }
  }
}
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	460b      	mov	r3, r1
 800377c:	70fb      	strb	r3, [r7, #3]
 800377e:	4613      	mov	r3, r2
 8003780:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b086      	sub	sp, #24
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	460b      	mov	r3, r1
 8003798:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d119      	bne.n	80037f2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ca:	461a      	mov	r2, r3
 80037cc:	2304      	movs	r3, #4
 80037ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	0151      	lsls	r1, r2, #5
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	440a      	add	r2, r1
 80037e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037ea:	f043 0302 	orr.w	r3, r3, #2
 80037ee:	60d3      	str	r3, [r2, #12]
 80037f0:	e095      	b.n	800391e <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	015a      	lsls	r2, r3, #5
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b20      	cmp	r3, #32
 8003806:	d109      	bne.n	800381c <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4413      	add	r3, r2
 8003810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003814:	461a      	mov	r2, r3
 8003816:	2320      	movs	r3, #32
 8003818:	6093      	str	r3, [r2, #8]
 800381a:	e080      	b.n	800391e <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b08      	cmp	r3, #8
 8003830:	d134      	bne.n	800389c <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4413      	add	r3, r2
 800383a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	0151      	lsls	r1, r2, #5
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	440a      	add	r2, r1
 8003848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800384c:	f043 0302 	orr.w	r3, r3, #2
 8003850:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	440b      	add	r3, r1
 8003860:	335d      	adds	r3, #93	; 0x5d
 8003862:	2205      	movs	r2, #5
 8003864:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4413      	add	r3, r2
 800386e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003872:	461a      	mov	r2, r3
 8003874:	2310      	movs	r3, #16
 8003876:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4413      	add	r3, r2
 8003880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003884:	461a      	mov	r2, r3
 8003886:	2308      	movs	r3, #8
 8003888:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	4611      	mov	r1, r2
 8003894:	4618      	mov	r0, r3
 8003896:	f008 f915 	bl	800bac4 <USB_HC_Halt>
 800389a:	e040      	b.n	800391e <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b2:	d134      	bne.n	800391e <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	0151      	lsls	r1, r2, #5
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	440a      	add	r2, r1
 80038ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038ce:	f043 0302 	orr.w	r3, r3, #2
 80038d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	4611      	mov	r1, r2
 80038de:	4618      	mov	r0, r3
 80038e0:	f008 f8f0 	bl	800bac4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f0:	461a      	mov	r2, r3
 80038f2:	2310      	movs	r3, #16
 80038f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	440b      	add	r3, r1
 8003904:	335d      	adds	r3, #93	; 0x5d
 8003906:	2208      	movs	r2, #8
 8003908:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	4413      	add	r3, r2
 8003912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003916:	461a      	mov	r2, r3
 8003918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800391c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4413      	add	r3, r2
 8003926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003934:	d122      	bne.n	800397c <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4413      	add	r3, r2
 800393e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	0151      	lsls	r1, r2, #5
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	440a      	add	r2, r1
 800394c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003950:	f043 0302 	orr.w	r3, r3, #2
 8003954:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	4611      	mov	r1, r2
 8003960:	4618      	mov	r0, r3
 8003962:	f008 f8af 	bl	800bac4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4413      	add	r3, r2
 800396e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003972:	461a      	mov	r2, r3
 8003974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003978:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800397a:	e29b      	b.n	8003eb4 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4413      	add	r3, r2
 8003984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b01      	cmp	r3, #1
 8003990:	f040 80c1 	bne.w	8003b16 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01b      	beq.n	80039d4 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	440b      	add	r3, r1
 80039aa:	3348      	adds	r3, #72	; 0x48
 80039ac:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	0159      	lsls	r1, r3, #5
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	440b      	add	r3, r1
 80039b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80039c0:	1ad1      	subs	r1, r2, r3
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4403      	add	r3, r0
 80039d0:	334c      	adds	r3, #76	; 0x4c
 80039d2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	440b      	add	r3, r1
 80039e2:	335d      	adds	r3, #93	; 0x5d
 80039e4:	2201      	movs	r2, #1
 80039e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	440b      	add	r3, r1
 80039f6:	3358      	adds	r3, #88	; 0x58
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	440b      	add	r3, r1
 8003a1c:	333f      	adds	r3, #63	; 0x3f
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	440b      	add	r3, r1
 8003a32:	333f      	adds	r3, #63	; 0x3f
 8003a34:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d121      	bne.n	8003a7e <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	0151      	lsls	r1, r2, #5
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	440a      	add	r2, r1
 8003a50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a54:	f043 0302 	orr.w	r3, r3, #2
 8003a58:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	4611      	mov	r1, r2
 8003a64:	4618      	mov	r0, r3
 8003a66:	f008 f82d 	bl	800bac4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a76:	461a      	mov	r2, r3
 8003a78:	2310      	movs	r3, #16
 8003a7a:	6093      	str	r3, [r2, #8]
 8003a7c:	e034      	b.n	8003ae8 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	440b      	add	r3, r1
 8003a8c:	333f      	adds	r3, #63	; 0x3f
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d129      	bne.n	8003ae8 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	0151      	lsls	r1, r2, #5
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	440a      	add	r2, r1
 8003aaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003aae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ab2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	440b      	add	r3, r1
 8003ac2:	335c      	adds	r3, #92	; 0x5c
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	b2d8      	uxtb	r0, r3
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	440b      	add	r3, r1
 8003ada:	335c      	adds	r3, #92	; 0x5c
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	4601      	mov	r1, r0
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff fe45 	bl	8003772 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	440b      	add	r3, r1
 8003af6:	3350      	adds	r3, #80	; 0x50
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	f083 0301 	eor.w	r3, r3, #1
 8003afe:	b2d8      	uxtb	r0, r3
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4613      	mov	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	440b      	add	r3, r1
 8003b0e:	3350      	adds	r3, #80	; 0x50
 8003b10:	4602      	mov	r2, r0
 8003b12:	701a      	strb	r2, [r3, #0]
}
 8003b14:	e1ce      	b.n	8003eb4 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	f040 80f1 	bne.w	8003d10 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	0151      	lsls	r1, r2, #5
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	440a      	add	r2, r1
 8003b44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b48:	f023 0302 	bic.w	r3, r3, #2
 8003b4c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4613      	mov	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	440b      	add	r3, r1
 8003b5c:	335d      	adds	r3, #93	; 0x5d
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d10a      	bne.n	8003b7a <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	440b      	add	r3, r1
 8003b72:	335c      	adds	r3, #92	; 0x5c
 8003b74:	2201      	movs	r2, #1
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	e0b0      	b.n	8003cdc <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	440b      	add	r3, r1
 8003b88:	335d      	adds	r3, #93	; 0x5d
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b05      	cmp	r3, #5
 8003b8e:	d10a      	bne.n	8003ba6 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	440b      	add	r3, r1
 8003b9e:	335c      	adds	r3, #92	; 0x5c
 8003ba0:	2205      	movs	r2, #5
 8003ba2:	701a      	strb	r2, [r3, #0]
 8003ba4:	e09a      	b.n	8003cdc <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	440b      	add	r3, r1
 8003bb4:	335d      	adds	r3, #93	; 0x5d
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b06      	cmp	r3, #6
 8003bba:	d00a      	beq.n	8003bd2 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	440b      	add	r3, r1
 8003bca:	335d      	adds	r3, #93	; 0x5d
 8003bcc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d156      	bne.n	8003c80 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	440b      	add	r3, r1
 8003be0:	3358      	adds	r3, #88	; 0x58
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	1c59      	adds	r1, r3, #1
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	4403      	add	r3, r0
 8003bf4:	3358      	adds	r3, #88	; 0x58
 8003bf6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	440b      	add	r3, r1
 8003c06:	3358      	adds	r3, #88	; 0x58
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d914      	bls.n	8003c38 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	440b      	add	r3, r1
 8003c1c:	3358      	adds	r3, #88	; 0x58
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	440b      	add	r3, r1
 8003c30:	335c      	adds	r3, #92	; 0x5c
 8003c32:	2204      	movs	r2, #4
 8003c34:	701a      	strb	r2, [r3, #0]
 8003c36:	e009      	b.n	8003c4c <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	440b      	add	r3, r1
 8003c46:	335c      	adds	r3, #92	; 0x5c
 8003c48:	2202      	movs	r2, #2
 8003c4a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c62:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c6a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c78:	461a      	mov	r2, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	e02d      	b.n	8003cdc <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4613      	mov	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	440b      	add	r3, r1
 8003c8e:	335d      	adds	r3, #93	; 0x5d
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d122      	bne.n	8003cdc <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	440b      	add	r3, r1
 8003ca4:	335c      	adds	r3, #92	; 0x5c
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cc0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cc8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce8:	461a      	mov	r2, r3
 8003cea:	2302      	movs	r3, #2
 8003cec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	b2d8      	uxtb	r0, r3
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	440b      	add	r3, r1
 8003d00:	335c      	adds	r3, #92	; 0x5c
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	4601      	mov	r1, r0
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff fd32 	bl	8003772 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d0e:	e0d1      	b.n	8003eb4 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d22:	2b80      	cmp	r3, #128	; 0x80
 8003d24:	d13e      	bne.n	8003da4 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	0151      	lsls	r1, r2, #5
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	440a      	add	r2, r1
 8003d3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d40:	f043 0302 	orr.w	r3, r3, #2
 8003d44:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	440b      	add	r3, r1
 8003d54:	3358      	adds	r3, #88	; 0x58
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	1c59      	adds	r1, r3, #1
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4403      	add	r3, r0
 8003d68:	3358      	adds	r3, #88	; 0x58
 8003d6a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	440b      	add	r3, r1
 8003d7a:	335d      	adds	r3, #93	; 0x5d
 8003d7c:	2206      	movs	r2, #6
 8003d7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f007 fe9a 	bl	800bac4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	2380      	movs	r3, #128	; 0x80
 8003da0:	6093      	str	r3, [r2, #8]
}
 8003da2:	e087      	b.n	8003eb4 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0310 	and.w	r3, r3, #16
 8003db6:	2b10      	cmp	r3, #16
 8003db8:	d17c      	bne.n	8003eb4 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	440b      	add	r3, r1
 8003dc8:	333f      	adds	r3, #63	; 0x3f
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d122      	bne.n	8003e16 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	440b      	add	r3, r1
 8003dde:	3358      	adds	r3, #88	; 0x58
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	0151      	lsls	r1, r2, #5
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	440a      	add	r2, r1
 8003dfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dfe:	f043 0302 	orr.w	r3, r3, #2
 8003e02:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f007 fe58 	bl	800bac4 <USB_HC_Halt>
 8003e14:	e045      	b.n	8003ea2 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	440b      	add	r3, r1
 8003e24:	333f      	adds	r3, #63	; 0x3f
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4613      	mov	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	440b      	add	r3, r1
 8003e3a:	333f      	adds	r3, #63	; 0x3f
 8003e3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d12f      	bne.n	8003ea2 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	440b      	add	r3, r1
 8003e50:	3358      	adds	r3, #88	; 0x58
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d121      	bne.n	8003ea2 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	440b      	add	r3, r1
 8003e6c:	335d      	adds	r3, #93	; 0x5d
 8003e6e:	2203      	movs	r2, #3
 8003e70:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	0151      	lsls	r1, r2, #5
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	440a      	add	r2, r1
 8003e88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e8c:	f043 0302 	orr.w	r3, r3, #2
 8003e90:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f007 fe11 	bl	800bac4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	015a      	lsls	r2, r3, #5
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eae:	461a      	mov	r2, r3
 8003eb0:	2310      	movs	r3, #16
 8003eb2:	6093      	str	r3, [r2, #8]
}
 8003eb4:	bf00      	nop
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003ed2:	78fb      	ldrb	r3, [r7, #3]
 8003ed4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d119      	bne.n	8003f20 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef8:	461a      	mov	r2, r3
 8003efa:	2304      	movs	r3, #4
 8003efc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	0151      	lsls	r1, r2, #5
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	440a      	add	r2, r1
 8003f14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f18:	f043 0302 	orr.w	r3, r3, #2
 8003f1c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003f1e:	e33e      	b.n	800459e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b20      	cmp	r3, #32
 8003f34:	d141      	bne.n	8003fba <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f42:	461a      	mov	r2, r3
 8003f44:	2320      	movs	r3, #32
 8003f46:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	440b      	add	r3, r1
 8003f56:	333d      	adds	r3, #61	; 0x3d
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	f040 831f 	bne.w	800459e <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	440b      	add	r3, r1
 8003f6e:	333d      	adds	r3, #61	; 0x3d
 8003f70:	2200      	movs	r2, #0
 8003f72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	440b      	add	r3, r1
 8003f82:	335c      	adds	r3, #92	; 0x5c
 8003f84:	2202      	movs	r2, #2
 8003f86:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	0151      	lsls	r1, r2, #5
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	440a      	add	r2, r1
 8003f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fa2:	f043 0302 	orr.w	r3, r3, #2
 8003fa6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f007 fd86 	bl	800bac4 <USB_HC_Halt>
}
 8003fb8:	e2f1      	b.n	800459e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b40      	cmp	r3, #64	; 0x40
 8003fce:	d13f      	bne.n	8004050 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	440b      	add	r3, r1
 8003fde:	335d      	adds	r3, #93	; 0x5d
 8003fe0:	2204      	movs	r2, #4
 8003fe2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	440b      	add	r3, r1
 8003ff2:	333d      	adds	r3, #61	; 0x3d
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	440b      	add	r3, r1
 8004006:	3358      	adds	r3, #88	; 0x58
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4413      	add	r3, r2
 8004014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	0151      	lsls	r1, r2, #5
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	440a      	add	r2, r1
 8004022:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004026:	f043 0302 	orr.w	r3, r3, #2
 800402a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	4611      	mov	r1, r2
 8004036:	4618      	mov	r0, r3
 8004038:	f007 fd44 	bl	800bac4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4413      	add	r3, r2
 8004044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004048:	461a      	mov	r2, r3
 800404a:	2340      	movs	r3, #64	; 0x40
 800404c:	6093      	str	r3, [r2, #8]
}
 800404e:	e2a6      	b.n	800459e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4413      	add	r3, r2
 8004058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004066:	d122      	bne.n	80040ae <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4413      	add	r3, r2
 8004070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	0151      	lsls	r1, r2, #5
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	440a      	add	r2, r1
 800407e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004082:	f043 0302 	orr.w	r3, r3, #2
 8004086:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	4611      	mov	r1, r2
 8004092:	4618      	mov	r0, r3
 8004094:	f007 fd16 	bl	800bac4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a4:	461a      	mov	r2, r3
 80040a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040aa:	6093      	str	r3, [r2, #8]
}
 80040ac:	e277      	b.n	800459e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d135      	bne.n	8004130 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	440b      	add	r3, r1
 80040d2:	3358      	adds	r3, #88	; 0x58
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	0151      	lsls	r1, r2, #5
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	440a      	add	r2, r1
 80040ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040f2:	f043 0302 	orr.w	r3, r3, #2
 80040f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	4611      	mov	r1, r2
 8004102:	4618      	mov	r0, r3
 8004104:	f007 fcde 	bl	800bac4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4413      	add	r3, r2
 8004110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004114:	461a      	mov	r2, r3
 8004116:	2301      	movs	r3, #1
 8004118:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	440b      	add	r3, r1
 8004128:	335d      	adds	r3, #93	; 0x5d
 800412a:	2201      	movs	r2, #1
 800412c:	701a      	strb	r2, [r3, #0]
}
 800412e:	e236      	b.n	800459e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	4413      	add	r3, r2
 8004138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b08      	cmp	r3, #8
 8004144:	d12b      	bne.n	800419e <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4413      	add	r3, r2
 800414e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004152:	461a      	mov	r2, r3
 8004154:	2308      	movs	r3, #8
 8004156:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	4413      	add	r3, r2
 8004160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	0151      	lsls	r1, r2, #5
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	440a      	add	r2, r1
 800416e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004172:	f043 0302 	orr.w	r3, r3, #2
 8004176:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	4611      	mov	r1, r2
 8004182:	4618      	mov	r0, r3
 8004184:	f007 fc9e 	bl	800bac4 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	440b      	add	r3, r1
 8004196:	335d      	adds	r3, #93	; 0x5d
 8004198:	2205      	movs	r2, #5
 800419a:	701a      	strb	r2, [r3, #0]
}
 800419c:	e1ff      	b.n	800459e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2b10      	cmp	r3, #16
 80041b2:	d155      	bne.n	8004260 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4613      	mov	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	440b      	add	r3, r1
 80041c2:	3358      	adds	r3, #88	; 0x58
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	440b      	add	r3, r1
 80041d6:	335d      	adds	r3, #93	; 0x5d
 80041d8:	2203      	movs	r2, #3
 80041da:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	440b      	add	r3, r1
 80041ea:	333d      	adds	r3, #61	; 0x3d
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d114      	bne.n	800421c <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	440b      	add	r3, r1
 8004200:	333c      	adds	r3, #60	; 0x3c
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d109      	bne.n	800421c <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	440b      	add	r3, r1
 8004216:	333d      	adds	r3, #61	; 0x3d
 8004218:	2201      	movs	r2, #1
 800421a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4413      	add	r3, r2
 8004224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	0151      	lsls	r1, r2, #5
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	440a      	add	r2, r1
 8004232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004236:	f043 0302 	orr.w	r3, r3, #2
 800423a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	4611      	mov	r1, r2
 8004246:	4618      	mov	r0, r3
 8004248:	f007 fc3c 	bl	800bac4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	4413      	add	r3, r2
 8004254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004258:	461a      	mov	r2, r3
 800425a:	2310      	movs	r3, #16
 800425c:	6093      	str	r3, [r2, #8]
}
 800425e:	e19e      	b.n	800459e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	4413      	add	r3, r2
 8004268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004272:	2b80      	cmp	r3, #128	; 0x80
 8004274:	d12b      	bne.n	80042ce <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4413      	add	r3, r2
 800427e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	0151      	lsls	r1, r2, #5
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	440a      	add	r2, r1
 800428c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004290:	f043 0302 	orr.w	r3, r3, #2
 8004294:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	4611      	mov	r1, r2
 80042a0:	4618      	mov	r0, r3
 80042a2:	f007 fc0f 	bl	800bac4 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	440b      	add	r3, r1
 80042b4:	335d      	adds	r3, #93	; 0x5d
 80042b6:	2206      	movs	r2, #6
 80042b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c6:	461a      	mov	r2, r3
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	6093      	str	r3, [r2, #8]
}
 80042cc:	e167      	b.n	800459e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e4:	d135      	bne.n	8004352 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	0151      	lsls	r1, r2, #5
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	440a      	add	r2, r1
 80042fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004300:	f043 0302 	orr.w	r3, r3, #2
 8004304:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	4611      	mov	r1, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f007 fbd7 	bl	800bac4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4413      	add	r3, r2
 800431e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004322:	461a      	mov	r2, r3
 8004324:	2310      	movs	r3, #16
 8004326:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4413      	add	r3, r2
 8004330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004334:	461a      	mov	r2, r3
 8004336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800433a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4613      	mov	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	440b      	add	r3, r1
 800434a:	335d      	adds	r3, #93	; 0x5d
 800434c:	2208      	movs	r2, #8
 800434e:	701a      	strb	r2, [r3, #0]
}
 8004350:	e125      	b.n	800459e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	4413      	add	r3, r2
 800435a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b02      	cmp	r3, #2
 8004366:	f040 811a 	bne.w	800459e <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4413      	add	r3, r2
 8004372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	0151      	lsls	r1, r2, #5
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	440a      	add	r2, r1
 8004380:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004384:	f023 0302 	bic.w	r3, r3, #2
 8004388:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	440b      	add	r3, r1
 8004398:	335d      	adds	r3, #93	; 0x5d
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d137      	bne.n	8004410 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	440b      	add	r3, r1
 80043ae:	335c      	adds	r3, #92	; 0x5c
 80043b0:	2201      	movs	r2, #1
 80043b2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	440b      	add	r3, r1
 80043c2:	333f      	adds	r3, #63	; 0x3f
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d00b      	beq.n	80043e2 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	440b      	add	r3, r1
 80043d8:	333f      	adds	r3, #63	; 0x3f
 80043da:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80043dc:	2b03      	cmp	r3, #3
 80043de:	f040 80c5 	bne.w	800456c <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4613      	mov	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	440b      	add	r3, r1
 80043f0:	3351      	adds	r3, #81	; 0x51
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	f083 0301 	eor.w	r3, r3, #1
 80043f8:	b2d8      	uxtb	r0, r3
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	440b      	add	r3, r1
 8004408:	3351      	adds	r3, #81	; 0x51
 800440a:	4602      	mov	r2, r0
 800440c:	701a      	strb	r2, [r3, #0]
 800440e:	e0ad      	b.n	800456c <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	440b      	add	r3, r1
 800441e:	335d      	adds	r3, #93	; 0x5d
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b03      	cmp	r3, #3
 8004424:	d10a      	bne.n	800443c <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	4613      	mov	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	440b      	add	r3, r1
 8004434:	335c      	adds	r3, #92	; 0x5c
 8004436:	2202      	movs	r2, #2
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	e097      	b.n	800456c <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	440b      	add	r3, r1
 800444a:	335d      	adds	r3, #93	; 0x5d
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b04      	cmp	r3, #4
 8004450:	d10a      	bne.n	8004468 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	440b      	add	r3, r1
 8004460:	335c      	adds	r3, #92	; 0x5c
 8004462:	2202      	movs	r2, #2
 8004464:	701a      	strb	r2, [r3, #0]
 8004466:	e081      	b.n	800456c <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	440b      	add	r3, r1
 8004476:	335d      	adds	r3, #93	; 0x5d
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b05      	cmp	r3, #5
 800447c:	d10a      	bne.n	8004494 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	440b      	add	r3, r1
 800448c:	335c      	adds	r3, #92	; 0x5c
 800448e:	2205      	movs	r2, #5
 8004490:	701a      	strb	r2, [r3, #0]
 8004492:	e06b      	b.n	800456c <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	440b      	add	r3, r1
 80044a2:	335d      	adds	r3, #93	; 0x5d
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	2b06      	cmp	r3, #6
 80044a8:	d00a      	beq.n	80044c0 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4613      	mov	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	440b      	add	r3, r1
 80044b8:	335d      	adds	r3, #93	; 0x5d
 80044ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d155      	bne.n	800456c <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	440b      	add	r3, r1
 80044ce:	3358      	adds	r3, #88	; 0x58
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	1c59      	adds	r1, r3, #1
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	4403      	add	r3, r0
 80044e2:	3358      	adds	r3, #88	; 0x58
 80044e4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4613      	mov	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	440b      	add	r3, r1
 80044f4:	3358      	adds	r3, #88	; 0x58
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d914      	bls.n	8004526 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	440b      	add	r3, r1
 800450a:	3358      	adds	r3, #88	; 0x58
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	440b      	add	r3, r1
 800451e:	335c      	adds	r3, #92	; 0x5c
 8004520:	2204      	movs	r2, #4
 8004522:	701a      	strb	r2, [r3, #0]
 8004524:	e009      	b.n	800453a <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4613      	mov	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	440b      	add	r3, r1
 8004534:	335c      	adds	r3, #92	; 0x5c
 8004536:	2202      	movs	r2, #2
 8004538:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	4413      	add	r3, r2
 8004542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004550:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004558:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	4413      	add	r3, r2
 8004562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004566:	461a      	mov	r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	4413      	add	r3, r2
 8004574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004578:	461a      	mov	r2, r3
 800457a:	2302      	movs	r3, #2
 800457c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	b2d8      	uxtb	r0, r3
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4613      	mov	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	440b      	add	r3, r1
 8004590:	335c      	adds	r3, #92	; 0x5c
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	461a      	mov	r2, r3
 8004596:	4601      	mov	r1, r0
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff f8ea 	bl	8003772 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800459e:	bf00      	nop
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08a      	sub	sp, #40	; 0x28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	f003 030f 	and.w	r3, r3, #15
 80045c8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	0c5b      	lsrs	r3, r3, #17
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	091b      	lsrs	r3, r3, #4
 80045d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045dc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d003      	beq.n	80045ec <HCD_RXQLVL_IRQHandler+0x44>
 80045e4:	2b05      	cmp	r3, #5
 80045e6:	f000 8082 	beq.w	80046ee <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80045ea:	e083      	b.n	80046f4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d07f      	beq.n	80046f2 <HCD_RXQLVL_IRQHandler+0x14a>
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	440b      	add	r3, r1
 8004600:	3344      	adds	r3, #68	; 0x44
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d074      	beq.n	80046f2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6818      	ldr	r0, [r3, #0]
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	440b      	add	r3, r1
 800461a:	3344      	adds	r3, #68	; 0x44
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	b292      	uxth	r2, r2
 8004622:	4619      	mov	r1, r3
 8004624:	f007 f89c 	bl	800b760 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	440b      	add	r3, r1
 8004636:	3344      	adds	r3, #68	; 0x44
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	18d1      	adds	r1, r2, r3
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4613      	mov	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	4403      	add	r3, r0
 800464c:	3344      	adds	r3, #68	; 0x44
 800464e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	440b      	add	r3, r1
 800465e:	334c      	adds	r3, #76	; 0x4c
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	18d1      	adds	r1, r2, r3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4613      	mov	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	4403      	add	r3, r0
 8004674:	334c      	adds	r3, #76	; 0x4c
 8004676:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	4413      	add	r3, r2
 8004680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	4b1d      	ldr	r3, [pc, #116]	; (80046fc <HCD_RXQLVL_IRQHandler+0x154>)
 8004688:	4013      	ands	r3, r2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d031      	beq.n	80046f2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	4413      	add	r3, r2
 8004696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046a4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046ac:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ba:	461a      	mov	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	440b      	add	r3, r1
 80046ce:	3350      	adds	r3, #80	; 0x50
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	f083 0301 	eor.w	r3, r3, #1
 80046d6:	b2d8      	uxtb	r0, r3
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	4613      	mov	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	440b      	add	r3, r1
 80046e6:	3350      	adds	r3, #80	; 0x50
 80046e8:	4602      	mov	r2, r0
 80046ea:	701a      	strb	r2, [r3, #0]
      break;
 80046ec:	e001      	b.n	80046f2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80046ee:	bf00      	nop
 80046f0:	e000      	b.n	80046f4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80046f2:	bf00      	nop
  }
}
 80046f4:	bf00      	nop
 80046f6:	3728      	adds	r7, #40	; 0x28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	1ff80000 	.word	0x1ff80000

08004700 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800472c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b02      	cmp	r3, #2
 8004736:	d113      	bne.n	8004760 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b01      	cmp	r3, #1
 8004740:	d10a      	bne.n	8004758 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	699a      	ldr	r2, [r3, #24]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004750:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fe ffe5 	bl	8003722 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f043 0302 	orr.w	r3, r3, #2
 800475e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b08      	cmp	r3, #8
 8004768:	d147      	bne.n	80047fa <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f043 0308 	orr.w	r3, r3, #8
 8004770:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b04      	cmp	r3, #4
 800477a:	d129      	bne.n	80047d0 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d113      	bne.n	80047ac <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800478a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800478e:	d106      	bne.n	800479e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2102      	movs	r1, #2
 8004796:	4618      	mov	r0, r3
 8004798:	f007 f910 	bl	800b9bc <USB_InitFSLSPClkSel>
 800479c:	e011      	b.n	80047c2 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2101      	movs	r1, #1
 80047a4:	4618      	mov	r0, r3
 80047a6:	f007 f909 	bl	800b9bc <USB_InitFSLSPClkSel>
 80047aa:	e00a      	b.n	80047c2 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2b03      	cmp	r3, #3
 80047b2:	d106      	bne.n	80047c2 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047ba:	461a      	mov	r2, r3
 80047bc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80047c0:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fe ffc1 	bl	800374a <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7fe ffaa 	bl	8003722 <HAL_HCD_Connect_Callback>
 80047ce:	e014      	b.n	80047fa <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7fe ffc4 	bl	800375e <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80047e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80047e8:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699a      	ldr	r2, [r3, #24]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80047f8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b20      	cmp	r3, #32
 8004802:	d103      	bne.n	800480c <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f043 0320 	orr.w	r3, r3, #32
 800480a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004812:	461a      	mov	r2, r3
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	6013      	str	r3, [r2, #0]
}
 8004818:	bf00      	nop
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e07f      	b.n	8004932 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f00d fe78 	bl	801253c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2224      	movs	r2, #36	; 0x24
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0201 	bic.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004870:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004880:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d107      	bne.n	800489a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004896:	609a      	str	r2, [r3, #8]
 8004898:	e006      	b.n	80048a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80048a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d104      	bne.n	80048ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6859      	ldr	r1, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	4b1d      	ldr	r3, [pc, #116]	; (800493c <HAL_I2C_Init+0x11c>)
 80048c6:	430b      	orrs	r3, r1
 80048c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	ea42 0103 	orr.w	r1, r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	021a      	lsls	r2, r3, #8
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69d9      	ldr	r1, [r3, #28]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1a      	ldr	r2, [r3, #32]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0201 	orr.w	r2, r2, #1
 8004912:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	02008000 	.word	0x02008000

08004940 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e021      	b.n	8004996 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2224      	movs	r2, #36	; 0x24
 8004956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0201 	bic.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f00d fe5e 	bl	801262c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	4608      	mov	r0, r1
 80049aa:	4611      	mov	r1, r2
 80049ac:	461a      	mov	r2, r3
 80049ae:	4603      	mov	r3, r0
 80049b0:	817b      	strh	r3, [r7, #10]
 80049b2:	460b      	mov	r3, r1
 80049b4:	813b      	strh	r3, [r7, #8]
 80049b6:	4613      	mov	r3, r2
 80049b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	f040 80f9 	bne.w	8004bba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_I2C_Mem_Write+0x34>
 80049ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d105      	bne.n	80049e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e0ed      	b.n	8004bbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <HAL_I2C_Mem_Write+0x4e>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e0e6      	b.n	8004bbc <HAL_I2C_Mem_Write+0x21c>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049f6:	f7fc fe71 	bl	80016dc <HAL_GetTick>
 80049fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	2319      	movs	r3, #25
 8004a02:	2201      	movs	r2, #1
 8004a04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 fad1 	bl	8004fb0 <I2C_WaitOnFlagUntilTimeout>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0d1      	b.n	8004bbc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2221      	movs	r2, #33	; 0x21
 8004a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2240      	movs	r2, #64	; 0x40
 8004a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a3a      	ldr	r2, [r7, #32]
 8004a32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a40:	88f8      	ldrh	r0, [r7, #6]
 8004a42:	893a      	ldrh	r2, [r7, #8]
 8004a44:	8979      	ldrh	r1, [r7, #10]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	9301      	str	r3, [sp, #4]
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	4603      	mov	r3, r0
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f9e1 	bl	8004e18 <I2C_RequestMemoryWrite>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d005      	beq.n	8004a68 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0a9      	b.n	8004bbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2bff      	cmp	r3, #255	; 0xff
 8004a70:	d90e      	bls.n	8004a90 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	22ff      	movs	r2, #255	; 0xff
 8004a76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	8979      	ldrh	r1, [r7, #10]
 8004a80:	2300      	movs	r3, #0
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 fbb3 	bl	80051f4 <I2C_TransferConfig>
 8004a8e:	e00f      	b.n	8004ab0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	8979      	ldrh	r1, [r7, #10]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 fba2 	bl	80051f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 fabb 	bl	8005030 <I2C_WaitOnTXISFlagUntilTimeout>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e07b      	b.n	8004bbc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	781a      	ldrb	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d034      	beq.n	8004b68 <HAL_I2C_Mem_Write+0x1c8>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d130      	bne.n	8004b68 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2180      	movs	r1, #128	; 0x80
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 fa4d 	bl	8004fb0 <I2C_WaitOnFlagUntilTimeout>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e04d      	b.n	8004bbc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2bff      	cmp	r3, #255	; 0xff
 8004b28:	d90e      	bls.n	8004b48 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	22ff      	movs	r2, #255	; 0xff
 8004b2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	8979      	ldrh	r1, [r7, #10]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 fb57 	bl	80051f4 <I2C_TransferConfig>
 8004b46:	e00f      	b.n	8004b68 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	8979      	ldrh	r1, [r7, #10]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 fb46 	bl	80051f4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d19e      	bne.n	8004ab0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 fa9a 	bl	80050b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e01a      	b.n	8004bbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6859      	ldr	r1, [r3, #4]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <HAL_I2C_Mem_Write+0x224>)
 8004b9a:	400b      	ands	r3, r1
 8004b9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	e000      	b.n	8004bbc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004bba:	2302      	movs	r3, #2
  }
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	fe00e800 	.word	0xfe00e800

08004bc8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	4608      	mov	r0, r1
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	817b      	strh	r3, [r7, #10]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	813b      	strh	r3, [r7, #8]
 8004bde:	4613      	mov	r3, r2
 8004be0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	f040 80fd 	bne.w	8004dea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_I2C_Mem_Read+0x34>
 8004bf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d105      	bne.n	8004c08 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0f1      	b.n	8004dec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_I2C_Mem_Read+0x4e>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e0ea      	b.n	8004dec <HAL_I2C_Mem_Read+0x224>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c1e:	f7fc fd5d 	bl	80016dc <HAL_GetTick>
 8004c22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	2319      	movs	r3, #25
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 f9bd 	bl	8004fb0 <I2C_WaitOnFlagUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e0d5      	b.n	8004dec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2222      	movs	r2, #34	; 0x22
 8004c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2240      	movs	r2, #64	; 0x40
 8004c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a3a      	ldr	r2, [r7, #32]
 8004c5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c68:	88f8      	ldrh	r0, [r7, #6]
 8004c6a:	893a      	ldrh	r2, [r7, #8]
 8004c6c:	8979      	ldrh	r1, [r7, #10]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	9301      	str	r3, [sp, #4]
 8004c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	4603      	mov	r3, r0
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f921 	bl	8004ec0 <I2C_RequestMemoryRead>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e0ad      	b.n	8004dec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2bff      	cmp	r3, #255	; 0xff
 8004c98:	d90e      	bls.n	8004cb8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	22ff      	movs	r2, #255	; 0xff
 8004c9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	8979      	ldrh	r1, [r7, #10]
 8004ca8:	4b52      	ldr	r3, [pc, #328]	; (8004df4 <HAL_I2C_Mem_Read+0x22c>)
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 fa9f 	bl	80051f4 <I2C_TransferConfig>
 8004cb6:	e00f      	b.n	8004cd8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	8979      	ldrh	r1, [r7, #10]
 8004cca:	4b4a      	ldr	r3, [pc, #296]	; (8004df4 <HAL_I2C_Mem_Read+0x22c>)
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 fa8e 	bl	80051f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cde:	2200      	movs	r2, #0
 8004ce0:	2104      	movs	r1, #4
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 f964 	bl	8004fb0 <I2C_WaitOnFlagUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e07c      	b.n	8004dec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	b2d2      	uxtb	r2, r2
 8004cfe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d034      	beq.n	8004d98 <HAL_I2C_Mem_Read+0x1d0>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d130      	bne.n	8004d98 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2180      	movs	r1, #128	; 0x80
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 f935 	bl	8004fb0 <I2C_WaitOnFlagUntilTimeout>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e04d      	b.n	8004dec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2bff      	cmp	r3, #255	; 0xff
 8004d58:	d90e      	bls.n	8004d78 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	22ff      	movs	r2, #255	; 0xff
 8004d5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	8979      	ldrh	r1, [r7, #10]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 fa3f 	bl	80051f4 <I2C_TransferConfig>
 8004d76:	e00f      	b.n	8004d98 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	8979      	ldrh	r1, [r7, #10]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 fa2e 	bl	80051f4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d19a      	bne.n	8004cd8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f982 	bl	80050b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e01a      	b.n	8004dec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6859      	ldr	r1, [r3, #4]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	4b0b      	ldr	r3, [pc, #44]	; (8004df8 <HAL_I2C_Mem_Read+0x230>)
 8004dca:	400b      	ands	r3, r1
 8004dcc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	e000      	b.n	8004dec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004dea:	2302      	movs	r3, #2
  }
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	80002400 	.word	0x80002400
 8004df8:	fe00e800 	.word	0xfe00e800

08004dfc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e0a:	b2db      	uxtb	r3, r3
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	4608      	mov	r0, r1
 8004e22:	4611      	mov	r1, r2
 8004e24:	461a      	mov	r2, r3
 8004e26:	4603      	mov	r3, r0
 8004e28:	817b      	strh	r3, [r7, #10]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	813b      	strh	r3, [r7, #8]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004e32:	88fb      	ldrh	r3, [r7, #6]
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	8979      	ldrh	r1, [r7, #10]
 8004e38:	4b20      	ldr	r3, [pc, #128]	; (8004ebc <I2C_RequestMemoryWrite+0xa4>)
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f9d7 	bl	80051f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	69b9      	ldr	r1, [r7, #24]
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f8f0 	bl	8005030 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e02c      	b.n	8004eb4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e5a:	88fb      	ldrh	r3, [r7, #6]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d105      	bne.n	8004e6c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e60:	893b      	ldrh	r3, [r7, #8]
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	629a      	str	r2, [r3, #40]	; 0x28
 8004e6a:	e015      	b.n	8004e98 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e6c:	893b      	ldrh	r3, [r7, #8]
 8004e6e:	0a1b      	lsrs	r3, r3, #8
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e7a:	69fa      	ldr	r2, [r7, #28]
 8004e7c:	69b9      	ldr	r1, [r7, #24]
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 f8d6 	bl	8005030 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e012      	b.n	8004eb4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e8e:	893b      	ldrh	r3, [r7, #8]
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	2180      	movs	r1, #128	; 0x80
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f884 	bl	8004fb0 <I2C_WaitOnFlagUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e000      	b.n	8004eb4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	80002000 	.word	0x80002000

08004ec0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	4608      	mov	r0, r1
 8004eca:	4611      	mov	r1, r2
 8004ecc:	461a      	mov	r2, r3
 8004ece:	4603      	mov	r3, r0
 8004ed0:	817b      	strh	r3, [r7, #10]
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	813b      	strh	r3, [r7, #8]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004eda:	88fb      	ldrh	r3, [r7, #6]
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	8979      	ldrh	r1, [r7, #10]
 8004ee0:	4b20      	ldr	r3, [pc, #128]	; (8004f64 <I2C_RequestMemoryRead+0xa4>)
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f984 	bl	80051f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	69b9      	ldr	r1, [r7, #24]
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f89d 	bl	8005030 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e02c      	b.n	8004f5a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f00:	88fb      	ldrh	r3, [r7, #6]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d105      	bne.n	8004f12 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f06:	893b      	ldrh	r3, [r7, #8]
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	629a      	str	r2, [r3, #40]	; 0x28
 8004f10:	e015      	b.n	8004f3e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f12:	893b      	ldrh	r3, [r7, #8]
 8004f14:	0a1b      	lsrs	r3, r3, #8
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f20:	69fa      	ldr	r2, [r7, #28]
 8004f22:	69b9      	ldr	r1, [r7, #24]
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 f883 	bl	8005030 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e012      	b.n	8004f5a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f34:	893b      	ldrh	r3, [r7, #8]
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	2200      	movs	r2, #0
 8004f46:	2140      	movs	r1, #64	; 0x40
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f831 	bl	8004fb0 <I2C_WaitOnFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	80002000 	.word	0x80002000

08004f68 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d103      	bne.n	8004f86 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2200      	movs	r2, #0
 8004f84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d007      	beq.n	8004fa4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0201 	orr.w	r2, r2, #1
 8004fa2:	619a      	str	r2, [r3, #24]
  }
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	603b      	str	r3, [r7, #0]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fc0:	e022      	b.n	8005008 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc8:	d01e      	beq.n	8005008 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fca:	f7fc fb87 	bl	80016dc <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d302      	bcc.n	8004fe0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d113      	bne.n	8005008 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe4:	f043 0220 	orr.w	r2, r3, #32
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e00f      	b.n	8005028 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	4013      	ands	r3, r2
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	429a      	cmp	r2, r3
 8005016:	bf0c      	ite	eq
 8005018:	2301      	moveq	r3, #1
 800501a:	2300      	movne	r3, #0
 800501c:	b2db      	uxtb	r3, r3
 800501e:	461a      	mov	r2, r3
 8005020:	79fb      	ldrb	r3, [r7, #7]
 8005022:	429a      	cmp	r2, r3
 8005024:	d0cd      	beq.n	8004fc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800503c:	e02c      	b.n	8005098 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 f870 	bl	8005128 <I2C_IsAcknowledgeFailed>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e02a      	b.n	80050a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005058:	d01e      	beq.n	8005098 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800505a:	f7fc fb3f 	bl	80016dc <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	429a      	cmp	r2, r3
 8005068:	d302      	bcc.n	8005070 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d113      	bne.n	8005098 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005074:	f043 0220 	orr.w	r2, r3, #32
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2220      	movs	r2, #32
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e007      	b.n	80050a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d1cb      	bne.n	800503e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050bc:	e028      	b.n	8005110 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 f830 	bl	8005128 <I2C_IsAcknowledgeFailed>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e026      	b.n	8005120 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d2:	f7fc fb03 	bl	80016dc <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d302      	bcc.n	80050e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d113      	bne.n	8005110 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ec:	f043 0220 	orr.w	r2, r3, #32
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e007      	b.n	8005120 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	f003 0320 	and.w	r3, r3, #32
 800511a:	2b20      	cmp	r3, #32
 800511c:	d1cf      	bne.n	80050be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	f003 0310 	and.w	r3, r3, #16
 800513e:	2b10      	cmp	r3, #16
 8005140:	d151      	bne.n	80051e6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005142:	e022      	b.n	800518a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514a:	d01e      	beq.n	800518a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514c:	f7fc fac6 	bl	80016dc <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	429a      	cmp	r2, r3
 800515a:	d302      	bcc.n	8005162 <I2C_IsAcknowledgeFailed+0x3a>
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d113      	bne.n	800518a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005166:	f043 0220 	orr.w	r2, r3, #32
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e02e      	b.n	80051e8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b20      	cmp	r3, #32
 8005196:	d1d5      	bne.n	8005144 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2210      	movs	r2, #16
 800519e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2220      	movs	r2, #32
 80051a6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f7ff fedd 	bl	8004f68 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6859      	ldr	r1, [r3, #4]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	4b0d      	ldr	r3, [pc, #52]	; (80051f0 <I2C_IsAcknowledgeFailed+0xc8>)
 80051ba:	400b      	ands	r3, r1
 80051bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c2:	f043 0204 	orr.w	r2, r3, #4
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2220      	movs	r2, #32
 80051ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	fe00e800 	.word	0xfe00e800

080051f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	607b      	str	r3, [r7, #4]
 80051fe:	460b      	mov	r3, r1
 8005200:	817b      	strh	r3, [r7, #10]
 8005202:	4613      	mov	r3, r2
 8005204:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	0d5b      	lsrs	r3, r3, #21
 8005210:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005214:	4b0d      	ldr	r3, [pc, #52]	; (800524c <I2C_TransferConfig+0x58>)
 8005216:	430b      	orrs	r3, r1
 8005218:	43db      	mvns	r3, r3
 800521a:	ea02 0103 	and.w	r1, r2, r3
 800521e:	897b      	ldrh	r3, [r7, #10]
 8005220:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005224:	7a7b      	ldrb	r3, [r7, #9]
 8005226:	041b      	lsls	r3, r3, #16
 8005228:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800522c:	431a      	orrs	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	431a      	orrs	r2, r3
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	431a      	orrs	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800523e:	bf00      	nop
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	03ff63ff 	.word	0x03ff63ff

08005250 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b20      	cmp	r3, #32
 8005264:	d138      	bne.n	80052d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005270:	2302      	movs	r3, #2
 8005272:	e032      	b.n	80052da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2224      	movs	r2, #36	; 0x24
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0201 	bic.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6819      	ldr	r1, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	e000      	b.n	80052da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052d8:	2302      	movs	r3, #2
  }
}
 80052da:	4618      	mov	r0, r3
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b085      	sub	sp, #20
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
 80052ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b20      	cmp	r3, #32
 80052fa:	d139      	bne.n	8005370 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005302:	2b01      	cmp	r3, #1
 8005304:	d101      	bne.n	800530a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005306:	2302      	movs	r3, #2
 8005308:	e033      	b.n	8005372 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2224      	movs	r2, #36	; 0x24
 8005316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0201 	bic.w	r2, r2, #1
 8005328:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005338:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	021b      	lsls	r3, r3, #8
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4313      	orrs	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	e000      	b.n	8005372 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005370:	2302      	movs	r3, #2
  }
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e0bf      	b.n	8005512 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d106      	bne.n	80053ac <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f016 f808 	bl	801b3bc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80053c2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6999      	ldr	r1, [r3, #24]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80053d8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6899      	ldr	r1, [r3, #8]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	4b4a      	ldr	r3, [pc, #296]	; (800551c <HAL_LTDC_Init+0x19c>)
 80053f4:	400b      	ands	r3, r1
 80053f6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	041b      	lsls	r3, r3, #16
 80053fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6899      	ldr	r1, [r3, #8]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699a      	ldr	r2, [r3, #24]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	431a      	orrs	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68d9      	ldr	r1, [r3, #12]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	4b3e      	ldr	r3, [pc, #248]	; (800551c <HAL_LTDC_Init+0x19c>)
 8005422:	400b      	ands	r3, r1
 8005424:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	041b      	lsls	r3, r3, #16
 800542c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68d9      	ldr	r1, [r3, #12]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1a      	ldr	r2, [r3, #32]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6919      	ldr	r1, [r3, #16]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	4b33      	ldr	r3, [pc, #204]	; (800551c <HAL_LTDC_Init+0x19c>)
 8005450:	400b      	ands	r3, r1
 8005452:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	041b      	lsls	r3, r3, #16
 800545a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6919      	ldr	r1, [r3, #16]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	431a      	orrs	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6959      	ldr	r1, [r3, #20]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	4b27      	ldr	r3, [pc, #156]	; (800551c <HAL_LTDC_Init+0x19c>)
 800547e:	400b      	ands	r3, r1
 8005480:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	041b      	lsls	r3, r3, #16
 8005488:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6959      	ldr	r1, [r3, #20]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054a6:	021b      	lsls	r3, r3, #8
 80054a8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80054b0:	041b      	lsls	r3, r3, #16
 80054b2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80054c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0206 	orr.w	r2, r2, #6
 80054ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0201 	orr.w	r2, r2, #1
 80054fe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	f000f800 	.word	0xf000f800

08005520 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f015 ffc9 	bl	801b4c0 <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005566:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b00      	cmp	r3, #0
 8005570:	d023      	beq.n	80055ba <HAL_LTDC_IRQHandler+0x6a>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01e      	beq.n	80055ba <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0204 	bic.w	r2, r2, #4
 800558a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2204      	movs	r2, #4
 8005592:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800559a:	f043 0201 	orr.w	r2, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2204      	movs	r2, #4
 80055a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f86f 	bl	8005698 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d023      	beq.n	800560c <HAL_LTDC_IRQHandler+0xbc>
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01e      	beq.n	800560c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0202 	bic.w	r2, r2, #2
 80055dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2202      	movs	r2, #2
 80055e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80055ec:	f043 0202 	orr.w	r2, r3, #2
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2204      	movs	r2, #4
 80055fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f846 	bl	8005698 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d01b      	beq.n	800564e <HAL_LTDC_IRQHandler+0xfe>
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d016      	beq.n	800564e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0201 	bic.w	r2, r2, #1
 800562e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2201      	movs	r2, #1
 8005636:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f016 ff63 	bl	801c514 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f003 0308 	and.w	r3, r3, #8
 8005654:	2b00      	cmp	r3, #0
 8005656:	d01b      	beq.n	8005690 <HAL_LTDC_IRQHandler+0x140>
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b00      	cmp	r3, #0
 8005660:	d016      	beq.n	8005690 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 0208 	bic.w	r2, r2, #8
 8005670:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2208      	movs	r2, #8
 8005678:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f80e 	bl	80056ac <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005690:	bf00      	nop
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80056c0:	b5b0      	push	{r4, r5, r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d101      	bne.n	80056da <HAL_LTDC_ConfigLayer+0x1a>
 80056d6:	2302      	movs	r3, #2
 80056d8:	e02c      	b.n	8005734 <HAL_LTDC_ConfigLayer+0x74>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2202      	movs	r2, #2
 80056e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2134      	movs	r1, #52	; 0x34
 80056f0:	fb01 f303 	mul.w	r3, r1, r3
 80056f4:	4413      	add	r3, r2
 80056f6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	4614      	mov	r4, r2
 80056fe:	461d      	mov	r5, r3
 8005700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800570a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800570c:	682b      	ldr	r3, [r5, #0]
 800570e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f8cf 	bl	80058b8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2201      	movs	r2, #1
 8005720:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bdb0      	pop	{r4, r5, r7, pc}

0800573c <HAL_LTDC_SetPitch>:
  * @param  LinePitchInPixels  New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
  * @param  LayerIdx           LTDC layer index concerned by the modification of line pitch.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
{
 800573c:	b480      	push	{r7}
 800573e:	b089      	sub	sp, #36	; 0x24
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800574e:	2b01      	cmp	r3, #1
 8005750:	d101      	bne.n	8005756 <HAL_LTDC_SetPitch+0x1a>
 8005752:	2302      	movs	r3, #2
 8005754:	e06e      	b.n	8005834 <HAL_LTDC_SetPitch+0xf8>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2202      	movs	r2, #2
 8005762:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* get LayerIdx used pixel format */
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2134      	movs	r1, #52	; 0x34
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	4413      	add	r3, r2
 8005772:	3348      	adds	r3, #72	; 0x48
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	61bb      	str	r3, [r7, #24]

  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d102      	bne.n	8005784 <HAL_LTDC_SetPitch+0x48>
  {
    tmp = 4U;
 800577e:	2304      	movs	r3, #4
 8005780:	61fb      	str	r3, [r7, #28]
 8005782:	e016      	b.n	80057b2 <HAL_LTDC_SetPitch+0x76>
  }
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d102      	bne.n	8005790 <HAL_LTDC_SetPitch+0x54>
  {
    tmp = 3U;
 800578a:	2303      	movs	r3, #3
 800578c:	61fb      	str	r3, [r7, #28]
 800578e:	e010      	b.n	80057b2 <HAL_LTDC_SetPitch+0x76>
  }
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	2b04      	cmp	r3, #4
 8005794:	d008      	beq.n	80057a8 <HAL_LTDC_SetPitch+0x6c>
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	2b02      	cmp	r3, #2
 800579a:	d005      	beq.n	80057a8 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d002      	beq.n	80057a8 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	2b07      	cmp	r3, #7
 80057a6:	d102      	bne.n	80057ae <HAL_LTDC_SetPitch+0x72>
           (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 80057a8:	2302      	movs	r3, #2
 80057aa:	61fb      	str	r3, [r7, #28]
 80057ac:	e001      	b.n	80057b2 <HAL_LTDC_SetPitch+0x76>
  }
  else
  {
    tmp = 1U;
 80057ae:	2301      	movs	r3, #1
 80057b0:	61fb      	str	r3, [r7, #28]
  }

  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	69fa      	ldr	r2, [r7, #28]
 80057b6:	fb02 f303 	mul.w	r3, r2, r3
 80057ba:	041b      	lsls	r3, r3, #16
 80057bc:	617b      	str	r3, [r7, #20]

  /* Clear previously set standard pitch */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	01db      	lsls	r3, r3, #7
 80057c8:	4413      	add	r3, r2
 80057ca:	3384      	adds	r3, #132	; 0x84
 80057cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4619      	mov	r1, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	01db      	lsls	r3, r3, #7
 80057d8:	440b      	add	r3, r1
 80057da:	3384      	adds	r3, #132	; 0x84
 80057dc:	4619      	mov	r1, r3
 80057de:	4b18      	ldr	r3, [pc, #96]	; (8005840 <HAL_LTDC_SetPitch+0x104>)
 80057e0:	4013      	ands	r3, r2
 80057e2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 80057e4:	4b17      	ldr	r3, [pc, #92]	; (8005844 <HAL_LTDC_SetPitch+0x108>)
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	4a16      	ldr	r2, [pc, #88]	; (8005844 <HAL_LTDC_SetPitch+0x108>)
 80057ea:	f043 0301 	orr.w	r3, r3, #1
 80057ee:	6253      	str	r3, [r2, #36]	; 0x24

  /* Set new line pitch value */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	461a      	mov	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	01db      	lsls	r3, r3, #7
 80057fa:	4413      	add	r3, r2
 80057fc:	3384      	adds	r3, #132	; 0x84
 80057fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4619      	mov	r1, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	01db      	lsls	r3, r3, #7
 800580a:	440b      	add	r3, r1
 800580c:	3384      	adds	r3, #132	; 0x84
 800580e:	4619      	mov	r1, r3
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8005816:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <HAL_LTDC_SetPitch+0x108>)
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	4a0a      	ldr	r2, [pc, #40]	; (8005844 <HAL_LTDC_SetPitch+0x108>)
 800581c:	f043 0301 	orr.w	r3, r3, #1
 8005820:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3724      	adds	r7, #36	; 0x24
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	e000ffff 	.word	0xe000ffff
 8005844:	40016800 	.word	0x40016800

08005848 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_LTDC_ProgramLineEvent+0x18>
 800585c:	2302      	movs	r3, #2
 800585e:	e023      	b.n	80058a8 <HAL_LTDC_ProgramLineEvent+0x60>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0201 	bic.w	r2, r2, #1
 800587e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005880:	4a0c      	ldr	r2, [pc, #48]	; (80058b4 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0201 	orr.w	r2, r2, #1
 8005894:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	40016800 	.word	0x40016800

080058b8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b089      	sub	sp, #36	; 0x24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	0c1b      	lsrs	r3, r3, #16
 80058d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058d4:	4413      	add	r3, r2
 80058d6:	041b      	lsls	r3, r3, #16
 80058d8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	01db      	lsls	r3, r3, #7
 80058e4:	4413      	add	r3, r2
 80058e6:	3384      	adds	r3, #132	; 0x84
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	6812      	ldr	r2, [r2, #0]
 80058ee:	4611      	mov	r1, r2
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	01d2      	lsls	r2, r2, #7
 80058f4:	440a      	add	r2, r1
 80058f6:	3284      	adds	r2, #132	; 0x84
 80058f8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80058fc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	0c1b      	lsrs	r3, r3, #16
 800590a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800590e:	4413      	add	r3, r2
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4619      	mov	r1, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	01db      	lsls	r3, r3, #7
 800591c:	440b      	add	r3, r1
 800591e:	3384      	adds	r3, #132	; 0x84
 8005920:	4619      	mov	r1, r3
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	4313      	orrs	r3, r2
 8005926:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005936:	4413      	add	r3, r2
 8005938:	041b      	lsls	r3, r3, #16
 800593a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	461a      	mov	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	01db      	lsls	r3, r3, #7
 8005946:	4413      	add	r3, r2
 8005948:	3384      	adds	r3, #132	; 0x84
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	6812      	ldr	r2, [r2, #0]
 8005950:	4611      	mov	r1, r2
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	01d2      	lsls	r2, r2, #7
 8005956:	440a      	add	r2, r1
 8005958:	3284      	adds	r2, #132	; 0x84
 800595a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800595e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800596e:	4413      	add	r3, r2
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4619      	mov	r1, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	01db      	lsls	r3, r3, #7
 800597c:	440b      	add	r3, r1
 800597e:	3384      	adds	r3, #132	; 0x84
 8005980:	4619      	mov	r1, r3
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4313      	orrs	r3, r2
 8005986:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	461a      	mov	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	01db      	lsls	r3, r3, #7
 8005992:	4413      	add	r3, r2
 8005994:	3384      	adds	r3, #132	; 0x84
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	6812      	ldr	r2, [r2, #0]
 800599c:	4611      	mov	r1, r2
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	01d2      	lsls	r2, r2, #7
 80059a2:	440a      	add	r2, r1
 80059a4:	3284      	adds	r2, #132	; 0x84
 80059a6:	f023 0307 	bic.w	r3, r3, #7
 80059aa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	461a      	mov	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	01db      	lsls	r3, r3, #7
 80059b6:	4413      	add	r3, r2
 80059b8:	3384      	adds	r3, #132	; 0x84
 80059ba:	461a      	mov	r2, r3
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80059c8:	021b      	lsls	r3, r3, #8
 80059ca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80059d2:	041b      	lsls	r3, r3, #16
 80059d4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	061b      	lsls	r3, r3, #24
 80059dc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	461a      	mov	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	01db      	lsls	r3, r3, #7
 80059e8:	4413      	add	r3, r2
 80059ea:	3384      	adds	r3, #132	; 0x84
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	461a      	mov	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	01db      	lsls	r3, r3, #7
 80059f8:	4413      	add	r3, r2
 80059fa:	3384      	adds	r3, #132	; 0x84
 80059fc:	461a      	mov	r2, r3
 80059fe:	2300      	movs	r3, #0
 8005a00:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a08:	461a      	mov	r2, r3
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	431a      	orrs	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4619      	mov	r1, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	01db      	lsls	r3, r3, #7
 8005a1c:	440b      	add	r3, r1
 8005a1e:	3384      	adds	r3, #132	; 0x84
 8005a20:	4619      	mov	r1, r3
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	01db      	lsls	r3, r3, #7
 8005a32:	4413      	add	r3, r2
 8005a34:	3384      	adds	r3, #132	; 0x84
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	6812      	ldr	r2, [r2, #0]
 8005a3c:	4611      	mov	r1, r2
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	01d2      	lsls	r2, r2, #7
 8005a42:	440a      	add	r2, r1
 8005a44:	3284      	adds	r2, #132	; 0x84
 8005a46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a4a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	461a      	mov	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	01db      	lsls	r3, r3, #7
 8005a56:	4413      	add	r3, r2
 8005a58:	3384      	adds	r3, #132	; 0x84
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	01db      	lsls	r3, r3, #7
 8005a6c:	4413      	add	r3, r2
 8005a6e:	3384      	adds	r3, #132	; 0x84
 8005a70:	69da      	ldr	r2, [r3, #28]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4619      	mov	r1, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	01db      	lsls	r3, r3, #7
 8005a7c:	440b      	add	r3, r1
 8005a7e:	3384      	adds	r3, #132	; 0x84
 8005a80:	4619      	mov	r1, r3
 8005a82:	4b58      	ldr	r3, [pc, #352]	; (8005be4 <LTDC_SetConfig+0x32c>)
 8005a84:	4013      	ands	r3, r2
 8005a86:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	69da      	ldr	r2, [r3, #28]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	68f9      	ldr	r1, [r7, #12]
 8005a92:	6809      	ldr	r1, [r1, #0]
 8005a94:	4608      	mov	r0, r1
 8005a96:	6879      	ldr	r1, [r7, #4]
 8005a98:	01c9      	lsls	r1, r1, #7
 8005a9a:	4401      	add	r1, r0
 8005a9c:	3184      	adds	r1, #132	; 0x84
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	01db      	lsls	r3, r3, #7
 8005aac:	4413      	add	r3, r2
 8005aae:	3384      	adds	r3, #132	; 0x84
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	01db      	lsls	r3, r3, #7
 8005abc:	4413      	add	r3, r2
 8005abe:	3384      	adds	r3, #132	; 0x84
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	01db      	lsls	r3, r3, #7
 8005ad0:	4413      	add	r3, r2
 8005ad2:	3384      	adds	r3, #132	; 0x84
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d102      	bne.n	8005aea <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005ae4:	2304      	movs	r3, #4
 8005ae6:	61fb      	str	r3, [r7, #28]
 8005ae8:	e01b      	b.n	8005b22 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d102      	bne.n	8005af8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005af2:	2303      	movs	r3, #3
 8005af4:	61fb      	str	r3, [r7, #28]
 8005af6:	e014      	b.n	8005b22 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d00b      	beq.n	8005b18 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d007      	beq.n	8005b18 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005b0c:	2b03      	cmp	r3, #3
 8005b0e:	d003      	beq.n	8005b18 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b14:	2b07      	cmp	r3, #7
 8005b16:	d102      	bne.n	8005b1e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005b18:	2302      	movs	r3, #2
 8005b1a:	61fb      	str	r3, [r7, #28]
 8005b1c:	e001      	b.n	8005b22 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	01db      	lsls	r3, r3, #7
 8005b2c:	4413      	add	r3, r2
 8005b2e:	3384      	adds	r3, #132	; 0x84
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	6812      	ldr	r2, [r2, #0]
 8005b36:	4611      	mov	r1, r2
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	01d2      	lsls	r2, r2, #7
 8005b3c:	440a      	add	r2, r1
 8005b3e:	3284      	adds	r2, #132	; 0x84
 8005b40:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005b44:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	fb02 f303 	mul.w	r3, r2, r3
 8005b50:	041a      	lsls	r2, r3, #16
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	6859      	ldr	r1, [r3, #4]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	1acb      	subs	r3, r1, r3
 8005b5c:	69f9      	ldr	r1, [r7, #28]
 8005b5e:	fb01 f303 	mul.w	r3, r1, r3
 8005b62:	3303      	adds	r3, #3
 8005b64:	68f9      	ldr	r1, [r7, #12]
 8005b66:	6809      	ldr	r1, [r1, #0]
 8005b68:	4608      	mov	r0, r1
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	01c9      	lsls	r1, r1, #7
 8005b6e:	4401      	add	r1, r0
 8005b70:	3184      	adds	r1, #132	; 0x84
 8005b72:	4313      	orrs	r3, r2
 8005b74:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	01db      	lsls	r3, r3, #7
 8005b80:	4413      	add	r3, r2
 8005b82:	3384      	adds	r3, #132	; 0x84
 8005b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	01db      	lsls	r3, r3, #7
 8005b90:	440b      	add	r3, r1
 8005b92:	3384      	adds	r3, #132	; 0x84
 8005b94:	4619      	mov	r1, r3
 8005b96:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <LTDC_SetConfig+0x330>)
 8005b98:	4013      	ands	r3, r2
 8005b9a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	01db      	lsls	r3, r3, #7
 8005ba6:	4413      	add	r3, r2
 8005ba8:	3384      	adds	r3, #132	; 0x84
 8005baa:	461a      	mov	r2, r3
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	01db      	lsls	r3, r3, #7
 8005bbc:	4413      	add	r3, r2
 8005bbe:	3384      	adds	r3, #132	; 0x84
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	01d2      	lsls	r2, r2, #7
 8005bcc:	440a      	add	r2, r1
 8005bce:	3284      	adds	r2, #132	; 0x84
 8005bd0:	f043 0301 	orr.w	r3, r3, #1
 8005bd4:	6013      	str	r3, [r2, #0]
}
 8005bd6:	bf00      	nop
 8005bd8:	3724      	adds	r7, #36	; 0x24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	fffff8f8 	.word	0xfffff8f8
 8005be8:	fffff800 	.word	0xfffff800

08005bec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bf0:	4b05      	ldr	r3, [pc, #20]	; (8005c08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a04      	ldr	r2, [pc, #16]	; (8005c08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bfa:	6013      	str	r3, [r2, #0]
}
 8005bfc:	bf00      	nop
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	40007000 	.word	0x40007000

08005c0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005c12:	2300      	movs	r3, #0
 8005c14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005c16:	4b23      	ldr	r3, [pc, #140]	; (8005ca4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	4a22      	ldr	r2, [pc, #136]	; (8005ca4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c20:	6413      	str	r3, [r2, #64]	; 0x40
 8005c22:	4b20      	ldr	r3, [pc, #128]	; (8005ca4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005c2e:	4b1e      	ldr	r3, [pc, #120]	; (8005ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a1d      	ldr	r2, [pc, #116]	; (8005ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c38:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c3a:	f7fb fd4f 	bl	80016dc <HAL_GetTick>
 8005c3e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c40:	e009      	b.n	8005c56 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c42:	f7fb fd4b 	bl	80016dc <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c50:	d901      	bls.n	8005c56 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e022      	b.n	8005c9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c56:	4b14      	ldr	r3, [pc, #80]	; (8005ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c62:	d1ee      	bne.n	8005c42 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005c64:	4b10      	ldr	r3, [pc, #64]	; (8005ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a0f      	ldr	r2, [pc, #60]	; (8005ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c70:	f7fb fd34 	bl	80016dc <HAL_GetTick>
 8005c74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c76:	e009      	b.n	8005c8c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c78:	f7fb fd30 	bl	80016dc <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c86:	d901      	bls.n	8005c8c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e007      	b.n	8005c9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c8c:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c98:	d1ee      	bne.n	8005c78 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	40007000 	.word	0x40007000

08005cac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af02      	add	r7, sp, #8
 8005cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005cb8:	f7fb fd10 	bl	80016dc <HAL_GetTick>
 8005cbc:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e073      	b.n	8005db0 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d101      	bne.n	8005cd8 <HAL_QSPI_Init+0x2c>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e06b      	b.n	8005db0 <HAL_QSPI_Init+0x104>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10b      	bne.n	8005d04 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f00c fccd 	bl	8012694 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8005cfa:	f241 3188 	movw	r1, #5000	; 0x1388
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f85e 	bl	8005dc0 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	021a      	lsls	r2, r3, #8
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2200      	movs	r2, #0
 8005d28:	2120      	movs	r1, #32
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f856 	bl	8005ddc <QSPI_WaitFlagStateUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d135      	bne.n	8005da6 <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	4b1d      	ldr	r3, [pc, #116]	; (8005db8 <HAL_QSPI_Init+0x10c>)
 8005d42:	4013      	ands	r3, r2
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6852      	ldr	r2, [r2, #4]
 8005d48:	0611      	lsls	r1, r2, #24
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	68d2      	ldr	r2, [r2, #12]
 8005d4e:	4311      	orrs	r1, r2
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	69d2      	ldr	r2, [r2, #28]
 8005d54:	4311      	orrs	r1, r2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6a12      	ldr	r2, [r2, #32]
 8005d5a:	4311      	orrs	r1, r2
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6812      	ldr	r2, [r2, #0]
 8005d60:	430b      	orrs	r3, r1
 8005d62:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	4b14      	ldr	r3, [pc, #80]	; (8005dbc <HAL_QSPI_Init+0x110>)
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6912      	ldr	r2, [r2, #16]
 8005d72:	0411      	lsls	r1, r2, #16
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6952      	ldr	r2, [r2, #20]
 8005d78:	4311      	orrs	r1, r2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6992      	ldr	r2, [r2, #24]
 8005d7e:	4311      	orrs	r1, r2
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6812      	ldr	r2, [r2, #0]
 8005d84:	430b      	orrs	r3, r1
 8005d86:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	00ffff2f 	.word	0x00ffff2f
 8005dbc:	ffe0f8fe 	.word	0xffe0f8fe

08005dc0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	603b      	str	r3, [r7, #0]
 8005de8:	4613      	mov	r3, r2
 8005dea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005dec:	e01a      	b.n	8005e24 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df4:	d016      	beq.n	8005e24 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d007      	beq.n	8005e0c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005dfc:	f7fb fc6e 	bl	80016dc <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d20b      	bcs.n	8005e24 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2204      	movs	r2, #4
 8005e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e18:	f043 0201 	orr.w	r2, r3, #1
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e00e      	b.n	8005e42 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689a      	ldr	r2, [r3, #8]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	bf14      	ite	ne
 8005e32:	2301      	movne	r3, #1
 8005e34:	2300      	moveq	r3, #0
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	461a      	mov	r2, r3
 8005e3a:	79fb      	ldrb	r3, [r7, #7]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d1d6      	bne.n	8005dee <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8005e54:	2300      	movs	r3, #0
 8005e56:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e25c      	b.n	800631c <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 8087 	beq.w	8005f7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e70:	4b96      	ldr	r3, [pc, #600]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f003 030c 	and.w	r3, r3, #12
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d00c      	beq.n	8005e96 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e7c:	4b93      	ldr	r3, [pc, #588]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f003 030c 	and.w	r3, r3, #12
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d112      	bne.n	8005eae <HAL_RCC_OscConfig+0x62>
 8005e88:	4b90      	ldr	r3, [pc, #576]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e94:	d10b      	bne.n	8005eae <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e96:	4b8d      	ldr	r3, [pc, #564]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d06c      	beq.n	8005f7c <HAL_RCC_OscConfig+0x130>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d168      	bne.n	8005f7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e236      	b.n	800631c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb6:	d106      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x7a>
 8005eb8:	4b84      	ldr	r3, [pc, #528]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a83      	ldr	r2, [pc, #524]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	e02e      	b.n	8005f24 <HAL_RCC_OscConfig+0xd8>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10c      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x9c>
 8005ece:	4b7f      	ldr	r3, [pc, #508]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a7e      	ldr	r2, [pc, #504]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	4b7c      	ldr	r3, [pc, #496]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a7b      	ldr	r2, [pc, #492]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005ee0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	e01d      	b.n	8005f24 <HAL_RCC_OscConfig+0xd8>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ef0:	d10c      	bne.n	8005f0c <HAL_RCC_OscConfig+0xc0>
 8005ef2:	4b76      	ldr	r3, [pc, #472]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a75      	ldr	r2, [pc, #468]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	4b73      	ldr	r3, [pc, #460]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a72      	ldr	r2, [pc, #456]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	e00b      	b.n	8005f24 <HAL_RCC_OscConfig+0xd8>
 8005f0c:	4b6f      	ldr	r3, [pc, #444]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a6e      	ldr	r2, [pc, #440]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	4b6c      	ldr	r3, [pc, #432]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a6b      	ldr	r2, [pc, #428]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d013      	beq.n	8005f54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2c:	f7fb fbd6 	bl	80016dc <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f34:	f7fb fbd2 	bl	80016dc <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b64      	cmp	r3, #100	; 0x64
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e1ea      	b.n	800631c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f46:	4b61      	ldr	r3, [pc, #388]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0f0      	beq.n	8005f34 <HAL_RCC_OscConfig+0xe8>
 8005f52:	e014      	b.n	8005f7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f54:	f7fb fbc2 	bl	80016dc <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f5c:	f7fb fbbe 	bl	80016dc <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b64      	cmp	r3, #100	; 0x64
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e1d6      	b.n	800631c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f6e:	4b57      	ldr	r3, [pc, #348]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1f0      	bne.n	8005f5c <HAL_RCC_OscConfig+0x110>
 8005f7a:	e000      	b.n	8005f7e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d069      	beq.n	800605e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f8a:	4b50      	ldr	r3, [pc, #320]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f003 030c 	and.w	r3, r3, #12
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00b      	beq.n	8005fae <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f96:	4b4d      	ldr	r3, [pc, #308]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f003 030c 	and.w	r3, r3, #12
 8005f9e:	2b08      	cmp	r3, #8
 8005fa0:	d11c      	bne.n	8005fdc <HAL_RCC_OscConfig+0x190>
 8005fa2:	4b4a      	ldr	r3, [pc, #296]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d116      	bne.n	8005fdc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fae:	4b47      	ldr	r3, [pc, #284]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d005      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x17a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d001      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e1aa      	b.n	800631c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc6:	4b41      	ldr	r3, [pc, #260]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	493d      	ldr	r1, [pc, #244]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fda:	e040      	b.n	800605e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d023      	beq.n	800602c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fe4:	4b39      	ldr	r3, [pc, #228]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a38      	ldr	r2, [pc, #224]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff0:	f7fb fb74 	bl	80016dc <HAL_GetTick>
 8005ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ff6:	e008      	b.n	800600a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ff8:	f7fb fb70 	bl	80016dc <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	2b02      	cmp	r3, #2
 8006004:	d901      	bls.n	800600a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e188      	b.n	800631c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800600a:	4b30      	ldr	r3, [pc, #192]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0f0      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006016:	4b2d      	ldr	r3, [pc, #180]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	4929      	ldr	r1, [pc, #164]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8006026:	4313      	orrs	r3, r2
 8006028:	600b      	str	r3, [r1, #0]
 800602a:	e018      	b.n	800605e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800602c:	4b27      	ldr	r3, [pc, #156]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a26      	ldr	r2, [pc, #152]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8006032:	f023 0301 	bic.w	r3, r3, #1
 8006036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006038:	f7fb fb50 	bl	80016dc <HAL_GetTick>
 800603c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800603e:	e008      	b.n	8006052 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006040:	f7fb fb4c 	bl	80016dc <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b02      	cmp	r3, #2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e164      	b.n	800631c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006052:	4b1e      	ldr	r3, [pc, #120]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1f0      	bne.n	8006040 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0308 	and.w	r3, r3, #8
 8006066:	2b00      	cmp	r3, #0
 8006068:	d038      	beq.n	80060dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d019      	beq.n	80060a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006072:	4b16      	ldr	r3, [pc, #88]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8006074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006076:	4a15      	ldr	r2, [pc, #84]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 8006078:	f043 0301 	orr.w	r3, r3, #1
 800607c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800607e:	f7fb fb2d 	bl	80016dc <HAL_GetTick>
 8006082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006084:	e008      	b.n	8006098 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006086:	f7fb fb29 	bl	80016dc <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d901      	bls.n	8006098 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e141      	b.n	800631c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006098:	4b0c      	ldr	r3, [pc, #48]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 800609a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0f0      	beq.n	8006086 <HAL_RCC_OscConfig+0x23a>
 80060a4:	e01a      	b.n	80060dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060a6:	4b09      	ldr	r3, [pc, #36]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 80060a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060aa:	4a08      	ldr	r2, [pc, #32]	; (80060cc <HAL_RCC_OscConfig+0x280>)
 80060ac:	f023 0301 	bic.w	r3, r3, #1
 80060b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b2:	f7fb fb13 	bl	80016dc <HAL_GetTick>
 80060b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060b8:	e00a      	b.n	80060d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060ba:	f7fb fb0f 	bl	80016dc <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d903      	bls.n	80060d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e127      	b.n	800631c <HAL_RCC_OscConfig+0x4d0>
 80060cc:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060d0:	4b94      	ldr	r3, [pc, #592]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 80060d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1ee      	bne.n	80060ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 80a4 	beq.w	8006232 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060ea:	4b8e      	ldr	r3, [pc, #568]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10d      	bne.n	8006112 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80060f6:	4b8b      	ldr	r3, [pc, #556]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	4a8a      	ldr	r2, [pc, #552]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 80060fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006100:	6413      	str	r3, [r2, #64]	; 0x40
 8006102:	4b88      	ldr	r3, [pc, #544]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800610a:	60fb      	str	r3, [r7, #12]
 800610c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800610e:	2301      	movs	r3, #1
 8006110:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006112:	4b85      	ldr	r3, [pc, #532]	; (8006328 <HAL_RCC_OscConfig+0x4dc>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611a:	2b00      	cmp	r3, #0
 800611c:	d118      	bne.n	8006150 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800611e:	4b82      	ldr	r3, [pc, #520]	; (8006328 <HAL_RCC_OscConfig+0x4dc>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a81      	ldr	r2, [pc, #516]	; (8006328 <HAL_RCC_OscConfig+0x4dc>)
 8006124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800612a:	f7fb fad7 	bl	80016dc <HAL_GetTick>
 800612e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006130:	e008      	b.n	8006144 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006132:	f7fb fad3 	bl	80016dc <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b64      	cmp	r3, #100	; 0x64
 800613e:	d901      	bls.n	8006144 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e0eb      	b.n	800631c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006144:	4b78      	ldr	r3, [pc, #480]	; (8006328 <HAL_RCC_OscConfig+0x4dc>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0f0      	beq.n	8006132 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d106      	bne.n	8006166 <HAL_RCC_OscConfig+0x31a>
 8006158:	4b72      	ldr	r3, [pc, #456]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 800615a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615c:	4a71      	ldr	r2, [pc, #452]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 800615e:	f043 0301 	orr.w	r3, r3, #1
 8006162:	6713      	str	r3, [r2, #112]	; 0x70
 8006164:	e02d      	b.n	80061c2 <HAL_RCC_OscConfig+0x376>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10c      	bne.n	8006188 <HAL_RCC_OscConfig+0x33c>
 800616e:	4b6d      	ldr	r3, [pc, #436]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 8006170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006172:	4a6c      	ldr	r2, [pc, #432]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 8006174:	f023 0301 	bic.w	r3, r3, #1
 8006178:	6713      	str	r3, [r2, #112]	; 0x70
 800617a:	4b6a      	ldr	r3, [pc, #424]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 800617c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617e:	4a69      	ldr	r2, [pc, #420]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 8006180:	f023 0304 	bic.w	r3, r3, #4
 8006184:	6713      	str	r3, [r2, #112]	; 0x70
 8006186:	e01c      	b.n	80061c2 <HAL_RCC_OscConfig+0x376>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	2b05      	cmp	r3, #5
 800618e:	d10c      	bne.n	80061aa <HAL_RCC_OscConfig+0x35e>
 8006190:	4b64      	ldr	r3, [pc, #400]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 8006192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006194:	4a63      	ldr	r2, [pc, #396]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 8006196:	f043 0304 	orr.w	r3, r3, #4
 800619a:	6713      	str	r3, [r2, #112]	; 0x70
 800619c:	4b61      	ldr	r3, [pc, #388]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 800619e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a0:	4a60      	ldr	r2, [pc, #384]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 80061a2:	f043 0301 	orr.w	r3, r3, #1
 80061a6:	6713      	str	r3, [r2, #112]	; 0x70
 80061a8:	e00b      	b.n	80061c2 <HAL_RCC_OscConfig+0x376>
 80061aa:	4b5e      	ldr	r3, [pc, #376]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 80061ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ae:	4a5d      	ldr	r2, [pc, #372]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 80061b0:	f023 0301 	bic.w	r3, r3, #1
 80061b4:	6713      	str	r3, [r2, #112]	; 0x70
 80061b6:	4b5b      	ldr	r3, [pc, #364]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 80061b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ba:	4a5a      	ldr	r2, [pc, #360]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 80061bc:	f023 0304 	bic.w	r3, r3, #4
 80061c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d015      	beq.n	80061f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ca:	f7fb fa87 	bl	80016dc <HAL_GetTick>
 80061ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061d0:	e00a      	b.n	80061e8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061d2:	f7fb fa83 	bl	80016dc <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d901      	bls.n	80061e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e099      	b.n	800631c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061e8:	4b4e      	ldr	r3, [pc, #312]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 80061ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0ee      	beq.n	80061d2 <HAL_RCC_OscConfig+0x386>
 80061f4:	e014      	b.n	8006220 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f6:	f7fb fa71 	bl	80016dc <HAL_GetTick>
 80061fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061fc:	e00a      	b.n	8006214 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061fe:	f7fb fa6d 	bl	80016dc <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	f241 3288 	movw	r2, #5000	; 0x1388
 800620c:	4293      	cmp	r3, r2
 800620e:	d901      	bls.n	8006214 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e083      	b.n	800631c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006214:	4b43      	ldr	r3, [pc, #268]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 8006216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1ee      	bne.n	80061fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006220:	7dfb      	ldrb	r3, [r7, #23]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d105      	bne.n	8006232 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006226:	4b3f      	ldr	r3, [pc, #252]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 8006228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622a:	4a3e      	ldr	r2, [pc, #248]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 800622c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006230:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d06f      	beq.n	800631a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800623a:	4b3a      	ldr	r3, [pc, #232]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f003 030c 	and.w	r3, r3, #12
 8006242:	2b08      	cmp	r3, #8
 8006244:	d067      	beq.n	8006316 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	2b02      	cmp	r3, #2
 800624c:	d149      	bne.n	80062e2 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800624e:	4b35      	ldr	r3, [pc, #212]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a34      	ldr	r2, [pc, #208]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 8006254:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800625a:	f7fb fa3f 	bl	80016dc <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006260:	e008      	b.n	8006274 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006262:	f7fb fa3b 	bl	80016dc <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d901      	bls.n	8006274 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e053      	b.n	800631c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006274:	4b2b      	ldr	r3, [pc, #172]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1f0      	bne.n	8006262 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	69da      	ldr	r2, [r3, #28]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	431a      	orrs	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	019b      	lsls	r3, r3, #6
 8006290:	431a      	orrs	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006296:	085b      	lsrs	r3, r3, #1
 8006298:	3b01      	subs	r3, #1
 800629a:	041b      	lsls	r3, r3, #16
 800629c:	431a      	orrs	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a2:	061b      	lsls	r3, r3, #24
 80062a4:	4313      	orrs	r3, r2
 80062a6:	4a1f      	ldr	r2, [pc, #124]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 80062a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062ac:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062ae:	4b1d      	ldr	r3, [pc, #116]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a1c      	ldr	r2, [pc, #112]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 80062b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ba:	f7fb fa0f 	bl	80016dc <HAL_GetTick>
 80062be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062c0:	e008      	b.n	80062d4 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062c2:	f7fb fa0b 	bl	80016dc <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d901      	bls.n	80062d4 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e023      	b.n	800631c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062d4:	4b13      	ldr	r3, [pc, #76]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d0f0      	beq.n	80062c2 <HAL_RCC_OscConfig+0x476>
 80062e0:	e01b      	b.n	800631a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062e2:	4b10      	ldr	r3, [pc, #64]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a0f      	ldr	r2, [pc, #60]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 80062e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ee:	f7fb f9f5 	bl	80016dc <HAL_GetTick>
 80062f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062f4:	e008      	b.n	8006308 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062f6:	f7fb f9f1 	bl	80016dc <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e009      	b.n	800631c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006308:	4b06      	ldr	r3, [pc, #24]	; (8006324 <HAL_RCC_OscConfig+0x4d8>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1f0      	bne.n	80062f6 <HAL_RCC_OscConfig+0x4aa>
 8006314:	e001      	b.n	800631a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e000      	b.n	800631c <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	40023800 	.word	0x40023800
 8006328:	40007000 	.word	0x40007000

0800632c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006336:	2300      	movs	r3, #0
 8006338:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e0ce      	b.n	80064e2 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006344:	4b69      	ldr	r3, [pc, #420]	; (80064ec <HAL_RCC_ClockConfig+0x1c0>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 030f 	and.w	r3, r3, #15
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	429a      	cmp	r2, r3
 8006350:	d910      	bls.n	8006374 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006352:	4b66      	ldr	r3, [pc, #408]	; (80064ec <HAL_RCC_ClockConfig+0x1c0>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f023 020f 	bic.w	r2, r3, #15
 800635a:	4964      	ldr	r1, [pc, #400]	; (80064ec <HAL_RCC_ClockConfig+0x1c0>)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	4313      	orrs	r3, r2
 8006360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006362:	4b62      	ldr	r3, [pc, #392]	; (80064ec <HAL_RCC_ClockConfig+0x1c0>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 030f 	and.w	r3, r3, #15
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	429a      	cmp	r2, r3
 800636e:	d001      	beq.n	8006374 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e0b6      	b.n	80064e2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d020      	beq.n	80063c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800638c:	4b58      	ldr	r3, [pc, #352]	; (80064f0 <HAL_RCC_ClockConfig+0x1c4>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	4a57      	ldr	r2, [pc, #348]	; (80064f0 <HAL_RCC_ClockConfig+0x1c4>)
 8006392:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006396:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0308 	and.w	r3, r3, #8
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d005      	beq.n	80063b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063a4:	4b52      	ldr	r3, [pc, #328]	; (80064f0 <HAL_RCC_ClockConfig+0x1c4>)
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	4a51      	ldr	r2, [pc, #324]	; (80064f0 <HAL_RCC_ClockConfig+0x1c4>)
 80063aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063b0:	4b4f      	ldr	r3, [pc, #316]	; (80064f0 <HAL_RCC_ClockConfig+0x1c4>)
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	494c      	ldr	r1, [pc, #304]	; (80064f0 <HAL_RCC_ClockConfig+0x1c4>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d040      	beq.n	8006450 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d107      	bne.n	80063e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063d6:	4b46      	ldr	r3, [pc, #280]	; (80064f0 <HAL_RCC_ClockConfig+0x1c4>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d115      	bne.n	800640e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e07d      	b.n	80064e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d107      	bne.n	80063fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ee:	4b40      	ldr	r3, [pc, #256]	; (80064f0 <HAL_RCC_ClockConfig+0x1c4>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d109      	bne.n	800640e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e071      	b.n	80064e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063fe:	4b3c      	ldr	r3, [pc, #240]	; (80064f0 <HAL_RCC_ClockConfig+0x1c4>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e069      	b.n	80064e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800640e:	4b38      	ldr	r3, [pc, #224]	; (80064f0 <HAL_RCC_ClockConfig+0x1c4>)
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f023 0203 	bic.w	r2, r3, #3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	4935      	ldr	r1, [pc, #212]	; (80064f0 <HAL_RCC_ClockConfig+0x1c4>)
 800641c:	4313      	orrs	r3, r2
 800641e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006420:	f7fb f95c 	bl	80016dc <HAL_GetTick>
 8006424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006426:	e00a      	b.n	800643e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006428:	f7fb f958 	bl	80016dc <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	f241 3288 	movw	r2, #5000	; 0x1388
 8006436:	4293      	cmp	r3, r2
 8006438:	d901      	bls.n	800643e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e051      	b.n	80064e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800643e:	4b2c      	ldr	r3, [pc, #176]	; (80064f0 <HAL_RCC_ClockConfig+0x1c4>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 020c 	and.w	r2, r3, #12
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	429a      	cmp	r2, r3
 800644e:	d1eb      	bne.n	8006428 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006450:	4b26      	ldr	r3, [pc, #152]	; (80064ec <HAL_RCC_ClockConfig+0x1c0>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 030f 	and.w	r3, r3, #15
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	429a      	cmp	r2, r3
 800645c:	d210      	bcs.n	8006480 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800645e:	4b23      	ldr	r3, [pc, #140]	; (80064ec <HAL_RCC_ClockConfig+0x1c0>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f023 020f 	bic.w	r2, r3, #15
 8006466:	4921      	ldr	r1, [pc, #132]	; (80064ec <HAL_RCC_ClockConfig+0x1c0>)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	4313      	orrs	r3, r2
 800646c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800646e:	4b1f      	ldr	r3, [pc, #124]	; (80064ec <HAL_RCC_ClockConfig+0x1c0>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 030f 	and.w	r3, r3, #15
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	429a      	cmp	r2, r3
 800647a:	d001      	beq.n	8006480 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e030      	b.n	80064e2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b00      	cmp	r3, #0
 800648a:	d008      	beq.n	800649e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800648c:	4b18      	ldr	r3, [pc, #96]	; (80064f0 <HAL_RCC_ClockConfig+0x1c4>)
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	4915      	ldr	r1, [pc, #84]	; (80064f0 <HAL_RCC_ClockConfig+0x1c4>)
 800649a:	4313      	orrs	r3, r2
 800649c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0308 	and.w	r3, r3, #8
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d009      	beq.n	80064be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80064aa:	4b11      	ldr	r3, [pc, #68]	; (80064f0 <HAL_RCC_ClockConfig+0x1c4>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	490d      	ldr	r1, [pc, #52]	; (80064f0 <HAL_RCC_ClockConfig+0x1c4>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064be:	f000 f81d 	bl	80064fc <HAL_RCC_GetSysClockFreq>
 80064c2:	4601      	mov	r1, r0
 80064c4:	4b0a      	ldr	r3, [pc, #40]	; (80064f0 <HAL_RCC_ClockConfig+0x1c4>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	091b      	lsrs	r3, r3, #4
 80064ca:	f003 030f 	and.w	r3, r3, #15
 80064ce:	4a09      	ldr	r2, [pc, #36]	; (80064f4 <HAL_RCC_ClockConfig+0x1c8>)
 80064d0:	5cd3      	ldrb	r3, [r2, r3]
 80064d2:	fa21 f303 	lsr.w	r3, r1, r3
 80064d6:	4a08      	ldr	r2, [pc, #32]	; (80064f8 <HAL_RCC_ClockConfig+0x1cc>)
 80064d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80064da:	2000      	movs	r0, #0
 80064dc:	f00c fd24 	bl	8012f28 <HAL_InitTick>

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	40023c00 	.word	0x40023c00
 80064f0:	40023800 	.word	0x40023800
 80064f4:	08023214 	.word	0x08023214
 80064f8:	20000034 	.word	0x20000034

080064fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	607b      	str	r3, [r7, #4]
 8006506:	2300      	movs	r3, #0
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	2300      	movs	r3, #0
 800650c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800650e:	2300      	movs	r3, #0
 8006510:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006512:	4b50      	ldr	r3, [pc, #320]	; (8006654 <HAL_RCC_GetSysClockFreq+0x158>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 030c 	and.w	r3, r3, #12
 800651a:	2b04      	cmp	r3, #4
 800651c:	d007      	beq.n	800652e <HAL_RCC_GetSysClockFreq+0x32>
 800651e:	2b08      	cmp	r3, #8
 8006520:	d008      	beq.n	8006534 <HAL_RCC_GetSysClockFreq+0x38>
 8006522:	2b00      	cmp	r3, #0
 8006524:	f040 808d 	bne.w	8006642 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006528:	4b4b      	ldr	r3, [pc, #300]	; (8006658 <HAL_RCC_GetSysClockFreq+0x15c>)
 800652a:	60bb      	str	r3, [r7, #8]
       break;
 800652c:	e08c      	b.n	8006648 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800652e:	4b4b      	ldr	r3, [pc, #300]	; (800665c <HAL_RCC_GetSysClockFreq+0x160>)
 8006530:	60bb      	str	r3, [r7, #8]
      break;
 8006532:	e089      	b.n	8006648 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006534:	4b47      	ldr	r3, [pc, #284]	; (8006654 <HAL_RCC_GetSysClockFreq+0x158>)
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800653c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800653e:	4b45      	ldr	r3, [pc, #276]	; (8006654 <HAL_RCC_GetSysClockFreq+0x158>)
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d023      	beq.n	8006592 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800654a:	4b42      	ldr	r3, [pc, #264]	; (8006654 <HAL_RCC_GetSysClockFreq+0x158>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	099b      	lsrs	r3, r3, #6
 8006550:	f04f 0400 	mov.w	r4, #0
 8006554:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006558:	f04f 0200 	mov.w	r2, #0
 800655c:	ea03 0501 	and.w	r5, r3, r1
 8006560:	ea04 0602 	and.w	r6, r4, r2
 8006564:	4a3d      	ldr	r2, [pc, #244]	; (800665c <HAL_RCC_GetSysClockFreq+0x160>)
 8006566:	fb02 f106 	mul.w	r1, r2, r6
 800656a:	2200      	movs	r2, #0
 800656c:	fb02 f205 	mul.w	r2, r2, r5
 8006570:	440a      	add	r2, r1
 8006572:	493a      	ldr	r1, [pc, #232]	; (800665c <HAL_RCC_GetSysClockFreq+0x160>)
 8006574:	fba5 0101 	umull	r0, r1, r5, r1
 8006578:	1853      	adds	r3, r2, r1
 800657a:	4619      	mov	r1, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f04f 0400 	mov.w	r4, #0
 8006582:	461a      	mov	r2, r3
 8006584:	4623      	mov	r3, r4
 8006586:	f7f9 fe93 	bl	80002b0 <__aeabi_uldivmod>
 800658a:	4603      	mov	r3, r0
 800658c:	460c      	mov	r4, r1
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	e049      	b.n	8006626 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006592:	4b30      	ldr	r3, [pc, #192]	; (8006654 <HAL_RCC_GetSysClockFreq+0x158>)
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	099b      	lsrs	r3, r3, #6
 8006598:	f04f 0400 	mov.w	r4, #0
 800659c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	ea03 0501 	and.w	r5, r3, r1
 80065a8:	ea04 0602 	and.w	r6, r4, r2
 80065ac:	4629      	mov	r1, r5
 80065ae:	4632      	mov	r2, r6
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	f04f 0400 	mov.w	r4, #0
 80065b8:	0154      	lsls	r4, r2, #5
 80065ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80065be:	014b      	lsls	r3, r1, #5
 80065c0:	4619      	mov	r1, r3
 80065c2:	4622      	mov	r2, r4
 80065c4:	1b49      	subs	r1, r1, r5
 80065c6:	eb62 0206 	sbc.w	r2, r2, r6
 80065ca:	f04f 0300 	mov.w	r3, #0
 80065ce:	f04f 0400 	mov.w	r4, #0
 80065d2:	0194      	lsls	r4, r2, #6
 80065d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80065d8:	018b      	lsls	r3, r1, #6
 80065da:	1a5b      	subs	r3, r3, r1
 80065dc:	eb64 0402 	sbc.w	r4, r4, r2
 80065e0:	f04f 0100 	mov.w	r1, #0
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	00e2      	lsls	r2, r4, #3
 80065ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80065ee:	00d9      	lsls	r1, r3, #3
 80065f0:	460b      	mov	r3, r1
 80065f2:	4614      	mov	r4, r2
 80065f4:	195b      	adds	r3, r3, r5
 80065f6:	eb44 0406 	adc.w	r4, r4, r6
 80065fa:	f04f 0100 	mov.w	r1, #0
 80065fe:	f04f 0200 	mov.w	r2, #0
 8006602:	02a2      	lsls	r2, r4, #10
 8006604:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006608:	0299      	lsls	r1, r3, #10
 800660a:	460b      	mov	r3, r1
 800660c:	4614      	mov	r4, r2
 800660e:	4618      	mov	r0, r3
 8006610:	4621      	mov	r1, r4
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f04f 0400 	mov.w	r4, #0
 8006618:	461a      	mov	r2, r3
 800661a:	4623      	mov	r3, r4
 800661c:	f7f9 fe48 	bl	80002b0 <__aeabi_uldivmod>
 8006620:	4603      	mov	r3, r0
 8006622:	460c      	mov	r4, r1
 8006624:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006626:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <HAL_RCC_GetSysClockFreq+0x158>)
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	0c1b      	lsrs	r3, r3, #16
 800662c:	f003 0303 	and.w	r3, r3, #3
 8006630:	3301      	adds	r3, #1
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	fbb2 f3f3 	udiv	r3, r2, r3
 800663e:	60bb      	str	r3, [r7, #8]
      break;
 8006640:	e002      	b.n	8006648 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006642:	4b05      	ldr	r3, [pc, #20]	; (8006658 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006644:	60bb      	str	r3, [r7, #8]
      break;
 8006646:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006648:	68bb      	ldr	r3, [r7, #8]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006652:	bf00      	nop
 8006654:	40023800 	.word	0x40023800
 8006658:	00f42400 	.word	0x00f42400
 800665c:	017d7840 	.word	0x017d7840

08006660 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006664:	4b03      	ldr	r3, [pc, #12]	; (8006674 <HAL_RCC_GetHCLKFreq+0x14>)
 8006666:	681b      	ldr	r3, [r3, #0]
}
 8006668:	4618      	mov	r0, r3
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	20000034 	.word	0x20000034

08006678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800667c:	f7ff fff0 	bl	8006660 <HAL_RCC_GetHCLKFreq>
 8006680:	4601      	mov	r1, r0
 8006682:	4b05      	ldr	r3, [pc, #20]	; (8006698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	0a9b      	lsrs	r3, r3, #10
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	4a03      	ldr	r2, [pc, #12]	; (800669c <HAL_RCC_GetPCLK1Freq+0x24>)
 800668e:	5cd3      	ldrb	r3, [r2, r3]
 8006690:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006694:	4618      	mov	r0, r3
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40023800 	.word	0x40023800
 800669c:	08023224 	.word	0x08023224

080066a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066a4:	f7ff ffdc 	bl	8006660 <HAL_RCC_GetHCLKFreq>
 80066a8:	4601      	mov	r1, r0
 80066aa:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	0b5b      	lsrs	r3, r3, #13
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	4a03      	ldr	r2, [pc, #12]	; (80066c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066b6:	5cd3      	ldrb	r3, [r2, r3]
 80066b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80066bc:	4618      	mov	r0, r3
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40023800 	.word	0x40023800
 80066c4:	08023224 	.word	0x08023224

080066c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	220f      	movs	r2, #15
 80066d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80066d8:	4b12      	ldr	r3, [pc, #72]	; (8006724 <HAL_RCC_GetClockConfig+0x5c>)
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f003 0203 	and.w	r2, r3, #3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80066e4:	4b0f      	ldr	r3, [pc, #60]	; (8006724 <HAL_RCC_GetClockConfig+0x5c>)
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80066f0:	4b0c      	ldr	r3, [pc, #48]	; (8006724 <HAL_RCC_GetClockConfig+0x5c>)
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80066fc:	4b09      	ldr	r3, [pc, #36]	; (8006724 <HAL_RCC_GetClockConfig+0x5c>)
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	08db      	lsrs	r3, r3, #3
 8006702:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800670a:	4b07      	ldr	r3, [pc, #28]	; (8006728 <HAL_RCC_GetClockConfig+0x60>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 020f 	and.w	r2, r3, #15
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	601a      	str	r2, [r3, #0]
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	40023800 	.word	0x40023800
 8006728:	40023c00 	.word	0x40023c00

0800672c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b088      	sub	sp, #32
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006734:	2300      	movs	r3, #0
 8006736:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006738:	2300      	movs	r3, #0
 800673a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800673c:	2300      	movs	r3, #0
 800673e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006740:	2300      	movs	r3, #0
 8006742:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006744:	2300      	movs	r3, #0
 8006746:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d012      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006754:	4b69      	ldr	r3, [pc, #420]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	4a68      	ldr	r2, [pc, #416]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800675a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800675e:	6093      	str	r3, [r2, #8]
 8006760:	4b66      	ldr	r3, [pc, #408]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006768:	4964      	ldr	r1, [pc, #400]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800676a:	4313      	orrs	r3, r2
 800676c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006776:	2301      	movs	r3, #1
 8006778:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d017      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006786:	4b5d      	ldr	r3, [pc, #372]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800678c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006794:	4959      	ldr	r1, [pc, #356]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006796:	4313      	orrs	r3, r2
 8006798:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067a4:	d101      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80067a6:	2301      	movs	r3, #1
 80067a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80067b2:	2301      	movs	r3, #1
 80067b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d017      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80067c2:	4b4e      	ldr	r3, [pc, #312]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d0:	494a      	ldr	r1, [pc, #296]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067e0:	d101      	bne.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80067e2:	2301      	movs	r3, #1
 80067e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80067ee:	2301      	movs	r3, #1
 80067f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80067fe:	2301      	movs	r3, #1
 8006800:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 808b 	beq.w	8006926 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006810:	4b3a      	ldr	r3, [pc, #232]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006814:	4a39      	ldr	r2, [pc, #228]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800681a:	6413      	str	r3, [r2, #64]	; 0x40
 800681c:	4b37      	ldr	r3, [pc, #220]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006824:	60bb      	str	r3, [r7, #8]
 8006826:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006828:	4b35      	ldr	r3, [pc, #212]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a34      	ldr	r2, [pc, #208]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800682e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006832:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006834:	f7fa ff52 	bl	80016dc <HAL_GetTick>
 8006838:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800683a:	e008      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800683c:	f7fa ff4e 	bl	80016dc <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b64      	cmp	r3, #100	; 0x64
 8006848:	d901      	bls.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e355      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800684e:	4b2c      	ldr	r3, [pc, #176]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006856:	2b00      	cmp	r3, #0
 8006858:	d0f0      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800685a:	4b28      	ldr	r3, [pc, #160]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800685c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006862:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d035      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	429a      	cmp	r2, r3
 8006876:	d02e      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006878:	4b20      	ldr	r3, [pc, #128]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800687a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006880:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006882:	4b1e      	ldr	r3, [pc, #120]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006886:	4a1d      	ldr	r2, [pc, #116]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800688c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800688e:	4b1b      	ldr	r3, [pc, #108]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006892:	4a1a      	ldr	r2, [pc, #104]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006898:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800689a:	4a18      	ldr	r2, [pc, #96]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80068a0:	4b16      	ldr	r3, [pc, #88]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d114      	bne.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ac:	f7fa ff16 	bl	80016dc <HAL_GetTick>
 80068b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068b2:	e00a      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068b4:	f7fa ff12 	bl	80016dc <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d901      	bls.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e317      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ca:	4b0c      	ldr	r3, [pc, #48]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d0ee      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068e2:	d111      	bne.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80068e4:	4b05      	ldr	r3, [pc, #20]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80068f0:	4b04      	ldr	r3, [pc, #16]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80068f2:	400b      	ands	r3, r1
 80068f4:	4901      	ldr	r1, [pc, #4]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	608b      	str	r3, [r1, #8]
 80068fa:	e00b      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80068fc:	40023800 	.word	0x40023800
 8006900:	40007000 	.word	0x40007000
 8006904:	0ffffcff 	.word	0x0ffffcff
 8006908:	4bb0      	ldr	r3, [pc, #704]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	4aaf      	ldr	r2, [pc, #700]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800690e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006912:	6093      	str	r3, [r2, #8]
 8006914:	4bad      	ldr	r3, [pc, #692]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006916:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006920:	49aa      	ldr	r1, [pc, #680]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006922:	4313      	orrs	r3, r2
 8006924:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0310 	and.w	r3, r3, #16
 800692e:	2b00      	cmp	r3, #0
 8006930:	d010      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006932:	4ba6      	ldr	r3, [pc, #664]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006938:	4aa4      	ldr	r2, [pc, #656]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800693a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800693e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006942:	4ba2      	ldr	r3, [pc, #648]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006944:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	499f      	ldr	r1, [pc, #636]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800694e:	4313      	orrs	r3, r2
 8006950:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00a      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006960:	4b9a      	ldr	r3, [pc, #616]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006966:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800696e:	4997      	ldr	r1, [pc, #604]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006970:	4313      	orrs	r3, r2
 8006972:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00a      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006982:	4b92      	ldr	r3, [pc, #584]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006988:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006990:	498e      	ldr	r1, [pc, #568]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006992:	4313      	orrs	r3, r2
 8006994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069a4:	4b89      	ldr	r3, [pc, #548]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069b2:	4986      	ldr	r1, [pc, #536]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80069c6:	4b81      	ldr	r3, [pc, #516]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d4:	497d      	ldr	r1, [pc, #500]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00a      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069e8:	4b78      	ldr	r3, [pc, #480]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ee:	f023 0203 	bic.w	r2, r3, #3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f6:	4975      	ldr	r1, [pc, #468]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a0a:	4b70      	ldr	r3, [pc, #448]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a10:	f023 020c 	bic.w	r2, r3, #12
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a18:	496c      	ldr	r1, [pc, #432]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00a      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a2c:	4b67      	ldr	r3, [pc, #412]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a3a:	4964      	ldr	r1, [pc, #400]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00a      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a4e:	4b5f      	ldr	r3, [pc, #380]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a54:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a5c:	495b      	ldr	r1, [pc, #364]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00a      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a70:	4b56      	ldr	r3, [pc, #344]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7e:	4953      	ldr	r1, [pc, #332]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006a92:	4b4e      	ldr	r3, [pc, #312]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa0:	494a      	ldr	r1, [pc, #296]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00a      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006ab4:	4b45      	ldr	r3, [pc, #276]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac2:	4942      	ldr	r1, [pc, #264]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00a      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006ad6:	4b3d      	ldr	r3, [pc, #244]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006adc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae4:	4939      	ldr	r1, [pc, #228]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00a      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006af8:	4b34      	ldr	r3, [pc, #208]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006afe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b06:	4931      	ldr	r1, [pc, #196]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d011      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006b1a:	4b2c      	ldr	r3, [pc, #176]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b20:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b28:	4928      	ldr	r1, [pc, #160]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b38:	d101      	bne.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0308 	and.w	r3, r3, #8
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00a      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b5a:	4b1c      	ldr	r3, [pc, #112]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b60:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b68:	4918      	ldr	r1, [pc, #96]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00b      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006b7c:	4b13      	ldr	r3, [pc, #76]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b82:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b8c:	490f      	ldr	r1, [pc, #60]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d005      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ba2:	f040 80d8 	bne.w	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ba6:	4b09      	ldr	r3, [pc, #36]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a08      	ldr	r2, [pc, #32]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bb2:	f7fa fd93 	bl	80016dc <HAL_GetTick>
 8006bb6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bb8:	e00a      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006bba:	f7fa fd8f 	bl	80016dc <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	2b64      	cmp	r3, #100	; 0x64
 8006bc6:	d903      	bls.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e196      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006bcc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bd0:	4b6c      	ldr	r3, [pc, #432]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1ee      	bne.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d021      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d11d      	bne.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006bf0:	4b64      	ldr	r3, [pc, #400]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bf6:	0c1b      	lsrs	r3, r3, #16
 8006bf8:	f003 0303 	and.w	r3, r3, #3
 8006bfc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006bfe:	4b61      	ldr	r3, [pc, #388]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c04:	0e1b      	lsrs	r3, r3, #24
 8006c06:	f003 030f 	and.w	r3, r3, #15
 8006c0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	019a      	lsls	r2, r3, #6
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	041b      	lsls	r3, r3, #16
 8006c16:	431a      	orrs	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	061b      	lsls	r3, r3, #24
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	071b      	lsls	r3, r3, #28
 8006c24:	4957      	ldr	r1, [pc, #348]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d004      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c40:	d00a      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d02e      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c56:	d129      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006c58:	4b4a      	ldr	r3, [pc, #296]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c5e:	0c1b      	lsrs	r3, r3, #16
 8006c60:	f003 0303 	and.w	r3, r3, #3
 8006c64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006c66:	4b47      	ldr	r3, [pc, #284]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c6c:	0f1b      	lsrs	r3, r3, #28
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	019a      	lsls	r2, r3, #6
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	041b      	lsls	r3, r3, #16
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	061b      	lsls	r3, r3, #24
 8006c86:	431a      	orrs	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	071b      	lsls	r3, r3, #28
 8006c8c:	493d      	ldr	r1, [pc, #244]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006c94:	4b3b      	ldr	r3, [pc, #236]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c9a:	f023 021f 	bic.w	r2, r3, #31
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	4937      	ldr	r1, [pc, #220]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d01d      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006cb8:	4b32      	ldr	r3, [pc, #200]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cbe:	0e1b      	lsrs	r3, r3, #24
 8006cc0:	f003 030f 	and.w	r3, r3, #15
 8006cc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006cc6:	4b2f      	ldr	r3, [pc, #188]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ccc:	0f1b      	lsrs	r3, r3, #28
 8006cce:	f003 0307 	and.w	r3, r3, #7
 8006cd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	019a      	lsls	r2, r3, #6
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	041b      	lsls	r3, r3, #16
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	061b      	lsls	r3, r3, #24
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	071b      	lsls	r3, r3, #28
 8006cec:	4925      	ldr	r1, [pc, #148]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d011      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	019a      	lsls	r2, r3, #6
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	041b      	lsls	r3, r3, #16
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	061b      	lsls	r3, r3, #24
 8006d14:	431a      	orrs	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	071b      	lsls	r3, r3, #28
 8006d1c:	4919      	ldr	r1, [pc, #100]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d24:	4b17      	ldr	r3, [pc, #92]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a16      	ldr	r2, [pc, #88]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d30:	f7fa fcd4 	bl	80016dc <HAL_GetTick>
 8006d34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d36:	e008      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006d38:	f7fa fcd0 	bl	80016dc <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b64      	cmp	r3, #100	; 0x64
 8006d44:	d901      	bls.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e0d7      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d4a:	4b0e      	ldr	r3, [pc, #56]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d0f0      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	f040 80cd 	bne.w	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006d5e:	4b09      	ldr	r3, [pc, #36]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a08      	ldr	r2, [pc, #32]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d6a:	f7fa fcb7 	bl	80016dc <HAL_GetTick>
 8006d6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d70:	e00a      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006d72:	f7fa fcb3 	bl	80016dc <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	2b64      	cmp	r3, #100	; 0x64
 8006d7e:	d903      	bls.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e0ba      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006d84:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d88:	4b5e      	ldr	r3, [pc, #376]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d94:	d0ed      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d009      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d02e      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d12a      	bne.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006dbe:	4b51      	ldr	r3, [pc, #324]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc4:	0c1b      	lsrs	r3, r3, #16
 8006dc6:	f003 0303 	and.w	r3, r3, #3
 8006dca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006dcc:	4b4d      	ldr	r3, [pc, #308]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd2:	0f1b      	lsrs	r3, r3, #28
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	019a      	lsls	r2, r3, #6
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	041b      	lsls	r3, r3, #16
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	061b      	lsls	r3, r3, #24
 8006dec:	431a      	orrs	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	071b      	lsls	r3, r3, #28
 8006df2:	4944      	ldr	r1, [pc, #272]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006dfa:	4b42      	ldr	r3, [pc, #264]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	021b      	lsls	r3, r3, #8
 8006e0c:	493d      	ldr	r1, [pc, #244]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d022      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e28:	d11d      	bne.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006e2a:	4b36      	ldr	r3, [pc, #216]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e30:	0e1b      	lsrs	r3, r3, #24
 8006e32:	f003 030f 	and.w	r3, r3, #15
 8006e36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006e38:	4b32      	ldr	r3, [pc, #200]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e3e:	0f1b      	lsrs	r3, r3, #28
 8006e40:	f003 0307 	and.w	r3, r3, #7
 8006e44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	019a      	lsls	r2, r3, #6
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	041b      	lsls	r3, r3, #16
 8006e52:	431a      	orrs	r2, r3
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	061b      	lsls	r3, r3, #24
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	071b      	lsls	r3, r3, #28
 8006e5e:	4929      	ldr	r1, [pc, #164]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0308 	and.w	r3, r3, #8
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d028      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006e72:	4b24      	ldr	r3, [pc, #144]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e78:	0e1b      	lsrs	r3, r3, #24
 8006e7a:	f003 030f 	and.w	r3, r3, #15
 8006e7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006e80:	4b20      	ldr	r3, [pc, #128]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e86:	0c1b      	lsrs	r3, r3, #16
 8006e88:	f003 0303 	and.w	r3, r3, #3
 8006e8c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	019a      	lsls	r2, r3, #6
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	041b      	lsls	r3, r3, #16
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	061b      	lsls	r3, r3, #24
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	071b      	lsls	r3, r3, #28
 8006ea6:	4917      	ldr	r1, [pc, #92]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006eae:	4b15      	ldr	r3, [pc, #84]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebc:	4911      	ldr	r1, [pc, #68]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006ec4:	4b0f      	ldr	r3, [pc, #60]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a0e      	ldr	r2, [pc, #56]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ece:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ed0:	f7fa fc04 	bl	80016dc <HAL_GetTick>
 8006ed4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006ed6:	e008      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ed8:	f7fa fc00 	bl	80016dc <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	2b64      	cmp	r3, #100	; 0x64
 8006ee4:	d901      	bls.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e007      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006eea:	4b06      	ldr	r3, [pc, #24]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ef6:	d1ef      	bne.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3720      	adds	r7, #32
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	40023800 	.word	0x40023800

08006f08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006f10:	2300      	movs	r3, #0
 8006f12:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006f14:	2300      	movs	r3, #0
 8006f16:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f26:	f040 8086 	bne.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006f2a:	4b8d      	ldr	r3, [pc, #564]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f30:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006f38:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f40:	d03e      	beq.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8006f42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f46:	d073      	beq.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d000      	beq.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006f4c:	e074      	b.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006f4e:	4b84      	ldr	r3, [pc, #528]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d108      	bne.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006f5a:	4b81      	ldr	r3, [pc, #516]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f62:	4a80      	ldr	r2, [pc, #512]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f68:	613b      	str	r3, [r7, #16]
 8006f6a:	e007      	b.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006f6c:	4b7c      	ldr	r3, [pc, #496]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f74:	4a7c      	ldr	r2, [pc, #496]	; (8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f7a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006f7c:	4b78      	ldr	r3, [pc, #480]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f82:	0e1b      	lsrs	r3, r3, #24
 8006f84:	f003 030f 	and.w	r3, r3, #15
 8006f88:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006f8a:	4b75      	ldr	r3, [pc, #468]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f90:	099b      	lsrs	r3, r3, #6
 8006f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	fb02 f203 	mul.w	r2, r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006fa4:	4b6e      	ldr	r3, [pc, #440]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006faa:	0a1b      	lsrs	r3, r3, #8
 8006fac:	f003 031f 	and.w	r3, r3, #31
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fbc:	617b      	str	r3, [r7, #20]
        break;
 8006fbe:	e03b      	b.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006fc0:	4b67      	ldr	r3, [pc, #412]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d108      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006fcc:	4b64      	ldr	r3, [pc, #400]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fd4:	4a63      	ldr	r2, [pc, #396]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fda:	613b      	str	r3, [r7, #16]
 8006fdc:	e007      	b.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006fde:	4b60      	ldr	r3, [pc, #384]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fe6:	4a60      	ldr	r2, [pc, #384]	; (8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fec:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006fee:	4b5c      	ldr	r3, [pc, #368]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ff4:	0e1b      	lsrs	r3, r3, #24
 8006ff6:	f003 030f 	and.w	r3, r3, #15
 8006ffa:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006ffc:	4b58      	ldr	r3, [pc, #352]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007002:	099b      	lsrs	r3, r3, #6
 8007004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	fb02 f203 	mul.w	r2, r2, r3
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	fbb2 f3f3 	udiv	r3, r2, r3
 8007014:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007016:	4b52      	ldr	r3, [pc, #328]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800701c:	f003 031f 	and.w	r3, r3, #31
 8007020:	3301      	adds	r3, #1
 8007022:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	fbb2 f3f3 	udiv	r3, r2, r3
 800702c:	617b      	str	r3, [r7, #20]
        break;
 800702e:	e003      	b.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007030:	4b4e      	ldr	r3, [pc, #312]	; (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007032:	617b      	str	r3, [r7, #20]
        break;
 8007034:	e000      	b.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8007036:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800703e:	f040 8086 	bne.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007042:	4b47      	ldr	r3, [pc, #284]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007048:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007050:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007058:	d03e      	beq.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800705a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800705e:	d073      	beq.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007060:	2b00      	cmp	r3, #0
 8007062:	d000      	beq.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007064:	e074      	b.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007066:	4b3e      	ldr	r3, [pc, #248]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d108      	bne.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007072:	4b3b      	ldr	r3, [pc, #236]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800707a:	4a3a      	ldr	r2, [pc, #232]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800707c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007080:	613b      	str	r3, [r7, #16]
 8007082:	e007      	b.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007084:	4b36      	ldr	r3, [pc, #216]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800708c:	4a36      	ldr	r2, [pc, #216]	; (8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800708e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007092:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007094:	4b32      	ldr	r3, [pc, #200]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800709a:	0e1b      	lsrs	r3, r3, #24
 800709c:	f003 030f 	and.w	r3, r3, #15
 80070a0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80070a2:	4b2f      	ldr	r3, [pc, #188]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80070a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a8:	099b      	lsrs	r3, r3, #6
 80070aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	fb02 f203 	mul.w	r2, r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ba:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80070bc:	4b28      	ldr	r3, [pc, #160]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80070be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070c2:	0a1b      	lsrs	r3, r3, #8
 80070c4:	f003 031f 	and.w	r3, r3, #31
 80070c8:	3301      	adds	r3, #1
 80070ca:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d4:	617b      	str	r3, [r7, #20]
        break;
 80070d6:	e03b      	b.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80070d8:	4b21      	ldr	r3, [pc, #132]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d108      	bne.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80070e4:	4b1e      	ldr	r3, [pc, #120]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070ec:	4a1d      	ldr	r2, [pc, #116]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80070ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f2:	613b      	str	r3, [r7, #16]
 80070f4:	e007      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80070f6:	4b1a      	ldr	r3, [pc, #104]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070fe:	4a1a      	ldr	r2, [pc, #104]	; (8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007100:	fbb2 f3f3 	udiv	r3, r2, r3
 8007104:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007106:	4b16      	ldr	r3, [pc, #88]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800710c:	0e1b      	lsrs	r3, r3, #24
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007114:	4b12      	ldr	r3, [pc, #72]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800711a:	099b      	lsrs	r3, r3, #6
 800711c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	fb02 f203 	mul.w	r2, r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	fbb2 f3f3 	udiv	r3, r2, r3
 800712c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800712e:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007134:	f003 031f 	and.w	r3, r3, #31
 8007138:	3301      	adds	r3, #1
 800713a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	fbb2 f3f3 	udiv	r3, r2, r3
 8007144:	617b      	str	r3, [r7, #20]
        break;
 8007146:	e003      	b.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007148:	4b08      	ldr	r3, [pc, #32]	; (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800714a:	617b      	str	r3, [r7, #20]
        break;
 800714c:	e000      	b.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800714e:	bf00      	nop

  return frequency;
 8007150:	697b      	ldr	r3, [r7, #20]
}
 8007152:	4618      	mov	r0, r3
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	40023800 	.word	0x40023800
 8007164:	00f42400 	.word	0x00f42400
 8007168:	017d7840 	.word	0x017d7840
 800716c:	00bb8000 	.word	0x00bb8000

08007170 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e01c      	b.n	80071bc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	795b      	ldrb	r3, [r3, #5]
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d105      	bne.n	8007198 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f00b fb0e 	bl	80127b4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2202      	movs	r2, #2
 800719c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f042 0204 	orr.w	r2, r2, #4
 80071ac:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e06b      	b.n	80072ae <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	7f5b      	ldrb	r3, [r3, #29]
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d105      	bne.n	80071ec <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f00b fb04 	bl	80127f4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	22ca      	movs	r2, #202	; 0xca
 80071f8:	625a      	str	r2, [r3, #36]	; 0x24
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2253      	movs	r2, #83	; 0x53
 8007200:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fb00 	bl	8007808 <RTC_EnterInitMode>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d008      	beq.n	8007220 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	22ff      	movs	r2, #255	; 0xff
 8007214:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2204      	movs	r2, #4
 800721a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e046      	b.n	80072ae <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6899      	ldr	r1, [r3, #8]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	4b23      	ldr	r3, [pc, #140]	; (80072b8 <HAL_RTC_Init+0xf4>)
 800722c:	400b      	ands	r3, r1
 800722e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6899      	ldr	r1, [r3, #8]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685a      	ldr	r2, [r3, #4]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	431a      	orrs	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	431a      	orrs	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	68d2      	ldr	r2, [r2, #12]
 8007256:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6919      	ldr	r1, [r3, #16]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	041a      	lsls	r2, r3, #16
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68da      	ldr	r2, [r3, #12]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800727a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 0208 	bic.w	r2, r2, #8
 800728a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699a      	ldr	r2, [r3, #24]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	22ff      	movs	r2, #255	; 0xff
 80072a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80072ac:	2300      	movs	r3, #0
  }
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	ff8fffbf 	.word	0xff8fffbf

080072bc <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80072bc:	b590      	push	{r4, r7, lr}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	7f1b      	ldrb	r3, [r3, #28]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d101      	bne.n	80072d8 <HAL_RTC_SetTime+0x1c>
 80072d4:	2302      	movs	r3, #2
 80072d6:	e0a8      	b.n	800742a <HAL_RTC_SetTime+0x16e>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2201      	movs	r2, #1
 80072dc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2202      	movs	r2, #2
 80072e2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d126      	bne.n	8007338 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d102      	bne.n	80072fe <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2200      	movs	r2, #0
 80072fc:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	4618      	mov	r0, r3
 8007304:	f000 faac 	bl	8007860 <RTC_ByteToBcd2>
 8007308:	4603      	mov	r3, r0
 800730a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	785b      	ldrb	r3, [r3, #1]
 8007310:	4618      	mov	r0, r3
 8007312:	f000 faa5 	bl	8007860 <RTC_ByteToBcd2>
 8007316:	4603      	mov	r3, r0
 8007318:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800731a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	789b      	ldrb	r3, [r3, #2]
 8007320:	4618      	mov	r0, r3
 8007322:	f000 fa9d 	bl	8007860 <RTC_ByteToBcd2>
 8007326:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007328:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	7b1b      	ldrb	r3, [r3, #12]
 8007330:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007332:	4313      	orrs	r3, r2
 8007334:	617b      	str	r3, [r7, #20]
 8007336:	e018      	b.n	800736a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007342:	2b00      	cmp	r3, #0
 8007344:	d102      	bne.n	800734c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2200      	movs	r2, #0
 800734a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	785b      	ldrb	r3, [r3, #1]
 8007356:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007358:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800735e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	7b1b      	ldrb	r3, [r3, #12]
 8007364:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007366:	4313      	orrs	r3, r2
 8007368:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	22ca      	movs	r2, #202	; 0xca
 8007370:	625a      	str	r2, [r3, #36]	; 0x24
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2253      	movs	r2, #83	; 0x53
 8007378:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f000 fa44 	bl	8007808 <RTC_EnterInitMode>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00b      	beq.n	800739e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	22ff      	movs	r2, #255	; 0xff
 800738c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2204      	movs	r2, #4
 8007392:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e045      	b.n	800742a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	6979      	ldr	r1, [r7, #20]
 80073a4:	4b23      	ldr	r3, [pc, #140]	; (8007434 <HAL_RTC_SetTime+0x178>)
 80073a6:	400b      	ands	r3, r1
 80073a8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073b8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6899      	ldr	r1, [r3, #8]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	691a      	ldr	r2, [r3, #16]
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	431a      	orrs	r2, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68da      	ldr	r2, [r3, #12]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073e0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f003 0320 	and.w	r3, r3, #32
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d111      	bne.n	8007414 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 f9e1 	bl	80077b8 <HAL_RTC_WaitForSynchro>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00b      	beq.n	8007414 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	22ff      	movs	r2, #255	; 0xff
 8007402:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2204      	movs	r2, #4
 8007408:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e00a      	b.n	800742a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	22ff      	movs	r2, #255	; 0xff
 800741a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2201      	movs	r2, #1
 8007420:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007428:	2300      	movs	r3, #0
  }
}
 800742a:	4618      	mov	r0, r3
 800742c:	371c      	adds	r7, #28
 800742e:	46bd      	mov	sp, r7
 8007430:	bd90      	pop	{r4, r7, pc}
 8007432:	bf00      	nop
 8007434:	007f7f7f 	.word	0x007f7f7f

08007438 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007438:	b590      	push	{r4, r7, lr}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	7f1b      	ldrb	r3, [r3, #28]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d101      	bne.n	8007454 <HAL_RTC_SetDate+0x1c>
 8007450:	2302      	movs	r3, #2
 8007452:	e092      	b.n	800757a <HAL_RTC_SetDate+0x142>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2201      	movs	r2, #1
 8007458:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2202      	movs	r2, #2
 800745e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10e      	bne.n	8007484 <HAL_RTC_SetDate+0x4c>
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	785b      	ldrb	r3, [r3, #1]
 800746a:	f003 0310 	and.w	r3, r3, #16
 800746e:	2b00      	cmp	r3, #0
 8007470:	d008      	beq.n	8007484 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	785b      	ldrb	r3, [r3, #1]
 8007476:	f023 0310 	bic.w	r3, r3, #16
 800747a:	b2db      	uxtb	r3, r3
 800747c:	330a      	adds	r3, #10
 800747e:	b2da      	uxtb	r2, r3
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d11c      	bne.n	80074c4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	78db      	ldrb	r3, [r3, #3]
 800748e:	4618      	mov	r0, r3
 8007490:	f000 f9e6 	bl	8007860 <RTC_ByteToBcd2>
 8007494:	4603      	mov	r3, r0
 8007496:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	785b      	ldrb	r3, [r3, #1]
 800749c:	4618      	mov	r0, r3
 800749e:	f000 f9df 	bl	8007860 <RTC_ByteToBcd2>
 80074a2:	4603      	mov	r3, r0
 80074a4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80074a6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	789b      	ldrb	r3, [r3, #2]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f000 f9d7 	bl	8007860 <RTC_ByteToBcd2>
 80074b2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80074b4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80074be:	4313      	orrs	r3, r2
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	e00e      	b.n	80074e2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	78db      	ldrb	r3, [r3, #3]
 80074c8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	785b      	ldrb	r3, [r3, #1]
 80074ce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80074d0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80074d6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80074de:	4313      	orrs	r3, r2
 80074e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	22ca      	movs	r2, #202	; 0xca
 80074e8:	625a      	str	r2, [r3, #36]	; 0x24
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2253      	movs	r2, #83	; 0x53
 80074f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 f988 	bl	8007808 <RTC_EnterInitMode>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00b      	beq.n	8007516 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	22ff      	movs	r2, #255	; 0xff
 8007504:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2204      	movs	r2, #4
 800750a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e031      	b.n	800757a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	6979      	ldr	r1, [r7, #20]
 800751c:	4b19      	ldr	r3, [pc, #100]	; (8007584 <HAL_RTC_SetDate+0x14c>)
 800751e:	400b      	ands	r3, r1
 8007520:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007530:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f003 0320 	and.w	r3, r3, #32
 800753c:	2b00      	cmp	r3, #0
 800753e:	d111      	bne.n	8007564 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 f939 	bl	80077b8 <HAL_RTC_WaitForSynchro>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00b      	beq.n	8007564 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	22ff      	movs	r2, #255	; 0xff
 8007552:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2204      	movs	r2, #4
 8007558:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e00a      	b.n	800757a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	22ff      	movs	r2, #255	; 0xff
 800756a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2201      	movs	r2, #1
 8007570:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007578:	2300      	movs	r3, #0
  }
}
 800757a:	4618      	mov	r0, r3
 800757c:	371c      	adds	r7, #28
 800757e:	46bd      	mov	sp, r7
 8007580:	bd90      	pop	{r4, r7, pc}
 8007582:	bf00      	nop
 8007584:	00ffff3f 	.word	0x00ffff3f

08007588 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007588:	b590      	push	{r4, r7, lr}
 800758a:	b089      	sub	sp, #36	; 0x24
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007594:	2300      	movs	r3, #0
 8007596:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	61fb      	str	r3, [r7, #28]
 800759c:	2300      	movs	r3, #0
 800759e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	7f1b      	ldrb	r3, [r3, #28]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d101      	bne.n	80075ac <HAL_RTC_SetAlarm+0x24>
 80075a8:	2302      	movs	r3, #2
 80075aa:	e101      	b.n	80077b0 <HAL_RTC_SetAlarm+0x228>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2201      	movs	r2, #1
 80075b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2202      	movs	r2, #2
 80075b6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d137      	bne.n	800762e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d102      	bne.n	80075d2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2200      	movs	r2, #0
 80075d0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 f942 	bl	8007860 <RTC_ByteToBcd2>
 80075dc:	4603      	mov	r3, r0
 80075de:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	785b      	ldrb	r3, [r3, #1]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 f93b 	bl	8007860 <RTC_ByteToBcd2>
 80075ea:	4603      	mov	r3, r0
 80075ec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80075ee:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	789b      	ldrb	r3, [r3, #2]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 f933 	bl	8007860 <RTC_ByteToBcd2>
 80075fa:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80075fc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	7b1b      	ldrb	r3, [r3, #12]
 8007604:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007606:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007610:	4618      	mov	r0, r3
 8007612:	f000 f925 	bl	8007860 <RTC_ByteToBcd2>
 8007616:	4603      	mov	r3, r0
 8007618:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800761a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007622:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007628:	4313      	orrs	r3, r2
 800762a:	61fb      	str	r3, [r7, #28]
 800762c:	e023      	b.n	8007676 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007638:	2b00      	cmp	r3, #0
 800763a:	d102      	bne.n	8007642 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2200      	movs	r2, #0
 8007640:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	785b      	ldrb	r3, [r3, #1]
 800764c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800764e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007654:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	7b1b      	ldrb	r3, [r3, #12]
 800765a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800765c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007664:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007666:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800766c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007672:	4313      	orrs	r3, r2
 8007674:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	4313      	orrs	r3, r2
 8007680:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	22ca      	movs	r2, #202	; 0xca
 8007688:	625a      	str	r2, [r3, #36]	; 0x24
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2253      	movs	r2, #83	; 0x53
 8007690:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800769a:	d13f      	bne.n	800771c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076aa:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	689a      	ldr	r2, [r3, #8]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076ba:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80076bc:	f7fa f80e 	bl	80016dc <HAL_GetTick>
 80076c0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80076c2:	e013      	b.n	80076ec <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80076c4:	f7fa f80a 	bl	80016dc <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076d2:	d90b      	bls.n	80076ec <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	22ff      	movs	r2, #255	; 0xff
 80076da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2203      	movs	r2, #3
 80076e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e061      	b.n	80077b0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d0e4      	beq.n	80076c4 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69fa      	ldr	r2, [r7, #28]
 8007700:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007718:	609a      	str	r2, [r3, #8]
 800771a:	e03e      	b.n	800779a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689a      	ldr	r2, [r3, #8]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800772a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	689a      	ldr	r2, [r3, #8]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800773a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800773c:	f7f9 ffce 	bl	80016dc <HAL_GetTick>
 8007740:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007742:	e013      	b.n	800776c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007744:	f7f9 ffca 	bl	80016dc <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007752:	d90b      	bls.n	800776c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	22ff      	movs	r2, #255	; 0xff
 800775a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2203      	movs	r2, #3
 8007760:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e021      	b.n	80077b0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b00      	cmp	r3, #0
 8007778:	d0e4      	beq.n	8007744 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69fa      	ldr	r2, [r7, #28]
 8007780:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689a      	ldr	r2, [r3, #8]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007798:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	22ff      	movs	r2, #255	; 0xff
 80077a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2201      	movs	r2, #1
 80077a6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3724      	adds	r7, #36	; 0x24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd90      	pop	{r4, r7, pc}

080077b8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80077d2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80077d4:	f7f9 ff82 	bl	80016dc <HAL_GetTick>
 80077d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80077da:	e009      	b.n	80077f0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80077dc:	f7f9 ff7e 	bl	80016dc <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077ea:	d901      	bls.n	80077f0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e007      	b.n	8007800 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	f003 0320 	and.w	r3, r3, #32
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d0ee      	beq.n	80077dc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007810:	2300      	movs	r3, #0
 8007812:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781e:	2b00      	cmp	r3, #0
 8007820:	d119      	bne.n	8007856 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f04f 32ff 	mov.w	r2, #4294967295
 800782a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800782c:	f7f9 ff56 	bl	80016dc <HAL_GetTick>
 8007830:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007832:	e009      	b.n	8007848 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007834:	f7f9 ff52 	bl	80016dc <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007842:	d901      	bls.n	8007848 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e007      	b.n	8007858 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007852:	2b00      	cmp	r3, #0
 8007854:	d0ee      	beq.n	8007834 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	4603      	mov	r3, r0
 8007868:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800786a:	2300      	movs	r3, #0
 800786c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800786e:	e005      	b.n	800787c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	3301      	adds	r3, #1
 8007874:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007876:	79fb      	ldrb	r3, [r7, #7]
 8007878:	3b0a      	subs	r3, #10
 800787a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800787c:	79fb      	ldrb	r3, [r7, #7]
 800787e:	2b09      	cmp	r3, #9
 8007880:	d8f6      	bhi.n	8007870 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	b2db      	uxtb	r3, r3
 8007886:	011b      	lsls	r3, r3, #4
 8007888:	b2da      	uxtb	r2, r3
 800788a:	79fb      	ldrb	r3, [r7, #7]
 800788c:	4313      	orrs	r3, r2
 800788e:	b2db      	uxtb	r3, r3
}
 8007890:	4618      	mov	r0, r3
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80078a8:	2300      	movs	r3, #0
 80078aa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	7f1b      	ldrb	r3, [r3, #28]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d101      	bne.n	80078b8 <HAL_RTCEx_SetTimeStamp+0x1c>
 80078b4:	2302      	movs	r3, #2
 80078b6:	e03e      	b.n	8007936 <HAL_RTCEx_SetTimeStamp+0x9a>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2201      	movs	r2, #1
 80078bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2202      	movs	r2, #2
 80078c2:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689a      	ldr	r2, [r3, #8]
 80078ca:	4b1e      	ldr	r3, [pc, #120]	; (8007944 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80078cc:	4013      	ands	r3, r2
 80078ce:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	22ca      	movs	r2, #202	; 0xca
 80078de:	625a      	str	r2, [r3, #36]	; 0x24
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2253      	movs	r2, #83	; 0x53
 80078e6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f022 0206 	bic.w	r2, r2, #6
 80078f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	430a      	orrs	r2, r1
 8007906:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	689a      	ldr	r2, [r3, #8]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800791e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	22ff      	movs	r2, #255	; 0xff
 8007926:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2201      	movs	r2, #1
 800792c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	371c      	adds	r7, #28
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	fffff7f7 	.word	0xfffff7f7

08007948 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b088      	sub	sp, #32
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007950:	2300      	movs	r3, #0
 8007952:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007954:	2300      	movs	r3, #0
 8007956:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007958:	2300      	movs	r3, #0
 800795a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e149      	b.n	8007bfa <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d106      	bne.n	8007980 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f00b fa6a 	bl	8012e54 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f94f 	bl	8007c2c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d007      	beq.n	80079a6 <HAL_SAI_Init+0x5e>
 8007996:	2b01      	cmp	r3, #1
 8007998:	d302      	bcc.n	80079a0 <HAL_SAI_Init+0x58>
 800799a:	2b02      	cmp	r3, #2
 800799c:	d006      	beq.n	80079ac <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800799e:	e008      	b.n	80079b2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 80079a0:	2300      	movs	r3, #0
 80079a2:	61fb      	str	r3, [r7, #28]
      break;
 80079a4:	e005      	b.n	80079b2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80079a6:	2310      	movs	r3, #16
 80079a8:	61fb      	str	r3, [r7, #28]
      break;
 80079aa:	e002      	b.n	80079b2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80079ac:	2320      	movs	r3, #32
 80079ae:	61fb      	str	r3, [r7, #28]
      break;
 80079b0:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	d81d      	bhi.n	80079f6 <HAL_SAI_Init+0xae>
 80079ba:	a201      	add	r2, pc, #4	; (adr r2, 80079c0 <HAL_SAI_Init+0x78>)
 80079bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c0:	080079d1 	.word	0x080079d1
 80079c4:	080079d7 	.word	0x080079d7
 80079c8:	080079df 	.word	0x080079df
 80079cc:	080079e7 	.word	0x080079e7
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 80079d0:	2300      	movs	r3, #0
 80079d2:	617b      	str	r3, [r7, #20]
      }
      break;
 80079d4:	e010      	b.n	80079f8 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80079d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079da:	617b      	str	r3, [r7, #20]
      }
      break;
 80079dc:	e00c      	b.n	80079f8 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80079de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80079e2:	617b      	str	r3, [r7, #20]
      }
      break;
 80079e4:	e008      	b.n	80079f8 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80079e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80079ea:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	f043 0301 	orr.w	r3, r3, #1
 80079f2:	61fb      	str	r3, [r7, #28]
      }
      break;
 80079f4:	e000      	b.n	80079f8 <HAL_SAI_Init+0xb0>
  default:
    break;
 80079f6:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a81      	ldr	r2, [pc, #516]	; (8007c04 <HAL_SAI_Init+0x2bc>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d004      	beq.n	8007a0c <HAL_SAI_Init+0xc4>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a80      	ldr	r2, [pc, #512]	; (8007c08 <HAL_SAI_Init+0x2c0>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d103      	bne.n	8007a14 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8007a0c:	4a7f      	ldr	r2, [pc, #508]	; (8007c0c <HAL_SAI_Init+0x2c4>)
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	6013      	str	r3, [r2, #0]
 8007a12:	e002      	b.n	8007a1a <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007a14:	4a7e      	ldr	r2, [pc, #504]	; (8007c10 <HAL_SAI_Init+0x2c8>)
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d043      	beq.n	8007aaa <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8007a22:	2300      	movs	r3, #0
 8007a24:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a76      	ldr	r2, [pc, #472]	; (8007c04 <HAL_SAI_Init+0x2bc>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d004      	beq.n	8007a3a <HAL_SAI_Init+0xf2>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a74      	ldr	r2, [pc, #464]	; (8007c08 <HAL_SAI_Init+0x2c0>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d104      	bne.n	8007a44 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007a3a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007a3e:	f7ff fa63 	bl	8006f08 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a42:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a72      	ldr	r2, [pc, #456]	; (8007c14 <HAL_SAI_Init+0x2cc>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d004      	beq.n	8007a58 <HAL_SAI_Init+0x110>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a71      	ldr	r2, [pc, #452]	; (8007c18 <HAL_SAI_Init+0x2d0>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d104      	bne.n	8007a62 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007a58:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007a5c:	f7ff fa54 	bl	8006f08 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a60:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	4613      	mov	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4413      	add	r3, r2
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	025b      	lsls	r3, r3, #9
 8007a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a78:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	4a67      	ldr	r2, [pc, #412]	; (8007c1c <HAL_SAI_Init+0x2d4>)
 8007a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a82:	08da      	lsrs	r2, r3, #3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8007a88:	68f9      	ldr	r1, [r7, #12]
 8007a8a:	4b64      	ldr	r3, [pc, #400]	; (8007c1c <HAL_SAI_Init+0x2d4>)
 8007a8c:	fba3 2301 	umull	r2, r3, r3, r1
 8007a90:	08da      	lsrs	r2, r3, #3
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	005b      	lsls	r3, r3, #1
 8007a9a:	1aca      	subs	r2, r1, r3
 8007a9c:	2a08      	cmp	r2, #8
 8007a9e:	d904      	bls.n	8007aaa <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	1c5a      	adds	r2, r3, #1
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <HAL_SAI_Init+0x172>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d109      	bne.n	8007ace <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d101      	bne.n	8007ac6 <HAL_SAI_Init+0x17e>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	e001      	b.n	8007aca <HAL_SAI_Init+0x182>
 8007ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007aca:	61bb      	str	r3, [r7, #24]
 8007acc:	e008      	b.n	8007ae0 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d102      	bne.n	8007adc <HAL_SAI_Init+0x194>
 8007ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ada:	e000      	b.n	8007ade <HAL_SAI_Init+0x196>
 8007adc:	2300      	movs	r3, #0
 8007ade:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6819      	ldr	r1, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	4b4d      	ldr	r3, [pc, #308]	; (8007c20 <HAL_SAI_Init+0x2d8>)
 8007aec:	400b      	ands	r3, r1
 8007aee:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6819      	ldr	r1, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685a      	ldr	r2, [r3, #4]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afe:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007b04:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	431a      	orrs	r2, r3
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8007b18:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007b24:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	051b      	lsls	r3, r3, #20
 8007b2c:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6859      	ldr	r1, [r3, #4]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	4b38      	ldr	r3, [pc, #224]	; (8007c24 <HAL_SAI_Init+0x2dc>)
 8007b42:	400b      	ands	r3, r1
 8007b44:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6859      	ldr	r1, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	699a      	ldr	r2, [r3, #24]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b54:	431a      	orrs	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6899      	ldr	r1, [r3, #8]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	4b2e      	ldr	r3, [pc, #184]	; (8007c28 <HAL_SAI_Init+0x2e0>)
 8007b70:	400b      	ands	r3, r1
 8007b72:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6899      	ldr	r1, [r3, #8]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7e:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007b84:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8007b8a:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8007b90:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b96:	3b01      	subs	r3, #1
 8007b98:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8007b9a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68d9      	ldr	r1, [r3, #12]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007bb2:	400b      	ands	r3, r1
 8007bb4:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68d9      	ldr	r1, [r3, #12]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc4:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bca:	041b      	lsls	r3, r3, #16
 8007bcc:	431a      	orrs	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	021b      	lsls	r3, r3, #8
 8007bd6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	430a      	orrs	r2, r1
 8007bde:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3720      	adds	r7, #32
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	40015804 	.word	0x40015804
 8007c08:	40015824 	.word	0x40015824
 8007c0c:	40015800 	.word	0x40015800
 8007c10:	40015c00 	.word	0x40015c00
 8007c14:	40015c04 	.word	0x40015c04
 8007c18:	40015c24 	.word	0x40015c24
 8007c1c:	cccccccd 	.word	0xcccccccd
 8007c20:	ff05c010 	.word	0xff05c010
 8007c24:	ffff1ff0 	.word	0xffff1ff0
 8007c28:	fff88000 	.word	0xfff88000

08007c2c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007c2c:	b490      	push	{r4, r7}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8007c34:	4b16      	ldr	r3, [pc, #88]	; (8007c90 <SAI_Disable+0x64>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a16      	ldr	r2, [pc, #88]	; (8007c94 <SAI_Disable+0x68>)
 8007c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3e:	0b1b      	lsrs	r3, r3, #12
 8007c40:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007c54:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8007c56:	4623      	mov	r3, r4
 8007c58:	1e5c      	subs	r4, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10a      	bne.n	8007c74 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	73fb      	strb	r3, [r7, #15]
      break;
 8007c72:	e006      	b.n	8007c82 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1e9      	bne.n	8007c56 <SAI_Disable+0x2a>

  return status;
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bc90      	pop	{r4, r7}
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	20000034 	.word	0x20000034
 8007c94:	95cbec1b 	.word	0x95cbec1b

08007c98 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d101      	bne.n	8007caa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e01d      	b.n	8007ce6 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d105      	bne.n	8007cc2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f00a fdb3 	bl	8012828 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2203      	movs	r2, #3
 8007cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f80f 	bl	8007cee <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007cee:	b5b0      	push	{r4, r5, r7, lr}
 8007cf0:	b08e      	sub	sp, #56	; 0x38
 8007cf2:	af04      	add	r7, sp, #16
 8007cf4:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007d02:	2300      	movs	r3, #0
 8007d04:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007d06:	2300      	movs	r3, #0
 8007d08:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007d0e:	2376      	movs	r3, #118	; 0x76
 8007d10:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681d      	ldr	r5, [r3, #0]
 8007d16:	466c      	mov	r4, sp
 8007d18:	f107 0318 	add.w	r3, r7, #24
 8007d1c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007d24:	f107 030c 	add.w	r3, r7, #12
 8007d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f002 feea 	bl	800ab04 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d3e:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f002 ff16 	bl	800ab76 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d58:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 8007d5a:	2002      	movs	r0, #2
 8007d5c:	f7f9 fcca 	bl	80016f4 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fe24 	bl	80089ae <SD_PowerON>
 8007d66:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00b      	beq.n	8007d86 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e013      	b.n	8007dae <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fd48 	bl	800881c <SD_InitCard>
 8007d8c:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00b      	beq.n	8007dac <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	431a      	orrs	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e000      	b.n	8007dae <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3728      	adds	r7, #40	; 0x28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007db8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08c      	sub	sp, #48	; 0x30
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d107      	bne.n	8007de0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e0b0      	b.n	8007f42 <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	f040 80a9 	bne.w	8007f40 <HAL_SD_ReadBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	441a      	add	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d907      	bls.n	8007e12 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e06:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e097      	b.n	8007f42 <HAL_SD_ReadBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2203      	movs	r2, #3
 8007e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007e30:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e36:	4a45      	ldr	r2, [pc, #276]	; (8007f4c <HAL_SD_ReadBlocks_DMA+0x194>)
 8007e38:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3e:	4a44      	ldr	r2, [pc, #272]	; (8007f50 <HAL_SD_ReadBlocks_DMA+0x198>)
 8007e40:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e46:	2200      	movs	r2, #0
 8007e48:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3380      	adds	r3, #128	; 0x80
 8007e54:	4619      	mov	r1, r3
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	025b      	lsls	r3, r3, #9
 8007e5c:	089b      	lsrs	r3, r3, #2
 8007e5e:	f7fa fa57 	bl	8002310 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f042 0208 	orr.w	r2, r2, #8
 8007e70:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d002      	beq.n	8007e80 <HAL_SD_ReadBlocks_DMA+0xc8>
    {
      BlockAdd *= 512U;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	025b      	lsls	r3, r3, #9
 8007e7e:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e80:	f04f 33ff 	mov.w	r3, #4294967295
 8007e84:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	025b      	lsls	r3, r3, #9
 8007e8a:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007e8c:	2390      	movs	r3, #144	; 0x90
 8007e8e:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007e90:	2302      	movs	r3, #2
 8007e92:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f107 0214 	add.w	r2, r7, #20
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f002 fece 	bl	800ac48 <SDMMC_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f002 fef3 	bl	800aca0 <SDMMC_CmdBlockLength>
 8007eba:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d010      	beq.n	8007ee4 <HAL_SD_ReadBlocks_DMA+0x12c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007eca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e02e      	b.n	8007f42 <HAL_SD_ReadBlocks_DMA+0x18a>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d90a      	bls.n	8007f00 <HAL_SD_ReadBlocks_DMA+0x148>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2282      	movs	r2, #130	; 0x82
 8007eee:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	6879      	ldr	r1, [r7, #4]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f002 ff1a 	bl	800ad30 <SDMMC_CmdReadMultiBlock>
 8007efc:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007efe:	e009      	b.n	8007f14 <HAL_SD_ReadBlocks_DMA+0x15c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2281      	movs	r2, #129	; 0x81
 8007f04:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f002 feeb 	bl	800ace8 <SDMMC_CmdReadSingleBlock>
 8007f12:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d010      	beq.n	8007f3c <HAL_SD_ReadBlocks_DMA+0x184>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007f22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2a:	431a      	orrs	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e002      	b.n	8007f42 <HAL_SD_ReadBlocks_DMA+0x18a>
    }

    return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	e000      	b.n	8007f42 <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007f40:	2302      	movs	r3, #2
  }
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3730      	adds	r7, #48	; 0x30
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	08008719 	.word	0x08008719
 8007f50:	08008787 	.word	0x08008787

08007f54 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b08c      	sub	sp, #48	; 0x30
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
 8007f60:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007f62:	2300      	movs	r3, #0
 8007f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d107      	bne.n	8007f7c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f70:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e0b0      	b.n	80080de <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	f040 80a9 	bne.w	80080dc <HAL_SD_WriteBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	441a      	add	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d907      	bls.n	8007fae <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e097      	b.n	80080de <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2203      	movs	r2, #3
 8007fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f042 021a 	orr.w	r2, r2, #26
 8007fcc:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd2:	4a45      	ldr	r2, [pc, #276]	; (80080e8 <HAL_SD_WriteBlocks_DMA+0x194>)
 8007fd4:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fda:	4a44      	ldr	r2, [pc, #272]	; (80080ec <HAL_SD_WriteBlocks_DMA+0x198>)
 8007fdc:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d002      	beq.n	8007ff4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      BlockAdd *= 512U;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	025b      	lsls	r3, r3, #9
 8007ff2:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f002 fe4f 	bl	800aca0 <SDMMC_CmdBlockLength>
 8008002:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008006:	2b00      	cmp	r3, #0
 8008008:	d010      	beq.n	800802c <HAL_SD_WriteBlocks_DMA+0xd8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008012:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801a:	431a      	orrs	r2, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e058      	b.n	80080de <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d90a      	bls.n	8008048 <HAL_SD_WriteBlocks_DMA+0xf4>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	22a0      	movs	r2, #160	; 0xa0
 8008036:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6879      	ldr	r1, [r7, #4]
 800803e:	4618      	mov	r0, r3
 8008040:	f002 febe 	bl	800adc0 <SDMMC_CmdWriteMultiBlock>
 8008044:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008046:	e009      	b.n	800805c <HAL_SD_WriteBlocks_DMA+0x108>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2290      	movs	r2, #144	; 0x90
 800804c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	6879      	ldr	r1, [r7, #4]
 8008054:	4618      	mov	r0, r3
 8008056:	f002 fe8f 	bl	800ad78 <SDMMC_CmdWriteSingleBlock>
 800805a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800805c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805e:	2b00      	cmp	r3, #0
 8008060:	d010      	beq.n	8008084 <HAL_SD_WriteBlocks_DMA+0x130>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800806a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008072:	431a      	orrs	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e02c      	b.n	80080de <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f042 0208 	orr.w	r2, r2, #8
 8008092:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008098:	68b9      	ldr	r1, [r7, #8]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3380      	adds	r3, #128	; 0x80
 80080a0:	461a      	mov	r2, r3
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	025b      	lsls	r3, r3, #9
 80080a6:	089b      	lsrs	r3, r3, #2
 80080a8:	f7fa f932 	bl	8002310 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80080ac:	f04f 33ff 	mov.w	r3, #4294967295
 80080b0:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	025b      	lsls	r3, r3, #9
 80080b6:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80080b8:	2390      	movs	r3, #144	; 0x90
 80080ba:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80080bc:	2300      	movs	r3, #0
 80080be:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80080c4:	2301      	movs	r3, #1
 80080c6:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f107 0214 	add.w	r2, r7, #20
 80080d0:	4611      	mov	r1, r2
 80080d2:	4618      	mov	r0, r3
 80080d4:	f002 fdb8 	bl	800ac48 <SDMMC_ConfigData>
    
    return HAL_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	e000      	b.n	80080de <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80080dc:	2302      	movs	r3, #2
  }
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3730      	adds	r7, #48	; 0x30
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	080086ef 	.word	0x080086ef
 80080ec:	08008787 	.word	0x08008787

080080f0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 800810e:	2300      	movs	r3, #0
 8008110:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008116:	0e1b      	lsrs	r3, r3, #24
 8008118:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	099b      	lsrs	r3, r3, #6
 800811e:	b2db      	uxtb	r3, r3
 8008120:	f003 0303 	and.w	r3, r3, #3
 8008124:	b2da      	uxtb	r2, r3
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	089b      	lsrs	r3, r3, #2
 800812e:	b2db      	uxtb	r3, r3
 8008130:	f003 030f 	and.w	r3, r3, #15
 8008134:	b2da      	uxtb	r2, r3
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	b2db      	uxtb	r3, r3
 800813e:	f003 0303 	and.w	r3, r3, #3
 8008142:	b2da      	uxtb	r2, r3
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800814c:	0c1b      	lsrs	r3, r3, #16
 800814e:	b2db      	uxtb	r3, r3
 8008150:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	b2da      	uxtb	r2, r3
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800815e:	0a1b      	lsrs	r3, r3, #8
 8008160:	b2db      	uxtb	r3, r3
 8008162:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	b2da      	uxtb	r2, r3
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008170:	b2db      	uxtb	r3, r3
 8008172:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	b2da      	uxtb	r2, r3
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008180:	0e1b      	lsrs	r3, r3, #24
 8008182:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	b29b      	uxth	r3, r3
 8008188:	011b      	lsls	r3, r3, #4
 800818a:	b29a      	uxth	r2, r3
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008194:	0c1b      	lsrs	r3, r3, #16
 8008196:	b2db      	uxtb	r3, r3
 8008198:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	88db      	ldrh	r3, [r3, #6]
 800819e:	b29a      	uxth	r2, r3
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	091b      	lsrs	r3, r3, #4
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	f003 030f 	and.w	r3, r3, #15
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	4313      	orrs	r3, r2
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	f003 030f 	and.w	r3, r3, #15
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081c6:	0a1b      	lsrs	r3, r3, #8
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	09db      	lsrs	r3, r3, #7
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	099b      	lsrs	r3, r3, #6
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	b2da      	uxtb	r2, r3
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	095b      	lsrs	r3, r3, #5
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	f003 0301 	and.w	r3, r3, #1
 80081f6:	b2da      	uxtb	r2, r3
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	091b      	lsrs	r3, r3, #4
 8008200:	b2db      	uxtb	r3, r3
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	b2da      	uxtb	r2, r3
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2200      	movs	r2, #0
 8008210:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008216:	2b00      	cmp	r3, #0
 8008218:	f040 8086 	bne.w	8008328 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	029b      	lsls	r3, r3, #10
 8008220:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800822c:	b2db      	uxtb	r3, r3
 800822e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	691a      	ldr	r2, [r3, #16]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	431a      	orrs	r2, r3
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008242:	0e1b      	lsrs	r3, r3, #24
 8008244:	b2db      	uxtb	r3, r3
 8008246:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	691a      	ldr	r2, [r3, #16]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	099b      	lsrs	r3, r3, #6
 8008250:	f003 0303 	and.w	r3, r3, #3
 8008254:	431a      	orrs	r2, r3
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	08db      	lsrs	r3, r3, #3
 800825e:	b2db      	uxtb	r3, r3
 8008260:	f003 0307 	and.w	r3, r3, #7
 8008264:	b2da      	uxtb	r2, r3
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	f003 0307 	and.w	r3, r3, #7
 8008272:	b2da      	uxtb	r2, r3
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800827c:	0c1b      	lsrs	r3, r3, #16
 800827e:	b2db      	uxtb	r3, r3
 8008280:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	095b      	lsrs	r3, r3, #5
 8008286:	b2db      	uxtb	r3, r3
 8008288:	f003 0307 	and.w	r3, r3, #7
 800828c:	b2da      	uxtb	r2, r3
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	089b      	lsrs	r3, r3, #2
 8008296:	b2db      	uxtb	r3, r3
 8008298:	f003 0307 	and.w	r3, r3, #7
 800829c:	b2da      	uxtb	r2, r3
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	005b      	lsls	r3, r3, #1
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	f003 0306 	and.w	r3, r3, #6
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082b8:	0a1b      	lsrs	r3, r3, #8
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	7e1b      	ldrb	r3, [r3, #24]
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	09db      	lsrs	r3, r3, #7
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	4313      	orrs	r3, r2
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	7e1b      	ldrb	r3, [r3, #24]
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	3302      	adds	r3, #2
 80082ea:	2201      	movs	r2, #1
 80082ec:	409a      	lsls	r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f2:	fb02 f203 	mul.w	r2, r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	7a1b      	ldrb	r3, [r3, #8]
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	461a      	mov	r2, r3
 8008302:	2301      	movs	r3, #1
 8008304:	4093      	lsls	r3, r2
 8008306:	461a      	mov	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008314:	0a52      	lsrs	r2, r2, #9
 8008316:	fb02 f203 	mul.w	r2, r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008324:	661a      	str	r2, [r3, #96]	; 0x60
 8008326:	e04d      	b.n	80083c4 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832c:	2b01      	cmp	r3, #1
 800832e:	d138      	bne.n	80083a2 <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008334:	b2db      	uxtb	r3, r3
 8008336:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	041b      	lsls	r3, r3, #16
 800833c:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008348:	0e1b      	lsrs	r3, r3, #24
 800834a:	b2db      	uxtb	r3, r3
 800834c:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	691a      	ldr	r2, [r3, #16]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	021b      	lsls	r3, r3, #8
 8008356:	431a      	orrs	r2, r3
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008360:	0c1b      	lsrs	r3, r3, #16
 8008362:	b2db      	uxtb	r3, r3
 8008364:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	691a      	ldr	r2, [r3, #16]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	431a      	orrs	r2, r3
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008376:	0a1b      	lsrs	r3, r3, #8
 8008378:	b2db      	uxtb	r3, r3
 800837a:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	3301      	adds	r3, #1
 8008382:	029a      	lsls	r2, r3, #10
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	655a      	str	r2, [r3, #84]	; 0x54
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008396:	659a      	str	r2, [r3, #88]	; 0x58
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	661a      	str	r2, [r3, #96]	; 0x60
 80083a0:	e010      	b.n	80083c4 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80083aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e0c1      	b.n	8008548 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	099b      	lsrs	r3, r3, #6
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	b2da      	uxtb	r2, r3
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	005b      	lsls	r3, r3, #1
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80083e0:	b2da      	uxtb	r2, r3
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	7e9b      	ldrb	r3, [r3, #26]
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	09db      	lsrs	r3, r3, #7
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	4313      	orrs	r3, r2
 8008402:	b2da      	uxtb	r2, r3
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	b2db      	uxtb	r3, r3
 800840c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008410:	b2da      	uxtb	r2, r3
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841a:	0e1b      	lsrs	r3, r3, #24
 800841c:	b2db      	uxtb	r3, r3
 800841e:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	09db      	lsrs	r3, r3, #7
 8008424:	b2db      	uxtb	r3, r3
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	b2da      	uxtb	r2, r3
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	095b      	lsrs	r3, r3, #5
 8008434:	b2db      	uxtb	r3, r3
 8008436:	f003 0303 	and.w	r3, r3, #3
 800843a:	b2da      	uxtb	r2, r3
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	089b      	lsrs	r3, r3, #2
 8008444:	b2db      	uxtb	r3, r3
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	b2da      	uxtb	r2, r3
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	b2db      	uxtb	r3, r3
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	b2db      	uxtb	r3, r3
 8008458:	f003 030c 	and.w	r3, r3, #12
 800845c:	b2da      	uxtb	r2, r3
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008466:	0c1b      	lsrs	r3, r3, #16
 8008468:	b2db      	uxtb	r3, r3
 800846a:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	7fdb      	ldrb	r3, [r3, #31]
 8008470:	b2da      	uxtb	r2, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	099b      	lsrs	r3, r3, #6
 8008476:	b2db      	uxtb	r3, r3
 8008478:	f003 0303 	and.w	r3, r3, #3
 800847c:	b2db      	uxtb	r3, r3
 800847e:	4313      	orrs	r3, r2
 8008480:	b2da      	uxtb	r2, r3
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	095b      	lsrs	r3, r3, #5
 800848a:	b2db      	uxtb	r3, r3
 800848c:	f003 0301 	and.w	r3, r3, #1
 8008490:	b2da      	uxtb	r2, r3
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	f003 0301 	and.w	r3, r3, #1
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b4:	0a1b      	lsrs	r3, r3, #8
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	09db      	lsrs	r3, r3, #7
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	f003 0301 	and.w	r3, r3, #1
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	099b      	lsrs	r3, r3, #6
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	b2da      	uxtb	r2, r3
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	095b      	lsrs	r3, r3, #5
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	f003 0301 	and.w	r3, r3, #1
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	091b      	lsrs	r3, r3, #4
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	b2da      	uxtb	r2, r3
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	089b      	lsrs	r3, r3, #2
 8008506:	b2db      	uxtb	r3, r3
 8008508:	f003 0303 	and.w	r3, r3, #3
 800850c:	b2da      	uxtb	r2, r3
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	b2db      	uxtb	r3, r3
 8008518:	f003 0303 	and.w	r3, r3, #3
 800851c:	b2da      	uxtb	r2, r3
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008528:	b2db      	uxtb	r3, r3
 800852a:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	085b      	lsrs	r3, r3, #1
 8008530:	b2db      	uxtb	r3, r3
 8008532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008536:	b2da      	uxtb	r2, r3
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80085ac:	b5b0      	push	{r4, r5, r7, lr}
 80085ae:	b08e      	sub	sp, #56	; 0x38
 80085b0:	af04      	add	r7, sp, #16
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80085b6:	2300      	movs	r3, #0
 80085b8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2203      	movs	r2, #3
 80085be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d02e      	beq.n	8008628 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d0:	d106      	bne.n	80085e0 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	639a      	str	r2, [r3, #56]	; 0x38
 80085de:	e029      	b.n	8008634 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085e6:	d10a      	bne.n	80085fe <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fab2 	bl	8008b52 <SD_WideBus_Enable>
 80085ee:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	431a      	orrs	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	639a      	str	r2, [r3, #56]	; 0x38
 80085fc:	e01a      	b.n	8008634 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10a      	bne.n	800861a <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 faf1 	bl	8008bec <SD_WideBus_Disable>
 800860a:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008612:	431a      	orrs	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	639a      	str	r2, [r3, #56]	; 0x38
 8008618:	e00c      	b.n	8008634 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	639a      	str	r2, [r3, #56]	; 0x38
 8008626:	e005      	b.n	8008634 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800862c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00a      	beq.n	8008652 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008644:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2201      	movs	r2, #1
 800864a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e024      	b.n	800869c <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	695b      	ldr	r3, [r3, #20]
 800866c:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681d      	ldr	r5, [r3, #0]
 8008678:	466c      	mov	r4, sp
 800867a:	f107 0318 	add.w	r3, r7, #24
 800867e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008686:	f107 030c 	add.w	r3, r7, #12
 800868a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800868c:	4628      	mov	r0, r5
 800868e:	f002 fa39 	bl	800ab04 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3728      	adds	r7, #40	; 0x28
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bdb0      	pop	{r4, r5, r7, pc}

080086a4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80086ac:	2304      	movs	r3, #4
 80086ae:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80086b0:	2300      	movs	r3, #0
 80086b2:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80086b4:	2300      	movs	r3, #0
 80086b6:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 80086b8:	f107 030c 	add.w	r3, r7, #12
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fa1d 	bl	8008afe <SD_SendStatus>
 80086c4:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d005      	beq.n	80086d8 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	431a      	orrs	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	0a5b      	lsrs	r3, r3, #9
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	f003 030f 	and.w	r3, r3, #15
 80086e2:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 80086e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3718      	adds	r7, #24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 80086ee:	b480      	push	{r7}
 80086f0:	b085      	sub	sp, #20
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fa:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800870a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800870c:	bf00      	nop
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008724:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008726:	2300      	movs	r3, #0
 8008728:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872e:	2b82      	cmp	r3, #130	; 0x82
 8008730:	d111      	bne.n	8008756 <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4618      	mov	r0, r3
 8008738:	f002 fb66 	bl	800ae08 <SDMMC_CmdStopTransfer>
 800873c:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d008      	beq.n	8008756 <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	431a      	orrs	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f7ff fccd 	bl	80080f0 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f022 0208 	bic.w	r2, r2, #8
 8008764:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800876e:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f7f8 fd23 	bl	80011c4 <HAL_SD_RxCpltCallback>
#endif
}
 800877e:	bf00      	nop
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <SD_DMAError>:
* @brief  DMA SD communication error callback 
* @param  hdma DMA handle
* @retval None
*/
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b084      	sub	sp, #16
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008792:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7f9 fe1b 	bl	80023d0 <HAL_DMA_GetError>
 800879a:	4603      	mov	r3, r0
 800879c:	2b02      	cmp	r3, #2
 800879e:	d039      	beq.n	8008814 <SD_DMAError+0x8e>
  {
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d004      	beq.n	80087b4 <SD_DMAError+0x2e>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d12c      	bne.n	800880e <SD_DMAError+0x88>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80087bc:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80087cc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
      
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f7ff ff62 	bl	80086a4 <HAL_SD_GetCardState>
 80087e0:	4603      	mov	r3, r0
 80087e2:	72fb      	strb	r3, [r7, #11]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80087e4:	7afb      	ldrb	r3, [r7, #11]
 80087e6:	2b06      	cmp	r3, #6
 80087e8:	d002      	beq.n	80087f0 <SD_DMAError+0x6a>
 80087ea:	7afb      	ldrb	r3, [r7, #11]
 80087ec:	2b05      	cmp	r3, #5
 80087ee:	d10a      	bne.n	8008806 <SD_DMAError+0x80>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f002 fb07 	bl	800ae08 <SDMMC_CmdStopTransfer>
 80087fa:	4602      	mov	r2, r0
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008800:	431a      	orrs	r2, r3
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	639a      	str	r2, [r3, #56]	; 0x38
      }
      
      hsd->State= HAL_SD_STATE_READY;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f7ff fc6e 	bl	80080f0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008814:	bf00      	nop
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800881c:	b5b0      	push	{r4, r5, r7, lr}
 800881e:	b094      	sub	sp, #80	; 0x50
 8008820:	af04      	add	r7, sp, #16
 8008822:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008824:	2300      	movs	r3, #0
 8008826:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8008828:	2301      	movs	r3, #1
 800882a:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4618      	mov	r0, r3
 8008832:	f002 f9ae 	bl	800ab92 <SDMMC_GetPowerState>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d102      	bne.n	8008842 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800883c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008840:	e0b1      	b.n	80089a6 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008846:	2b03      	cmp	r3, #3
 8008848:	d02f      	beq.n	80088aa <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4618      	mov	r0, r3
 8008850:	f002 fbf5 	bl	800b03e <SDMMC_CmdSendCID>
 8008854:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <SD_InitCard+0x44>
    {
      return errorstate;
 800885c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800885e:	e0a2      	b.n	80089a6 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2100      	movs	r1, #0
 8008866:	4618      	mov	r0, r3
 8008868:	f002 f9d9 	bl	800ac1e <SDMMC_GetResponse>
 800886c:	4602      	mov	r2, r0
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2104      	movs	r1, #4
 8008878:	4618      	mov	r0, r3
 800887a:	f002 f9d0 	bl	800ac1e <SDMMC_GetResponse>
 800887e:	4602      	mov	r2, r0
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2108      	movs	r1, #8
 800888a:	4618      	mov	r0, r3
 800888c:	f002 f9c7 	bl	800ac1e <SDMMC_GetResponse>
 8008890:	4602      	mov	r2, r0
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	210c      	movs	r1, #12
 800889c:	4618      	mov	r0, r3
 800889e:	f002 f9be 	bl	800ac1e <SDMMC_GetResponse>
 80088a2:	4602      	mov	r2, r0
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ae:	2b03      	cmp	r3, #3
 80088b0:	d00d      	beq.n	80088ce <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f107 020e 	add.w	r2, r7, #14
 80088ba:	4611      	mov	r1, r2
 80088bc:	4618      	mov	r0, r3
 80088be:	f002 fbff 	bl	800b0c0 <SDMMC_CmdSetRelAdd>
 80088c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80088c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <SD_InitCard+0xb2>
    {
      return errorstate;
 80088ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088cc:	e06b      	b.n	80089a6 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d2:	2b03      	cmp	r3, #3
 80088d4:	d036      	beq.n	8008944 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80088d6:	89fb      	ldrh	r3, [r7, #14]
 80088d8:	461a      	mov	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e6:	041b      	lsls	r3, r3, #16
 80088e8:	4619      	mov	r1, r3
 80088ea:	4610      	mov	r0, r2
 80088ec:	f002 fbc7 	bl	800b07e <SDMMC_CmdSendCSD>
 80088f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80088f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d001      	beq.n	80088fc <SD_InitCard+0xe0>
    {
      return errorstate;
 80088f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088fa:	e054      	b.n	80089a6 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2100      	movs	r1, #0
 8008902:	4618      	mov	r0, r3
 8008904:	f002 f98b 	bl	800ac1e <SDMMC_GetResponse>
 8008908:	4602      	mov	r2, r0
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2104      	movs	r1, #4
 8008914:	4618      	mov	r0, r3
 8008916:	f002 f982 	bl	800ac1e <SDMMC_GetResponse>
 800891a:	4602      	mov	r2, r0
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2108      	movs	r1, #8
 8008926:	4618      	mov	r0, r3
 8008928:	f002 f979 	bl	800ac1e <SDMMC_GetResponse>
 800892c:	4602      	mov	r2, r0
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	210c      	movs	r1, #12
 8008938:	4618      	mov	r0, r3
 800893a:	f002 f970 	bl	800ac1e <SDMMC_GetResponse>
 800893e:	4602      	mov	r2, r0
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2104      	movs	r1, #4
 800894a:	4618      	mov	r0, r3
 800894c:	f002 f967 	bl	800ac1e <SDMMC_GetResponse>
 8008950:	4603      	mov	r3, r0
 8008952:	0d1a      	lsrs	r2, r3, #20
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8008958:	f107 0310 	add.w	r3, r7, #16
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7ff fbd0 	bl	8008104 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6819      	ldr	r1, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800896c:	041b      	lsls	r3, r3, #16
 800896e:	f04f 0400 	mov.w	r4, #0
 8008972:	461a      	mov	r2, r3
 8008974:	4623      	mov	r3, r4
 8008976:	4608      	mov	r0, r1
 8008978:	f002 fa6a 	bl	800ae50 <SDMMC_CmdSelDesel>
 800897c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800897e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008980:	2b00      	cmp	r3, #0
 8008982:	d001      	beq.n	8008988 <SD_InitCard+0x16c>
  {
    return errorstate;
 8008984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008986:	e00e      	b.n	80089a6 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681d      	ldr	r5, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	466c      	mov	r4, sp
 8008990:	f103 0210 	add.w	r2, r3, #16
 8008994:	ca07      	ldmia	r2, {r0, r1, r2}
 8008996:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800899a:	3304      	adds	r3, #4
 800899c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800899e:	4628      	mov	r0, r5
 80089a0:	f002 f8b0 	bl	800ab04 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3740      	adds	r7, #64	; 0x40
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bdb0      	pop	{r4, r5, r7, pc}

080089ae <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b086      	sub	sp, #24
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80089b6:	2300      	movs	r3, #0
 80089b8:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 80089ba:	2300      	movs	r3, #0
 80089bc:	617b      	str	r3, [r7, #20]
 80089be:	2300      	movs	r3, #0
 80089c0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80089c2:	2300      	movs	r3, #0
 80089c4:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f002 fa65 	bl	800ae9a <SDMMC_CmdGoIdleState>
 80089d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <SD_PowerON+0x2e>
  {
    return errorstate;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	e08c      	b.n	8008af6 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4618      	mov	r0, r3
 80089e2:	f002 fa7a 	bl	800aeda <SDMMC_CmdOperCond>
 80089e6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d03d      	beq.n	8008a6a <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80089f4:	e032      	b.n	8008a5c <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	1c5a      	adds	r2, r3, #1
 80089fa:	60ba      	str	r2, [r7, #8]
 80089fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d102      	bne.n	8008a0a <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008a04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a08:	e075      	b.n	8008af6 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2100      	movs	r1, #0
 8008a10:	4618      	mov	r0, r3
 8008a12:	f002 fa83 	bl	800af1c <SDMMC_CmdAppCommand>
 8008a16:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008a22:	e068      	b.n	8008af6 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2100      	movs	r1, #0
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f002 fa9a 	bl	800af64 <SDMMC_CmdAppOperCommand>
 8008a30:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d002      	beq.n	8008a3e <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008a3c:	e05b      	b.n	8008af6 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2100      	movs	r1, #0
 8008a44:	4618      	mov	r0, r3
 8008a46:	f002 f8ea 	bl	800ac1e <SDMMC_GetResponse>
 8008a4a:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	0fdb      	lsrs	r3, r3, #31
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	bf0c      	ite	eq
 8008a54:	2301      	moveq	r3, #1
 8008a56:	2300      	movne	r3, #0
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d0c9      	beq.n	80089f6 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	645a      	str	r2, [r3, #68]	; 0x44
 8008a68:	e044      	b.n	8008af4 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8008a70:	e031      	b.n	8008ad6 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	1c5a      	adds	r2, r3, #1
 8008a76:	60ba      	str	r2, [r7, #8]
 8008a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d102      	bne.n	8008a86 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008a80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a84:	e037      	b.n	8008af6 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f002 fa45 	bl	800af1c <SDMMC_CmdAppCommand>
 8008a92:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <SD_PowerON+0xf0>
      {
        return errorstate;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	e02b      	b.n	8008af6 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f002 fa5c 	bl	800af64 <SDMMC_CmdAppOperCommand>
 8008aac:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d001      	beq.n	8008ab8 <SD_PowerON+0x10a>
      {
        return errorstate;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	e01e      	b.n	8008af6 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2100      	movs	r1, #0
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f002 f8ad 	bl	800ac1e <SDMMC_GetResponse>
 8008ac4:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	0fdb      	lsrs	r3, r3, #31
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	bf0c      	ite	eq
 8008ace:	2301      	moveq	r3, #1
 8008ad0:	2300      	movne	r3, #0
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d0ca      	beq.n	8008a72 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d003      	beq.n	8008aee <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	645a      	str	r2, [r3, #68]	; 0x44
 8008aec:	e002      	b.n	8008af4 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3718      	adds	r7, #24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b084      	sub	sp, #16
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d102      	bne.n	8008b18 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8008b12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b16:	e018      	b.n	8008b4a <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b20:	041b      	lsls	r3, r3, #16
 8008b22:	4619      	mov	r1, r3
 8008b24:	4610      	mov	r0, r2
 8008b26:	f002 faee 	bl	800b106 <SDMMC_CmdSendStatus>
 8008b2a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d001      	beq.n	8008b36 <SD_SendStatus+0x38>
  {
    return errorstate;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	e009      	b.n	8008b4a <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f002 f86e 	bl	800ac1e <SDMMC_GetResponse>
 8008b42:	4602      	mov	r2, r0
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b086      	sub	sp, #24
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	60fb      	str	r3, [r7, #12]
 8008b5e:	2300      	movs	r3, #0
 8008b60:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008b62:	2300      	movs	r3, #0
 8008b64:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f002 f856 	bl	800ac1e <SDMMC_GetResponse>
 8008b72:	4603      	mov	r3, r0
 8008b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b7c:	d102      	bne.n	8008b84 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b82:	e02f      	b.n	8008be4 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008b84:	f107 030c 	add.w	r3, r7, #12
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f87b 	bl	8008c86 <SD_FindSCR>
 8008b90:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d001      	beq.n	8008b9c <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	e023      	b.n	8008be4 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d01c      	beq.n	8008be0 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bae:	041b      	lsls	r3, r3, #16
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	f002 f9b2 	bl	800af1c <SDMMC_CmdAppCommand>
 8008bb8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	e00f      	b.n	8008be4 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2102      	movs	r1, #2
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f002 f9f0 	bl	800afb0 <SDMMC_CmdBusWidth>
 8008bd0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	e003      	b.n	8008be4 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	e001      	b.n	8008be4 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008be0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3718      	adds	r7, #24
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2100      	movs	r1, #0
 8008c06:	4618      	mov	r0, r3
 8008c08:	f002 f809 	bl	800ac1e <SDMMC_GetResponse>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c16:	d102      	bne.n	8008c1e <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008c18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c1c:	e02f      	b.n	8008c7e <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008c1e:	f107 030c 	add.w	r3, r7, #12
 8008c22:	4619      	mov	r1, r3
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f82e 	bl	8008c86 <SD_FindSCR>
 8008c2a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d001      	beq.n	8008c36 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	e023      	b.n	8008c7e <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d01c      	beq.n	8008c7a <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c48:	041b      	lsls	r3, r3, #16
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	f002 f965 	bl	800af1c <SDMMC_CmdAppCommand>
 8008c52:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	e00f      	b.n	8008c7e <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2100      	movs	r1, #0
 8008c64:	4618      	mov	r0, r3
 8008c66:	f002 f9a3 	bl	800afb0 <SDMMC_CmdBusWidth>
 8008c6a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	e003      	b.n	8008c7e <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8008c76:	2300      	movs	r3, #0
 8008c78:	e001      	b.n	8008c7e <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3718      	adds	r7, #24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008c86:	b590      	push	{r4, r7, lr}
 8008c88:	b08f      	sub	sp, #60	; 0x3c
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
 8008c8e:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008c90:	2300      	movs	r3, #0
 8008c92:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8008c94:	f7f8 fd22 	bl	80016dc <HAL_GetTick>
 8008c98:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	60fb      	str	r3, [r7, #12]
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2108      	movs	r1, #8
 8008cac:	4618      	mov	r0, r3
 8008cae:	f001 fff7 	bl	800aca0 <SDMMC_CmdBlockLength>
 8008cb2:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d001      	beq.n	8008cbe <SD_FindSCR+0x38>
  {
    return errorstate;
 8008cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbc:	e0a8      	b.n	8008e10 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc6:	041b      	lsls	r3, r3, #16
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4610      	mov	r0, r2
 8008ccc:	f002 f926 	bl	800af1c <SDMMC_CmdAppCommand>
 8008cd0:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d001      	beq.n	8008cdc <SD_FindSCR+0x56>
  {
    return errorstate;
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cda:	e099      	b.n	8008e10 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ce0:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 8008ce2:	2308      	movs	r3, #8
 8008ce4:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008ce6:	2330      	movs	r3, #48	; 0x30
 8008ce8:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008cea:	2302      	movs	r3, #2
 8008cec:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f107 0214 	add.w	r2, r7, #20
 8008cfe:	4611      	mov	r1, r2
 8008d00:	4618      	mov	r0, r3
 8008d02:	f001 ffa1 	bl	800ac48 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f002 f974 	bl	800aff8 <SDMMC_CmdSendSCR>
 8008d10:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d022      	beq.n	8008d5e <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1a:	e079      	b.n	8008e10 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00e      	beq.n	8008d48 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6819      	ldr	r1, [r3, #0]
 8008d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	f107 020c 	add.w	r2, r7, #12
 8008d36:	18d4      	adds	r4, r2, r3
 8008d38:	4608      	mov	r0, r1
 8008d3a:	f001 ff0f 	bl	800ab5c <SDMMC_ReadFIFO>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	6023      	str	r3, [r4, #0]
      index++;
 8008d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d44:	3301      	adds	r3, #1
 8008d46:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008d48:	f7f8 fcc8 	bl	80016dc <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d56:	d102      	bne.n	8008d5e <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008d58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d5c:	e058      	b.n	8008e10 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d64:	f240 432a 	movw	r3, #1066	; 0x42a
 8008d68:	4013      	ands	r3, r2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0d6      	beq.n	8008d1c <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d74:	f003 0308 	and.w	r3, r3, #8
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d005      	beq.n	8008d88 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2208      	movs	r2, #8
 8008d82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008d84:	2308      	movs	r3, #8
 8008d86:	e043      	b.n	8008e10 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d8e:	f003 0302 	and.w	r3, r3, #2
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d005      	beq.n	8008da2 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d9e:	2302      	movs	r3, #2
 8008da0:	e036      	b.n	8008e10 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da8:	f003 0320 	and.w	r3, r3, #32
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d005      	beq.n	8008dbc <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2220      	movs	r2, #32
 8008db6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8008db8:	2320      	movs	r3, #32
 8008dba:	e029      	b.n	8008e10 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008dc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	061a      	lsls	r2, r3, #24
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	021b      	lsls	r3, r3, #8
 8008dce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008dd2:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	0a1b      	lsrs	r3, r3, #8
 8008dd8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008ddc:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008de8:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008dea:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	061a      	lsls	r2, r3, #24
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	021b      	lsls	r3, r3, #8
 8008df4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008df8:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	0a1b      	lsrs	r3, r3, #8
 8008dfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008e02:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	0e1b      	lsrs	r3, r3, #24
 8008e08:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	373c      	adds	r7, #60	; 0x3c
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd90      	pop	{r4, r7, pc}

08008e18 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d101      	bne.n	8008e2c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e025      	b.n	8008e78 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d106      	bne.n	8008e46 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f012 fc03 	bl	801b64c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2202      	movs	r2, #2
 8008e4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	3304      	adds	r3, #4
 8008e56:	4619      	mov	r1, r3
 8008e58:	4610      	mov	r0, r2
 8008e5a:	f001 fd2d 	bl	800a8b8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6818      	ldr	r0, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	461a      	mov	r2, r3
 8008e68:	6839      	ldr	r1, [r7, #0]
 8008e6a:	f001 fd97 	bl	800a99c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d101      	bne.n	8008e9c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008e98:	2302      	movs	r3, #2
 8008e9a:	e018      	b.n	8008ece <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2202      	movs	r2, #2
 8008ea0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	68b9      	ldr	r1, [r7, #8]
 8008eac:	4618      	mov	r0, r3
 8008eae:	f001 fdf5 	bl	800aa9c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d104      	bne.n	8008ec4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2205      	movs	r2, #5
 8008ebe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008ec2:	e003      	b.n	8008ecc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b082      	sub	sp, #8
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d101      	bne.n	8008ef0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008eec:	2302      	movs	r3, #2
 8008eee:	e00e      	b.n	8008f0e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2202      	movs	r2, #2
 8008ef4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f001 fded 	bl	800aade <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
	...

08008f18 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d101      	bne.n	8008f2a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e04c      	b.n	8008fc4 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d106      	bne.n	8008f44 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f009 fcd4 	bl	80128ec <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2202      	movs	r2, #2
 8008f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f022 0203 	bic.w	r2, r2, #3
 8008f5a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	4b19      	ldr	r3, [pc, #100]	; (8008fcc <HAL_SPDIFRX_Init+0xb4>)
 8008f68:	4013      	ands	r3, r2
 8008f6a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8008f74:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8008f7a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8008f80:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8008f86:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8008f8c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8008f92:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8008f98:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8008f9e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8008fa4:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	fff88407 	.word	0xfff88407

08008fd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e084      	b.n	80090ec <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d106      	bne.n	8009002 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f009 fcb7 	bl	8012970 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2202      	movs	r2, #2
 8009006:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009018:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009022:	d902      	bls.n	800902a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009024:	2300      	movs	r3, #0
 8009026:	60fb      	str	r3, [r7, #12]
 8009028:	e002      	b.n	8009030 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800902a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800902e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009038:	d007      	beq.n	800904a <HAL_SPI_Init+0x7a>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009042:	d002      	beq.n	800904a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10b      	bne.n	800906a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800905a:	d903      	bls.n	8009064 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2202      	movs	r2, #2
 8009060:	631a      	str	r2, [r3, #48]	; 0x30
 8009062:	e002      	b.n	800906a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	431a      	orrs	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	431a      	orrs	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	431a      	orrs	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009088:	431a      	orrs	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	69db      	ldr	r3, [r3, #28]
 800908e:	431a      	orrs	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a1b      	ldr	r3, [r3, #32]
 8009094:	ea42 0103 	orr.w	r1, r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	430a      	orrs	r2, r1
 80090a2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	0c1b      	lsrs	r3, r3, #16
 80090aa:	f003 0204 	and.w	r2, r3, #4
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b2:	431a      	orrs	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b8:	431a      	orrs	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	ea42 0103 	orr.w	r1, r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	430a      	orrs	r2, r1
 80090ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	69da      	ldr	r2, [r3, #28]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80090da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d101      	bne.n	8009106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e01d      	b.n	8009142 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800910c:	b2db      	uxtb	r3, r3
 800910e:	2b00      	cmp	r3, #0
 8009110:	d106      	bne.n	8009120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f009 fc8a 	bl	8012a34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2202      	movs	r2, #2
 8009124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	3304      	adds	r3, #4
 8009130:	4619      	mov	r1, r3
 8009132:	4610      	mov	r0, r2
 8009134:	f000 fba2 	bl	800987c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
	...

0800914c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2202      	movs	r2, #2
 8009158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	689a      	ldr	r2, [r3, #8]
 8009162:	4b0e      	ldr	r3, [pc, #56]	; (800919c <HAL_TIM_Base_Start+0x50>)
 8009164:	4013      	ands	r3, r2
 8009166:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2b06      	cmp	r3, #6
 800916c:	d00b      	beq.n	8009186 <HAL_TIM_Base_Start+0x3a>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009174:	d007      	beq.n	8009186 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f042 0201 	orr.w	r2, r2, #1
 8009184:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3714      	adds	r7, #20
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	00010007 	.word	0x00010007

080091a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68da      	ldr	r2, [r3, #12]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f042 0201 	orr.w	r2, r2, #1
 80091b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	689a      	ldr	r2, [r3, #8]
 80091be:	4b0c      	ldr	r3, [pc, #48]	; (80091f0 <HAL_TIM_Base_Start_IT+0x50>)
 80091c0:	4013      	ands	r3, r2
 80091c2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2b06      	cmp	r3, #6
 80091c8:	d00b      	beq.n	80091e2 <HAL_TIM_Base_Start_IT+0x42>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091d0:	d007      	beq.n	80091e2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f042 0201 	orr.w	r2, r2, #1
 80091e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	00010007 	.word	0x00010007

080091f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e01d      	b.n	8009242 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2b00      	cmp	r3, #0
 8009210:	d106      	bne.n	8009220 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f009 fc66 	bl	8012aec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2202      	movs	r2, #2
 8009224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	3304      	adds	r3, #4
 8009230:	4619      	mov	r1, r3
 8009232:	4610      	mov	r0, r2
 8009234:	f000 fb22 	bl	800987c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3708      	adds	r7, #8
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b082      	sub	sp, #8
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	f003 0302 	and.w	r3, r3, #2
 800925c:	2b02      	cmp	r3, #2
 800925e:	d122      	bne.n	80092a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	f003 0302 	and.w	r3, r3, #2
 800926a:	2b02      	cmp	r3, #2
 800926c:	d11b      	bne.n	80092a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f06f 0202 	mvn.w	r2, #2
 8009276:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	699b      	ldr	r3, [r3, #24]
 8009284:	f003 0303 	and.w	r3, r3, #3
 8009288:	2b00      	cmp	r3, #0
 800928a:	d003      	beq.n	8009294 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fad7 	bl	8009840 <HAL_TIM_IC_CaptureCallback>
 8009292:	e005      	b.n	80092a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fac9 	bl	800982c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fada 	bl	8009854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	f003 0304 	and.w	r3, r3, #4
 80092b0:	2b04      	cmp	r3, #4
 80092b2:	d122      	bne.n	80092fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	f003 0304 	and.w	r3, r3, #4
 80092be:	2b04      	cmp	r3, #4
 80092c0:	d11b      	bne.n	80092fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f06f 0204 	mvn.w	r2, #4
 80092ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2202      	movs	r2, #2
 80092d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d003      	beq.n	80092e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 faad 	bl	8009840 <HAL_TIM_IC_CaptureCallback>
 80092e6:	e005      	b.n	80092f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fa9f 	bl	800982c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fab0 	bl	8009854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	f003 0308 	and.w	r3, r3, #8
 8009304:	2b08      	cmp	r3, #8
 8009306:	d122      	bne.n	800934e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	f003 0308 	and.w	r3, r3, #8
 8009312:	2b08      	cmp	r3, #8
 8009314:	d11b      	bne.n	800934e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f06f 0208 	mvn.w	r2, #8
 800931e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2204      	movs	r2, #4
 8009324:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	69db      	ldr	r3, [r3, #28]
 800932c:	f003 0303 	and.w	r3, r3, #3
 8009330:	2b00      	cmp	r3, #0
 8009332:	d003      	beq.n	800933c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fa83 	bl	8009840 <HAL_TIM_IC_CaptureCallback>
 800933a:	e005      	b.n	8009348 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fa75 	bl	800982c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 fa86 	bl	8009854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	f003 0310 	and.w	r3, r3, #16
 8009358:	2b10      	cmp	r3, #16
 800935a:	d122      	bne.n	80093a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	f003 0310 	and.w	r3, r3, #16
 8009366:	2b10      	cmp	r3, #16
 8009368:	d11b      	bne.n	80093a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f06f 0210 	mvn.w	r2, #16
 8009372:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2208      	movs	r2, #8
 8009378:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	69db      	ldr	r3, [r3, #28]
 8009380:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009384:	2b00      	cmp	r3, #0
 8009386:	d003      	beq.n	8009390 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fa59 	bl	8009840 <HAL_TIM_IC_CaptureCallback>
 800938e:	e005      	b.n	800939c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 fa4b 	bl	800982c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fa5c 	bl	8009854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	f003 0301 	and.w	r3, r3, #1
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d10e      	bne.n	80093ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	f003 0301 	and.w	r3, r3, #1
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d107      	bne.n	80093ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f06f 0201 	mvn.w	r2, #1
 80093c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f008 fd2b 	bl	8011e24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d8:	2b80      	cmp	r3, #128	; 0x80
 80093da:	d10e      	bne.n	80093fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093e6:	2b80      	cmp	r3, #128	; 0x80
 80093e8:	d107      	bne.n	80093fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80093f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fe3f 	bl	800a078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009408:	d10e      	bne.n	8009428 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009414:	2b80      	cmp	r3, #128	; 0x80
 8009416:	d107      	bne.n	8009428 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fe32 	bl	800a08c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009432:	2b40      	cmp	r3, #64	; 0x40
 8009434:	d10e      	bne.n	8009454 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009440:	2b40      	cmp	r3, #64	; 0x40
 8009442:	d107      	bne.n	8009454 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800944c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fa0a 	bl	8009868 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	f003 0320 	and.w	r3, r3, #32
 800945e:	2b20      	cmp	r3, #32
 8009460:	d10e      	bne.n	8009480 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	f003 0320 	and.w	r3, r3, #32
 800946c:	2b20      	cmp	r3, #32
 800946e:	d107      	bne.n	8009480 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f06f 0220 	mvn.w	r2, #32
 8009478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 fdf2 	bl	800a064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009480:	bf00      	nop
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800949a:	2b01      	cmp	r3, #1
 800949c:	d101      	bne.n	80094a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800949e:	2302      	movs	r3, #2
 80094a0:	e105      	b.n	80096ae <HAL_TIM_PWM_ConfigChannel+0x226>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2202      	movs	r2, #2
 80094ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b14      	cmp	r3, #20
 80094b6:	f200 80f0 	bhi.w	800969a <HAL_TIM_PWM_ConfigChannel+0x212>
 80094ba:	a201      	add	r2, pc, #4	; (adr r2, 80094c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80094bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c0:	08009515 	.word	0x08009515
 80094c4:	0800969b 	.word	0x0800969b
 80094c8:	0800969b 	.word	0x0800969b
 80094cc:	0800969b 	.word	0x0800969b
 80094d0:	08009555 	.word	0x08009555
 80094d4:	0800969b 	.word	0x0800969b
 80094d8:	0800969b 	.word	0x0800969b
 80094dc:	0800969b 	.word	0x0800969b
 80094e0:	08009597 	.word	0x08009597
 80094e4:	0800969b 	.word	0x0800969b
 80094e8:	0800969b 	.word	0x0800969b
 80094ec:	0800969b 	.word	0x0800969b
 80094f0:	080095d7 	.word	0x080095d7
 80094f4:	0800969b 	.word	0x0800969b
 80094f8:	0800969b 	.word	0x0800969b
 80094fc:	0800969b 	.word	0x0800969b
 8009500:	08009619 	.word	0x08009619
 8009504:	0800969b 	.word	0x0800969b
 8009508:	0800969b 	.word	0x0800969b
 800950c:	0800969b 	.word	0x0800969b
 8009510:	08009659 	.word	0x08009659
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68b9      	ldr	r1, [r7, #8]
 800951a:	4618      	mov	r0, r3
 800951c:	f000 fa4e 	bl	80099bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	699a      	ldr	r2, [r3, #24]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f042 0208 	orr.w	r2, r2, #8
 800952e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	699a      	ldr	r2, [r3, #24]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f022 0204 	bic.w	r2, r2, #4
 800953e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6999      	ldr	r1, [r3, #24]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	691a      	ldr	r2, [r3, #16]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	430a      	orrs	r2, r1
 8009550:	619a      	str	r2, [r3, #24]
      break;
 8009552:	e0a3      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68b9      	ldr	r1, [r7, #8]
 800955a:	4618      	mov	r0, r3
 800955c:	f000 faa0 	bl	8009aa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	699a      	ldr	r2, [r3, #24]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800956e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	699a      	ldr	r2, [r3, #24]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800957e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6999      	ldr	r1, [r3, #24]
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	021a      	lsls	r2, r3, #8
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	430a      	orrs	r2, r1
 8009592:	619a      	str	r2, [r3, #24]
      break;
 8009594:	e082      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68b9      	ldr	r1, [r7, #8]
 800959c:	4618      	mov	r0, r3
 800959e:	f000 faf7 	bl	8009b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	69da      	ldr	r2, [r3, #28]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f042 0208 	orr.w	r2, r2, #8
 80095b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	69da      	ldr	r2, [r3, #28]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f022 0204 	bic.w	r2, r2, #4
 80095c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	69d9      	ldr	r1, [r3, #28]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	691a      	ldr	r2, [r3, #16]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	430a      	orrs	r2, r1
 80095d2:	61da      	str	r2, [r3, #28]
      break;
 80095d4:	e062      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68b9      	ldr	r1, [r7, #8]
 80095dc:	4618      	mov	r0, r3
 80095de:	f000 fb4d 	bl	8009c7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	69da      	ldr	r2, [r3, #28]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	69da      	ldr	r2, [r3, #28]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	69d9      	ldr	r1, [r3, #28]
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	021a      	lsls	r2, r3, #8
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	430a      	orrs	r2, r1
 8009614:	61da      	str	r2, [r3, #28]
      break;
 8009616:	e041      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68b9      	ldr	r1, [r7, #8]
 800961e:	4618      	mov	r0, r3
 8009620:	f000 fb84 	bl	8009d2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f042 0208 	orr.w	r2, r2, #8
 8009632:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f022 0204 	bic.w	r2, r2, #4
 8009642:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	691a      	ldr	r2, [r3, #16]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	430a      	orrs	r2, r1
 8009654:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009656:	e021      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68b9      	ldr	r1, [r7, #8]
 800965e:	4618      	mov	r0, r3
 8009660:	f000 fbb6 	bl	8009dd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009672:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009682:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	021a      	lsls	r2, r3, #8
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	430a      	orrs	r2, r1
 8009696:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009698:	e000      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800969a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop

080096b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d101      	bne.n	80096d0 <HAL_TIM_ConfigClockSource+0x18>
 80096cc:	2302      	movs	r3, #2
 80096ce:	e0a6      	b.n	800981e <HAL_TIM_ConfigClockSource+0x166>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2202      	movs	r2, #2
 80096dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	4b4f      	ldr	r3, [pc, #316]	; (8009828 <HAL_TIM_ConfigClockSource+0x170>)
 80096ec:	4013      	ands	r3, r2
 80096ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2b40      	cmp	r3, #64	; 0x40
 8009706:	d067      	beq.n	80097d8 <HAL_TIM_ConfigClockSource+0x120>
 8009708:	2b40      	cmp	r3, #64	; 0x40
 800970a:	d80b      	bhi.n	8009724 <HAL_TIM_ConfigClockSource+0x6c>
 800970c:	2b10      	cmp	r3, #16
 800970e:	d073      	beq.n	80097f8 <HAL_TIM_ConfigClockSource+0x140>
 8009710:	2b10      	cmp	r3, #16
 8009712:	d802      	bhi.n	800971a <HAL_TIM_ConfigClockSource+0x62>
 8009714:	2b00      	cmp	r3, #0
 8009716:	d06f      	beq.n	80097f8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009718:	e078      	b.n	800980c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800971a:	2b20      	cmp	r3, #32
 800971c:	d06c      	beq.n	80097f8 <HAL_TIM_ConfigClockSource+0x140>
 800971e:	2b30      	cmp	r3, #48	; 0x30
 8009720:	d06a      	beq.n	80097f8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009722:	e073      	b.n	800980c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009724:	2b70      	cmp	r3, #112	; 0x70
 8009726:	d00d      	beq.n	8009744 <HAL_TIM_ConfigClockSource+0x8c>
 8009728:	2b70      	cmp	r3, #112	; 0x70
 800972a:	d804      	bhi.n	8009736 <HAL_TIM_ConfigClockSource+0x7e>
 800972c:	2b50      	cmp	r3, #80	; 0x50
 800972e:	d033      	beq.n	8009798 <HAL_TIM_ConfigClockSource+0xe0>
 8009730:	2b60      	cmp	r3, #96	; 0x60
 8009732:	d041      	beq.n	80097b8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009734:	e06a      	b.n	800980c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800973a:	d066      	beq.n	800980a <HAL_TIM_ConfigClockSource+0x152>
 800973c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009740:	d017      	beq.n	8009772 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009742:	e063      	b.n	800980c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6818      	ldr	r0, [r3, #0]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	6899      	ldr	r1, [r3, #8]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	685a      	ldr	r2, [r3, #4]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	f000 fc0a 	bl	8009f6c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009766:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	609a      	str	r2, [r3, #8]
      break;
 8009770:	e04c      	b.n	800980c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6818      	ldr	r0, [r3, #0]
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	6899      	ldr	r1, [r3, #8]
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	685a      	ldr	r2, [r3, #4]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	f000 fbf3 	bl	8009f6c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	689a      	ldr	r2, [r3, #8]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009794:	609a      	str	r2, [r3, #8]
      break;
 8009796:	e039      	b.n	800980c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6818      	ldr	r0, [r3, #0]
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	6859      	ldr	r1, [r3, #4]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	461a      	mov	r2, r3
 80097a6:	f000 fb67 	bl	8009e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2150      	movs	r1, #80	; 0x50
 80097b0:	4618      	mov	r0, r3
 80097b2:	f000 fbc0 	bl	8009f36 <TIM_ITRx_SetConfig>
      break;
 80097b6:	e029      	b.n	800980c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6818      	ldr	r0, [r3, #0]
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	6859      	ldr	r1, [r3, #4]
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	461a      	mov	r2, r3
 80097c6:	f000 fb86 	bl	8009ed6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2160      	movs	r1, #96	; 0x60
 80097d0:	4618      	mov	r0, r3
 80097d2:	f000 fbb0 	bl	8009f36 <TIM_ITRx_SetConfig>
      break;
 80097d6:	e019      	b.n	800980c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6818      	ldr	r0, [r3, #0]
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	6859      	ldr	r1, [r3, #4]
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	461a      	mov	r2, r3
 80097e6:	f000 fb47 	bl	8009e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2140      	movs	r1, #64	; 0x40
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 fba0 	bl	8009f36 <TIM_ITRx_SetConfig>
      break;
 80097f6:	e009      	b.n	800980c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4619      	mov	r1, r3
 8009802:	4610      	mov	r0, r2
 8009804:	f000 fb97 	bl	8009f36 <TIM_ITRx_SetConfig>
      break;
 8009808:	e000      	b.n	800980c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800980a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	fffeff88 	.word	0xfffeff88

0800982c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a40      	ldr	r2, [pc, #256]	; (8009990 <TIM_Base_SetConfig+0x114>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d013      	beq.n	80098bc <TIM_Base_SetConfig+0x40>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800989a:	d00f      	beq.n	80098bc <TIM_Base_SetConfig+0x40>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a3d      	ldr	r2, [pc, #244]	; (8009994 <TIM_Base_SetConfig+0x118>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d00b      	beq.n	80098bc <TIM_Base_SetConfig+0x40>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a3c      	ldr	r2, [pc, #240]	; (8009998 <TIM_Base_SetConfig+0x11c>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d007      	beq.n	80098bc <TIM_Base_SetConfig+0x40>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a3b      	ldr	r2, [pc, #236]	; (800999c <TIM_Base_SetConfig+0x120>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d003      	beq.n	80098bc <TIM_Base_SetConfig+0x40>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a3a      	ldr	r2, [pc, #232]	; (80099a0 <TIM_Base_SetConfig+0x124>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d108      	bne.n	80098ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	68fa      	ldr	r2, [r7, #12]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a2f      	ldr	r2, [pc, #188]	; (8009990 <TIM_Base_SetConfig+0x114>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d02b      	beq.n	800992e <TIM_Base_SetConfig+0xb2>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098dc:	d027      	beq.n	800992e <TIM_Base_SetConfig+0xb2>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a2c      	ldr	r2, [pc, #176]	; (8009994 <TIM_Base_SetConfig+0x118>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d023      	beq.n	800992e <TIM_Base_SetConfig+0xb2>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a2b      	ldr	r2, [pc, #172]	; (8009998 <TIM_Base_SetConfig+0x11c>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d01f      	beq.n	800992e <TIM_Base_SetConfig+0xb2>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a2a      	ldr	r2, [pc, #168]	; (800999c <TIM_Base_SetConfig+0x120>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d01b      	beq.n	800992e <TIM_Base_SetConfig+0xb2>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a29      	ldr	r2, [pc, #164]	; (80099a0 <TIM_Base_SetConfig+0x124>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d017      	beq.n	800992e <TIM_Base_SetConfig+0xb2>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a28      	ldr	r2, [pc, #160]	; (80099a4 <TIM_Base_SetConfig+0x128>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d013      	beq.n	800992e <TIM_Base_SetConfig+0xb2>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a27      	ldr	r2, [pc, #156]	; (80099a8 <TIM_Base_SetConfig+0x12c>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d00f      	beq.n	800992e <TIM_Base_SetConfig+0xb2>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4a26      	ldr	r2, [pc, #152]	; (80099ac <TIM_Base_SetConfig+0x130>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d00b      	beq.n	800992e <TIM_Base_SetConfig+0xb2>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4a25      	ldr	r2, [pc, #148]	; (80099b0 <TIM_Base_SetConfig+0x134>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d007      	beq.n	800992e <TIM_Base_SetConfig+0xb2>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4a24      	ldr	r2, [pc, #144]	; (80099b4 <TIM_Base_SetConfig+0x138>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d003      	beq.n	800992e <TIM_Base_SetConfig+0xb2>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4a23      	ldr	r2, [pc, #140]	; (80099b8 <TIM_Base_SetConfig+0x13c>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d108      	bne.n	8009940 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	4313      	orrs	r3, r2
 800993e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	695b      	ldr	r3, [r3, #20]
 800994a:	4313      	orrs	r3, r2
 800994c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	689a      	ldr	r2, [r3, #8]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a0a      	ldr	r2, [pc, #40]	; (8009990 <TIM_Base_SetConfig+0x114>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d003      	beq.n	8009974 <TIM_Base_SetConfig+0xf8>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a0c      	ldr	r2, [pc, #48]	; (80099a0 <TIM_Base_SetConfig+0x124>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d103      	bne.n	800997c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	691a      	ldr	r2, [r3, #16]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	615a      	str	r2, [r3, #20]
}
 8009982:	bf00      	nop
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	40010000 	.word	0x40010000
 8009994:	40000400 	.word	0x40000400
 8009998:	40000800 	.word	0x40000800
 800999c:	40000c00 	.word	0x40000c00
 80099a0:	40010400 	.word	0x40010400
 80099a4:	40014000 	.word	0x40014000
 80099a8:	40014400 	.word	0x40014400
 80099ac:	40014800 	.word	0x40014800
 80099b0:	40001800 	.word	0x40001800
 80099b4:	40001c00 	.word	0x40001c00
 80099b8:	40002000 	.word	0x40002000

080099bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099bc:	b480      	push	{r7}
 80099be:	b087      	sub	sp, #28
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	f023 0201 	bic.w	r2, r3, #1
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	4b2b      	ldr	r3, [pc, #172]	; (8009a94 <TIM_OC1_SetConfig+0xd8>)
 80099e8:	4013      	ands	r3, r2
 80099ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f023 0303 	bic.w	r3, r3, #3
 80099f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	f023 0302 	bic.w	r3, r3, #2
 8009a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a21      	ldr	r2, [pc, #132]	; (8009a98 <TIM_OC1_SetConfig+0xdc>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d003      	beq.n	8009a20 <TIM_OC1_SetConfig+0x64>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a20      	ldr	r2, [pc, #128]	; (8009a9c <TIM_OC1_SetConfig+0xe0>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d10c      	bne.n	8009a3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	f023 0308 	bic.w	r3, r3, #8
 8009a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	f023 0304 	bic.w	r3, r3, #4
 8009a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a16      	ldr	r2, [pc, #88]	; (8009a98 <TIM_OC1_SetConfig+0xdc>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d003      	beq.n	8009a4a <TIM_OC1_SetConfig+0x8e>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a15      	ldr	r2, [pc, #84]	; (8009a9c <TIM_OC1_SetConfig+0xe0>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d111      	bne.n	8009a6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	695b      	ldr	r3, [r3, #20]
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	693a      	ldr	r2, [r7, #16]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	697a      	ldr	r2, [r7, #20]
 8009a86:	621a      	str	r2, [r3, #32]
}
 8009a88:	bf00      	nop
 8009a8a:	371c      	adds	r7, #28
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	fffeff8f 	.word	0xfffeff8f
 8009a98:	40010000 	.word	0x40010000
 8009a9c:	40010400 	.word	0x40010400

08009aa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b087      	sub	sp, #28
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	f023 0210 	bic.w	r2, r3, #16
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	4b2e      	ldr	r3, [pc, #184]	; (8009b84 <TIM_OC2_SetConfig+0xe4>)
 8009acc:	4013      	ands	r3, r2
 8009ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	021b      	lsls	r3, r3, #8
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	f023 0320 	bic.w	r3, r3, #32
 8009aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	011b      	lsls	r3, r3, #4
 8009af2:	697a      	ldr	r2, [r7, #20]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4a23      	ldr	r2, [pc, #140]	; (8009b88 <TIM_OC2_SetConfig+0xe8>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d003      	beq.n	8009b08 <TIM_OC2_SetConfig+0x68>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4a22      	ldr	r2, [pc, #136]	; (8009b8c <TIM_OC2_SetConfig+0xec>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d10d      	bne.n	8009b24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	011b      	lsls	r3, r3, #4
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4a18      	ldr	r2, [pc, #96]	; (8009b88 <TIM_OC2_SetConfig+0xe8>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d003      	beq.n	8009b34 <TIM_OC2_SetConfig+0x94>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a17      	ldr	r2, [pc, #92]	; (8009b8c <TIM_OC2_SetConfig+0xec>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d113      	bne.n	8009b5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	695b      	ldr	r3, [r3, #20]
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	693a      	ldr	r2, [r7, #16]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	685a      	ldr	r2, [r3, #4]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	621a      	str	r2, [r3, #32]
}
 8009b76:	bf00      	nop
 8009b78:	371c      	adds	r7, #28
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	feff8fff 	.word	0xfeff8fff
 8009b88:	40010000 	.word	0x40010000
 8009b8c:	40010400 	.word	0x40010400

08009b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b087      	sub	sp, #28
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a1b      	ldr	r3, [r3, #32]
 8009b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a1b      	ldr	r3, [r3, #32]
 8009baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	69db      	ldr	r3, [r3, #28]
 8009bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	4b2d      	ldr	r3, [pc, #180]	; (8009c70 <TIM_OC3_SetConfig+0xe0>)
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f023 0303 	bic.w	r3, r3, #3
 8009bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	021b      	lsls	r3, r3, #8
 8009be0:	697a      	ldr	r2, [r7, #20]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4a22      	ldr	r2, [pc, #136]	; (8009c74 <TIM_OC3_SetConfig+0xe4>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d003      	beq.n	8009bf6 <TIM_OC3_SetConfig+0x66>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a21      	ldr	r2, [pc, #132]	; (8009c78 <TIM_OC3_SetConfig+0xe8>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d10d      	bne.n	8009c12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	021b      	lsls	r3, r3, #8
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4a17      	ldr	r2, [pc, #92]	; (8009c74 <TIM_OC3_SetConfig+0xe4>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d003      	beq.n	8009c22 <TIM_OC3_SetConfig+0x92>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a16      	ldr	r2, [pc, #88]	; (8009c78 <TIM_OC3_SetConfig+0xe8>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d113      	bne.n	8009c4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	695b      	ldr	r3, [r3, #20]
 8009c36:	011b      	lsls	r3, r3, #4
 8009c38:	693a      	ldr	r2, [r7, #16]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	699b      	ldr	r3, [r3, #24]
 8009c42:	011b      	lsls	r3, r3, #4
 8009c44:	693a      	ldr	r2, [r7, #16]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	693a      	ldr	r2, [r7, #16]
 8009c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	685a      	ldr	r2, [r3, #4]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	697a      	ldr	r2, [r7, #20]
 8009c62:	621a      	str	r2, [r3, #32]
}
 8009c64:	bf00      	nop
 8009c66:	371c      	adds	r7, #28
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	fffeff8f 	.word	0xfffeff8f
 8009c74:	40010000 	.word	0x40010000
 8009c78:	40010400 	.word	0x40010400

08009c7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b087      	sub	sp, #28
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a1b      	ldr	r3, [r3, #32]
 8009c96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	69db      	ldr	r3, [r3, #28]
 8009ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	4b1e      	ldr	r3, [pc, #120]	; (8009d20 <TIM_OC4_SetConfig+0xa4>)
 8009ca8:	4013      	ands	r3, r2
 8009caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	021b      	lsls	r3, r3, #8
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	031b      	lsls	r3, r3, #12
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a13      	ldr	r2, [pc, #76]	; (8009d24 <TIM_OC4_SetConfig+0xa8>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d003      	beq.n	8009ce4 <TIM_OC4_SetConfig+0x68>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a12      	ldr	r2, [pc, #72]	; (8009d28 <TIM_OC4_SetConfig+0xac>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d109      	bne.n	8009cf8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	695b      	ldr	r3, [r3, #20]
 8009cf0:	019b      	lsls	r3, r3, #6
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	697a      	ldr	r2, [r7, #20]
 8009cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	685a      	ldr	r2, [r3, #4]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	693a      	ldr	r2, [r7, #16]
 8009d10:	621a      	str	r2, [r3, #32]
}
 8009d12:	bf00      	nop
 8009d14:	371c      	adds	r7, #28
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	feff8fff 	.word	0xfeff8fff
 8009d24:	40010000 	.word	0x40010000
 8009d28:	40010400 	.word	0x40010400

08009d2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b087      	sub	sp, #28
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6a1b      	ldr	r3, [r3, #32]
 8009d3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a1b      	ldr	r3, [r3, #32]
 8009d46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	4b1b      	ldr	r3, [pc, #108]	; (8009dc4 <TIM_OC5_SetConfig+0x98>)
 8009d58:	4013      	ands	r3, r2
 8009d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009d6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	041b      	lsls	r3, r3, #16
 8009d74:	693a      	ldr	r2, [r7, #16]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a12      	ldr	r2, [pc, #72]	; (8009dc8 <TIM_OC5_SetConfig+0x9c>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d003      	beq.n	8009d8a <TIM_OC5_SetConfig+0x5e>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4a11      	ldr	r2, [pc, #68]	; (8009dcc <TIM_OC5_SetConfig+0xa0>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d109      	bne.n	8009d9e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	695b      	ldr	r3, [r3, #20]
 8009d96:	021b      	lsls	r3, r3, #8
 8009d98:	697a      	ldr	r2, [r7, #20]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	697a      	ldr	r2, [r7, #20]
 8009da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	685a      	ldr	r2, [r3, #4]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	621a      	str	r2, [r3, #32]
}
 8009db8:	bf00      	nop
 8009dba:	371c      	adds	r7, #28
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr
 8009dc4:	fffeff8f 	.word	0xfffeff8f
 8009dc8:	40010000 	.word	0x40010000
 8009dcc:	40010400 	.word	0x40010400

08009dd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b087      	sub	sp, #28
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a1b      	ldr	r3, [r3, #32]
 8009dde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a1b      	ldr	r3, [r3, #32]
 8009dea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	4b1c      	ldr	r3, [pc, #112]	; (8009e6c <TIM_OC6_SetConfig+0x9c>)
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	021b      	lsls	r3, r3, #8
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	051b      	lsls	r3, r3, #20
 8009e1a:	693a      	ldr	r2, [r7, #16]
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a13      	ldr	r2, [pc, #76]	; (8009e70 <TIM_OC6_SetConfig+0xa0>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d003      	beq.n	8009e30 <TIM_OC6_SetConfig+0x60>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a12      	ldr	r2, [pc, #72]	; (8009e74 <TIM_OC6_SetConfig+0xa4>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d109      	bne.n	8009e44 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	695b      	ldr	r3, [r3, #20]
 8009e3c:	029b      	lsls	r3, r3, #10
 8009e3e:	697a      	ldr	r2, [r7, #20]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	697a      	ldr	r2, [r7, #20]
 8009e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	685a      	ldr	r2, [r3, #4]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	621a      	str	r2, [r3, #32]
}
 8009e5e:	bf00      	nop
 8009e60:	371c      	adds	r7, #28
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	feff8fff 	.word	0xfeff8fff
 8009e70:	40010000 	.word	0x40010000
 8009e74:	40010400 	.word	0x40010400

08009e78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b087      	sub	sp, #28
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6a1b      	ldr	r3, [r3, #32]
 8009e88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6a1b      	ldr	r3, [r3, #32]
 8009e8e:	f023 0201 	bic.w	r2, r3, #1
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	699b      	ldr	r3, [r3, #24]
 8009e9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	011b      	lsls	r3, r3, #4
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	f023 030a 	bic.w	r3, r3, #10
 8009eb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	693a      	ldr	r2, [r7, #16]
 8009ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	621a      	str	r2, [r3, #32]
}
 8009eca:	bf00      	nop
 8009ecc:	371c      	adds	r7, #28
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b087      	sub	sp, #28
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	60f8      	str	r0, [r7, #12]
 8009ede:	60b9      	str	r1, [r7, #8]
 8009ee0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	f023 0210 	bic.w	r2, r3, #16
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	699b      	ldr	r3, [r3, #24]
 8009ef2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6a1b      	ldr	r3, [r3, #32]
 8009ef8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	031b      	lsls	r3, r3, #12
 8009f06:	697a      	ldr	r2, [r7, #20]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	011b      	lsls	r3, r3, #4
 8009f18:	693a      	ldr	r2, [r7, #16]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	621a      	str	r2, [r3, #32]
}
 8009f2a:	bf00      	nop
 8009f2c:	371c      	adds	r7, #28
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr

08009f36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f36:	b480      	push	{r7}
 8009f38:	b085      	sub	sp, #20
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f4e:	683a      	ldr	r2, [r7, #0]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	f043 0307 	orr.w	r3, r3, #7
 8009f58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	609a      	str	r2, [r3, #8]
}
 8009f60:	bf00      	nop
 8009f62:	3714      	adds	r7, #20
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b087      	sub	sp, #28
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]
 8009f78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	021a      	lsls	r2, r3, #8
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	431a      	orrs	r2, r3
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	697a      	ldr	r2, [r7, #20]
 8009f9e:	609a      	str	r2, [r3, #8]
}
 8009fa0:	bf00      	nop
 8009fa2:	371c      	adds	r7, #28
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d101      	bne.n	8009fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	e045      	b.n	800a050 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2202      	movs	r2, #2
 8009fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a1c      	ldr	r2, [pc, #112]	; (800a05c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d004      	beq.n	8009ff8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a1b      	ldr	r2, [pc, #108]	; (800a060 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d108      	bne.n	800a00a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009ffe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	4313      	orrs	r3, r2
 800a008:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a010:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	4313      	orrs	r3, r2
 800a01a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a022:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	68ba      	ldr	r2, [r7, #8]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68ba      	ldr	r2, [r7, #8]
 800a03c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3714      	adds	r7, #20
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr
 800a05c:	40010000 	.word	0x40010000
 800a060:	40010400 	.word	0x40010400

0800a064 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a06c:	bf00      	nop
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a080:	bf00      	nop
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a094:	bf00      	nop
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d101      	bne.n	800a0b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e040      	b.n	800a134 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d106      	bne.n	800a0c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f008 fddc 	bl	8012c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2224      	movs	r2, #36	; 0x24
 800a0cc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f022 0201 	bic.w	r2, r2, #1
 800a0dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f82c 	bl	800a13c <UART_SetConfig>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d101      	bne.n	800a0ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e022      	b.n	800a134 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d002      	beq.n	800a0fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 fac4 	bl	800a684 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a10a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	689a      	ldr	r2, [r3, #8]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a11a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f042 0201 	orr.w	r2, r2, #1
 800a12a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 fb4b 	bl	800a7c8 <UART_CheckIdleState>
 800a132:	4603      	mov	r3, r0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b088      	sub	sp, #32
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a144:	2300      	movs	r3, #0
 800a146:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a148:	2300      	movs	r3, #0
 800a14a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	689a      	ldr	r2, [r3, #8]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	691b      	ldr	r3, [r3, #16]
 800a154:	431a      	orrs	r2, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	431a      	orrs	r2, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	69db      	ldr	r3, [r3, #28]
 800a160:	4313      	orrs	r3, r2
 800a162:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	4bb1      	ldr	r3, [pc, #708]	; (800a430 <UART_SetConfig+0x2f4>)
 800a16c:	4013      	ands	r3, r2
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	6812      	ldr	r2, [r2, #0]
 800a172:	6939      	ldr	r1, [r7, #16]
 800a174:	430b      	orrs	r3, r1
 800a176:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	68da      	ldr	r2, [r3, #12]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	430a      	orrs	r2, r1
 800a18c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6a1b      	ldr	r3, [r3, #32]
 800a198:	693a      	ldr	r2, [r7, #16]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	430a      	orrs	r2, r1
 800a1b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a9f      	ldr	r2, [pc, #636]	; (800a434 <UART_SetConfig+0x2f8>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d121      	bne.n	800a200 <UART_SetConfig+0xc4>
 800a1bc:	4b9e      	ldr	r3, [pc, #632]	; (800a438 <UART_SetConfig+0x2fc>)
 800a1be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1c2:	f003 0303 	and.w	r3, r3, #3
 800a1c6:	2b03      	cmp	r3, #3
 800a1c8:	d816      	bhi.n	800a1f8 <UART_SetConfig+0xbc>
 800a1ca:	a201      	add	r2, pc, #4	; (adr r2, 800a1d0 <UART_SetConfig+0x94>)
 800a1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d0:	0800a1e1 	.word	0x0800a1e1
 800a1d4:	0800a1ed 	.word	0x0800a1ed
 800a1d8:	0800a1e7 	.word	0x0800a1e7
 800a1dc:	0800a1f3 	.word	0x0800a1f3
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	77fb      	strb	r3, [r7, #31]
 800a1e4:	e151      	b.n	800a48a <UART_SetConfig+0x34e>
 800a1e6:	2302      	movs	r3, #2
 800a1e8:	77fb      	strb	r3, [r7, #31]
 800a1ea:	e14e      	b.n	800a48a <UART_SetConfig+0x34e>
 800a1ec:	2304      	movs	r3, #4
 800a1ee:	77fb      	strb	r3, [r7, #31]
 800a1f0:	e14b      	b.n	800a48a <UART_SetConfig+0x34e>
 800a1f2:	2308      	movs	r3, #8
 800a1f4:	77fb      	strb	r3, [r7, #31]
 800a1f6:	e148      	b.n	800a48a <UART_SetConfig+0x34e>
 800a1f8:	2310      	movs	r3, #16
 800a1fa:	77fb      	strb	r3, [r7, #31]
 800a1fc:	bf00      	nop
 800a1fe:	e144      	b.n	800a48a <UART_SetConfig+0x34e>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a8d      	ldr	r2, [pc, #564]	; (800a43c <UART_SetConfig+0x300>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d134      	bne.n	800a274 <UART_SetConfig+0x138>
 800a20a:	4b8b      	ldr	r3, [pc, #556]	; (800a438 <UART_SetConfig+0x2fc>)
 800a20c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a210:	f003 030c 	and.w	r3, r3, #12
 800a214:	2b0c      	cmp	r3, #12
 800a216:	d829      	bhi.n	800a26c <UART_SetConfig+0x130>
 800a218:	a201      	add	r2, pc, #4	; (adr r2, 800a220 <UART_SetConfig+0xe4>)
 800a21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21e:	bf00      	nop
 800a220:	0800a255 	.word	0x0800a255
 800a224:	0800a26d 	.word	0x0800a26d
 800a228:	0800a26d 	.word	0x0800a26d
 800a22c:	0800a26d 	.word	0x0800a26d
 800a230:	0800a261 	.word	0x0800a261
 800a234:	0800a26d 	.word	0x0800a26d
 800a238:	0800a26d 	.word	0x0800a26d
 800a23c:	0800a26d 	.word	0x0800a26d
 800a240:	0800a25b 	.word	0x0800a25b
 800a244:	0800a26d 	.word	0x0800a26d
 800a248:	0800a26d 	.word	0x0800a26d
 800a24c:	0800a26d 	.word	0x0800a26d
 800a250:	0800a267 	.word	0x0800a267
 800a254:	2300      	movs	r3, #0
 800a256:	77fb      	strb	r3, [r7, #31]
 800a258:	e117      	b.n	800a48a <UART_SetConfig+0x34e>
 800a25a:	2302      	movs	r3, #2
 800a25c:	77fb      	strb	r3, [r7, #31]
 800a25e:	e114      	b.n	800a48a <UART_SetConfig+0x34e>
 800a260:	2304      	movs	r3, #4
 800a262:	77fb      	strb	r3, [r7, #31]
 800a264:	e111      	b.n	800a48a <UART_SetConfig+0x34e>
 800a266:	2308      	movs	r3, #8
 800a268:	77fb      	strb	r3, [r7, #31]
 800a26a:	e10e      	b.n	800a48a <UART_SetConfig+0x34e>
 800a26c:	2310      	movs	r3, #16
 800a26e:	77fb      	strb	r3, [r7, #31]
 800a270:	bf00      	nop
 800a272:	e10a      	b.n	800a48a <UART_SetConfig+0x34e>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a71      	ldr	r2, [pc, #452]	; (800a440 <UART_SetConfig+0x304>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d120      	bne.n	800a2c0 <UART_SetConfig+0x184>
 800a27e:	4b6e      	ldr	r3, [pc, #440]	; (800a438 <UART_SetConfig+0x2fc>)
 800a280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a284:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a288:	2b10      	cmp	r3, #16
 800a28a:	d00f      	beq.n	800a2ac <UART_SetConfig+0x170>
 800a28c:	2b10      	cmp	r3, #16
 800a28e:	d802      	bhi.n	800a296 <UART_SetConfig+0x15a>
 800a290:	2b00      	cmp	r3, #0
 800a292:	d005      	beq.n	800a2a0 <UART_SetConfig+0x164>
 800a294:	e010      	b.n	800a2b8 <UART_SetConfig+0x17c>
 800a296:	2b20      	cmp	r3, #32
 800a298:	d005      	beq.n	800a2a6 <UART_SetConfig+0x16a>
 800a29a:	2b30      	cmp	r3, #48	; 0x30
 800a29c:	d009      	beq.n	800a2b2 <UART_SetConfig+0x176>
 800a29e:	e00b      	b.n	800a2b8 <UART_SetConfig+0x17c>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	77fb      	strb	r3, [r7, #31]
 800a2a4:	e0f1      	b.n	800a48a <UART_SetConfig+0x34e>
 800a2a6:	2302      	movs	r3, #2
 800a2a8:	77fb      	strb	r3, [r7, #31]
 800a2aa:	e0ee      	b.n	800a48a <UART_SetConfig+0x34e>
 800a2ac:	2304      	movs	r3, #4
 800a2ae:	77fb      	strb	r3, [r7, #31]
 800a2b0:	e0eb      	b.n	800a48a <UART_SetConfig+0x34e>
 800a2b2:	2308      	movs	r3, #8
 800a2b4:	77fb      	strb	r3, [r7, #31]
 800a2b6:	e0e8      	b.n	800a48a <UART_SetConfig+0x34e>
 800a2b8:	2310      	movs	r3, #16
 800a2ba:	77fb      	strb	r3, [r7, #31]
 800a2bc:	bf00      	nop
 800a2be:	e0e4      	b.n	800a48a <UART_SetConfig+0x34e>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a5f      	ldr	r2, [pc, #380]	; (800a444 <UART_SetConfig+0x308>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d120      	bne.n	800a30c <UART_SetConfig+0x1d0>
 800a2ca:	4b5b      	ldr	r3, [pc, #364]	; (800a438 <UART_SetConfig+0x2fc>)
 800a2cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a2d4:	2b40      	cmp	r3, #64	; 0x40
 800a2d6:	d00f      	beq.n	800a2f8 <UART_SetConfig+0x1bc>
 800a2d8:	2b40      	cmp	r3, #64	; 0x40
 800a2da:	d802      	bhi.n	800a2e2 <UART_SetConfig+0x1a6>
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d005      	beq.n	800a2ec <UART_SetConfig+0x1b0>
 800a2e0:	e010      	b.n	800a304 <UART_SetConfig+0x1c8>
 800a2e2:	2b80      	cmp	r3, #128	; 0x80
 800a2e4:	d005      	beq.n	800a2f2 <UART_SetConfig+0x1b6>
 800a2e6:	2bc0      	cmp	r3, #192	; 0xc0
 800a2e8:	d009      	beq.n	800a2fe <UART_SetConfig+0x1c2>
 800a2ea:	e00b      	b.n	800a304 <UART_SetConfig+0x1c8>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	77fb      	strb	r3, [r7, #31]
 800a2f0:	e0cb      	b.n	800a48a <UART_SetConfig+0x34e>
 800a2f2:	2302      	movs	r3, #2
 800a2f4:	77fb      	strb	r3, [r7, #31]
 800a2f6:	e0c8      	b.n	800a48a <UART_SetConfig+0x34e>
 800a2f8:	2304      	movs	r3, #4
 800a2fa:	77fb      	strb	r3, [r7, #31]
 800a2fc:	e0c5      	b.n	800a48a <UART_SetConfig+0x34e>
 800a2fe:	2308      	movs	r3, #8
 800a300:	77fb      	strb	r3, [r7, #31]
 800a302:	e0c2      	b.n	800a48a <UART_SetConfig+0x34e>
 800a304:	2310      	movs	r3, #16
 800a306:	77fb      	strb	r3, [r7, #31]
 800a308:	bf00      	nop
 800a30a:	e0be      	b.n	800a48a <UART_SetConfig+0x34e>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a4d      	ldr	r2, [pc, #308]	; (800a448 <UART_SetConfig+0x30c>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d124      	bne.n	800a360 <UART_SetConfig+0x224>
 800a316:	4b48      	ldr	r3, [pc, #288]	; (800a438 <UART_SetConfig+0x2fc>)
 800a318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a31c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a324:	d012      	beq.n	800a34c <UART_SetConfig+0x210>
 800a326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a32a:	d802      	bhi.n	800a332 <UART_SetConfig+0x1f6>
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d007      	beq.n	800a340 <UART_SetConfig+0x204>
 800a330:	e012      	b.n	800a358 <UART_SetConfig+0x21c>
 800a332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a336:	d006      	beq.n	800a346 <UART_SetConfig+0x20a>
 800a338:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a33c:	d009      	beq.n	800a352 <UART_SetConfig+0x216>
 800a33e:	e00b      	b.n	800a358 <UART_SetConfig+0x21c>
 800a340:	2300      	movs	r3, #0
 800a342:	77fb      	strb	r3, [r7, #31]
 800a344:	e0a1      	b.n	800a48a <UART_SetConfig+0x34e>
 800a346:	2302      	movs	r3, #2
 800a348:	77fb      	strb	r3, [r7, #31]
 800a34a:	e09e      	b.n	800a48a <UART_SetConfig+0x34e>
 800a34c:	2304      	movs	r3, #4
 800a34e:	77fb      	strb	r3, [r7, #31]
 800a350:	e09b      	b.n	800a48a <UART_SetConfig+0x34e>
 800a352:	2308      	movs	r3, #8
 800a354:	77fb      	strb	r3, [r7, #31]
 800a356:	e098      	b.n	800a48a <UART_SetConfig+0x34e>
 800a358:	2310      	movs	r3, #16
 800a35a:	77fb      	strb	r3, [r7, #31]
 800a35c:	bf00      	nop
 800a35e:	e094      	b.n	800a48a <UART_SetConfig+0x34e>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a39      	ldr	r2, [pc, #228]	; (800a44c <UART_SetConfig+0x310>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d124      	bne.n	800a3b4 <UART_SetConfig+0x278>
 800a36a:	4b33      	ldr	r3, [pc, #204]	; (800a438 <UART_SetConfig+0x2fc>)
 800a36c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a370:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a378:	d012      	beq.n	800a3a0 <UART_SetConfig+0x264>
 800a37a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a37e:	d802      	bhi.n	800a386 <UART_SetConfig+0x24a>
 800a380:	2b00      	cmp	r3, #0
 800a382:	d007      	beq.n	800a394 <UART_SetConfig+0x258>
 800a384:	e012      	b.n	800a3ac <UART_SetConfig+0x270>
 800a386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a38a:	d006      	beq.n	800a39a <UART_SetConfig+0x25e>
 800a38c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a390:	d009      	beq.n	800a3a6 <UART_SetConfig+0x26a>
 800a392:	e00b      	b.n	800a3ac <UART_SetConfig+0x270>
 800a394:	2301      	movs	r3, #1
 800a396:	77fb      	strb	r3, [r7, #31]
 800a398:	e077      	b.n	800a48a <UART_SetConfig+0x34e>
 800a39a:	2302      	movs	r3, #2
 800a39c:	77fb      	strb	r3, [r7, #31]
 800a39e:	e074      	b.n	800a48a <UART_SetConfig+0x34e>
 800a3a0:	2304      	movs	r3, #4
 800a3a2:	77fb      	strb	r3, [r7, #31]
 800a3a4:	e071      	b.n	800a48a <UART_SetConfig+0x34e>
 800a3a6:	2308      	movs	r3, #8
 800a3a8:	77fb      	strb	r3, [r7, #31]
 800a3aa:	e06e      	b.n	800a48a <UART_SetConfig+0x34e>
 800a3ac:	2310      	movs	r3, #16
 800a3ae:	77fb      	strb	r3, [r7, #31]
 800a3b0:	bf00      	nop
 800a3b2:	e06a      	b.n	800a48a <UART_SetConfig+0x34e>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a25      	ldr	r2, [pc, #148]	; (800a450 <UART_SetConfig+0x314>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d124      	bne.n	800a408 <UART_SetConfig+0x2cc>
 800a3be:	4b1e      	ldr	r3, [pc, #120]	; (800a438 <UART_SetConfig+0x2fc>)
 800a3c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3c4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a3c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3cc:	d012      	beq.n	800a3f4 <UART_SetConfig+0x2b8>
 800a3ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3d2:	d802      	bhi.n	800a3da <UART_SetConfig+0x29e>
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d007      	beq.n	800a3e8 <UART_SetConfig+0x2ac>
 800a3d8:	e012      	b.n	800a400 <UART_SetConfig+0x2c4>
 800a3da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3de:	d006      	beq.n	800a3ee <UART_SetConfig+0x2b2>
 800a3e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3e4:	d009      	beq.n	800a3fa <UART_SetConfig+0x2be>
 800a3e6:	e00b      	b.n	800a400 <UART_SetConfig+0x2c4>
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	77fb      	strb	r3, [r7, #31]
 800a3ec:	e04d      	b.n	800a48a <UART_SetConfig+0x34e>
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	77fb      	strb	r3, [r7, #31]
 800a3f2:	e04a      	b.n	800a48a <UART_SetConfig+0x34e>
 800a3f4:	2304      	movs	r3, #4
 800a3f6:	77fb      	strb	r3, [r7, #31]
 800a3f8:	e047      	b.n	800a48a <UART_SetConfig+0x34e>
 800a3fa:	2308      	movs	r3, #8
 800a3fc:	77fb      	strb	r3, [r7, #31]
 800a3fe:	e044      	b.n	800a48a <UART_SetConfig+0x34e>
 800a400:	2310      	movs	r3, #16
 800a402:	77fb      	strb	r3, [r7, #31]
 800a404:	bf00      	nop
 800a406:	e040      	b.n	800a48a <UART_SetConfig+0x34e>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a11      	ldr	r2, [pc, #68]	; (800a454 <UART_SetConfig+0x318>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d139      	bne.n	800a486 <UART_SetConfig+0x34a>
 800a412:	4b09      	ldr	r3, [pc, #36]	; (800a438 <UART_SetConfig+0x2fc>)
 800a414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a418:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a41c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a420:	d027      	beq.n	800a472 <UART_SetConfig+0x336>
 800a422:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a426:	d817      	bhi.n	800a458 <UART_SetConfig+0x31c>
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d01c      	beq.n	800a466 <UART_SetConfig+0x32a>
 800a42c:	e027      	b.n	800a47e <UART_SetConfig+0x342>
 800a42e:	bf00      	nop
 800a430:	efff69f3 	.word	0xefff69f3
 800a434:	40011000 	.word	0x40011000
 800a438:	40023800 	.word	0x40023800
 800a43c:	40004400 	.word	0x40004400
 800a440:	40004800 	.word	0x40004800
 800a444:	40004c00 	.word	0x40004c00
 800a448:	40005000 	.word	0x40005000
 800a44c:	40011400 	.word	0x40011400
 800a450:	40007800 	.word	0x40007800
 800a454:	40007c00 	.word	0x40007c00
 800a458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a45c:	d006      	beq.n	800a46c <UART_SetConfig+0x330>
 800a45e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a462:	d009      	beq.n	800a478 <UART_SetConfig+0x33c>
 800a464:	e00b      	b.n	800a47e <UART_SetConfig+0x342>
 800a466:	2300      	movs	r3, #0
 800a468:	77fb      	strb	r3, [r7, #31]
 800a46a:	e00e      	b.n	800a48a <UART_SetConfig+0x34e>
 800a46c:	2302      	movs	r3, #2
 800a46e:	77fb      	strb	r3, [r7, #31]
 800a470:	e00b      	b.n	800a48a <UART_SetConfig+0x34e>
 800a472:	2304      	movs	r3, #4
 800a474:	77fb      	strb	r3, [r7, #31]
 800a476:	e008      	b.n	800a48a <UART_SetConfig+0x34e>
 800a478:	2308      	movs	r3, #8
 800a47a:	77fb      	strb	r3, [r7, #31]
 800a47c:	e005      	b.n	800a48a <UART_SetConfig+0x34e>
 800a47e:	2310      	movs	r3, #16
 800a480:	77fb      	strb	r3, [r7, #31]
 800a482:	bf00      	nop
 800a484:	e001      	b.n	800a48a <UART_SetConfig+0x34e>
 800a486:	2310      	movs	r3, #16
 800a488:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	69db      	ldr	r3, [r3, #28]
 800a48e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a492:	d17c      	bne.n	800a58e <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800a494:	7ffb      	ldrb	r3, [r7, #31]
 800a496:	2b08      	cmp	r3, #8
 800a498:	d859      	bhi.n	800a54e <UART_SetConfig+0x412>
 800a49a:	a201      	add	r2, pc, #4	; (adr r2, 800a4a0 <UART_SetConfig+0x364>)
 800a49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a0:	0800a4c5 	.word	0x0800a4c5
 800a4a4:	0800a4e3 	.word	0x0800a4e3
 800a4a8:	0800a501 	.word	0x0800a501
 800a4ac:	0800a54f 	.word	0x0800a54f
 800a4b0:	0800a519 	.word	0x0800a519
 800a4b4:	0800a54f 	.word	0x0800a54f
 800a4b8:	0800a54f 	.word	0x0800a54f
 800a4bc:	0800a54f 	.word	0x0800a54f
 800a4c0:	0800a537 	.word	0x0800a537
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a4c4:	f7fc f8d8 	bl	8006678 <HAL_RCC_GetPCLK1Freq>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	005a      	lsls	r2, r3, #1
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	085b      	lsrs	r3, r3, #1
 800a4d2:	441a      	add	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	61bb      	str	r3, [r7, #24]
        break;
 800a4e0:	e038      	b.n	800a554 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a4e2:	f7fc f8dd 	bl	80066a0 <HAL_RCC_GetPCLK2Freq>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	005a      	lsls	r2, r3, #1
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	085b      	lsrs	r3, r3, #1
 800a4f0:	441a      	add	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	61bb      	str	r3, [r7, #24]
        break;
 800a4fe:	e029      	b.n	800a554 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	085a      	lsrs	r2, r3, #1
 800a506:	4b5d      	ldr	r3, [pc, #372]	; (800a67c <UART_SetConfig+0x540>)
 800a508:	4413      	add	r3, r2
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	6852      	ldr	r2, [r2, #4]
 800a50e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a512:	b29b      	uxth	r3, r3
 800a514:	61bb      	str	r3, [r7, #24]
        break;
 800a516:	e01d      	b.n	800a554 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a518:	f7fb fff0 	bl	80064fc <HAL_RCC_GetSysClockFreq>
 800a51c:	4603      	mov	r3, r0
 800a51e:	005a      	lsls	r2, r3, #1
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	085b      	lsrs	r3, r3, #1
 800a526:	441a      	add	r2, r3
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a530:	b29b      	uxth	r3, r3
 800a532:	61bb      	str	r3, [r7, #24]
        break;
 800a534:	e00e      	b.n	800a554 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	085b      	lsrs	r3, r3, #1
 800a53c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	fbb2 f3f3 	udiv	r3, r2, r3
 800a548:	b29b      	uxth	r3, r3
 800a54a:	61bb      	str	r3, [r7, #24]
        break;
 800a54c:	e002      	b.n	800a554 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	75fb      	strb	r3, [r7, #23]
        break;
 800a552:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	2b0f      	cmp	r3, #15
 800a558:	d916      	bls.n	800a588 <UART_SetConfig+0x44c>
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a560:	d212      	bcs.n	800a588 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	b29b      	uxth	r3, r3
 800a566:	f023 030f 	bic.w	r3, r3, #15
 800a56a:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	085b      	lsrs	r3, r3, #1
 800a570:	b29b      	uxth	r3, r3
 800a572:	f003 0307 	and.w	r3, r3, #7
 800a576:	b29a      	uxth	r2, r3
 800a578:	89fb      	ldrh	r3, [r7, #14]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	89fa      	ldrh	r2, [r7, #14]
 800a584:	60da      	str	r2, [r3, #12]
 800a586:	e06e      	b.n	800a666 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800a588:	2301      	movs	r3, #1
 800a58a:	75fb      	strb	r3, [r7, #23]
 800a58c:	e06b      	b.n	800a666 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800a58e:	7ffb      	ldrb	r3, [r7, #31]
 800a590:	2b08      	cmp	r3, #8
 800a592:	d857      	bhi.n	800a644 <UART_SetConfig+0x508>
 800a594:	a201      	add	r2, pc, #4	; (adr r2, 800a59c <UART_SetConfig+0x460>)
 800a596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a59a:	bf00      	nop
 800a59c:	0800a5c1 	.word	0x0800a5c1
 800a5a0:	0800a5dd 	.word	0x0800a5dd
 800a5a4:	0800a5f9 	.word	0x0800a5f9
 800a5a8:	0800a645 	.word	0x0800a645
 800a5ac:	0800a611 	.word	0x0800a611
 800a5b0:	0800a645 	.word	0x0800a645
 800a5b4:	0800a645 	.word	0x0800a645
 800a5b8:	0800a645 	.word	0x0800a645
 800a5bc:	0800a62d 	.word	0x0800a62d
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a5c0:	f7fc f85a 	bl	8006678 <HAL_RCC_GetPCLK1Freq>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	085b      	lsrs	r3, r3, #1
 800a5cc:	441a      	add	r2, r3
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	61bb      	str	r3, [r7, #24]
        break;
 800a5da:	e036      	b.n	800a64a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a5dc:	f7fc f860 	bl	80066a0 <HAL_RCC_GetPCLK2Freq>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	085b      	lsrs	r3, r3, #1
 800a5e8:	441a      	add	r2, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	61bb      	str	r3, [r7, #24]
        break;
 800a5f6:	e028      	b.n	800a64a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	085a      	lsrs	r2, r3, #1
 800a5fe:	4b20      	ldr	r3, [pc, #128]	; (800a680 <UART_SetConfig+0x544>)
 800a600:	4413      	add	r3, r2
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	6852      	ldr	r2, [r2, #4]
 800a606:	fbb3 f3f2 	udiv	r3, r3, r2
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	61bb      	str	r3, [r7, #24]
        break;
 800a60e:	e01c      	b.n	800a64a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a610:	f7fb ff74 	bl	80064fc <HAL_RCC_GetSysClockFreq>
 800a614:	4602      	mov	r2, r0
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	085b      	lsrs	r3, r3, #1
 800a61c:	441a      	add	r2, r3
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	fbb2 f3f3 	udiv	r3, r2, r3
 800a626:	b29b      	uxth	r3, r3
 800a628:	61bb      	str	r3, [r7, #24]
        break;
 800a62a:	e00e      	b.n	800a64a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	085b      	lsrs	r3, r3, #1
 800a632:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a63e:	b29b      	uxth	r3, r3
 800a640:	61bb      	str	r3, [r7, #24]
        break;
 800a642:	e002      	b.n	800a64a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	75fb      	strb	r3, [r7, #23]
        break;
 800a648:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	2b0f      	cmp	r3, #15
 800a64e:	d908      	bls.n	800a662 <UART_SetConfig+0x526>
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a656:	d204      	bcs.n	800a662 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	69ba      	ldr	r2, [r7, #24]
 800a65e:	60da      	str	r2, [r3, #12]
 800a660:	e001      	b.n	800a666 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a672:	7dfb      	ldrb	r3, [r7, #23]
}
 800a674:	4618      	mov	r0, r3
 800a676:	3720      	adds	r7, #32
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	01e84800 	.word	0x01e84800
 800a680:	00f42400 	.word	0x00f42400

0800a684 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a690:	f003 0301 	and.w	r3, r3, #1
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00a      	beq.n	800a6ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	430a      	orrs	r2, r1
 800a6ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b2:	f003 0302 	and.w	r3, r3, #2
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00a      	beq.n	800a6d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	430a      	orrs	r2, r1
 800a6ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d4:	f003 0304 	and.w	r3, r3, #4
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00a      	beq.n	800a6f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	430a      	orrs	r2, r1
 800a6f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f6:	f003 0308 	and.w	r3, r3, #8
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00a      	beq.n	800a714 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	430a      	orrs	r2, r1
 800a712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a718:	f003 0310 	and.w	r3, r3, #16
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d00a      	beq.n	800a736 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	430a      	orrs	r2, r1
 800a734:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73a:	f003 0320 	and.w	r3, r3, #32
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00a      	beq.n	800a758 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	430a      	orrs	r2, r1
 800a756:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a760:	2b00      	cmp	r3, #0
 800a762:	d01a      	beq.n	800a79a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	430a      	orrs	r2, r1
 800a778:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a782:	d10a      	bne.n	800a79a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	430a      	orrs	r2, r1
 800a798:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00a      	beq.n	800a7bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	430a      	orrs	r2, r1
 800a7ba:	605a      	str	r2, [r3, #4]
  }
}
 800a7bc:	bf00      	nop
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b086      	sub	sp, #24
 800a7cc:	af02      	add	r7, sp, #8
 800a7ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a7d6:	f7f6 ff81 	bl	80016dc <HAL_GetTick>
 800a7da:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 0308 	and.w	r3, r3, #8
 800a7e6:	2b08      	cmp	r3, #8
 800a7e8:	d10e      	bne.n	800a808 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 f814 	bl	800a826 <UART_WaitOnFlagUntilTimeout>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d001      	beq.n	800a808 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a804:	2303      	movs	r3, #3
 800a806:	e00a      	b.n	800a81e <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2220      	movs	r2, #32
 800a80c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2220      	movs	r2, #32
 800a812:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b084      	sub	sp, #16
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	60f8      	str	r0, [r7, #12]
 800a82e:	60b9      	str	r1, [r7, #8]
 800a830:	603b      	str	r3, [r7, #0]
 800a832:	4613      	mov	r3, r2
 800a834:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a836:	e02a      	b.n	800a88e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a83e:	d026      	beq.n	800a88e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a840:	f7f6 ff4c 	bl	80016dc <HAL_GetTick>
 800a844:	4602      	mov	r2, r0
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	1ad3      	subs	r3, r2, r3
 800a84a:	69ba      	ldr	r2, [r7, #24]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d302      	bcc.n	800a856 <UART_WaitOnFlagUntilTimeout+0x30>
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d11b      	bne.n	800a88e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a864:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	689a      	ldr	r2, [r3, #8]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f022 0201 	bic.w	r2, r2, #1
 800a874:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2220      	movs	r2, #32
 800a87a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2220      	movs	r2, #32
 800a880:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2200      	movs	r2, #0
 800a886:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a88a:	2303      	movs	r3, #3
 800a88c:	e00f      	b.n	800a8ae <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	69da      	ldr	r2, [r3, #28]
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	4013      	ands	r3, r2
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	bf0c      	ite	eq
 800a89e:	2301      	moveq	r3, #1
 800a8a0:	2300      	movne	r3, #0
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d0c5      	beq.n	800a838 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
	...

0800a8b8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d027      	beq.n	800a922 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	4b2f      	ldr	r3, [pc, #188]	; (800a998 <FMC_SDRAM_Init+0xe0>)
 800a8dc:	4013      	ands	r3, r2
 800a8de:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a8e8:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a8ee:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a8f4:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a8fa:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a900:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a906:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a90c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a912:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	4313      	orrs	r3, r2
 800a918:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	601a      	str	r2, [r3, #0]
 800a920:	e032      	b.n	800a988 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a92e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a938:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a93e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a940:	68fa      	ldr	r2, [r7, #12]
 800a942:	4313      	orrs	r3, r2
 800a944:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	4b12      	ldr	r3, [pc, #72]	; (800a998 <FMC_SDRAM_Init+0xe0>)
 800a950:	4013      	ands	r3, r2
 800a952:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a95c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a962:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a968:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a96e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a974:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a976:	68ba      	ldr	r2, [r7, #8]
 800a978:	4313      	orrs	r3, r2
 800a97a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	68fa      	ldr	r2, [r7, #12]
 800a980:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	68ba      	ldr	r2, [r7, #8]
 800a986:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3714      	adds	r7, #20
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	ffff8000 	.word	0xffff8000

0800a99c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b087      	sub	sp, #28
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d02e      	beq.n	800aa14 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a9c2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a9d2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a9dc:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a9e6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	3b01      	subs	r3, #1
 800a9ee:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a9f0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a9fa:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	3b01      	subs	r3, #1
 800aa02:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800aa04:	4313      	orrs	r3, r2
 800aa06:	697a      	ldr	r2, [r7, #20]
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	609a      	str	r2, [r3, #8]
 800aa12:	e039      	b.n	800aa88 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	4b1e      	ldr	r3, [pc, #120]	; (800aa98 <FMC_SDRAM_Timing_Init+0xfc>)
 800aa1e:	4013      	ands	r3, r2
 800aa20:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	3b01      	subs	r3, #1
 800aa28:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	695b      	ldr	r3, [r3, #20]
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800aa32:	4313      	orrs	r3, r2
 800aa34:	697a      	ldr	r2, [r7, #20]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aa46:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	3b01      	subs	r3, #1
 800aa54:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800aa56:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800aa60:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	3b01      	subs	r3, #1
 800aa68:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800aa6a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	699b      	ldr	r3, [r3, #24]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800aa74:	4313      	orrs	r3, r2
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	697a      	ldr	r2, [r7, #20]
 800aa80:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	371c      	adds	r7, #28
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	ff0f0fff 	.word	0xff0f0fff

0800aa9c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b087      	sub	sp, #28
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aab4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	3b01      	subs	r3, #1
 800aabc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800aabe:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aac6:	4313      	orrs	r3, r2
 800aac8:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800aaca:	697a      	ldr	r2, [r7, #20]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	371c      	adds	r7, #28
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr

0800aade <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800aade:	b480      	push	{r7}
 800aae0:	b083      	sub	sp, #12
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
 800aae6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	695a      	ldr	r2, [r3, #20]
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	005b      	lsls	r3, r3, #1
 800aaf0:	431a      	orrs	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ab04:	b084      	sub	sp, #16
 800ab06:	b480      	push	{r7}
 800ab08:	b085      	sub	sp, #20
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
 800ab0e:	f107 001c 	add.w	r0, r7, #28
 800ab12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ab16:	2300      	movs	r3, #0
 800ab18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ab1a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ab1c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ab1e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ab22:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ab24:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ab26:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ab28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ab2a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ab2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ab2e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	685a      	ldr	r2, [r3, #4]
 800ab3a:	4b07      	ldr	r3, [pc, #28]	; (800ab58 <SDMMC_Init+0x54>)
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	431a      	orrs	r2, r3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ab46:	2300      	movs	r3, #0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	b004      	add	sp, #16
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	ffff8100 	.word	0xffff8100

0800ab5c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	370c      	adds	r7, #12
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr

0800ab76 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800ab76:	b480      	push	{r7}
 800ab78:	b083      	sub	sp, #12
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2203      	movs	r2, #3
 800ab82:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	370c      	adds	r7, #12
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr

0800ab92 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800ab92:	b480      	push	{r7}
 800ab94:	b083      	sub	sp, #12
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 0303 	and.w	r3, r3, #3
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	370c      	adds	r7, #12
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
	...

0800abb0 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800abce:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800abd4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800abda:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	4313      	orrs	r3, r2
 800abe0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	68da      	ldr	r2, [r3, #12]
 800abe6:	4b06      	ldr	r3, [pc, #24]	; (800ac00 <SDMMC_SendCommand+0x50>)
 800abe8:	4013      	ands	r3, r2
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	431a      	orrs	r2, r3
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	fffff000 	.word	0xfffff000

0800ac04 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	b2db      	uxtb	r3, r3
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	370c      	adds	r7, #12
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ac1e:	b480      	push	{r7}
 800ac20:	b085      	sub	sp, #20
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	3314      	adds	r3, #20
 800ac30:	461a      	mov	r2, r3
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	4413      	add	r3, r2
 800ac36:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
}  
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3714      	adds	r7, #20
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ac52:	2300      	movs	r3, #0
 800ac54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	685a      	ldr	r2, [r3, #4]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac6e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ac74:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ac7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac86:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	431a      	orrs	r2, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ac92:	2300      	movs	r3, #0

}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3714      	adds	r7, #20
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b088      	sub	sp, #32
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800acaa:	2300      	movs	r3, #0
 800acac:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800acb2:	2310      	movs	r3, #16
 800acb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acb6:	2340      	movs	r3, #64	; 0x40
 800acb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acba:	2300      	movs	r3, #0
 800acbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acc2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acc4:	f107 0308 	add.w	r3, r7, #8
 800acc8:	4619      	mov	r1, r3
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f7ff ff70 	bl	800abb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800acd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800acd4:	2110      	movs	r1, #16
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fa64 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800acdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acde:	69fb      	ldr	r3, [r7, #28]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3720      	adds	r7, #32
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b088      	sub	sp, #32
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800acf2:	2300      	movs	r3, #0
 800acf4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800acfa:	2311      	movs	r3, #17
 800acfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acfe:	2340      	movs	r3, #64	; 0x40
 800ad00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad02:	2300      	movs	r3, #0
 800ad04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad0a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad0c:	f107 0308 	add.w	r3, r7, #8
 800ad10:	4619      	mov	r1, r3
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f7ff ff4c 	bl	800abb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ad18:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad1c:	2111      	movs	r1, #17
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fa40 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800ad24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad26:	69fb      	ldr	r3, [r7, #28]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3720      	adds	r7, #32
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b088      	sub	sp, #32
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ad42:	2312      	movs	r3, #18
 800ad44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad46:	2340      	movs	r3, #64	; 0x40
 800ad48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad52:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad54:	f107 0308 	add.w	r3, r7, #8
 800ad58:	4619      	mov	r1, r3
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f7ff ff28 	bl	800abb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ad60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad64:	2112      	movs	r1, #18
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 fa1c 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800ad6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad6e:	69fb      	ldr	r3, [r7, #28]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3720      	adds	r7, #32
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b088      	sub	sp, #32
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ad82:	2300      	movs	r3, #0
 800ad84:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ad8a:	2318      	movs	r3, #24
 800ad8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad8e:	2340      	movs	r3, #64	; 0x40
 800ad90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad92:	2300      	movs	r3, #0
 800ad94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad9a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad9c:	f107 0308 	add.w	r3, r7, #8
 800ada0:	4619      	mov	r1, r3
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f7ff ff04 	bl	800abb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ada8:	f241 3288 	movw	r2, #5000	; 0x1388
 800adac:	2118      	movs	r1, #24
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 f9f8 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800adb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adb6:	69fb      	ldr	r3, [r7, #28]
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3720      	adds	r7, #32
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b088      	sub	sp, #32
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800adca:	2300      	movs	r3, #0
 800adcc:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800add2:	2319      	movs	r3, #25
 800add4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800add6:	2340      	movs	r3, #64	; 0x40
 800add8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adda:	2300      	movs	r3, #0
 800addc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ade2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ade4:	f107 0308 	add.w	r3, r7, #8
 800ade8:	4619      	mov	r1, r3
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7ff fee0 	bl	800abb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800adf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800adf4:	2119      	movs	r1, #25
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 f9d4 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800adfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adfe:	69fb      	ldr	r3, [r7, #28]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3720      	adds	r7, #32
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b088      	sub	sp, #32
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ae10:	2300      	movs	r3, #0
 800ae12:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 800ae14:	2300      	movs	r3, #0
 800ae16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ae18:	230c      	movs	r3, #12
 800ae1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae1c:	2340      	movs	r3, #64	; 0x40
 800ae1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae20:	2300      	movs	r3, #0
 800ae22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae28:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae2a:	f107 0308 	add.w	r3, r7, #8
 800ae2e:	4619      	mov	r1, r3
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f7ff febd 	bl	800abb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 800ae36:	4a05      	ldr	r2, [pc, #20]	; (800ae4c <SDMMC_CmdStopTransfer+0x44>)
 800ae38:	210c      	movs	r1, #12
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 f9b2 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800ae40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae42:	69fb      	ldr	r3, [r7, #28]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3720      	adds	r7, #32
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	05f5e100 	.word	0x05f5e100

0800ae50 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b08a      	sub	sp, #40	; 0x28
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ae64:	2307      	movs	r3, #7
 800ae66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae68:	2340      	movs	r3, #64	; 0x40
 800ae6a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae74:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae76:	f107 0310 	add.w	r3, r7, #16
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	f7ff fe97 	bl	800abb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ae82:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae86:	2107      	movs	r1, #7
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f000 f98b 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800ae8e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ae90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3728      	adds	r7, #40	; 0x28
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b088      	sub	sp, #32
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800aea2:	2300      	movs	r3, #0
 800aea4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 800aea6:	2300      	movs	r3, #0
 800aea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeba:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aebc:	f107 0308 	add.w	r3, r7, #8
 800aec0:	4619      	mov	r1, r3
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f7ff fe74 	bl	800abb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 f941 	bl	800b150 <SDMMC_GetCmdError>
 800aece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aed0:	69fb      	ldr	r3, [r7, #28]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3720      	adds	r7, #32
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b088      	sub	sp, #32
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800aee2:	2300      	movs	r3, #0
 800aee4:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800aee6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800aeea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800aeec:	2308      	movs	r3, #8
 800aeee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aef0:	2340      	movs	r3, #64	; 0x40
 800aef2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aef4:	2300      	movs	r3, #0
 800aef6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aefc:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aefe:	f107 0308 	add.w	r3, r7, #8
 800af02:	4619      	mov	r1, r3
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f7ff fe53 	bl	800abb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fb12 	bl	800b534 <SDMMC_GetCmdResp7>
 800af10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af12:	69fb      	ldr	r3, [r7, #28]
}
 800af14:	4618      	mov	r0, r3
 800af16:	3720      	adds	r7, #32
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b088      	sub	sp, #32
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800af26:	2300      	movs	r3, #0
 800af28:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800af2e:	2337      	movs	r3, #55	; 0x37
 800af30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af32:	2340      	movs	r3, #64	; 0x40
 800af34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af36:	2300      	movs	r3, #0
 800af38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af3e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af40:	f107 0308 	add.w	r3, r7, #8
 800af44:	4619      	mov	r1, r3
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7ff fe32 	bl	800abb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800af4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af50:	2137      	movs	r1, #55	; 0x37
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 f926 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800af58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af5a:	69fb      	ldr	r3, [r7, #28]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3720      	adds	r7, #32
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b088      	sub	sp, #32
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800af6e:	2300      	movs	r3, #0
 800af70:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800af72:	683a      	ldr	r2, [r7, #0]
 800af74:	4b0d      	ldr	r3, [pc, #52]	; (800afac <SDMMC_CmdAppOperCommand+0x48>)
 800af76:	4313      	orrs	r3, r2
 800af78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800af7a:	2329      	movs	r3, #41	; 0x29
 800af7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af7e:	2340      	movs	r3, #64	; 0x40
 800af80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af82:	2300      	movs	r3, #0
 800af84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af8a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af8c:	f107 0308 	add.w	r3, r7, #8
 800af90:	4619      	mov	r1, r3
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f7ff fe0c 	bl	800abb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 fa29 	bl	800b3f0 <SDMMC_GetCmdResp3>
 800af9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afa0:	69fb      	ldr	r3, [r7, #28]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3720      	adds	r7, #32
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	80100000 	.word	0x80100000

0800afb0 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b088      	sub	sp, #32
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800afba:	2300      	movs	r3, #0
 800afbc:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800afc2:	2306      	movs	r3, #6
 800afc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afc6:	2340      	movs	r3, #64	; 0x40
 800afc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afca:	2300      	movs	r3, #0
 800afcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afd2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afd4:	f107 0308 	add.w	r3, r7, #8
 800afd8:	4619      	mov	r1, r3
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f7ff fde8 	bl	800abb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800afe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800afe4:	2106      	movs	r1, #6
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 f8dc 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800afec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afee:	69fb      	ldr	r3, [r7, #28]
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3720      	adds	r7, #32
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b088      	sub	sp, #32
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b000:	2300      	movs	r3, #0
 800b002:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 800b004:	2300      	movs	r3, #0
 800b006:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b008:	2333      	movs	r3, #51	; 0x33
 800b00a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b00c:	2340      	movs	r3, #64	; 0x40
 800b00e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b010:	2300      	movs	r3, #0
 800b012:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b018:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b01a:	f107 0308 	add.w	r3, r7, #8
 800b01e:	4619      	mov	r1, r3
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f7ff fdc5 	bl	800abb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b026:	f241 3288 	movw	r2, #5000	; 0x1388
 800b02a:	2133      	movs	r1, #51	; 0x33
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 f8b9 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800b032:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b034:	69fb      	ldr	r3, [r7, #28]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3720      	adds	r7, #32
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b088      	sub	sp, #32
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b046:	2300      	movs	r3, #0
 800b048:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 800b04a:	2300      	movs	r3, #0
 800b04c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b04e:	2302      	movs	r3, #2
 800b050:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b052:	23c0      	movs	r3, #192	; 0xc0
 800b054:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b056:	2300      	movs	r3, #0
 800b058:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b05a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b05e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b060:	f107 0308 	add.w	r3, r7, #8
 800b064:	4619      	mov	r1, r3
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f7ff fda2 	bl	800abb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 f97f 	bl	800b370 <SDMMC_GetCmdResp2>
 800b072:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b074:	69fb      	ldr	r3, [r7, #28]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3720      	adds	r7, #32
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b088      	sub	sp, #32
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
 800b086:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b088:	2300      	movs	r3, #0
 800b08a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b090:	2309      	movs	r3, #9
 800b092:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b094:	23c0      	movs	r3, #192	; 0xc0
 800b096:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b098:	2300      	movs	r3, #0
 800b09a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b09c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0a0:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0a2:	f107 0308 	add.w	r3, r7, #8
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f7ff fd81 	bl	800abb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 f95e 	bl	800b370 <SDMMC_GetCmdResp2>
 800b0b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0b6:	69fb      	ldr	r3, [r7, #28]
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3720      	adds	r7, #32
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b088      	sub	sp, #32
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b0d2:	2303      	movs	r3, #3
 800b0d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0d6:	2340      	movs	r3, #64	; 0x40
 800b0d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0e2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0e4:	f107 0308 	add.w	r3, r7, #8
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f7ff fd60 	bl	800abb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b0f0:	683a      	ldr	r2, [r7, #0]
 800b0f2:	2103      	movs	r1, #3
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 f9af 	bl	800b458 <SDMMC_GetCmdResp6>
 800b0fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0fc:	69fb      	ldr	r3, [r7, #28]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3720      	adds	r7, #32
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b106:	b580      	push	{r7, lr}
 800b108:	b088      	sub	sp, #32
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
 800b10e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b110:	2300      	movs	r3, #0
 800b112:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b118:	230d      	movs	r3, #13
 800b11a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b11c:	2340      	movs	r3, #64	; 0x40
 800b11e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b120:	2300      	movs	r3, #0
 800b122:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b128:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b12a:	f107 0308 	add.w	r3, r7, #8
 800b12e:	4619      	mov	r1, r3
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f7ff fd3d 	bl	800abb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b136:	f241 3288 	movw	r2, #5000	; 0x1388
 800b13a:	210d      	movs	r1, #13
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 f831 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800b142:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b144:	69fb      	ldr	r3, [r7, #28]
}
 800b146:	4618      	mov	r0, r3
 800b148:	3720      	adds	r7, #32
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
	...

0800b150 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b150:	b490      	push	{r4, r7}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b158:	4b10      	ldr	r3, [pc, #64]	; (800b19c <SDMMC_GetCmdError+0x4c>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4a10      	ldr	r2, [pc, #64]	; (800b1a0 <SDMMC_GetCmdError+0x50>)
 800b15e:	fba2 2303 	umull	r2, r3, r2, r3
 800b162:	0a5b      	lsrs	r3, r3, #9
 800b164:	f241 3288 	movw	r2, #5000	; 0x1388
 800b168:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b16c:	4623      	mov	r3, r4
 800b16e:	1e5c      	subs	r4, r3, #1
 800b170:	2b00      	cmp	r3, #0
 800b172:	d102      	bne.n	800b17a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b174:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b178:	e00a      	b.n	800b190 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b17e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b182:	2b00      	cmp	r3, #0
 800b184:	d0f2      	beq.n	800b16c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b18c:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bc90      	pop	{r4, r7}
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	20000034 	.word	0x20000034
 800b1a0:	10624dd3 	.word	0x10624dd3

0800b1a4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b1a4:	b590      	push	{r4, r7, lr}
 800b1a6:	b087      	sub	sp, #28
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	607a      	str	r2, [r7, #4]
 800b1b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800b1b2:	4b6c      	ldr	r3, [pc, #432]	; (800b364 <SDMMC_GetCmdResp1+0x1c0>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a6c      	ldr	r2, [pc, #432]	; (800b368 <SDMMC_GetCmdResp1+0x1c4>)
 800b1b8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1bc:	0a5b      	lsrs	r3, r3, #9
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b1c4:	4623      	mov	r3, r4
 800b1c6:	1e5c      	subs	r4, r3, #1
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d102      	bne.n	800b1d2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1d0:	e0c3      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d0f2      	beq.n	800b1c4 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1e2:	f003 0304 	and.w	r3, r3, #4
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d004      	beq.n	800b1f4 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2204      	movs	r2, #4
 800b1ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1f0:	2304      	movs	r3, #4
 800b1f2:	e0b2      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f8:	f003 0301 	and.w	r3, r3, #1
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d004      	beq.n	800b20a <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2201      	movs	r2, #1
 800b204:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b206:	2301      	movs	r3, #1
 800b208:	e0a7      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f7ff fcfa 	bl	800ac04 <SDMMC_GetCommandResponse>
 800b210:	4603      	mov	r3, r0
 800b212:	461a      	mov	r2, r3
 800b214:	7afb      	ldrb	r3, [r7, #11]
 800b216:	4293      	cmp	r3, r2
 800b218:	d001      	beq.n	800b21e <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b21a:	2301      	movs	r3, #1
 800b21c:	e09d      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b224:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b226:	2100      	movs	r1, #0
 800b228:	68f8      	ldr	r0, [r7, #12]
 800b22a:	f7ff fcf8 	bl	800ac1e <SDMMC_GetResponse>
 800b22e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b230:	697a      	ldr	r2, [r7, #20]
 800b232:	4b4e      	ldr	r3, [pc, #312]	; (800b36c <SDMMC_GetCmdResp1+0x1c8>)
 800b234:	4013      	ands	r3, r2
 800b236:	2b00      	cmp	r3, #0
 800b238:	d101      	bne.n	800b23e <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800b23a:	2300      	movs	r3, #0
 800b23c:	e08d      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	2b00      	cmp	r3, #0
 800b242:	da02      	bge.n	800b24a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b244:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b248:	e087      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b250:	2b00      	cmp	r3, #0
 800b252:	d001      	beq.n	800b258 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b254:	2340      	movs	r3, #64	; 0x40
 800b256:	e080      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d001      	beq.n	800b266 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b262:	2380      	movs	r3, #128	; 0x80
 800b264:	e079      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d002      	beq.n	800b276 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b270:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b274:	e071      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d002      	beq.n	800b286 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b280:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b284:	e069      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d002      	beq.n	800b296 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b294:	e061      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d002      	beq.n	800b2a6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b2a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2a4:	e059      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d002      	beq.n	800b2b6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b2b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2b4:	e051      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d002      	beq.n	800b2c6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b2c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2c4:	e049      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d002      	beq.n	800b2d6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b2d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b2d4:	e041      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d002      	beq.n	800b2e6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800b2e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2e4:	e039      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d002      	beq.n	800b2f6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b2f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b2f4:	e031      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b300:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b304:	e029      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d002      	beq.n	800b316 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b310:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b314:	e021      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d002      	beq.n	800b326 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b320:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b324:	e019      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d002      	beq.n	800b336 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b330:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b334:	e011      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d002      	beq.n	800b346 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b340:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b344:	e009      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	f003 0308 	and.w	r3, r3, #8
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d002      	beq.n	800b356 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b350:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b354:	e001      	b.n	800b35a <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	371c      	adds	r7, #28
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd90      	pop	{r4, r7, pc}
 800b362:	bf00      	nop
 800b364:	20000034 	.word	0x20000034
 800b368:	10624dd3 	.word	0x10624dd3
 800b36c:	fdffe008 	.word	0xfdffe008

0800b370 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b370:	b490      	push	{r4, r7}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b378:	4b1b      	ldr	r3, [pc, #108]	; (800b3e8 <SDMMC_GetCmdResp2+0x78>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a1b      	ldr	r2, [pc, #108]	; (800b3ec <SDMMC_GetCmdResp2+0x7c>)
 800b37e:	fba2 2303 	umull	r2, r3, r2, r3
 800b382:	0a5b      	lsrs	r3, r3, #9
 800b384:	f241 3288 	movw	r2, #5000	; 0x1388
 800b388:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b38c:	4623      	mov	r3, r4
 800b38e:	1e5c      	subs	r4, r3, #1
 800b390:	2b00      	cmp	r3, #0
 800b392:	d102      	bne.n	800b39a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b394:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b398:	e020      	b.n	800b3dc <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b39e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d0f2      	beq.n	800b38c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3aa:	f003 0304 	and.w	r3, r3, #4
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d004      	beq.n	800b3bc <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2204      	movs	r2, #4
 800b3b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3b8:	2304      	movs	r3, #4
 800b3ba:	e00f      	b.n	800b3dc <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3c0:	f003 0301 	and.w	r3, r3, #1
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d004      	beq.n	800b3d2 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e004      	b.n	800b3dc <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b3d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b3da:	2300      	movs	r3, #0
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3708      	adds	r7, #8
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bc90      	pop	{r4, r7}
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	20000034 	.word	0x20000034
 800b3ec:	10624dd3 	.word	0x10624dd3

0800b3f0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b3f0:	b490      	push	{r4, r7}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b3f8:	4b15      	ldr	r3, [pc, #84]	; (800b450 <SDMMC_GetCmdResp3+0x60>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a15      	ldr	r2, [pc, #84]	; (800b454 <SDMMC_GetCmdResp3+0x64>)
 800b3fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b402:	0a5b      	lsrs	r3, r3, #9
 800b404:	f241 3288 	movw	r2, #5000	; 0x1388
 800b408:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b40c:	4623      	mov	r3, r4
 800b40e:	1e5c      	subs	r4, r3, #1
 800b410:	2b00      	cmp	r3, #0
 800b412:	d102      	bne.n	800b41a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b414:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b418:	e015      	b.n	800b446 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b41e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b422:	2b00      	cmp	r3, #0
 800b424:	d0f2      	beq.n	800b40c <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b42a:	f003 0304 	and.w	r3, r3, #4
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d004      	beq.n	800b43c <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2204      	movs	r2, #4
 800b436:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b438:	2304      	movs	r3, #4
 800b43a:	e004      	b.n	800b446 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b442:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b444:	2300      	movs	r3, #0
}
 800b446:	4618      	mov	r0, r3
 800b448:	3708      	adds	r7, #8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bc90      	pop	{r4, r7}
 800b44e:	4770      	bx	lr
 800b450:	20000034 	.word	0x20000034
 800b454:	10624dd3 	.word	0x10624dd3

0800b458 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b458:	b590      	push	{r4, r7, lr}
 800b45a:	b087      	sub	sp, #28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	460b      	mov	r3, r1
 800b462:	607a      	str	r2, [r7, #4]
 800b464:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b466:	4b31      	ldr	r3, [pc, #196]	; (800b52c <SDMMC_GetCmdResp6+0xd4>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a31      	ldr	r2, [pc, #196]	; (800b530 <SDMMC_GetCmdResp6+0xd8>)
 800b46c:	fba2 2303 	umull	r2, r3, r2, r3
 800b470:	0a5b      	lsrs	r3, r3, #9
 800b472:	f241 3288 	movw	r2, #5000	; 0x1388
 800b476:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b47a:	4623      	mov	r3, r4
 800b47c:	1e5c      	subs	r4, r3, #1
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d102      	bne.n	800b488 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b482:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b486:	e04c      	b.n	800b522 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b48c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b490:	2b00      	cmp	r3, #0
 800b492:	d0f2      	beq.n	800b47a <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b498:	f003 0304 	and.w	r3, r3, #4
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d004      	beq.n	800b4aa <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2204      	movs	r2, #4
 800b4a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4a6:	2304      	movs	r3, #4
 800b4a8:	e03b      	b.n	800b522 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ae:	f003 0301 	and.w	r3, r3, #1
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d004      	beq.n	800b4c0 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e030      	b.n	800b522 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f7ff fb9f 	bl	800ac04 <SDMMC_GetCommandResponse>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	7afb      	ldrb	r3, [r7, #11]
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d001      	beq.n	800b4d4 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	e026      	b.n	800b522 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b4da:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b4dc:	2100      	movs	r1, #0
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f7ff fb9d 	bl	800ac1e <SDMMC_GetResponse>
 800b4e4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d106      	bne.n	800b4fe <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	0c1b      	lsrs	r3, r3, #16
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	e011      	b.n	800b522 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b504:	2b00      	cmp	r3, #0
 800b506:	d002      	beq.n	800b50e <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b50c:	e009      	b.n	800b522 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b514:	2b00      	cmp	r3, #0
 800b516:	d002      	beq.n	800b51e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b51c:	e001      	b.n	800b522 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b51e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b522:	4618      	mov	r0, r3
 800b524:	371c      	adds	r7, #28
 800b526:	46bd      	mov	sp, r7
 800b528:	bd90      	pop	{r4, r7, pc}
 800b52a:	bf00      	nop
 800b52c:	20000034 	.word	0x20000034
 800b530:	10624dd3 	.word	0x10624dd3

0800b534 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b534:	b490      	push	{r4, r7}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b53c:	4b18      	ldr	r3, [pc, #96]	; (800b5a0 <SDMMC_GetCmdResp7+0x6c>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a18      	ldr	r2, [pc, #96]	; (800b5a4 <SDMMC_GetCmdResp7+0x70>)
 800b542:	fba2 2303 	umull	r2, r3, r2, r3
 800b546:	0a5b      	lsrs	r3, r3, #9
 800b548:	f241 3288 	movw	r2, #5000	; 0x1388
 800b54c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b550:	4623      	mov	r3, r4
 800b552:	1e5c      	subs	r4, r3, #1
 800b554:	2b00      	cmp	r3, #0
 800b556:	d102      	bne.n	800b55e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b558:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b55c:	e01a      	b.n	800b594 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b562:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b566:	2b00      	cmp	r3, #0
 800b568:	d0f2      	beq.n	800b550 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b56e:	f003 0304 	and.w	r3, r3, #4
 800b572:	2b00      	cmp	r3, #0
 800b574:	d004      	beq.n	800b580 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2240      	movs	r2, #64	; 0x40
 800b57a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b57c:	2304      	movs	r3, #4
 800b57e:	e009      	b.n	800b594 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d002      	beq.n	800b592 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2240      	movs	r2, #64	; 0x40
 800b590:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b592:	2300      	movs	r3, #0
  
}
 800b594:	4618      	mov	r0, r3
 800b596:	3708      	adds	r7, #8
 800b598:	46bd      	mov	sp, r7
 800b59a:	bc90      	pop	{r4, r7}
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop
 800b5a0:	20000034 	.word	0x20000034
 800b5a4:	10624dd3 	.word	0x10624dd3

0800b5a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b5a8:	b084      	sub	sp, #16
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b084      	sub	sp, #16
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
 800b5b2:	f107 001c 	add.w	r0, r7, #28
 800b5b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d120      	bne.n	800b602 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	68da      	ldr	r2, [r3, #12]
 800b5d0:	4b20      	ldr	r3, [pc, #128]	; (800b654 <USB_CoreInit+0xac>)
 800b5d2:	4013      	ands	r3, r2
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b5e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d105      	bne.n	800b5f6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 f8fc 	bl	800b7f4 <USB_CoreReset>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	73fb      	strb	r3, [r7, #15]
 800b600:	e010      	b.n	800b624 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f8f0 	bl	800b7f4 <USB_CoreReset>
 800b614:	4603      	mov	r3, r0
 800b616:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b61c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b626:	2b01      	cmp	r3, #1
 800b628:	d10b      	bne.n	800b642 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	f043 0206 	orr.w	r2, r3, #6
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	689b      	ldr	r3, [r3, #8]
 800b63a:	f043 0220 	orr.w	r2, r3, #32
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b642:	7bfb      	ldrb	r3, [r7, #15]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b64e:	b004      	add	sp, #16
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop
 800b654:	ffbdffbf 	.word	0xffbdffbf

0800b658 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	f023 0201 	bic.w	r2, r3, #1
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b66c:	2300      	movs	r3, #0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	370c      	adds	r7, #12
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr

0800b67a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b082      	sub	sp, #8
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
 800b682:	460b      	mov	r3, r1
 800b684:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	68db      	ldr	r3, [r3, #12]
 800b68a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b692:	78fb      	ldrb	r3, [r7, #3]
 800b694:	2b01      	cmp	r3, #1
 800b696:	d106      	bne.n	800b6a6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	60da      	str	r2, [r3, #12]
 800b6a4:	e00b      	b.n	800b6be <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b6a6:	78fb      	ldrb	r3, [r7, #3]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d106      	bne.n	800b6ba <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	60da      	str	r2, [r3, #12]
 800b6b8:	e001      	b.n	800b6be <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e003      	b.n	800b6c6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b6be:	2032      	movs	r0, #50	; 0x32
 800b6c0:	f7f6 f818 	bl	80016f4 <HAL_Delay>

  return HAL_OK;
 800b6c4:	2300      	movs	r3, #0
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3708      	adds	r7, #8
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
	...

0800b6d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b085      	sub	sp, #20
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	019b      	lsls	r3, r3, #6
 800b6e2:	f043 0220 	orr.w	r2, r3, #32
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	60fb      	str	r3, [r7, #12]
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	4a09      	ldr	r2, [pc, #36]	; (800b718 <USB_FlushTxFifo+0x48>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d901      	bls.n	800b6fc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b6f8:	2303      	movs	r3, #3
 800b6fa:	e006      	b.n	800b70a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	691b      	ldr	r3, [r3, #16]
 800b700:	f003 0320 	and.w	r3, r3, #32
 800b704:	2b20      	cmp	r3, #32
 800b706:	d0f0      	beq.n	800b6ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b708:	2300      	movs	r3, #0
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3714      	adds	r7, #20
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	00030d40 	.word	0x00030d40

0800b71c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b085      	sub	sp, #20
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b724:	2300      	movs	r3, #0
 800b726:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2210      	movs	r2, #16
 800b72c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	3301      	adds	r3, #1
 800b732:	60fb      	str	r3, [r7, #12]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	4a09      	ldr	r2, [pc, #36]	; (800b75c <USB_FlushRxFifo+0x40>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d901      	bls.n	800b740 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b73c:	2303      	movs	r3, #3
 800b73e:	e006      	b.n	800b74e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	691b      	ldr	r3, [r3, #16]
 800b744:	f003 0310 	and.w	r3, r3, #16
 800b748:	2b10      	cmp	r3, #16
 800b74a:	d0f0      	beq.n	800b72e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3714      	adds	r7, #20
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	00030d40 	.word	0x00030d40

0800b760 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b760:	b480      	push	{r7}
 800b762:	b089      	sub	sp, #36	; 0x24
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	4613      	mov	r3, r2
 800b76c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b776:	88fb      	ldrh	r3, [r7, #6]
 800b778:	3303      	adds	r3, #3
 800b77a:	089b      	lsrs	r3, r3, #2
 800b77c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b77e:	2300      	movs	r3, #0
 800b780:	61bb      	str	r3, [r7, #24]
 800b782:	e00b      	b.n	800b79c <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	601a      	str	r2, [r3, #0]
    pDest++;
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	3304      	adds	r3, #4
 800b794:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	3301      	adds	r3, #1
 800b79a:	61bb      	str	r3, [r7, #24]
 800b79c:	69ba      	ldr	r2, [r7, #24]
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d3ef      	bcc.n	800b784 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b7a4:	69fb      	ldr	r3, [r7, #28]
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3724      	adds	r7, #36	; 0x24
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr

0800b7b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b7b2:	b480      	push	{r7}
 800b7b4:	b085      	sub	sp, #20
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	695b      	ldr	r3, [r3, #20]
 800b7be:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	699b      	ldr	r3, [r3, #24]
 800b7c4:	68fa      	ldr	r2, [r7, #12]
 800b7c6:	4013      	ands	r3, r2
 800b7c8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3714      	adds	r7, #20
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	695b      	ldr	r3, [r3, #20]
 800b7e4:	f003 0301 	and.w	r3, r3, #1
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	3301      	adds	r3, #1
 800b804:	60fb      	str	r3, [r7, #12]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	4a13      	ldr	r2, [pc, #76]	; (800b858 <USB_CoreReset+0x64>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d901      	bls.n	800b812 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b80e:	2303      	movs	r3, #3
 800b810:	e01b      	b.n	800b84a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	691b      	ldr	r3, [r3, #16]
 800b816:	2b00      	cmp	r3, #0
 800b818:	daf2      	bge.n	800b800 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b81a:	2300      	movs	r3, #0
 800b81c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	f043 0201 	orr.w	r2, r3, #1
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	3301      	adds	r3, #1
 800b82e:	60fb      	str	r3, [r7, #12]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	4a09      	ldr	r2, [pc, #36]	; (800b858 <USB_CoreReset+0x64>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d901      	bls.n	800b83c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b838:	2303      	movs	r3, #3
 800b83a:	e006      	b.n	800b84a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	691b      	ldr	r3, [r3, #16]
 800b840:	f003 0301 	and.w	r3, r3, #1
 800b844:	2b01      	cmp	r3, #1
 800b846:	d0f0      	beq.n	800b82a <USB_CoreReset+0x36>

  return HAL_OK;
 800b848:	2300      	movs	r3, #0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3714      	adds	r7, #20
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop
 800b858:	00030d40 	.word	0x00030d40

0800b85c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b85c:	b084      	sub	sp, #16
 800b85e:	b580      	push	{r7, lr}
 800b860:	b084      	sub	sp, #16
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
 800b866:	f107 001c 	add.w	r0, r7, #28
 800b86a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b878:	461a      	mov	r2, r3
 800b87a:	2300      	movs	r3, #0
 800b87c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b882:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b88e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b892:	2b00      	cmp	r3, #0
 800b894:	d018      	beq.n	800b8c8 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800b896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b898:	2b03      	cmp	r3, #3
 800b89a:	d10a      	bne.n	800b8b2 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	68ba      	ldr	r2, [r7, #8]
 800b8a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8aa:	f043 0304 	orr.w	r3, r3, #4
 800b8ae:	6013      	str	r3, [r2, #0]
 800b8b0:	e014      	b.n	800b8dc <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8c0:	f023 0304 	bic.w	r3, r3, #4
 800b8c4:	6013      	str	r3, [r2, #0]
 800b8c6:	e009      	b.n	800b8dc <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8d6:	f023 0304 	bic.w	r3, r3, #4
 800b8da:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b8dc:	2110      	movs	r1, #16
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f7ff fef6 	bl	800b6d0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f7ff ff19 	bl	800b71c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	60fb      	str	r3, [r7, #12]
 800b8ee:	e015      	b.n	800b91c <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	015a      	lsls	r2, r3, #5
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	4413      	add	r3, r2
 800b8f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b902:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	015a      	lsls	r2, r3, #5
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	4413      	add	r3, r2
 800b90c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b910:	461a      	mov	r2, r3
 800b912:	2300      	movs	r3, #0
 800b914:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	3301      	adds	r3, #1
 800b91a:	60fb      	str	r3, [r7, #12]
 800b91c:	6a3b      	ldr	r3, [r7, #32]
 800b91e:	68fa      	ldr	r2, [r7, #12]
 800b920:	429a      	cmp	r2, r3
 800b922:	d3e5      	bcc.n	800b8f0 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800b924:	2101      	movs	r1, #1
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 f882 	bl	800ba30 <USB_DriveVbus>

  HAL_Delay(200U);
 800b92c:	20c8      	movs	r0, #200	; 0xc8
 800b92e:	f7f5 fee1 	bl	80016f4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f04f 32ff 	mov.w	r2, #4294967295
 800b93e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00b      	beq.n	800b964 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b952:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	4a14      	ldr	r2, [pc, #80]	; (800b9a8 <USB_HostInit+0x14c>)
 800b958:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4a13      	ldr	r2, [pc, #76]	; (800b9ac <USB_HostInit+0x150>)
 800b95e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b962:	e009      	b.n	800b978 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2280      	movs	r2, #128	; 0x80
 800b968:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	4a10      	ldr	r2, [pc, #64]	; (800b9b0 <USB_HostInit+0x154>)
 800b96e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4a10      	ldr	r2, [pc, #64]	; (800b9b4 <USB_HostInit+0x158>)
 800b974:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d105      	bne.n	800b98a <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	699b      	ldr	r3, [r3, #24]
 800b982:	f043 0210 	orr.w	r2, r3, #16
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	699a      	ldr	r2, [r3, #24]
 800b98e:	4b0a      	ldr	r3, [pc, #40]	; (800b9b8 <USB_HostInit+0x15c>)
 800b990:	4313      	orrs	r3, r2
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b996:	2300      	movs	r3, #0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3710      	adds	r7, #16
 800b99c:	46bd      	mov	sp, r7
 800b99e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9a2:	b004      	add	sp, #16
 800b9a4:	4770      	bx	lr
 800b9a6:	bf00      	nop
 800b9a8:	01000200 	.word	0x01000200
 800b9ac:	00e00300 	.word	0x00e00300
 800b9b0:	00600080 	.word	0x00600080
 800b9b4:	004000e0 	.word	0x004000e0
 800b9b8:	a3200008 	.word	0xa3200008

0800b9bc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b085      	sub	sp, #20
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b9da:	f023 0303 	bic.w	r3, r3, #3
 800b9de:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	78fb      	ldrb	r3, [r7, #3]
 800b9ea:	f003 0303 	and.w	r3, r3, #3
 800b9ee:	68f9      	ldr	r1, [r7, #12]
 800b9f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b9f8:	78fb      	ldrb	r3, [r7, #3]
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d107      	bne.n	800ba0e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba04:	461a      	mov	r2, r3
 800ba06:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ba0a:	6053      	str	r3, [r2, #4]
 800ba0c:	e009      	b.n	800ba22 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ba0e:	78fb      	ldrb	r3, [r7, #3]
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d106      	bne.n	800ba22 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	f241 7370 	movw	r3, #6000	; 0x1770
 800ba20:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ba22:	2300      	movs	r3, #0
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3714      	adds	r7, #20
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	460b      	mov	r3, r1
 800ba3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ba40:	2300      	movs	r3, #0
 800ba42:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ba54:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d109      	bne.n	800ba74 <USB_DriveVbus+0x44>
 800ba60:	78fb      	ldrb	r3, [r7, #3]
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d106      	bne.n	800ba74 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ba6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ba72:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ba7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba7e:	d109      	bne.n	800ba94 <USB_DriveVbus+0x64>
 800ba80:	78fb      	ldrb	r3, [r7, #3]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d106      	bne.n	800ba94 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	68fa      	ldr	r2, [r7, #12]
 800ba8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ba8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba92:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ba94:	2300      	movs	r3, #0
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3714      	adds	r7, #20
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr

0800baa2 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800baa2:	b480      	push	{r7}
 800baa4:	b085      	sub	sp, #20
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	b29b      	uxth	r3, r3
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3714      	adds	r7, #20
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b087      	sub	sp, #28
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	460b      	mov	r3, r1
 800bace:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800bad4:	78fb      	ldrb	r3, [r7, #3]
 800bad6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800bad8:	2300      	movs	r3, #0
 800bada:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	015a      	lsls	r2, r3, #5
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	4413      	add	r3, r2
 800bae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	0c9b      	lsrs	r3, r3, #18
 800baec:	f003 0303 	and.w	r3, r3, #3
 800baf0:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d002      	beq.n	800bafe <USB_HC_Halt+0x3a>
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	2b02      	cmp	r3, #2
 800bafc:	d16c      	bne.n	800bbd8 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	015a      	lsls	r2, r3, #5
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	4413      	add	r3, r2
 800bb06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	0151      	lsls	r1, r2, #5
 800bb10:	693a      	ldr	r2, [r7, #16]
 800bb12:	440a      	add	r2, r1
 800bb14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb1c:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d143      	bne.n	800bbb2 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	015a      	lsls	r2, r3, #5
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	4413      	add	r3, r2
 800bb32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	0151      	lsls	r1, r2, #5
 800bb3c:	693a      	ldr	r2, [r7, #16]
 800bb3e:	440a      	add	r2, r1
 800bb40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb48:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	015a      	lsls	r2, r3, #5
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	4413      	add	r3, r2
 800bb52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	0151      	lsls	r1, r2, #5
 800bb5c:	693a      	ldr	r2, [r7, #16]
 800bb5e:	440a      	add	r2, r1
 800bb60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb68:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	015a      	lsls	r2, r3, #5
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	4413      	add	r3, r2
 800bb72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	68fa      	ldr	r2, [r7, #12]
 800bb7a:	0151      	lsls	r1, r2, #5
 800bb7c:	693a      	ldr	r2, [r7, #16]
 800bb7e:	440a      	add	r2, r1
 800bb80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb88:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	617b      	str	r3, [r7, #20]
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb96:	d81d      	bhi.n	800bbd4 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	015a      	lsls	r2, r3, #5
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	4413      	add	r3, r2
 800bba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbae:	d0ec      	beq.n	800bb8a <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bbb0:	e080      	b.n	800bcb4 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	015a      	lsls	r2, r3, #5
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	4413      	add	r3, r2
 800bbba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	0151      	lsls	r1, r2, #5
 800bbc4:	693a      	ldr	r2, [r7, #16]
 800bbc6:	440a      	add	r2, r1
 800bbc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bbd0:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bbd2:	e06f      	b.n	800bcb4 <USB_HC_Halt+0x1f0>
          break;
 800bbd4:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bbd6:	e06d      	b.n	800bcb4 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	015a      	lsls	r2, r3, #5
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	4413      	add	r3, r2
 800bbe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	0151      	lsls	r1, r2, #5
 800bbea:	693a      	ldr	r2, [r7, #16]
 800bbec:	440a      	add	r2, r1
 800bbee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bbf6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bbfe:	691b      	ldr	r3, [r3, #16]
 800bc00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d143      	bne.n	800bc90 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	015a      	lsls	r2, r3, #5
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	4413      	add	r3, r2
 800bc10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	68fa      	ldr	r2, [r7, #12]
 800bc18:	0151      	lsls	r1, r2, #5
 800bc1a:	693a      	ldr	r2, [r7, #16]
 800bc1c:	440a      	add	r2, r1
 800bc1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc26:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	015a      	lsls	r2, r3, #5
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	4413      	add	r3, r2
 800bc30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	0151      	lsls	r1, r2, #5
 800bc3a:	693a      	ldr	r2, [r7, #16]
 800bc3c:	440a      	add	r2, r1
 800bc3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bc46:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	015a      	lsls	r2, r3, #5
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	4413      	add	r3, r2
 800bc50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	68fa      	ldr	r2, [r7, #12]
 800bc58:	0151      	lsls	r1, r2, #5
 800bc5a:	693a      	ldr	r2, [r7, #16]
 800bc5c:	440a      	add	r2, r1
 800bc5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bc66:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	617b      	str	r3, [r7, #20]
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc74:	d81d      	bhi.n	800bcb2 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	015a      	lsls	r2, r3, #5
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc8c:	d0ec      	beq.n	800bc68 <USB_HC_Halt+0x1a4>
 800bc8e:	e011      	b.n	800bcb4 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	015a      	lsls	r2, r3, #5
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	4413      	add	r3, r2
 800bc98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	0151      	lsls	r1, r2, #5
 800bca2:	693a      	ldr	r2, [r7, #16]
 800bca4:	440a      	add	r2, r1
 800bca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bcaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bcae:	6013      	str	r3, [r2, #0]
 800bcb0:	e000      	b.n	800bcb4 <USB_HC_Halt+0x1f0>
          break;
 800bcb2:	bf00      	nop
    }
  }

  return HAL_OK;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	371c      	adds	r7, #28
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr
	...

0800bcc4 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
    {
 800bccc:	4a04      	ldr	r2, [pc, #16]	; (800bce0 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	601a      	str	r2, [r3, #0]
    }
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr
 800bce0:	08022d04 	.word	0x08022d04

0800bce4 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
    }
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f7ff ffe9 	bl	800bcc4 <_ZN8touchgfx15TouchControllerD1Ev>
 800bcf2:	2104      	movs	r1, #4
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f015 fa42 	bl	802117e <_ZdlPvj>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800bd04:	b480      	push	{r7}
 800bd06:	b085      	sub	sp, #20
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	4608      	mov	r0, r1
 800bd0e:	4611      	mov	r1, r2
 800bd10:	461a      	mov	r2, r3
 800bd12:	4603      	mov	r3, r0
 800bd14:	817b      	strh	r3, [r7, #10]
 800bd16:	460b      	mov	r3, r1
 800bd18:	813b      	strh	r3, [r7, #8]
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	897a      	ldrh	r2, [r7, #10]
 800bd22:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	893a      	ldrh	r2, [r7, #8]
 800bd28:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	88fa      	ldrh	r2, [r7, #6]
 800bd2e:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	8b3a      	ldrh	r2, [r7, #24]
 800bd34:	80da      	strh	r2, [r3, #6]
    }
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3714      	adds	r7, #20
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <_ZNK8touchgfx4Rect5rightEv>:
     *
     *        Gets the x coordinate of the right edge of the Rect.
     *
     * @return x coordinate of the right edge.
     */
    inline int16_t right() const
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
    {
        return x + width;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd52:	b29a      	uxth	r2, r3
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	4413      	add	r3, r2
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	b21b      	sxth	r3, r3
    }
 800bd62:	4618      	mov	r0, r3
 800bd64:	370c      	adds	r7, #12
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr

0800bd6e <_ZNK8touchgfx4Rect6bottomEv>:
     *
     *        Gets the y coordinate of the bottom edge of the Rect.
     *
     * @return y coordinate of the buttom edge.
     */
    inline int16_t bottom() const
 800bd6e:	b480      	push	{r7}
 800bd70:	b083      	sub	sp, #12
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
    {
        return y + height;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bd7c:	b29a      	uxth	r2, r3
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	4413      	add	r3, r2
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	b21b      	sxth	r3, r3
    }
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	370c      	adds	r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <_ZNK8touchgfx4Rect9intersectEss>:
     * @param otherX The x coordinate of the point.
     * @param otherY The y coordinate of the point.
     *
     * @return true if point lies inside rectangle.
     */
    bool intersect(int16_t otherX, int16_t otherY) const
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	460b      	mov	r3, r1
 800bda2:	807b      	strh	r3, [r7, #2]
 800bda4:	4613      	mov	r3, r2
 800bda6:	803b      	strh	r3, [r7, #0]
    {
        return (otherX >= x && otherX < right() &&
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f9b3 3000 	ldrsh.w	r3, [r3]
                otherY >= y && otherY < bottom());
 800bdae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	db1a      	blt.n	800bdec <_ZNK8touchgfx4Rect9intersectEss+0x54>
        return (otherX >= x && otherX < right() &&
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f7ff ffc4 	bl	800bd44 <_ZNK8touchgfx4Rect5rightEv>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	da11      	bge.n	800bdec <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return (otherX >= x && otherX < right() &&
 800bdce:	f9b7 2000 	ldrsh.w	r2, [r7]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	db0a      	blt.n	800bdec <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f7ff ffc9 	bl	800bd6e <_ZNK8touchgfx4Rect6bottomEv>
 800bddc:	4603      	mov	r3, r0
 800bdde:	461a      	mov	r2, r3
 800bde0:	f9b7 3000 	ldrsh.w	r3, [r7]
 800bde4:	4293      	cmp	r3, r2
 800bde6:	da01      	bge.n	800bdec <_ZNK8touchgfx4Rect9intersectEss+0x54>
 800bde8:	2301      	movs	r3, #1
 800bdea:	e000      	b.n	800bdee <_ZNK8touchgfx4Rect9intersectEss+0x56>
 800bdec:	2300      	movs	r3, #0
    }
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3708      	adds	r7, #8
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <_ZNK8touchgfx4Rect9intersectERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return true if the two rectangles intersect.
     */
    bool intersect(const Rect& other) const
 800bdf6:	b590      	push	{r4, r7, lr}
 800bdf8:	b083      	sub	sp, #12
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
 800bdfe:	6039      	str	r1, [r7, #0]
    {
        return !(x >= other.right() || right() <= other.x ||
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f9b3 4000 	ldrsh.w	r4, [r3]
 800be06:	6838      	ldr	r0, [r7, #0]
 800be08:	f7ff ff9c 	bl	800bd44 <_ZNK8touchgfx4Rect5rightEv>
 800be0c:	4603      	mov	r3, r0
 800be0e:	429c      	cmp	r4, r3
 800be10:	da1e      	bge.n	800be50 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f7ff ff96 	bl	800bd44 <_ZNK8touchgfx4Rect5rightEv>
 800be18:	4603      	mov	r3, r0
 800be1a:	461a      	mov	r2, r3
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800be22:	429a      	cmp	r2, r3
 800be24:	dd14      	ble.n	800be50 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 800be2c:	6838      	ldr	r0, [r7, #0]
 800be2e:	f7ff ff9e 	bl	800bd6e <_ZNK8touchgfx4Rect6bottomEv>
 800be32:	4603      	mov	r3, r0
        return !(x >= other.right() || right() <= other.x ||
 800be34:	429c      	cmp	r4, r3
 800be36:	da0b      	bge.n	800be50 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f7ff ff98 	bl	800bd6e <_ZNK8touchgfx4Rect6bottomEv>
 800be3e:	4603      	mov	r3, r0
 800be40:	461a      	mov	r2, r3
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return !(x >= other.right() || right() <= other.x ||
 800be48:	429a      	cmp	r2, r3
 800be4a:	dd01      	ble.n	800be50 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 800be4c:	2301      	movs	r3, #1
 800be4e:	e000      	b.n	800be52 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5c>
 800be50:	2300      	movs	r3, #0
    }
 800be52:	4618      	mov	r0, r3
 800be54:	370c      	adds	r7, #12
 800be56:	46bd      	mov	sp, r7
 800be58:	bd90      	pop	{r4, r7, pc}

0800be5a <_ZNK8touchgfx4RectanERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return Intersecting rectangle or Rect(0, 0, 0, 0) in case of no intersection.
     */
    Rect operator &(const Rect& other) const
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b084      	sub	sp, #16
 800be5e:	af00      	add	r7, sp, #0
 800be60:	60f8      	str	r0, [r7, #12]
 800be62:	60b9      	str	r1, [r7, #8]
 800be64:	607a      	str	r2, [r7, #4]
    {
        Rect r = *this;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	68ba      	ldr	r2, [r7, #8]
 800be6a:	6811      	ldr	r1, [r2, #0]
 800be6c:	6852      	ldr	r2, [r2, #4]
 800be6e:	6019      	str	r1, [r3, #0]
 800be70:	605a      	str	r2, [r3, #4]
        r &= other;
 800be72:	6879      	ldr	r1, [r7, #4]
 800be74:	68f8      	ldr	r0, [r7, #12]
 800be76:	f000 f805 	bl	800be84 <_ZN8touchgfx4RectaNERKS0_>
        return r;
 800be7a:	bf00      	nop
    }
 800be7c:	68f8      	ldr	r0, [r7, #12]
 800be7e:	3710      	adds	r7, #16
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <_ZN8touchgfx4RectaNERKS0_>:
     *        Assigns this Rect to the intersection of the current Rect and the assigned Rect.
     *        The assignment will result in a Rect(0, 0, 0, 0) if they do not intersect.
     *
     * @param other The rect to intersect with.
     */
    void operator &=(const Rect& other)
 800be84:	b590      	push	{r4, r7, lr}
 800be86:	b085      	sub	sp, #20
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	6039      	str	r1, [r7, #0]
    {
        if (intersect(other))
 800be8e:	6839      	ldr	r1, [r7, #0]
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f7ff ffb0 	bl	800bdf6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d05f      	beq.n	800bf5c <_ZN8touchgfx4RectaNERKS0_+0xd8>
        {
            int16_t newX = MAX(x, other.x);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	dd03      	ble.n	800beb4 <_ZN8touchgfx4RectaNERKS0_+0x30>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800beb2:	e002      	b.n	800beba <_ZN8touchgfx4RectaNERKS0_+0x36>
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800beba:	81fb      	strh	r3, [r7, #14]
            int16_t newY = MAX(y, other.y);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bec8:	429a      	cmp	r2, r3
 800beca:	dd04      	ble.n	800bed6 <_ZN8touchgfx4RectaNERKS0_+0x52>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	3302      	adds	r3, #2
 800bed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bed4:	e002      	b.n	800bedc <_ZN8touchgfx4RectaNERKS0_+0x58>
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bedc:	81bb      	strh	r3, [r7, #12]

            width = MIN(right(), other.right()) - newX;
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f7ff ff30 	bl	800bd44 <_ZNK8touchgfx4Rect5rightEv>
 800bee4:	4603      	mov	r3, r0
 800bee6:	461c      	mov	r4, r3
 800bee8:	6838      	ldr	r0, [r7, #0]
 800beea:	f7ff ff2b 	bl	800bd44 <_ZNK8touchgfx4Rect5rightEv>
 800beee:	4603      	mov	r3, r0
 800bef0:	429c      	cmp	r4, r3
 800bef2:	da05      	bge.n	800bf00 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f7ff ff25 	bl	800bd44 <_ZNK8touchgfx4Rect5rightEv>
 800befa:	4603      	mov	r3, r0
 800befc:	b29b      	uxth	r3, r3
 800befe:	e004      	b.n	800bf0a <_ZN8touchgfx4RectaNERKS0_+0x86>
 800bf00:	6838      	ldr	r0, [r7, #0]
 800bf02:	f7ff ff1f 	bl	800bd44 <_ZNK8touchgfx4Rect5rightEv>
 800bf06:	4603      	mov	r3, r0
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	89fa      	ldrh	r2, [r7, #14]
 800bf0c:	1a9b      	subs	r3, r3, r2
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	b21a      	sxth	r2, r3
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	809a      	strh	r2, [r3, #4]
            height = MIN(bottom(), other.bottom()) - newY;
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7ff ff29 	bl	800bd6e <_ZNK8touchgfx4Rect6bottomEv>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	461c      	mov	r4, r3
 800bf20:	6838      	ldr	r0, [r7, #0]
 800bf22:	f7ff ff24 	bl	800bd6e <_ZNK8touchgfx4Rect6bottomEv>
 800bf26:	4603      	mov	r3, r0
 800bf28:	429c      	cmp	r4, r3
 800bf2a:	da05      	bge.n	800bf38 <_ZN8touchgfx4RectaNERKS0_+0xb4>
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f7ff ff1e 	bl	800bd6e <_ZNK8touchgfx4Rect6bottomEv>
 800bf32:	4603      	mov	r3, r0
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	e004      	b.n	800bf42 <_ZN8touchgfx4RectaNERKS0_+0xbe>
 800bf38:	6838      	ldr	r0, [r7, #0]
 800bf3a:	f7ff ff18 	bl	800bd6e <_ZNK8touchgfx4Rect6bottomEv>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	89ba      	ldrh	r2, [r7, #12]
 800bf44:	1a9b      	subs	r3, r3, r2
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	b21a      	sxth	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	80da      	strh	r2, [r3, #6]
            x = newX;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	89fa      	ldrh	r2, [r7, #14]
 800bf52:	801a      	strh	r2, [r3, #0]
            y = newY;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	89ba      	ldrh	r2, [r7, #12]
 800bf58:	805a      	strh	r2, [r3, #2]
            x = 0;
            y = 0;
            width = 0;
            height = 0;
        }
    }
 800bf5a:	e00b      	b.n	800bf74 <_ZN8touchgfx4RectaNERKS0_+0xf0>
            x = 0;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	801a      	strh	r2, [r3, #0]
            y = 0;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2200      	movs	r2, #0
 800bf66:	805a      	strh	r2, [r3, #2]
            width = 0;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	809a      	strh	r2, [r3, #4]
            height = 0;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2200      	movs	r2, #0
 800bf72:	80da      	strh	r2, [r3, #6]
    }
 800bf74:	bf00      	nop
 800bf76:	3714      	adds	r7, #20
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd90      	pop	{r4, r7, pc}

0800bf7c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
     *        Increases the area covered by this rectangle to encompass the area covered by
     *        supplied rectangle.
     *
     * @param other The other rectangle.
     */
    void expandToFit(const Rect& other)
 800bf7c:	b590      	push	{r4, r7, lr}
 800bf7e:	b085      	sub	sp, #20
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
    {
        if (!other.isEmpty())
 800bf86:	6838      	ldr	r0, [r7, #0]
 800bf88:	f000 f884 	bl	800c094 <_ZNK8touchgfx4Rect7isEmptyEv>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	f083 0301 	eor.w	r3, r3, #1
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d079      	beq.n	800c08c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
        {
            if (isEmpty())
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 f87b 	bl	800c094 <_ZNK8touchgfx4Rect7isEmptyEv>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d014      	beq.n	800bfce <_ZN8touchgfx4Rect11expandToFitERKS0_+0x52>
            {
                x = other.x;
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	801a      	strh	r2, [r3, #0]
                y = other.y;
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	805a      	strh	r2, [r3, #2]
                width = other.width;
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	809a      	strh	r2, [r3, #4]
                height = other.height;
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	80da      	strh	r2, [r3, #6]
                y = newY;
                width = endPointX - newX;
                height = endPointY - newY;
            }
        }
    }
 800bfcc:	e05e      	b.n	800c08c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
                int16_t newX = MIN(x, other.x);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	da03      	bge.n	800bfe6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6a>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bfe4:	e002      	b.n	800bfec <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bfec:	81fb      	strh	r3, [r7, #14]
                int16_t newY = MIN(y, other.y);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	da04      	bge.n	800c008 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x8c>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	3302      	adds	r3, #2
 800c002:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c006:	e002      	b.n	800c00e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x92>
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c00e:	81bb      	strh	r3, [r7, #12]
                int16_t endPointX = MAX(right(), other.right());
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f7ff fe97 	bl	800bd44 <_ZNK8touchgfx4Rect5rightEv>
 800c016:	4603      	mov	r3, r0
 800c018:	461c      	mov	r4, r3
 800c01a:	6838      	ldr	r0, [r7, #0]
 800c01c:	f7ff fe92 	bl	800bd44 <_ZNK8touchgfx4Rect5rightEv>
 800c020:	4603      	mov	r3, r0
 800c022:	429c      	cmp	r4, r3
 800c024:	dd04      	ble.n	800c030 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xb4>
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f7ff fe8c 	bl	800bd44 <_ZNK8touchgfx4Rect5rightEv>
 800c02c:	4603      	mov	r3, r0
 800c02e:	e003      	b.n	800c038 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xbc>
 800c030:	6838      	ldr	r0, [r7, #0]
 800c032:	f7ff fe87 	bl	800bd44 <_ZNK8touchgfx4Rect5rightEv>
 800c036:	4603      	mov	r3, r0
 800c038:	817b      	strh	r3, [r7, #10]
                int16_t endPointY = MAX(bottom(), other.bottom());
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f7ff fe97 	bl	800bd6e <_ZNK8touchgfx4Rect6bottomEv>
 800c040:	4603      	mov	r3, r0
 800c042:	461c      	mov	r4, r3
 800c044:	6838      	ldr	r0, [r7, #0]
 800c046:	f7ff fe92 	bl	800bd6e <_ZNK8touchgfx4Rect6bottomEv>
 800c04a:	4603      	mov	r3, r0
 800c04c:	429c      	cmp	r4, r3
 800c04e:	dd04      	ble.n	800c05a <_ZN8touchgfx4Rect11expandToFitERKS0_+0xde>
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f7ff fe8c 	bl	800bd6e <_ZNK8touchgfx4Rect6bottomEv>
 800c056:	4603      	mov	r3, r0
 800c058:	e003      	b.n	800c062 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xe6>
 800c05a:	6838      	ldr	r0, [r7, #0]
 800c05c:	f7ff fe87 	bl	800bd6e <_ZNK8touchgfx4Rect6bottomEv>
 800c060:	4603      	mov	r3, r0
 800c062:	813b      	strh	r3, [r7, #8]
                x = newX;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	89fa      	ldrh	r2, [r7, #14]
 800c068:	801a      	strh	r2, [r3, #0]
                y = newY;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	89ba      	ldrh	r2, [r7, #12]
 800c06e:	805a      	strh	r2, [r3, #2]
                width = endPointX - newX;
 800c070:	897a      	ldrh	r2, [r7, #10]
 800c072:	89fb      	ldrh	r3, [r7, #14]
 800c074:	1ad3      	subs	r3, r2, r3
 800c076:	b29b      	uxth	r3, r3
 800c078:	b21a      	sxth	r2, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	809a      	strh	r2, [r3, #4]
                height = endPointY - newY;
 800c07e:	893a      	ldrh	r2, [r7, #8]
 800c080:	89bb      	ldrh	r3, [r7, #12]
 800c082:	1ad3      	subs	r3, r2, r3
 800c084:	b29b      	uxth	r3, r3
 800c086:	b21a      	sxth	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	80da      	strh	r2, [r3, #6]
    }
 800c08c:	bf00      	nop
 800c08e:	3714      	adds	r7, #20
 800c090:	46bd      	mov	sp, r7
 800c092:	bd90      	pop	{r4, r7, pc}

0800c094 <_ZNK8touchgfx4Rect7isEmptyEv>:
     *
     *        Query if this object is empty.
     *
     * @return true if any of the dimensions are 0.
     */
    bool isEmpty() const
 800c094:	b480      	push	{r7}
 800c096:	b083      	sub	sp, #12
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
    {
        return ((width == 0) || (height == 0));
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d004      	beq.n	800c0b0 <_ZNK8touchgfx4Rect7isEmptyEv+0x1c>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d101      	bne.n	800c0b4 <_ZNK8touchgfx4Rect7isEmptyEv+0x20>
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	e000      	b.n	800c0b6 <_ZNK8touchgfx4Rect7isEmptyEv+0x22>
 800c0b4:	2300      	movs	r3, #0
    }
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	370c      	adds	r7, #12
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr
	...

0800c0c4 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	4a04      	ldr	r2, [pc, #16]	; (800c0e0 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	601a      	str	r2, [r3, #0]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	370c      	adds	r7, #12
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr
 800c0e0:	08025420 	.word	0x08025420

0800c0e4 <_ZN8touchgfx8DrawableD0Ev>:
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f7ff ffe9 	bl	800c0c4 <_ZN8touchgfx8DrawableD1Ev>
 800c0f2:	2128      	movs	r1, #40	; 0x28
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f015 f842 	bl	802117e <_ZdlPvj>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3708      	adds	r7, #8
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <_ZNK8touchgfx8Drawable7getRectEv>:
     *        Gets the rectangle this Drawable covers, in coordinates relative to its parent.
     *
     * @return The rectangle this Drawable covers expressed in coordinates relative to its
     *         parent.
     */
    const Rect& getRect() const
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
    {
        return rect;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	3304      	adds	r3, #4
    }
 800c110:	4618      	mov	r0, r3
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	4608      	mov	r0, r1
 800c126:	4611      	mov	r1, r2
 800c128:	461a      	mov	r2, r3
 800c12a:	4603      	mov	r3, r0
 800c12c:	817b      	strh	r3, [r7, #10]
 800c12e:	460b      	mov	r3, r1
 800c130:	813b      	strh	r3, [r7, #8]
 800c132:	4613      	mov	r3, r2
 800c134:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	3334      	adds	r3, #52	; 0x34
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800c142:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	4798      	blx	r3
        setWidth(width);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	3338      	adds	r3, #56	; 0x38
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c156:	4611      	mov	r1, r2
 800c158:	68f8      	ldr	r0, [r7, #12]
 800c15a:	4798      	blx	r3
        setHeight(height);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	333c      	adds	r3, #60	; 0x3c
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800c168:	4611      	mov	r1, r2
 800c16a:	68f8      	ldr	r0, [r7, #12]
 800c16c:	4798      	blx	r3
    };
 800c16e:	bf00      	nop
 800c170:	3710      	adds	r7, #16
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <_ZNK8touchgfx8Drawable4getXEv>:
     *
     *        Gets the x coordinate of this drawable.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800c176:	b480      	push	{r7}
 800c178:	b083      	sub	sp, #12
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800c184:	4618      	mov	r0, r3
 800c186:	370c      	adds	r7, #12
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <_ZNK8touchgfx8Drawable4getYEv>:
     *
     *        Gets the y coordinate of this drawable.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800c190:	b480      	push	{r7}
 800c192:	b083      	sub	sp, #12
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800c19e:	4618      	mov	r0, r3
 800c1a0:	370c      	adds	r7, #12
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr

0800c1aa <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 800c1aa:	b480      	push	{r7}
 800c1ac:	b083      	sub	sp, #12
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	887a      	ldrh	r2, [r7, #2]
 800c1ba:	809a      	strh	r2, [r3, #4]
    }
 800c1bc:	bf00      	nop
 800c1be:	370c      	adds	r7, #12
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr

0800c1c8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 800c1c8:	b480      	push	{r7}
 800c1ca:	b083      	sub	sp, #12
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	887a      	ldrh	r2, [r7, #2]
 800c1d8:	80da      	strh	r2, [r3, #6]
    }
 800c1da:	bf00      	nop
 800c1dc:	370c      	adds	r7, #12
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr

0800c1e6 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b082      	sub	sp, #8
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	807b      	strh	r3, [r7, #2]
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	332c      	adds	r3, #44	; 0x2c
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c202:	4611      	mov	r1, r2
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	4798      	blx	r3
        setY(y);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	3330      	adds	r3, #48	; 0x30
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c214:	4611      	mov	r1, r2
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	4798      	blx	r3
    }
 800c21a:	bf00      	nop
 800c21c:	3708      	adds	r7, #8
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}

0800c222 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 800c222:	b480      	push	{r7}
 800c224:	b083      	sub	sp, #12
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
 800c22a:	460b      	mov	r3, r1
 800c22c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	887a      	ldrh	r2, [r7, #2]
 800c232:	811a      	strh	r2, [r3, #8]
    }
 800c234:	bf00      	nop
 800c236:	370c      	adds	r7, #12
 800c238:	46bd      	mov	sp, r7
 800c23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23e:	4770      	bx	lr

0800c240 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	460b      	mov	r3, r1
 800c24a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	887a      	ldrh	r2, [r7, #2]
 800c250:	815a      	strh	r2, [r3, #10]
    }
 800c252:	bf00      	nop
 800c254:	370c      	adds	r7, #12
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr

0800c25e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800c25e:	b480      	push	{r7}
 800c260:	b083      	sub	sp, #12
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
 800c266:	bf00      	nop
 800c268:	370c      	adds	r7, #12
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr

0800c272 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800c272:	b480      	push	{r7}
 800c274:	b083      	sub	sp, #12
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	6039      	str	r1, [r7, #0]
 800c27c:	bf00      	nop
 800c27e:	370c      	adds	r7, #12
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr

0800c288 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
 800c292:	bf00      	nop
 800c294:	370c      	adds	r7, #12
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr

0800c29e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800c29e:	b480      	push	{r7}
 800c2a0:	b083      	sub	sp, #12
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
 800c2a6:	6039      	str	r1, [r7, #0]
 800c2a8:	bf00      	nop
 800c2aa:	370c      	adds	r7, #12
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr

0800c2b4 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800c2b4:	b480      	push	{r7}
 800c2b6:	b083      	sub	sp, #12
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	bf00      	nop
 800c2be:	370c      	adds	r7, #12
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800c2c8:	b480      	push	{r7}
 800c2ca:	b083      	sub	sp, #12
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	370c      	adds	r7, #12
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr

0800c2e2 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800c2e2:	b480      	push	{r7}
 800c2e4:	b083      	sub	sp, #12
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	370c      	adds	r7, #12
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr

0800c2fc <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	460b      	mov	r3, r1
 800c306:	807b      	strh	r3, [r7, #2]
 800c308:	4613      	mov	r3, r2
 800c30a:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	3354      	adds	r3, #84	; 0x54
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	8879      	ldrh	r1, [r7, #2]
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800c31c:	b292      	uxth	r2, r2
 800c31e:	1a8a      	subs	r2, r1, r2
 800c320:	b292      	uxth	r2, r2
 800c322:	b210      	sxth	r0, r2
 800c324:	8839      	ldrh	r1, [r7, #0]
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800c32c:	b292      	uxth	r2, r2
 800c32e:	1a8a      	subs	r2, r1, r2
 800c330:	b292      	uxth	r2, r2
 800c332:	b212      	sxth	r2, r2
 800c334:	4601      	mov	r1, r0
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	4798      	blx	r3
    }
 800c33a:	bf00      	nop
 800c33c:	3708      	adds	r7, #8
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
	...

0800c344 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	4a05      	ldr	r2, [pc, #20]	; (800c364 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	601a      	str	r2, [r3, #0]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	4618      	mov	r0, r3
 800c356:	f7ff feb5 	bl	800c0c4 <_ZN8touchgfx8DrawableD1Ev>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	4618      	mov	r0, r3
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	08022d1c 	.word	0x08022d1c

0800c368 <_ZN8touchgfx9ContainerD0Ev>:
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f7ff ffe7 	bl	800c344 <_ZN8touchgfx9ContainerD1Ev>
 800c376:	212c      	movs	r1, #44	; 0x2c
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f014 ff00 	bl	802117e <_ZdlPvj>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	4618      	mov	r0, r3
 800c382:	3708      	adds	r7, #8
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <_ZNK8touchgfx9Container7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_CONTAINER.
     */
    virtual uint16_t getType() const
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_CONTAINER;
 800c390:	2312      	movs	r3, #18
    }
 800c392:	4618      	mov	r0, r3
 800c394:	370c      	adds	r7, #12
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr

0800c39e <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
#include <touchgfx/Screen.hpp>

namespace touchgfx
{
bool Container::contains(const Drawable& d)
{
 800c39e:	b480      	push	{r7}
 800c3a0:	b085      	sub	sp, #20
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
 800c3a6:	6039      	str	r1, [r7, #0]
    bool found = false;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	73fb      	strb	r3, [r7, #15]
    Drawable* head = firstChild;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3b0:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d00d      	beq.n	800c3d4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
 800c3b8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d10a      	bne.n	800c3d4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
    {
        found = (head == &d);
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	bf0c      	ite	eq
 800c3c6:	2301      	moveq	r3, #1
 800c3c8:	2300      	movne	r3, #0
 800c3ca:	73fb      	strb	r3, [r7, #15]
        head = head->nextSibling;
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	699b      	ldr	r3, [r3, #24]
 800c3d0:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 800c3d2:	e7ee      	b.n	800c3b2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x14>
    }
    return found;
 800c3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3714      	adds	r7, #20
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr
	...

0800c3e4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:

void Container::add(Drawable& d)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
    assert(&d != this && "Cannot add Drawable to self");
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	683a      	ldr	r2, [r7, #0]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d105      	bne.n	800c402 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800c3f6:	4b22      	ldr	r3, [pc, #136]	; (800c480 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x9c>)
 800c3f8:	4a22      	ldr	r2, [pc, #136]	; (800c484 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800c3fa:	2123      	movs	r1, #35	; 0x23
 800c3fc:	4822      	ldr	r0, [pc, #136]	; (800c488 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800c3fe:	f014 fedb 	bl	80211b8 <__assert_func>
    assert(d.parent == 0 && "Cannot add Drawable multiple times");
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	695b      	ldr	r3, [r3, #20]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d005      	beq.n	800c416 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x32>
 800c40a:	4b20      	ldr	r3, [pc, #128]	; (800c48c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa8>)
 800c40c:	4a1d      	ldr	r2, [pc, #116]	; (800c484 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800c40e:	2124      	movs	r1, #36	; 0x24
 800c410:	481d      	ldr	r0, [pc, #116]	; (800c488 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800c412:	f014 fed1 	bl	80211b8 <__assert_func>

    // Initialize d to have this as parent and no sibling.
    d.parent = this;
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	615a      	str	r2, [r3, #20]
    d.nextSibling = 0;
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	2200      	movs	r2, #0
 800c420:	619a      	str	r2, [r3, #24]

    // Check if d is the first child to be added (container is empty)
    if (!firstChild)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c426:	2b00      	cmp	r3, #0
 800c428:	d103      	bne.n	800c432 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4e>
    {
        firstChild = &d;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	683a      	ldr	r2, [r7, #0]
 800c42e:	629a      	str	r2, [r3, #40]	; 0x28
        }
        assert(head != &d && "Cannot add Drawable multiple times");
        // Make last child now point to d.
        head->nextSibling = &d;
    }
}
 800c430:	e021      	b.n	800c476 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x92>
        Drawable* head = firstChild;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c436:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	699b      	ldr	r3, [r3, #24]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d00d      	beq.n	800c45c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x78>
            assert(head != &d && "Cannot add Drawable multiple times");
 800c440:	68fa      	ldr	r2, [r7, #12]
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	429a      	cmp	r2, r3
 800c446:	d105      	bne.n	800c454 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x70>
 800c448:	4b11      	ldr	r3, [pc, #68]	; (800c490 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 800c44a:	4a0e      	ldr	r2, [pc, #56]	; (800c484 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800c44c:	2135      	movs	r1, #53	; 0x35
 800c44e:	480e      	ldr	r0, [pc, #56]	; (800c488 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800c450:	f014 feb2 	bl	80211b8 <__assert_func>
            head = head->nextSibling;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	699b      	ldr	r3, [r3, #24]
 800c458:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 800c45a:	e7ed      	b.n	800c438 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>
        assert(head != &d && "Cannot add Drawable multiple times");
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	429a      	cmp	r2, r3
 800c462:	d105      	bne.n	800c470 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x8c>
 800c464:	4b0a      	ldr	r3, [pc, #40]	; (800c490 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 800c466:	4a07      	ldr	r2, [pc, #28]	; (800c484 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800c468:	2138      	movs	r1, #56	; 0x38
 800c46a:	4807      	ldr	r0, [pc, #28]	; (800c488 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800c46c:	f014 fea4 	bl	80211b8 <__assert_func>
        head->nextSibling = &d;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	683a      	ldr	r2, [r7, #0]
 800c474:	619a      	str	r2, [r3, #24]
}
 800c476:	bf00      	nop
 800c478:	3710      	adds	r7, #16
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	080221b4 	.word	0x080221b4
 800c484:	08022da4 	.word	0x08022da4
 800c488:	080221e0 	.word	0x080221e0
 800c48c:	08022238 	.word	0x08022238
 800c490:	08022270 	.word	0x08022270

0800c494 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:

void Container::remove(Drawable& d)
{
 800c494:	b480      	push	{r7}
 800c496:	b085      	sub	sp, #20
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
    if (!firstChild)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d031      	beq.n	800c50a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x76>
    {
        // No children
        return;
    }

    if (&d == firstChild)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4aa:	683a      	ldr	r2, [r7, #0]
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d112      	bne.n	800c4d6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x42>
    {
        // d is first child.
        d.parent = 0;
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	615a      	str	r2, [r3, #20]
        if (!d.nextSibling)
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	699b      	ldr	r3, [r3, #24]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d103      	bne.n	800c4c6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x32>
        {
            // d was only child, so now this container is empty
            firstChild = 0;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	629a      	str	r2, [r3, #40]	; 0x28
        else
        {
            firstChild = d.nextSibling;
            d.nextSibling = 0;
        }
        return;
 800c4c4:	e022      	b.n	800c50c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
            firstChild = d.nextSibling;
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	699a      	ldr	r2, [r3, #24]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	629a      	str	r2, [r3, #40]	; 0x28
            d.nextSibling = 0;
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	619a      	str	r2, [r3, #24]
        return;
 800c4d4:	e01a      	b.n	800c50c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    }
    Drawable* tmp = firstChild;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4da:	60fb      	str	r3, [r7, #12]

    while (tmp)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d014      	beq.n	800c50c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    {
        if (tmp->nextSibling == &d)
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	699b      	ldr	r3, [r3, #24]
 800c4e6:	683a      	ldr	r2, [r7, #0]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d10a      	bne.n	800c502 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x6e>
        {
            tmp->nextSibling = d.nextSibling;
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	699a      	ldr	r2, [r3, #24]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	619a      	str	r2, [r3, #24]
            d.parent = 0;
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	615a      	str	r2, [r3, #20]
            d.nextSibling = 0;
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	619a      	str	r2, [r3, #24]
            return;
 800c500:	e004      	b.n	800c50c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
        }
        else
        {
            tmp = tmp->nextSibling;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	699b      	ldr	r3, [r3, #24]
 800c506:	60fb      	str	r3, [r7, #12]
    while (tmp)
 800c508:	e7e8      	b.n	800c4dc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x48>
        return;
 800c50a:	bf00      	nop
        }
    }
}
 800c50c:	3714      	adds	r7, #20
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr

0800c516 <_ZN8touchgfx9Container9removeAllEv>:

void Container::removeAll()
{
 800c516:	b480      	push	{r7}
 800c518:	b085      	sub	sp, #20
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
    while (firstChild)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00e      	beq.n	800c544 <_ZN8touchgfx9Container9removeAllEv+0x2e>
    {
        Drawable* d = firstChild;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c52a:	60fb      	str	r3, [r7, #12]
        firstChild = firstChild->nextSibling;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c530:	699a      	ldr	r2, [r3, #24]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	629a      	str	r2, [r3, #40]	; 0x28
        d->parent = 0;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2200      	movs	r2, #0
 800c53a:	615a      	str	r2, [r3, #20]
        d->nextSibling = 0;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2200      	movs	r2, #0
 800c540:	619a      	str	r2, [r3, #24]
    while (firstChild)
 800c542:	e7ec      	b.n	800c51e <_ZN8touchgfx9Container9removeAllEv+0x8>
    }
}
 800c544:	bf00      	nop
 800c546:	3714      	adds	r7, #20
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <_ZN8touchgfx9Container6unlinkEv>:

void Container::unlink()
{
 800c550:	b480      	push	{r7}
 800c552:	b083      	sub	sp, #12
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
    firstChild = 0;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c55e:	bf00      	nop
 800c560:	370c      	adds	r7, #12
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:

void Container::draw(const Rect& invalidatedArea) const
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b088      	sub	sp, #32
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
 800c572:	6039      	str	r1, [r7, #0]
    // The draw function of Container is not normally used. Containers do not per default
    // appear in the draw chain, since they are normally invisible themselves. However,
    // if someone decides to call draw on a container, at least do something useful (draw children).
    if (!isVisible() || !firstChild)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4618      	mov	r0, r3
 800c578:	f7ff fea6 	bl	800c2c8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800c57c:	4603      	mov	r3, r0
 800c57e:	f083 0301 	eor.w	r3, r3, #1
 800c582:	b2db      	uxtb	r3, r3
 800c584:	2b00      	cmp	r3, #0
 800c586:	d103      	bne.n	800c590 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x26>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d101      	bne.n	800c594 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2a>
 800c590:	2301      	movs	r3, #1
 800c592:	e000      	b.n	800c596 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2c>
 800c594:	2300      	movs	r3, #0
 800c596:	2b00      	cmp	r3, #0
 800c598:	d14e      	bne.n	800c638 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xce>
    {
        // Nothing to draw
        return;
    }

    Rect tmp = invalidatedArea;
 800c59a:	683a      	ldr	r2, [r7, #0]
 800c59c:	f107 0314 	add.w	r3, r7, #20
 800c5a0:	6810      	ldr	r0, [r2, #0]
 800c5a2:	6851      	ldr	r1, [r2, #4]
 800c5a4:	c303      	stmia	r3!, {r0, r1}
    Drawable* d = firstChild;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5aa:	61fb      	str	r3, [r7, #28]
    while (d)
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d043      	beq.n	800c63a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xd0>
    {
        if (d->isVisible())
 800c5b2:	69f8      	ldr	r0, [r7, #28]
 800c5b4:	f7ff fe88 	bl	800c2c8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d038      	beq.n	800c630 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
        {
            Rect drawableRegion = tmp & d->getRect();
 800c5be:	69f8      	ldr	r0, [r7, #28]
 800c5c0:	f7ff fda0 	bl	800c104 <_ZNK8touchgfx8Drawable7getRectEv>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	f107 030c 	add.w	r3, r7, #12
 800c5ca:	f107 0114 	add.w	r1, r7, #20
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7ff fc43 	bl	800be5a <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 800c5d4:	f107 030c 	add.w	r3, r7, #12
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7ff fd5b 	bl	800c094 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	f083 0301 	eor.w	r3, r3, #1
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d022      	beq.n	800c630 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
            {
                // This child has a non-empty intersection with the invalidated area.
                // Convert region to the Drawable's coordinate system and draw.
                drawableRegion.x -= d->getX();
 800c5ea:	69f8      	ldr	r0, [r7, #28]
 800c5ec:	f7ff fdc3 	bl	800c176 <_ZNK8touchgfx8Drawable4getXEv>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c5f8:	b29a      	uxth	r2, r3
 800c5fa:	b28b      	uxth	r3, r1
 800c5fc:	1ad3      	subs	r3, r2, r3
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	b21b      	sxth	r3, r3
 800c602:	81bb      	strh	r3, [r7, #12]
                drawableRegion.y -= d->getY();
 800c604:	69f8      	ldr	r0, [r7, #28]
 800c606:	f7ff fdc3 	bl	800c190 <_ZNK8touchgfx8Drawable4getYEv>
 800c60a:	4603      	mov	r3, r0
 800c60c:	4619      	mov	r1, r3
 800c60e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c612:	b29a      	uxth	r2, r3
 800c614:	b28b      	uxth	r3, r1
 800c616:	1ad3      	subs	r3, r2, r3
 800c618:	b29b      	uxth	r3, r3
 800c61a:	b21b      	sxth	r3, r3
 800c61c:	81fb      	strh	r3, [r7, #14]
                d->draw(drawableRegion);
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	3308      	adds	r3, #8
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f107 020c 	add.w	r2, r7, #12
 800c62a:	4611      	mov	r1, r2
 800c62c:	69f8      	ldr	r0, [r7, #28]
 800c62e:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	699b      	ldr	r3, [r3, #24]
 800c634:	61fb      	str	r3, [r7, #28]
    while (d)
 800c636:	e7b9      	b.n	800c5ac <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x42>
        return;
 800c638:	bf00      	nop
    }
}
 800c63a:	3720      	adds	r7, #32
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:

void Container::getLastChild(int16_t x, int16_t y, Drawable** last)
{
 800c640:	b590      	push	{r4, r7, lr}
 800c642:	b087      	sub	sp, #28
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	607b      	str	r3, [r7, #4]
 800c64a:	460b      	mov	r3, r1
 800c64c:	817b      	strh	r3, [r7, #10]
 800c64e:	4613      	mov	r3, r2
 800c650:	813b      	strh	r3, [r7, #8]
    // This function is used to obtain the drawable that should receive a click/drag/gesture event.
    // Find the last child (ie. the last child that was added, ie. the "front-most" drawable) covering
    // the specified coords.
    if (isTouchable())
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	4618      	mov	r0, r3
 800c656:	f7ff fe44 	bl	800c2e2 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800c65a:	4603      	mov	r3, r0
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d002      	beq.n	800c666 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x26>
    {
        // If the container itself is touchable, result so far is "this". Might be overridden by a child.
        *last = this;
 800c660:	68fa      	ldr	r2, [r7, #12]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	601a      	str	r2, [r3, #0]
    }

    Drawable* d = firstChild;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c66a:	617b      	str	r3, [r7, #20]
    while (d)
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d038      	beq.n	800c6e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0xa4>
    {
        // Iterate over children.
        if (d->isVisible() && d->getRect().intersect(x, y))
 800c672:	6978      	ldr	r0, [r7, #20]
 800c674:	f7ff fe28 	bl	800c2c8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800c678:	4603      	mov	r3, r0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d00e      	beq.n	800c69c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800c67e:	6978      	ldr	r0, [r7, #20]
 800c680:	f7ff fd40 	bl	800c104 <_ZNK8touchgfx8Drawable7getRectEv>
 800c684:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800c688:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c68c:	4619      	mov	r1, r3
 800c68e:	f7ff fb83 	bl	800bd98 <_ZNK8touchgfx4Rect9intersectEss>
 800c692:	4603      	mov	r3, r0
 800c694:	2b00      	cmp	r3, #0
 800c696:	d001      	beq.n	800c69c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800c698:	2301      	movs	r3, #1
 800c69a:	e000      	b.n	800c69e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5e>
 800c69c:	2300      	movs	r3, #0
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d01c      	beq.n	800c6dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x9c>
        {
            int16_t xadj = x - d->getX();
 800c6a2:	897c      	ldrh	r4, [r7, #10]
 800c6a4:	6978      	ldr	r0, [r7, #20]
 800c6a6:	f7ff fd66 	bl	800c176 <_ZNK8touchgfx8Drawable4getXEv>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	1ae3      	subs	r3, r4, r3
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	827b      	strh	r3, [r7, #18]
            int16_t yadj = y - d->getY();
 800c6b4:	893c      	ldrh	r4, [r7, #8]
 800c6b6:	6978      	ldr	r0, [r7, #20]
 800c6b8:	f7ff fd6a 	bl	800c190 <_ZNK8touchgfx8Drawable4getYEv>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	1ae3      	subs	r3, r4, r3
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	823b      	strh	r3, [r7, #16]
            d->getLastChild(xadj, yadj, last);
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	331c      	adds	r3, #28
 800c6cc:	681c      	ldr	r4, [r3, #0]
 800c6ce:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800c6d2:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6978      	ldr	r0, [r7, #20]
 800c6da:	47a0      	blx	r4
        }
        d = d->nextSibling;
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	699b      	ldr	r3, [r3, #24]
 800c6e0:	617b      	str	r3, [r7, #20]
    while (d)
 800c6e2:	e7c3      	b.n	800c66c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x2c>
    }
}
 800c6e4:	bf00      	nop
 800c6e6:	371c      	adds	r7, #28
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd90      	pop	{r4, r7, pc}

0800c6ec <_ZNK8touchgfx9Container12getSolidRectEv>:

Rect Container::getSolidRect() const
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af02      	add	r7, sp, #8
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
    return Rect(0, 0, 0, 0);
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	9300      	str	r3, [sp, #0]
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	2100      	movs	r1, #0
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f7ff faff 	bl	800bd04 <_ZN8touchgfx4RectC1Essss>
}
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	3708      	adds	r7, #8
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}

0800c70e <_ZNK8touchgfx9Container16getContainedAreaEv>:

Rect Container::getContainedArea() const
{
 800c70e:	b580      	push	{r7, lr}
 800c710:	b086      	sub	sp, #24
 800c712:	af02      	add	r7, sp, #8
 800c714:	6078      	str	r0, [r7, #4]
 800c716:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c71c:	60fb      	str	r3, [r7, #12]
    Rect contained(0, 0, 0, 0);
 800c71e:	2300      	movs	r3, #0
 800c720:	9300      	str	r3, [sp, #0]
 800c722:	2300      	movs	r3, #0
 800c724:	2200      	movs	r2, #0
 800c726:	2100      	movs	r1, #0
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f7ff faeb 	bl	800bd04 <_ZN8touchgfx4RectC1Essss>
    while (d)
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d00b      	beq.n	800c74c <_ZNK8touchgfx9Container16getContainedAreaEv+0x3e>
    {
        contained.expandToFit(d->getRect());
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	f7ff fce5 	bl	800c104 <_ZNK8touchgfx8Drawable7getRectEv>
 800c73a:	4603      	mov	r3, r0
 800c73c:	4619      	mov	r1, r3
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f7ff fc1c 	bl	800bf7c <_ZN8touchgfx4Rect11expandToFitERKS0_>
        d = d->nextSibling;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	699b      	ldr	r3, [r3, #24]
 800c748:	60fb      	str	r3, [r7, #12]
    while (d)
 800c74a:	e7f0      	b.n	800c72e <_ZNK8touchgfx9Container16getContainedAreaEv+0x20>
    }
    return contained;
 800c74c:	bf00      	nop
}
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:

void Container::moveChildrenRelative(int16_t deltaX, int16_t deltaY)
{
 800c756:	b580      	push	{r7, lr}
 800c758:	b084      	sub	sp, #16
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
 800c75e:	460b      	mov	r3, r1
 800c760:	807b      	strh	r3, [r7, #2]
 800c762:	4613      	mov	r3, r2
 800c764:	803b      	strh	r3, [r7, #0]
    Drawable* d = firstChild;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c76a:	60fb      	str	r3, [r7, #12]
    while (d)
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d00d      	beq.n	800c78e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x38>
    {
        d->moveRelative(deltaX, deltaY);
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	3354      	adds	r3, #84	; 0x54
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c77e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800c782:	68f8      	ldr	r0, [r7, #12]
 800c784:	4798      	blx	r3
        d = d->nextSibling;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	699b      	ldr	r3, [r3, #24]
 800c78a:	60fb      	str	r3, [r7, #12]
    while (d)
 800c78c:	e7ee      	b.n	800c76c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x16>
    }
}
 800c78e:	bf00      	nop
 800c790:	3710      	adds	r7, #16
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:

void Container::forEachChild(GenericCallback<Drawable&>* function)
{
 800c796:	b580      	push	{r7, lr}
 800c798:	b084      	sub	sp, #16
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
 800c79e:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7a4:	60fb      	str	r3, [r7, #12]
    while (d)
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00a      	beq.n	800c7c2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x2c>
    {
        function->execute(*d);
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	3308      	adds	r3, #8
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	68f9      	ldr	r1, [r7, #12]
 800c7b6:	6838      	ldr	r0, [r7, #0]
 800c7b8:	4798      	blx	r3
        d = d->nextSibling;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	699b      	ldr	r3, [r3, #24]
 800c7be:	60fb      	str	r3, [r7, #12]
    while (d)
 800c7c0:	e7f1      	b.n	800c7a6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x10>
    }
}
 800c7c2:	bf00      	nop
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:

void Container::insert(Drawable* previous, Drawable& d)
{
 800c7ca:	b580      	push	{r7, lr}
 800c7cc:	b086      	sub	sp, #24
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	60f8      	str	r0, [r7, #12]
 800c7d2:	60b9      	str	r1, [r7, #8]
 800c7d4:	607a      	str	r2, [r7, #4]
    if (!firstChild)
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d107      	bne.n	800c7ee <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x24>
    {
        // Insert as only element
        add(d);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	3364      	adds	r3, #100	; 0x64
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	6879      	ldr	r1, [r7, #4]
 800c7e8:	68f8      	ldr	r0, [r7, #12]
 800c7ea:	4798      	blx	r3
        return;
 800c7ec:	e026      	b.n	800c83c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else if (!previous)
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d10a      	bne.n	800c80a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x40>
    {
        // Insert as head element
        d.nextSibling = firstChild;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	619a      	str	r2, [r3, #24]
        firstChild = &d;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	629a      	str	r2, [r3, #40]	; 0x28
        d.parent = this;
 800c802:	68fa      	ldr	r2, [r7, #12]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	615a      	str	r2, [r3, #20]
 800c808:	e018      	b.n	800c83c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else
    {
        Drawable* tmp = firstChild;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c80e:	617b      	str	r3, [r7, #20]
        while (tmp)
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d012      	beq.n	800c83c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
        {
            if (tmp == previous)
 800c816:	697a      	ldr	r2, [r7, #20]
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d10a      	bne.n	800c834 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x6a>
            {
                d.nextSibling = tmp->nextSibling;
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	699a      	ldr	r2, [r3, #24]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	619a      	str	r2, [r3, #24]
                tmp->nextSibling = &d;
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	619a      	str	r2, [r3, #24]
                d.parent = this;
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	615a      	str	r2, [r3, #20]
                return;
 800c832:	e003      	b.n	800c83c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
            }
            tmp = tmp->nextSibling;
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	699b      	ldr	r3, [r3, #24]
 800c838:	617b      	str	r3, [r7, #20]
        while (tmp)
 800c83a:	e7e9      	b.n	800c810 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x46>
        }
    }
}
 800c83c:	3718      	adds	r7, #24
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:

void Container::setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
{
 800c842:	b580      	push	{r7, lr}
 800c844:	b088      	sub	sp, #32
 800c846:	af00      	add	r7, sp, #0
 800c848:	60f8      	str	r0, [r7, #12]
 800c84a:	60b9      	str	r1, [r7, #8]
 800c84c:	607a      	str	r2, [r7, #4]
    // This function adds the children of this container to the list of drawables to draw.
    if (!isVisible())
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	4618      	mov	r0, r3
 800c852:	f7ff fd39 	bl	800c2c8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800c856:	4603      	mov	r3, r0
 800c858:	f083 0301 	eor.w	r3, r3, #1
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d14b      	bne.n	800c8fa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb8>
    {
        // If this container itself is not visible, do not add anyone to draw chain.
        return;
    }

    if (!firstChild)
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c866:	2b00      	cmp	r3, #0
 800c868:	d049      	beq.n	800c8fe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbc>
    {
        // If this container is empty, do not add anyone.
        return;
    }
    Drawable* d = firstChild;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c86e:	61fb      	str	r3, [r7, #28]
    while (d)
 800c870:	69fb      	ldr	r3, [r7, #28]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d044      	beq.n	800c900 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
    {
        if (d->isVisible())
 800c876:	69f8      	ldr	r0, [r7, #28]
 800c878:	f7ff fd26 	bl	800c2c8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800c87c:	4603      	mov	r3, r0
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d037      	beq.n	800c8f2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
        {
            // Only drawables intersecting with the specified invalidated area will be added.
            Rect drawableRegion = invalidatedArea & d->getRect();
 800c882:	69f8      	ldr	r0, [r7, #28]
 800c884:	f7ff fc3e 	bl	800c104 <_ZNK8touchgfx8Drawable7getRectEv>
 800c888:	4602      	mov	r2, r0
 800c88a:	f107 0314 	add.w	r3, r7, #20
 800c88e:	68b9      	ldr	r1, [r7, #8]
 800c890:	4618      	mov	r0, r3
 800c892:	f7ff fae2 	bl	800be5a <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 800c896:	f107 0314 	add.w	r3, r7, #20
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7ff fbfa 	bl	800c094 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	f083 0301 	eor.w	r3, r3, #1
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d022      	beq.n	800c8f2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
            {
                drawableRegion.x -= d->getX();
 800c8ac:	69f8      	ldr	r0, [r7, #28]
 800c8ae:	f7ff fc62 	bl	800c176 <_ZNK8touchgfx8Drawable4getXEv>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	b28b      	uxth	r3, r1
 800c8be:	1ad3      	subs	r3, r2, r3
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	b21b      	sxth	r3, r3
 800c8c4:	82bb      	strh	r3, [r7, #20]
                drawableRegion.y -= d->getY();
 800c8c6:	69f8      	ldr	r0, [r7, #28]
 800c8c8:	f7ff fc62 	bl	800c190 <_ZNK8touchgfx8Drawable4getYEv>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c8d4:	b29a      	uxth	r2, r3
 800c8d6:	b28b      	uxth	r3, r1
 800c8d8:	1ad3      	subs	r3, r2, r3
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	b21b      	sxth	r3, r3
 800c8de:	82fb      	strh	r3, [r7, #22]
                d->setupDrawChain(drawableRegion, nextPreviousElement);
 800c8e0:	69fb      	ldr	r3, [r7, #28]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	3360      	adds	r3, #96	; 0x60
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f107 0114 	add.w	r1, r7, #20
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	69f8      	ldr	r0, [r7, #28]
 800c8f0:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	699b      	ldr	r3, [r3, #24]
 800c8f6:	61fb      	str	r3, [r7, #28]
    while (d)
 800c8f8:	e7ba      	b.n	800c870 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x2e>
        return;
 800c8fa:	bf00      	nop
 800c8fc:	e000      	b.n	800c900 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
        return;
 800c8fe:	bf00      	nop
    }
}
 800c900:	3720      	adds	r7, #32
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 800c906:	b480      	push	{r7}
 800c908:	b083      	sub	sp, #12
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
        return rect.width;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800c914:	4618      	mov	r0, r3
 800c916:	370c      	adds	r7, #12
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
        return rect.height;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 800c92e:	4618      	mov	r0, r3
 800c930:	370c      	adds	r7, #12
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
	...

0800c93c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
 *       taking zero, one, two or three arguments.
 *
 * @tparam T1 The type of the first argument in the member function, or void if none.
 */
template <class T1>
class GenericCallback<T1, void, void>
 800c93c:	b480      	push	{r7}
 800c93e:	b083      	sub	sp, #12
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	4a04      	ldr	r2, [pc, #16]	; (800c958 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	601a      	str	r2, [r3, #0]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	4618      	mov	r0, r3
 800c94e:	370c      	adds	r7, #12
 800c950:	46bd      	mov	sp, r7
 800c952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c956:	4770      	bx	lr
 800c958:	08022de8 	.word	0x08022de8

0800c95c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
    {
    }
 800c964:	4a04      	ldr	r2, [pc, #16]	; (800c978 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	601a      	str	r2, [r3, #0]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	4618      	mov	r0, r3
 800c96e:	370c      	adds	r7, #12
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr
 800c978:	08022de8 	.word	0x08022de8

0800c97c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
    }
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f7ff ffe9 	bl	800c95c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800c98a:	2104      	movs	r1, #4
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f014 fbf6 	bl	802117e <_ZdlPvj>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	4618      	mov	r0, r3
 800c996:	3708      	adds	r7, #8
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	6039      	str	r1, [r7, #0]
        color = col;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	683a      	ldr	r2, [r7, #0]
 800c9aa:	601a      	str	r2, [r3, #0]
    }
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	370c      	adds	r7, #12
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b8:	4770      	bx	lr

0800c9ba <_ZN8touchgfx4RectC1Ev>:
    Rect()
 800c9ba:	b480      	push	{r7}
 800c9bc:	b083      	sub	sp, #12
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
        this->x = 0;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	80da      	strh	r2, [r3, #6]
    }
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4618      	mov	r0, r3
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	807b      	strh	r3, [r7, #2]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	887a      	ldrh	r2, [r7, #2]
 800c9f8:	801a      	strh	r2, [r3, #0]
    {
    }
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	370c      	adds	r7, #12
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr

0800ca08 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b084      	sub	sp, #16
 800ca0c:	af02      	add	r7, sp, #8
 800ca0e:	6078      	str	r0, [r7, #4]
        visible(true)
 800ca10:	4a13      	ldr	r2, [pc, #76]	; (800ca60 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	601a      	str	r2, [r3, #0]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	1d18      	adds	r0, r3, #4
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	9300      	str	r3, [sp, #0]
 800ca1e:	2300      	movs	r3, #0
 800ca20:	2200      	movs	r2, #0
 800ca22:	2100      	movs	r1, #0
 800ca24:	f7ff f96e 	bl	800bd04 <_ZN8touchgfx4RectC1Essss>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	330c      	adds	r3, #12
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7ff ffc4 	bl	800c9ba <_ZN8touchgfx4RectC1Ev>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2200      	movs	r2, #0
 800ca36:	615a      	str	r2, [r3, #20]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	619a      	str	r2, [r3, #24]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2200      	movs	r2, #0
 800ca42:	61da      	str	r2, [r3, #28]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2200      	movs	r2, #0
 800ca48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	4618      	mov	r0, r3
 800ca58:	3708      	adds	r7, #8
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	08025420 	.word	0x08025420

0800ca64 <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 800ca64:	b480      	push	{r7}
 800ca66:	b083      	sub	sp, #12
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	78fa      	ldrb	r2, [r7, #3]
 800ca74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800ca78:	bf00      	nop
 800ca7a:	370c      	adds	r7, #12
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800ca84:	b480      	push	{r7}
 800ca86:	b083      	sub	sp, #12
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	78fa      	ldrb	r2, [r7, #3]
 800ca94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800ca98:	bf00      	nop
 800ca9a:	370c      	adds	r7, #12
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cab2:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800caba:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cac2:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800cac4:	bf00      	nop
 800cac6:	370c      	adds	r7, #12
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr

0800cad0 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b084      	sub	sp, #16
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	60f8      	str	r0, [r7, #12]
 800cad8:	60b9      	str	r1, [r7, #8]
 800cada:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800cadc:	68f8      	ldr	r0, [r7, #12]
 800cade:	f7ff ffe1 	bl	800caa4 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	68fa      	ldr	r2, [r7, #12]
 800caee:	601a      	str	r2, [r3, #0]
    }
 800caf0:	bf00      	nop
 800caf2:	3710      	adds	r7, #16
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <_ZN8touchgfx9ContainerC1Ev>:
    Container() : Drawable(),
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
        firstChild(0)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7ff ff80 	bl	800ca08 <_ZN8touchgfx8DrawableC1Ev>
 800cb08:	4a05      	ldr	r2, [pc, #20]	; (800cb20 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	601a      	str	r2, [r3, #0]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2200      	movs	r2, #0
 800cb12:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	4618      	mov	r0, r3
 800cb18:	3708      	adds	r7, #8
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	08022d1c 	.word	0x08022d1c

0800cb24 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7ff ff6a 	bl	800ca08 <_ZN8touchgfx8DrawableC1Ev>
 800cb34:	4a03      	ldr	r2, [pc, #12]	; (800cb44 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	601a      	str	r2, [r3, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3708      	adds	r7, #8
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	08022e00 	.word	0x08022e00

0800cb48 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	4a05      	ldr	r2, [pc, #20]	; (800cb68 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	601a      	str	r2, [r3, #0]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7ff fab3 	bl	800c0c4 <_ZN8touchgfx8DrawableD1Ev>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	4618      	mov	r0, r3
 800cb62:	3708      	adds	r7, #8
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	08022e00 	.word	0x08022e00

0800cb6c <_ZN8touchgfx6WidgetD0Ev>:
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f7ff ffe7 	bl	800cb48 <_ZN8touchgfx6WidgetD1Ev>
 800cb7a:	2128      	movs	r1, #40	; 0x28
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f014 fafe 	bl	802117e <_ZdlPvj>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	4618      	mov	r0, r3
 800cb86:	3708      	adds	r7, #8
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	607b      	str	r3, [r7, #4]
 800cb96:	460b      	mov	r3, r1
 800cb98:	817b      	strh	r3, [r7, #10]
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7ff fb91 	bl	800c2c8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d008      	beq.n	800cbbe <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7ff fb97 	bl	800c2e2 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d001      	beq.n	800cbbe <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e000      	b.n	800cbc0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d002      	beq.n	800cbca <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800cbc4:	68fa      	ldr	r2, [r7, #12]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	601a      	str	r2, [r3, #0]
        }
    }
 800cbca:	bf00      	nop
 800cbcc:	3710      	adds	r7, #16
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}

0800cbd2 <_ZNK8touchgfx6Widget7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_WIDGET.
     */
    virtual uint16_t getType() const
 800cbd2:	b480      	push	{r7}
 800cbd4:	b083      	sub	sp, #12
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_WIDGET;
 800cbda:	2301      	movs	r3, #1
    }
 800cbdc:	4618      	mov	r0, r3
 800cbde:	370c      	adds	r7, #12
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr

0800cbe8 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7ff ff96 	bl	800cb24 <_ZN8touchgfx6WidgetC1Ev>
 800cbf8:	4a0a      	ldr	r2, [pc, #40]	; (800cc24 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	601a      	str	r2, [r3, #0]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	22ff      	movs	r2, #255	; 0xff
 800cc02:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	3328      	adds	r3, #40	; 0x28
 800cc0a:	2100      	movs	r1, #0
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7ff fec5 	bl	800c99c <_ZN8touchgfx9colortypeC1Em>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3708      	adds	r7, #8
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	08022fd0 	.word	0x08022fd0

0800cc28 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	4a05      	ldr	r2, [pc, #20]	; (800cc48 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	601a      	str	r2, [r3, #0]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7ff ff85 	bl	800cb48 <_ZN8touchgfx6WidgetD1Ev>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	4618      	mov	r0, r3
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	08022fd0 	.word	0x08022fd0

0800cc4c <_ZN8touchgfx3BoxD0Ev>:
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f7ff ffe7 	bl	800cc28 <_ZN8touchgfx3BoxD1Ev>
 800cc5a:	2130      	movs	r1, #48	; 0x30
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f014 fa8e 	bl	802117e <_ZdlPvj>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	4618      	mov	r0, r3
 800cc66:	3708      	adds	r7, #8
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	683a      	ldr	r2, [r7, #0]
 800cc7a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800cc7c:	bf00      	nop
 800cc7e:	370c      	adds	r7, #12
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7ff ff45 	bl	800cb24 <_ZN8touchgfx6WidgetC1Ev>
 800cc9a:	4a0b      	ldr	r2, [pc, #44]	; (800ccc8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	601a      	str	r2, [r3, #0]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	3326      	adds	r3, #38	; 0x26
 800cca4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7ff fe9d 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	22ff      	movs	r2, #255	; 0xff
 800ccb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 800ccb6:	6839      	ldr	r1, [r7, #0]
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f000 fdd8 	bl	800d86e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	080230a8 	.word	0x080230a8

0800cccc <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	4a05      	ldr	r2, [pc, #20]	; (800ccec <_ZN8touchgfx5ImageD1Ev+0x20>)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	601a      	str	r2, [r3, #0]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f7ff ff33 	bl	800cb48 <_ZN8touchgfx6WidgetD1Ev>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	4618      	mov	r0, r3
 800cce6:	3708      	adds	r7, #8
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}
 800ccec:	080230a8 	.word	0x080230a8

0800ccf0 <_ZN8touchgfx5ImageD0Ev>:
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f7ff ffe7 	bl	800cccc <_ZN8touchgfx5ImageD1Ev>
 800ccfe:	212c      	movs	r1, #44	; 0x2c
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f014 fa3c 	bl	802117e <_ZdlPvj>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <_ZN8touchgfx5EventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Event() { }
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	4a04      	ldr	r2, [pc, #16]	; (800cd2c <_ZN8touchgfx5EventD1Ev+0x1c>)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	601a      	str	r2, [r3, #0]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	4618      	mov	r0, r3
 800cd22:	370c      	adds	r7, #12
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr
 800cd2c:	08022e94 	.word	0x08022e94

0800cd30 <_ZN8touchgfx5EventD0Ev>:
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f7ff ffe9 	bl	800cd10 <_ZN8touchgfx5EventD1Ev>
 800cd3e:	2104      	movs	r1, #4
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f014 fa1c 	bl	802117e <_ZdlPvj>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3708      	adds	r7, #8
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <_ZN8touchgfx10ClickEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~ClickEvent() { }
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b082      	sub	sp, #8
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	4a05      	ldr	r2, [pc, #20]	; (800cd70 <_ZN8touchgfx10ClickEventD1Ev+0x20>)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	601a      	str	r2, [r3, #0]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7ff ffd5 	bl	800cd10 <_ZN8touchgfx5EventD1Ev>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3708      	adds	r7, #8
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	08022e80 	.word	0x08022e80

0800cd74 <_ZN8touchgfx10ClickEventD0Ev>:
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f7ff ffe7 	bl	800cd50 <_ZN8touchgfx10ClickEventD1Ev>
 800cd82:	210c      	movs	r1, #12
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f014 f9fa 	bl	802117e <_ZdlPvj>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3708      	adds	r7, #8
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
     *
     *        Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
    {
        return _type;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	791b      	ldrb	r3, [r3, #4]
    }
 800cda0:	4618      	mov	r0, r3
 800cda2:	370c      	adds	r7, #12
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr

0800cdac <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_CLICK;
 800cdb4:	2300      	movs	r3, #0
    }
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	370c      	adds	r7, #12
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
	...

0800cdc4 <_ZN8touchgfx9DragEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DragEvent() { }
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b082      	sub	sp, #8
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	4a05      	ldr	r2, [pc, #20]	; (800cde4 <_ZN8touchgfx9DragEventD1Ev+0x20>)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	601a      	str	r2, [r3, #0]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7ff ff9b 	bl	800cd10 <_ZN8touchgfx5EventD1Ev>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	4618      	mov	r0, r3
 800cdde:	3708      	adds	r7, #8
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	08022e6c 	.word	0x08022e6c

0800cde8 <_ZN8touchgfx9DragEventD0Ev>:
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f7ff ffe7 	bl	800cdc4 <_ZN8touchgfx9DragEventD1Ev>
 800cdf6:	2110      	movs	r1, #16
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f014 f9c0 	bl	802117e <_ZdlPvj>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	4618      	mov	r0, r3
 800ce02:	3708      	adds	r7, #8
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 800ce08:	b480      	push	{r7}
 800ce0a:	b083      	sub	sp, #12
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_DRAG;
 800ce10:	2301      	movs	r3, #1
    }
 800ce12:	4618      	mov	r0, r3
 800ce14:	370c      	adds	r7, #12
 800ce16:	46bd      	mov	sp, r7
 800ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1c:	4770      	bx	lr
	...

0800ce20 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800ce20:	b480      	push	{r7}
 800ce22:	af00      	add	r7, sp, #0
    {
        return instance;
 800ce24:	4b03      	ldr	r3, [pc, #12]	; (800ce34 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800ce26:	681b      	ldr	r3, [r3, #0]
    }
 800ce28:	4618      	mov	r0, r3
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop
 800ce34:	2000a32c 	.word	0x2000a32c

0800ce38 <_ZN8touchgfx5Image8setAlphaEh>:
     *
     *        Sets the alpha channel for the image.
     *
     * @param alpha The alpha value. 255 = completely solid.
     */
    void setAlpha(uint8_t alpha)
 800ce38:	b480      	push	{r7}
 800ce3a:	b083      	sub	sp, #12
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	460b      	mov	r3, r1
 800ce42:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	78fa      	ldrb	r2, [r7, #3]
 800ce48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
 800ce4c:	bf00      	nop
 800ce4e:	370c      	adds	r7, #12
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr

0800ce58 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	601a      	str	r2, [r3, #0]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	4618      	mov	r0, r3
 800ce6a:	370c      	adds	r7, #12
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr

0800ce74 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800ce74:	b480      	push	{r7}
 800ce76:	af00      	add	r7, sp, #0
    {
        return instance->lcdRef;
 800ce78:	4b03      	ldr	r3, [pc, #12]	; (800ce88 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	689b      	ldr	r3, [r3, #8]
    }
 800ce7e:	4618      	mov	r0, r3
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr
 800ce88:	2000a32c 	.word	0x2000a32c

0800ce8c <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhtNS_12TextRotationEhhNS_14WideTextActionE>:
         * @param textDirection  The text direction.
         * @param indentation    The indentation of the text from the left and right of the text
         *                       area rectangle.
         * @param wideTextAction What to do with lines longer than the width of the TextArea.
         */
        StringVisuals(const Font* font, colortype color, uint8_t alpha, Alignment alignment, uint16_t linespace, TextRotation rotation, TextDirection textDirection, uint8_t indentation, WideTextAction wideTextAction = WIDE_TEXT_NONE)
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
 800ce98:	70fb      	strb	r3, [r7, #3]
        {
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	3308      	adds	r3, #8
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7ff ffda 	bl	800ce58 <_ZN8touchgfx9colortypeC1Ev>
            this->font = font;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	68ba      	ldr	r2, [r7, #8]
 800cea8:	601a      	str	r2, [r3, #0]
            this->color = color;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	609a      	str	r2, [r3, #8]
            this->alpha = alpha;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	78fa      	ldrb	r2, [r7, #3]
 800ceb4:	739a      	strb	r2, [r3, #14]
            this->alignment = alignment;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	7e3a      	ldrb	r2, [r7, #24]
 800ceba:	711a      	strb	r2, [r3, #4]
            this->textDirection = textDirection;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800cec2:	715a      	strb	r2, [r3, #5]
            this->rotation = rotation;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ceca:	719a      	strb	r2, [r3, #6]
            this->linespace = linespace;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	8bba      	ldrh	r2, [r7, #28]
 800ced0:	819a      	strh	r2, [r3, #12]
            this->indentation = indentation;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ced8:	73da      	strb	r2, [r3, #15]
            this->wideTextAction = wideTextAction;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800cee0:	741a      	strb	r2, [r3, #16]
        }
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	4618      	mov	r0, r3
 800cee6:	3710      	adds	r7, #16
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <_ZNK8touchgfx5Texts7getTextEt>:
     *
     * @param id The id of the text to lookup.
     *
     * @return The text.
     */
    const Unicode::UnicodeChar* getText(TypedTextId id) const
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	460b      	mov	r3, r1
 800cef6:	807b      	strh	r3, [r7, #2]
    {
        return currentLanguagePtr[id];
 800cef8:	4b05      	ldr	r3, [pc, #20]	; (800cf10 <_ZNK8touchgfx5Texts7getTextEt+0x24>)
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	887b      	ldrh	r3, [r7, #2]
 800cefe:	009b      	lsls	r3, r3, #2
 800cf00:	4413      	add	r3, r2
 800cf02:	681b      	ldr	r3, [r3, #0]
    }
 800cf04:	4618      	mov	r0, r3
 800cf06:	370c      	adds	r7, #12
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr
 800cf10:	20008f0c 	.word	0x20008f0c

0800cf14 <_ZN8touchgfx9TypedTextC1Et>:
     *
     *        Construct a typed text.
     *
     * @param id The id of the TypedText.
     */
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	807b      	strh	r3, [r7, #2]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	887a      	ldrh	r2, [r7, #2]
 800cf24:	801a      	strh	r2, [r3, #0]
    {
    }
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	370c      	adds	r7, #12
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr

0800cf34 <_ZNK8touchgfx9TypedText10hasValidIdEv>:
     *
     *        Has the TypedText been set to a proper value.
     *
     * @return Is the id valid.
     */
    bool hasValidId() const
 800cf34:	b480      	push	{r7}
 800cf36:	b083      	sub	sp, #12
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
    {
        return typedTextId != TYPED_TEXT_INVALID;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	881b      	ldrh	r3, [r3, #0]
 800cf40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf44:	4293      	cmp	r3, r2
 800cf46:	bf14      	ite	ne
 800cf48:	2301      	movne	r3, #1
 800cf4a:	2300      	moveq	r3, #0
 800cf4c:	b2db      	uxtb	r3, r3
    }
 800cf4e:	4618      	mov	r0, r3
 800cf50:	370c      	adds	r7, #12
 800cf52:	46bd      	mov	sp, r7
 800cf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf58:	4770      	bx	lr
	...

0800cf5c <_ZNK8touchgfx9TypedText7getTextEv>:
     *
     *        Gets the text associated with this TypedText.
     *
     * @return The text.
     */
    const Unicode::UnicodeChar* getText() const
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 f85b 	bl	800d020 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 800cf6a:	4b06      	ldr	r3, [pc, #24]	; (800cf84 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 800cf6c:	681a      	ldr	r2, [r3, #0]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	881b      	ldrh	r3, [r3, #0]
 800cf72:	4619      	mov	r1, r3
 800cf74:	4610      	mov	r0, r2
 800cf76:	f7ff ffb9 	bl	800ceec <_ZNK8touchgfx5Texts7getTextEt>
 800cf7a:	4603      	mov	r3, r0
    }
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3708      	adds	r7, #8
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}
 800cf84:	2000a398 	.word	0x2000a398

0800cf88 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 f845 	bl	800d020 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800cf96:	4b08      	ldr	r3, [pc, #32]	; (800cfb8 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	4b08      	ldr	r3, [pc, #32]	; (800cfbc <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800cf9c:	6819      	ldr	r1, [r3, #0]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	881b      	ldrh	r3, [r3, #0]
 800cfa2:	005b      	lsls	r3, r3, #1
 800cfa4:	440b      	add	r3, r1
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	009b      	lsls	r3, r3, #2
 800cfaa:	4413      	add	r3, r2
 800cfac:	681b      	ldr	r3, [r3, #0]
    }
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3708      	adds	r7, #8
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	2000a394 	.word	0x2000a394
 800cfbc:	2000a38c 	.word	0x2000a38c

0800cfc0 <_ZNK8touchgfx9TypedText12getAlignmentEv>:
     *
     *        Gets the alignment associated with this TypedText.
     *
     * @return The alignment.
     */
    Alignment getAlignment() const
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 f829 	bl	800d020 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].alignment;
 800cfce:	4b07      	ldr	r3, [pc, #28]	; (800cfec <_ZNK8touchgfx9TypedText12getAlignmentEv+0x2c>)
 800cfd0:	681a      	ldr	r2, [r3, #0]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	881b      	ldrh	r3, [r3, #0]
 800cfd6:	005b      	lsls	r3, r3, #1
 800cfd8:	4413      	add	r3, r2
 800cfda:	785b      	ldrb	r3, [r3, #1]
 800cfdc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800cfe0:	b2db      	uxtb	r3, r3
    }
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3708      	adds	r7, #8
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	2000a38c 	.word	0x2000a38c

0800cff0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b082      	sub	sp, #8
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 f811 	bl	800d020 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800cffe:	4b07      	ldr	r3, [pc, #28]	; (800d01c <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	881b      	ldrh	r3, [r3, #0]
 800d006:	005b      	lsls	r3, r3, #1
 800d008:	4413      	add	r3, r2
 800d00a:	785b      	ldrb	r3, [r3, #1]
 800d00c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d010:	b2db      	uxtb	r3, r3
    }
 800d012:	4618      	mov	r0, r3
 800d014:	3708      	adds	r7, #8
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	2000a38c 	.word	0x2000a38c

0800d020 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800d028:	4b0c      	ldr	r3, [pc, #48]	; (800d05c <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d105      	bne.n	800d03c <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800d030:	4b0b      	ldr	r3, [pc, #44]	; (800d060 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800d032:	4a0c      	ldr	r2, [pc, #48]	; (800d064 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800d034:	21cf      	movs	r1, #207	; 0xcf
 800d036:	480c      	ldr	r0, [pc, #48]	; (800d068 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800d038:	f014 f8be 	bl	80211b8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	881a      	ldrh	r2, [r3, #0]
 800d040:	4b0a      	ldr	r3, [pc, #40]	; (800d06c <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800d042:	881b      	ldrh	r3, [r3, #0]
 800d044:	429a      	cmp	r2, r3
 800d046:	d305      	bcc.n	800d054 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800d048:	4b09      	ldr	r3, [pc, #36]	; (800d070 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800d04a:	4a06      	ldr	r2, [pc, #24]	; (800d064 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800d04c:	21d0      	movs	r1, #208	; 0xd0
 800d04e:	4806      	ldr	r0, [pc, #24]	; (800d068 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800d050:	f014 f8b2 	bl	80211b8 <__assert_func>
    }
 800d054:	bf00      	nop
 800d056:	3708      	adds	r7, #8
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}
 800d05c:	2000a38c 	.word	0x2000a38c
 800d060:	080222a4 	.word	0x080222a4
 800d064:	08022f98 	.word	0x08022f98
 800d068:	080222e8 	.word	0x080222e8
 800d06c:	2000a390 	.word	0x2000a390
 800d070:	08022338 	.word	0x08022338

0800d074 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea() : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	4618      	mov	r0, r3
 800d080:	f7ff fd50 	bl	800cb24 <_ZN8touchgfx6WidgetC1Ev>
 800d084:	4a13      	ldr	r2, [pc, #76]	; (800d0d4 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	601a      	str	r2, [r3, #0]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	3326      	adds	r3, #38	; 0x26
 800d08e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d092:	4618      	mov	r0, r3
 800d094:	f7ff ff3e 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	3328      	adds	r3, #40	; 0x28
 800d09c:	2100      	movs	r1, #0
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7ff fc7c 	bl	800c99c <_ZN8touchgfx9colortypeC1Em>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	859a      	strh	r2, [r3, #44]	; 0x2c
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	22ff      	movs	r2, #255	; 0xff
 800d0ae:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    { }
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3708      	adds	r7, #8
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	0802318c 	.word	0x0802318c

0800d0d8 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af02      	add	r7, sp, #8
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	9300      	str	r3, [sp, #0]
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	2100      	movs	r1, #0
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f7fe fe09 	bl	800bd04 <_ZN8touchgfx4RectC1Essss>
    }
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	3708      	adds	r7, #8
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}

0800d0fa <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 800d0fa:	b480      	push	{r7}
 800d0fc:	b083      	sub	sp, #12
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	6078      	str	r0, [r7, #4]
 800d102:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	683a      	ldr	r2, [r7, #0]
 800d108:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800d10a:	bf00      	nop
 800d10c:	370c      	adds	r7, #12
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr

0800d116 <_ZN8touchgfx8TextArea8setAlphaEh>:
     *
     *        Sets the alpha value of the text.
     *
     * @param alpha The alpha value. 255 = completely solid. 0 = invisible.
     */
    void setAlpha(uint8_t alpha)
 800d116:	b480      	push	{r7}
 800d118:	b083      	sub	sp, #12
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
 800d11e:	460b      	mov	r3, r1
 800d120:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	78fa      	ldrb	r2, [r7, #3]
 800d126:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }
 800d12a:	bf00      	nop
 800d12c:	370c      	adds	r7, #12
 800d12e:	46bd      	mov	sp, r7
 800d130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d134:	4770      	bx	lr

0800d136 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800d136:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d138:	b085      	sub	sp, #20
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
 800d13e:	460b      	mov	r3, r1
 800d140:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800d142:	687e      	ldr	r6, [r7, #4]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	3330      	adds	r3, #48	; 0x30
 800d14a:	681c      	ldr	r4, [r3, #0]
 800d14c:	887d      	ldrh	r5, [r7, #2]
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 f836 	bl	800d1c0 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800d154:	4603      	mov	r3, r0
 800d156:	81bb      	strh	r3, [r7, #12]
 800d158:	f107 030c 	add.w	r3, r7, #12
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7ff ff13 	bl	800cf88 <_ZNK8touchgfx9TypedText7getFontEv>
 800d162:	4602      	mov	r2, r0
 800d164:	6813      	ldr	r3, [r2, #0]
 800d166:	332c      	adds	r3, #44	; 0x2c
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4610      	mov	r0, r2
 800d16c:	4798      	blx	r3
 800d16e:	4603      	mov	r3, r0
 800d170:	1aeb      	subs	r3, r5, r3
 800d172:	b29b      	uxth	r3, r3
 800d174:	b21b      	sxth	r3, r3
 800d176:	4619      	mov	r1, r3
 800d178:	4630      	mov	r0, r6
 800d17a:	47a0      	blx	r4
    }
 800d17c:	bf00      	nop
 800d17e:	3714      	adds	r7, #20
 800d180:	46bd      	mov	sp, r7
 800d182:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d184 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800d184:	b580      	push	{r7, lr}
 800d186:	b082      	sub	sp, #8
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	460b      	mov	r3, r1
 800d18e:	807b      	strh	r3, [r7, #2]
 800d190:	4613      	mov	r3, r2
 800d192:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	332c      	adds	r3, #44	; 0x2c
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800d1a2:	4610      	mov	r0, r2
 800d1a4:	4798      	blx	r3
        setBaselineY(baselineY);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	3364      	adds	r3, #100	; 0x64
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d1b2:	4611      	mov	r1, r2
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	4798      	blx	r3
    }
 800d1b8:	bf00      	nop
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 800d1c0:	b480      	push	{r7}
 800d1c2:	b083      	sub	sp, #12
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	370c      	adds	r7, #12
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr

0800d1d8 <_ZNK8touchgfx8TextArea7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_TEXTAREA.
     */
    virtual uint16_t getType() const
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_TEXTAREA;
 800d1e0:	230d      	movs	r3, #13
    }
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	370c      	adds	r7, #12
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr
	...

0800d1f0 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	4a05      	ldr	r2, [pc, #20]	; (800d210 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	601a      	str	r2, [r3, #0]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	4618      	mov	r0, r3
 800d202:	f7ff fca1 	bl	800cb48 <_ZN8touchgfx6WidgetD1Ev>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	4618      	mov	r0, r3
 800d20a:	3708      	adds	r7, #8
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}
 800d210:	0802318c 	.word	0x0802318c

0800d214 <_ZN8touchgfx8TextAreaD0Ev>:
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f7ff ffe7 	bl	800d1f0 <_ZN8touchgfx8TextAreaD1Ev>
 800d222:	2134      	movs	r1, #52	; 0x34
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f013 ffaa 	bl	802117e <_ZdlPvj>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	4618      	mov	r0, r3
 800d22e:	3708      	adds	r7, #8
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase() : TextArea() {  }
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	4618      	mov	r0, r3
 800d240:	f7ff ff18 	bl	800d074 <_ZN8touchgfx8TextAreaC1Ev>
 800d244:	4a03      	ldr	r2, [pc, #12]	; (800d254 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	601a      	str	r2, [r3, #0]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	4618      	mov	r0, r3
 800d24e:	3708      	adds	r7, #8
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}
 800d254:	08022f24 	.word	0x08022f24

0800d258 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	4a05      	ldr	r2, [pc, #20]	; (800d278 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	601a      	str	r2, [r3, #0]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	4618      	mov	r0, r3
 800d26a:	f7ff ffc1 	bl	800d1f0 <_ZN8touchgfx8TextAreaD1Ev>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	4618      	mov	r0, r3
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}
 800d278:	08022f24 	.word	0x08022f24

0800d27c <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b082      	sub	sp, #8
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f7ff ffe7 	bl	800d258 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800d28a:	2134      	movs	r1, #52	; 0x34
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f013 ff76 	bl	802117e <_ZdlPvj>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	4618      	mov	r0, r3
 800d296:	3708      	adds	r7, #8
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard() : TextAreaWithWildcardBase(), wildcard(0)
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7ff ffc4 	bl	800d234 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800d2ac:	4a05      	ldr	r2, [pc, #20]	; (800d2c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	601a      	str	r2, [r3, #0]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3708      	adds	r7, #8
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	08022ea8 	.word	0x08022ea8

0800d2c8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
     *
     *        Gets text height.
     *
     * @return The text height.
     */
    virtual int16_t getTextHeight()
 800d2c8:	b590      	push	{r4, r7, lr}
 800d2ca:	b083      	sub	sp, #12
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
    {
        return typedText.hasValidId() ? calculateTextHeight(typedText.getText(), wildcard) : 0;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	3326      	adds	r3, #38	; 0x26
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f7ff fe2d 	bl	800cf34 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00e      	beq.n	800d2fe <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x36>
 800d2e0:	687c      	ldr	r4, [r7, #4]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	3326      	adds	r3, #38	; 0x26
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7ff fe38 	bl	800cf5c <_ZNK8touchgfx9TypedText7getTextEv>
 800d2ec:	4601      	mov	r1, r0
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	f000 fdaf 	bl	800de58 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	e000      	b.n	800d300 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x38>
 800d2fe:	2300      	movs	r3, #0
    }
 800d300:	4618      	mov	r0, r3
 800d302:	370c      	adds	r7, #12
 800d304:	46bd      	mov	sp, r7
 800d306:	bd90      	pop	{r4, r7, pc}

0800d308 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
     *        Draws TextArea and its text if a Font is set and the TypedText associated with
     *        the TextArea is valid.
     *
     * @param area The invalidated area.
     */
    virtual void draw(const Rect& area) const
 800d308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d30a:	b093      	sub	sp, #76	; 0x4c
 800d30c:	af06      	add	r7, sp, #24
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	60b9      	str	r1, [r7, #8]
    {
        if (typedText.hasValidId())
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	3326      	adds	r3, #38	; 0x26
 800d316:	4618      	mov	r0, r3
 800d318:	f7ff fe0c 	bl	800cf34 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800d31c:	4603      	mov	r3, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d052      	beq.n	800d3c8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xc0>
        {
            const Font* fontToDraw = typedText.getFont();
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	3326      	adds	r3, #38	; 0x26
 800d326:	4618      	mov	r0, r3
 800d328:	f7ff fe2e 	bl	800cf88 <_ZNK8touchgfx9TypedText7getFontEv>
 800d32c:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (fontToDraw != 0)
 800d32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d330:	2b00      	cmp	r3, #0
 800d332:	d049      	beq.n	800d3c8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xc0>
            {
                LCD::StringVisuals visuals(fontToDraw, color, alpha, typedText.getAlignment(), linespace, rotation, typedText.getTextDirection(), indentation, wideTextAction);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	3326      	adds	r3, #38	; 0x26
 800d33e:	4618      	mov	r0, r3
 800d340:	f7ff fe3e 	bl	800cfc0 <_ZNK8touchgfx9TypedText12getAlignmentEv>
 800d344:	4603      	mov	r3, r0
 800d346:	607b      	str	r3, [r7, #4]
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	3326      	adds	r3, #38	; 0x26
 800d356:	4618      	mov	r0, r3
 800d358:	f7ff fe4a 	bl	800cff0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800d35c:	4603      	mov	r3, r0
 800d35e:	603b      	str	r3, [r7, #0]
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d366:	68fa      	ldr	r2, [r7, #12]
 800d368:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 800d36c:	68fa      	ldr	r2, [r7, #12]
 800d36e:	f107 0010 	add.w	r0, r7, #16
 800d372:	9105      	str	r1, [sp, #20]
 800d374:	9304      	str	r3, [sp, #16]
 800d376:	6839      	ldr	r1, [r7, #0]
 800d378:	9103      	str	r1, [sp, #12]
 800d37a:	9502      	str	r5, [sp, #8]
 800d37c:	9401      	str	r4, [sp, #4]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	9300      	str	r3, [sp, #0]
 800d382:	4633      	mov	r3, r6
 800d384:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d386:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d388:	f7ff fd80 	bl	800ce8c <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhtNS_12TextRotationEhhNS_14WideTextActionE>
                HAL::lcd().drawString(getAbsoluteRect(), area, visuals, typedText.getText(), wildcard);
 800d38c:	f7ff fd72 	bl	800ce74 <_ZN8touchgfx3HAL3lcdEv>
 800d390:	4604      	mov	r4, r0
 800d392:	68fa      	ldr	r2, [r7, #12]
 800d394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d398:	4611      	mov	r1, r2
 800d39a:	4618      	mov	r0, r3
 800d39c:	f011 fa8d 	bl	801e8ba <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	3326      	adds	r3, #38	; 0x26
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7ff fdd9 	bl	800cf5c <_ZNK8touchgfx9TypedText7getTextEv>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3b0:	9302      	str	r3, [sp, #8]
 800d3b2:	9201      	str	r2, [sp, #4]
 800d3b4:	f107 0310 	add.w	r3, r7, #16
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d3c0:	ca06      	ldmia	r2, {r1, r2}
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f010 f81e 	bl	801d404 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>
            }
        }
    }
 800d3c8:	bf00      	nop
 800d3ca:	3734      	adds	r7, #52	; 0x34
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d3d0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	683a      	ldr	r2, [r7, #0]
 800d3de:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800d3e0:	bf00      	nop
 800d3e2:	370c      	adds	r7, #12
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr

0800d3ec <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
     *         Gets the width in pixels of the current associated text in the current selected
     *         language. In case of multi-lined text the width of the widest line is returned.
     *
     * @return The width in pixels of the current text.
     */
    virtual uint16_t getTextWidth() const
 800d3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3ee:	b083      	sub	sp, #12
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
    {
        return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), wildcard) : 0;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	3326      	adds	r3, #38	; 0x26
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7ff fd9b 	bl	800cf34 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d01c      	beq.n	800d43e <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x52>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	3326      	adds	r3, #38	; 0x26
 800d408:	4618      	mov	r0, r3
 800d40a:	f7ff fdbd 	bl	800cf88 <_ZNK8touchgfx9TypedText7getFontEv>
 800d40e:	4605      	mov	r5, r0
 800d410:	682b      	ldr	r3, [r5, #0]
 800d412:	331c      	adds	r3, #28
 800d414:	681c      	ldr	r4, [r3, #0]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	3326      	adds	r3, #38	; 0x26
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7ff fde8 	bl	800cff0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800d420:	4603      	mov	r3, r0
 800d422:	461e      	mov	r6, r3
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	3326      	adds	r3, #38	; 0x26
 800d428:	4618      	mov	r0, r3
 800d42a:	f7ff fd97 	bl	800cf5c <_ZNK8touchgfx9TypedText7getTextEv>
 800d42e:	4602      	mov	r2, r0
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d434:	4631      	mov	r1, r6
 800d436:	4628      	mov	r0, r5
 800d438:	47a0      	blx	r4
 800d43a:	4603      	mov	r3, r0
 800d43c:	e000      	b.n	800d440 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x54>
 800d43e:	2300      	movs	r3, #0
    }
 800d440:	4618      	mov	r0, r3
 800d442:	370c      	adds	r7, #12
 800d444:	46bd      	mov	sp, r7
 800d446:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d448 <_ZNK8touchgfx23TextAreaWithOneWildcard7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_TEXTAREAWITHONEWILDCARD.
     */
    virtual uint16_t getType() const
 800d448:	b480      	push	{r7}
 800d44a:	b083      	sub	sp, #12
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_TEXTAREAWITHONEWILDCARD;
 800d450:	230e      	movs	r3, #14
    }
 800d452:	4618      	mov	r0, r3
 800d454:	370c      	adds	r7, #12
 800d456:	46bd      	mov	sp, r7
 800d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45c:	4770      	bx	lr
	...

0800d460 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	4a05      	ldr	r2, [pc, #20]	; (800d480 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	601a      	str	r2, [r3, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	4618      	mov	r0, r3
 800d472:	f7ff fef1 	bl	800d258 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	4618      	mov	r0, r3
 800d47a:	3708      	adds	r7, #8
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	08022ea8 	.word	0x08022ea8

0800d484 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f7ff ffe7 	bl	800d460 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800d492:	2138      	movs	r1, #56	; 0x38
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f013 fe72 	bl	802117e <_ZdlPvj>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	4618      	mov	r0, r3
 800d49e:	3708      	adds	r7, #8
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <_ZNK8touchgfx8TextArea8getColorEv>:
    inline colortype getColor() const
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
        return color;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr

0800d4bc <_ZNK8touchgfx3Box7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BOX.
     */
    virtual uint16_t getType() const
 800d4bc:	b480      	push	{r7}
 800d4be:	b083      	sub	sp, #12
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BOX;
 800d4c4:	2304      	movs	r3, #4
    }
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	370c      	adds	r7, #12
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr

0800d4d2 <_ZNK8touchgfx3Box12getSolidRectEv>:
#include <touchgfx/widgets/Box.hpp>

namespace touchgfx
{
Rect Box::getSolidRect() const
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b084      	sub	sp, #16
 800d4d6:	af02      	add	r7, sp, #8
 800d4d8:	6078      	str	r0, [r7, #4]
 800d4da:	6039      	str	r1, [r7, #0]
    Rect solidRect(0, 0, 0, 0);
 800d4dc:	2300      	movs	r3, #0
 800d4de:	9300      	str	r3, [sp, #0]
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	2100      	movs	r1, #0
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f7fe fc0c 	bl	800bd04 <_ZN8touchgfx4RectC1Essss>
    if (reportAsSolid || alpha == 255)
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d104      	bne.n	800d500 <_ZNK8touchgfx3Box12getSolidRectEv+0x2e>
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d4fc:	2bff      	cmp	r3, #255	; 0xff
 800d4fe:	d109      	bne.n	800d514 <_ZNK8touchgfx3Box12getSolidRectEv+0x42>
    {
        solidRect.width = rect.width;
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	809a      	strh	r2, [r3, #4]
        solidRect.height = rect.height;
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	80da      	strh	r2, [r3, #6]
    }
    return solidRect;
 800d514:	bf00      	nop
}
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	3708      	adds	r7, #8
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <_ZNK8touchgfx3Box4drawERKNS_4RectE>:

void Box::draw(const Rect& area) const
{
 800d51e:	b590      	push	{r4, r7, lr}
 800d520:	b085      	sub	sp, #20
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
 800d526:	6039      	str	r1, [r7, #0]
    Rect dirty = area;
 800d528:	683a      	ldr	r2, [r7, #0]
 800d52a:	f107 0308 	add.w	r3, r7, #8
 800d52e:	6810      	ldr	r0, [r2, #0]
 800d530:	6851      	ldr	r1, [r2, #4]
 800d532:	c303      	stmia	r3!, {r0, r1}
    translateRectToAbsolute(dirty);
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	3324      	adds	r3, #36	; 0x24
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f107 0108 	add.w	r1, r7, #8
 800d542:	4610      	mov	r0, r2
 800d544:	4798      	blx	r3
    HAL::lcd().fillRect(dirty, color, alpha);
 800d546:	f7ff fc95 	bl	800ce74 <_ZN8touchgfx3HAL3lcdEv>
 800d54a:	6803      	ldr	r3, [r0, #0]
 800d54c:	331c      	adds	r3, #28
 800d54e:	681c      	ldr	r4, [r3, #0]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	f107 0108 	add.w	r1, r7, #8
 800d55c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d55e:	47a0      	blx	r4
}
 800d560:	bf00      	nop
 800d562:	3714      	adds	r7, #20
 800d564:	46bd      	mov	sp, r7
 800d566:	bd90      	pop	{r4, r7, pc}

0800d568 <_ZN8touchgfx13BoxWithBorderD1Ev>:
    /**
     * @fn virtual BoxWithBorder::~BoxWithBorder()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorder() {}
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	4a05      	ldr	r2, [pc, #20]	; (800d588 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	601a      	str	r2, [r3, #0]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	4618      	mov	r0, r3
 800d57a:	f7ff fae5 	bl	800cb48 <_ZN8touchgfx6WidgetD1Ev>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	4618      	mov	r0, r3
 800d582:	3708      	adds	r7, #8
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	0802303c 	.word	0x0802303c

0800d58c <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f7ff ffe7 	bl	800d568 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800d59a:	2134      	movs	r1, #52	; 0x34
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f013 fdee 	bl	802117e <_ZdlPvj>
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3708      	adds	r7, #8
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <_ZNK8touchgfx13BoxWithBorder7getTypeEv>:
     *
     * @brief Gets the type.
     *
     * @return The type.
     */
    virtual uint16_t getType() const
 800d5ac:	b480      	push	{r7}
 800d5ae:	b083      	sub	sp, #12
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BOX;
 800d5b4:	2304      	movs	r3, #4
    }
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	370c      	adds	r7, #12
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr

0800d5c2 <_ZNK8touchgfx13BoxWithBorder12getSolidRectEv>:
#include <touchgfx/widgets/BoxWithBorder.hpp>

namespace touchgfx
{
Rect BoxWithBorder::getSolidRect() const
{
 800d5c2:	b580      	push	{r7, lr}
 800d5c4:	b084      	sub	sp, #16
 800d5c6:	af02      	add	r7, sp, #8
 800d5c8:	6078      	str	r0, [r7, #4]
 800d5ca:	6039      	str	r1, [r7, #0]
    Rect solidRect(0, 0, 0, 0);
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	9300      	str	r3, [sp, #0]
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	2100      	movs	r1, #0
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f7fe fb94 	bl	800bd04 <_ZN8touchgfx4RectC1Essss>
    if (alpha == 255)
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d5e2:	2bff      	cmp	r3, #255	; 0xff
 800d5e4:	d109      	bne.n	800d5fa <_ZNK8touchgfx13BoxWithBorder12getSolidRectEv+0x38>
    {
        solidRect.width = rect.width;
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	809a      	strh	r2, [r3, #4]
        solidRect.height = rect.height;
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	80da      	strh	r2, [r3, #6]
    }
    return solidRect;
 800d5fa:	bf00      	nop
}
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	3708      	adds	r7, #8
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:

void BoxWithBorder::draw(const Rect& area) const
{
 800d604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d608:	b094      	sub	sp, #80	; 0x50
 800d60a:	af02      	add	r7, sp, #8
 800d60c:	6078      	str	r0, [r7, #4]
 800d60e:	6039      	str	r1, [r7, #0]
    Rect dirty = area & Rect(borderSize, borderSize, getWidth() - (2 * borderSize), getHeight() - (2 * borderSize));
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d616:	b21c      	sxth	r4, r3
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d61e:	b21d      	sxth	r5, r3
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4618      	mov	r0, r3
 800d624:	f7ff f96f 	bl	800c906 <_ZNK8touchgfx8Drawable8getWidthEv>
 800d628:	4603      	mov	r3, r0
 800d62a:	b29a      	uxth	r2, r3
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d632:	b29b      	uxth	r3, r3
 800d634:	005b      	lsls	r3, r3, #1
 800d636:	b29b      	uxth	r3, r3
 800d638:	1ad3      	subs	r3, r2, r3
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	b21e      	sxth	r6, r3
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	4618      	mov	r0, r3
 800d642:	f7ff f96d 	bl	800c920 <_ZNK8touchgfx8Drawable9getHeightEv>
 800d646:	4603      	mov	r3, r0
 800d648:	b29a      	uxth	r2, r3
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d650:	b29b      	uxth	r3, r3
 800d652:	005b      	lsls	r3, r3, #1
 800d654:	b29b      	uxth	r3, r3
 800d656:	1ad3      	subs	r3, r2, r3
 800d658:	b29b      	uxth	r3, r3
 800d65a:	b21b      	sxth	r3, r3
 800d65c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800d660:	9300      	str	r3, [sp, #0]
 800d662:	4633      	mov	r3, r6
 800d664:	462a      	mov	r2, r5
 800d666:	4621      	mov	r1, r4
 800d668:	f7fe fb4c 	bl	800bd04 <_ZN8touchgfx4RectC1Essss>
 800d66c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d670:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800d674:	6839      	ldr	r1, [r7, #0]
 800d676:	4618      	mov	r0, r3
 800d678:	f7fe fbef 	bl	800be5a <_ZNK8touchgfx4RectanERKS0_>
    translateRectToAbsolute(dirty);
 800d67c:	687a      	ldr	r2, [r7, #4]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	3324      	adds	r3, #36	; 0x24
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800d68a:	4610      	mov	r0, r2
 800d68c:	4798      	blx	r3
    HAL::lcd().fillRect(dirty, color, alpha);
 800d68e:	f7ff fbf1 	bl	800ce74 <_ZN8touchgfx3HAL3lcdEv>
 800d692:	6803      	ldr	r3, [r0, #0]
 800d694:	331c      	adds	r3, #28
 800d696:	681c      	ldr	r4, [r3, #0]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800d6a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d6a6:	47a0      	blx	r4

    if (borderSize > 0)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	f000 80b3 	beq.w	800d81a <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x216>
        {
            Rect(0, 0, getWidth(), borderSize),                                                     // Upper
            Rect(0, getHeight() - borderSize, getWidth(), borderSize),                              // lower
            Rect(0, borderSize, borderSize, getHeight() - (2 * borderSize)),                        // left
            Rect(getWidth() - borderSize, borderSize, borderSize, getHeight() - (2 * borderSize))   // right
        };
 800d6b4:	f107 040c 	add.w	r4, r7, #12
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7ff f923 	bl	800c906 <_ZNK8touchgfx8Drawable8getWidthEv>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	461a      	mov	r2, r3
            Rect(0, 0, getWidth(), borderSize),                                                     // Upper
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 800d6ca:	b21b      	sxth	r3, r3
 800d6cc:	9300      	str	r3, [sp, #0]
 800d6ce:	4613      	mov	r3, r2
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	2100      	movs	r1, #0
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	f7fe fb15 	bl	800bd04 <_ZN8touchgfx4RectC1Essss>
 800d6da:	3408      	adds	r4, #8
            Rect(0, getHeight() - borderSize, getWidth(), borderSize),                              // lower
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7ff f91e 	bl	800c920 <_ZNK8touchgfx8Drawable9getHeightEv>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	b29a      	uxth	r2, r3
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	1ad3      	subs	r3, r2, r3
 800d6f2:	b29b      	uxth	r3, r3
        };
 800d6f4:	b21d      	sxth	r5, r3
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7ff f904 	bl	800c906 <_ZNK8touchgfx8Drawable8getWidthEv>
 800d6fe:	4603      	mov	r3, r0
 800d700:	461a      	mov	r2, r3
            Rect(0, getHeight() - borderSize, getWidth(), borderSize),                              // lower
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 800d708:	b21b      	sxth	r3, r3
 800d70a:	9300      	str	r3, [sp, #0]
 800d70c:	4613      	mov	r3, r2
 800d70e:	462a      	mov	r2, r5
 800d710:	2100      	movs	r1, #0
 800d712:	4620      	mov	r0, r4
 800d714:	f7fe faf6 	bl	800bd04 <_ZN8touchgfx4RectC1Essss>
 800d718:	3408      	adds	r4, #8
            Rect(0, borderSize, borderSize, getHeight() - (2 * borderSize)),                        // left
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 800d720:	b21d      	sxth	r5, r3
            Rect(0, borderSize, borderSize, getHeight() - (2 * borderSize)),                        // left
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 800d728:	b21e      	sxth	r6, r3
            Rect(0, borderSize, borderSize, getHeight() - (2 * borderSize)),                        // left
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7ff f8f7 	bl	800c920 <_ZNK8touchgfx8Drawable9getHeightEv>
 800d732:	4603      	mov	r3, r0
 800d734:	b29a      	uxth	r2, r3
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	005b      	lsls	r3, r3, #1
 800d740:	b29b      	uxth	r3, r3
 800d742:	1ad3      	subs	r3, r2, r3
 800d744:	b29b      	uxth	r3, r3
        };
 800d746:	b21b      	sxth	r3, r3
 800d748:	9300      	str	r3, [sp, #0]
 800d74a:	4633      	mov	r3, r6
 800d74c:	462a      	mov	r2, r5
 800d74e:	2100      	movs	r1, #0
 800d750:	4620      	mov	r0, r4
 800d752:	f7fe fad7 	bl	800bd04 <_ZN8touchgfx4RectC1Essss>
 800d756:	3408      	adds	r4, #8
            Rect(getWidth() - borderSize, borderSize, borderSize, getHeight() - (2 * borderSize))   // right
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7ff f8d3 	bl	800c906 <_ZNK8touchgfx8Drawable8getWidthEv>
 800d760:	4603      	mov	r3, r0
 800d762:	b29a      	uxth	r2, r3
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d76a:	b29b      	uxth	r3, r3
 800d76c:	1ad3      	subs	r3, r2, r3
 800d76e:	b29b      	uxth	r3, r3
        };
 800d770:	b21d      	sxth	r5, r3
            Rect(getWidth() - borderSize, borderSize, borderSize, getHeight() - (2 * borderSize))   // right
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 800d778:	b21e      	sxth	r6, r3
            Rect(getWidth() - borderSize, borderSize, borderSize, getHeight() - (2 * borderSize))   // right
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 800d780:	fa0f f883 	sxth.w	r8, r3
            Rect(getWidth() - borderSize, borderSize, borderSize, getHeight() - (2 * borderSize))   // right
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	4618      	mov	r0, r3
 800d788:	f7ff f8ca 	bl	800c920 <_ZNK8touchgfx8Drawable9getHeightEv>
 800d78c:	4603      	mov	r3, r0
 800d78e:	b29a      	uxth	r2, r3
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d796:	b29b      	uxth	r3, r3
 800d798:	005b      	lsls	r3, r3, #1
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	1ad3      	subs	r3, r2, r3
 800d79e:	b29b      	uxth	r3, r3
        };
 800d7a0:	b21b      	sxth	r3, r3
 800d7a2:	9300      	str	r3, [sp, #0]
 800d7a4:	4643      	mov	r3, r8
 800d7a6:	4632      	mov	r2, r6
 800d7a8:	4629      	mov	r1, r5
 800d7aa:	4620      	mov	r0, r4
 800d7ac:	f7fe faaa 	bl	800bd04 <_ZN8touchgfx4RectC1Essss>

        for (int i = 0; i < 4; i++)
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	647b      	str	r3, [r7, #68]	; 0x44
 800d7b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7b6:	2b03      	cmp	r3, #3
 800d7b8:	dc2f      	bgt.n	800d81a <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x216>
        {
            Rect borderDirty = borders[i] & area;
 800d7ba:	f107 020c 	add.w	r2, r7, #12
 800d7be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7c0:	00db      	lsls	r3, r3, #3
 800d7c2:	18d1      	adds	r1, r2, r3
 800d7c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d7c8:	683a      	ldr	r2, [r7, #0]
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7fe fb45 	bl	800be5a <_ZNK8touchgfx4RectanERKS0_>
            if (!borderDirty.isEmpty())
 800d7d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f7fe fc5d 	bl	800c094 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	f083 0301 	eor.w	r3, r3, #1
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d015      	beq.n	800d812 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x20e>
            {
                translateRectToAbsolute(borderDirty);
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	3324      	adds	r3, #36	; 0x24
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800d7f4:	4610      	mov	r0, r2
 800d7f6:	4798      	blx	r3
                HAL::lcd().fillRect(borderDirty, borderColor, alpha);
 800d7f8:	f7ff fb3c 	bl	800ce74 <_ZN8touchgfx3HAL3lcdEv>
 800d7fc:	6803      	ldr	r3, [r0, #0]
 800d7fe:	331c      	adds	r3, #28
 800d800:	681c      	ldr	r4, [r3, #0]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d808:	687a      	ldr	r2, [r7, #4]
 800d80a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800d80e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d810:	47a0      	blx	r4
        for (int i = 0; i < 4; i++)
 800d812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d814:	3301      	adds	r3, #1
 800d816:	647b      	str	r3, [r7, #68]	; 0x44
 800d818:	e7cc      	b.n	800d7b4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x1b0>
            }
        }
    }
}
 800d81a:	bf00      	nop
 800d81c:	3748      	adds	r7, #72	; 0x48
 800d81e:	46bd      	mov	sp, r7
 800d820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d824 <_ZNK8touchgfx6Bitmap7getRectEv>:
     *
     *        Gets the rectangle describing the dimensions of the Bitmap.
     *
     * @return a Rect describing the dimensions of this bitmap.
     */
    Rect getRect() const
 800d824:	b590      	push	{r4, r7, lr}
 800d826:	b085      	sub	sp, #20
 800d828:	af02      	add	r7, sp, #8
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 800d82e:	6838      	ldr	r0, [r7, #0]
 800d830:	f012 f940 	bl	801fab4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d834:	4603      	mov	r3, r0
 800d836:	b21c      	sxth	r4, r3
 800d838:	6838      	ldr	r0, [r7, #0]
 800d83a:	f012 f973 	bl	801fb24 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d83e:	4603      	mov	r3, r0
 800d840:	b21b      	sxth	r3, r3
 800d842:	9300      	str	r3, [sp, #0]
 800d844:	4623      	mov	r3, r4
 800d846:	2200      	movs	r2, #0
 800d848:	2100      	movs	r1, #0
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f7fe fa5a 	bl	800bd04 <_ZN8touchgfx4RectC1Essss>
    }
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	370c      	adds	r7, #12
 800d854:	46bd      	mov	sp, r7
 800d856:	bd90      	pop	{r4, r7, pc}

0800d858 <_ZNK8touchgfx5Image7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_IMAGE.
     */
    virtual uint16_t getType() const
 800d858:	b480      	push	{r7}
 800d85a:	b083      	sub	sp, #12
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_IMAGE;
 800d860:	2308      	movs	r3, #8
    }
 800d862:	4618      	mov	r0, r3
 800d864:	370c      	adds	r7, #12
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr

0800d86e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
#include <touchgfx/widgets/Image.hpp>

namespace touchgfx
{
void Image::setBitmap(const Bitmap& bmp)
{
 800d86e:	b5b0      	push	{r4, r5, r7, lr}
 800d870:	b082      	sub	sp, #8
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
 800d876:	6039      	str	r1, [r7, #0]
    bitmap = bmp;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	683a      	ldr	r2, [r7, #0]
 800d87c:	8812      	ldrh	r2, [r2, #0]
 800d87e:	84da      	strh	r2, [r3, #38]	; 0x26
    // When setting bitmap, adjust size of this widget to match.
    setWidth(bitmap.getWidth());
 800d880:	687d      	ldr	r5, [r7, #4]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	3338      	adds	r3, #56	; 0x38
 800d888:	681c      	ldr	r4, [r3, #0]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	3326      	adds	r3, #38	; 0x26
 800d88e:	4618      	mov	r0, r3
 800d890:	f012 f910 	bl	801fab4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d894:	4603      	mov	r3, r0
 800d896:	b21b      	sxth	r3, r3
 800d898:	4619      	mov	r1, r3
 800d89a:	4628      	mov	r0, r5
 800d89c:	47a0      	blx	r4
    setHeight(bitmap.getHeight());
 800d89e:	687d      	ldr	r5, [r7, #4]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	333c      	adds	r3, #60	; 0x3c
 800d8a6:	681c      	ldr	r4, [r3, #0]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	3326      	adds	r3, #38	; 0x26
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f012 f939 	bl	801fb24 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	b21b      	sxth	r3, r3
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	4628      	mov	r0, r5
 800d8ba:	47a0      	blx	r4

    // This bool is no longer used, but maintained for backwards compat.
    hasTransparentPixels = bitmap.hasTransparentPixels();
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	3326      	adds	r3, #38	; 0x26
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f012 f9bf 	bl	801fc44 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 800d8d0:	bf00      	nop
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bdb0      	pop	{r4, r5, r7, pc}

0800d8d8 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:

void Image::draw(const Rect& invalidatedArea) const
{
 800d8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8da:	b08d      	sub	sp, #52	; 0x34
 800d8dc:	af04      	add	r7, sp, #16
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
    Rect meAbs;
 800d8e2:	f107 0310 	add.w	r3, r7, #16
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7ff f867 	bl	800c9ba <_ZN8touchgfx4RectC1Ev>
    translateRectToAbsolute(meAbs); //To find our x and y coords in absolute.
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	3324      	adds	r3, #36	; 0x24
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f107 0110 	add.w	r1, r7, #16
 800d8fa:	4610      	mov	r0, r2
 800d8fc:	4798      	blx	r3

    // Calculate intersection between bitmap rect and invalidated area.
    Rect dirtyBitmapArea = bitmap.getRect() & invalidatedArea;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d904:	f107 0318 	add.w	r3, r7, #24
 800d908:	4611      	mov	r1, r2
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7ff ff8a 	bl	800d824 <_ZNK8touchgfx6Bitmap7getRectEv>
 800d910:	f107 0308 	add.w	r3, r7, #8
 800d914:	f107 0118 	add.w	r1, r7, #24
 800d918:	683a      	ldr	r2, [r7, #0]
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7fe fa9d 	bl	800be5a <_ZNK8touchgfx4RectanERKS0_>

    if (!dirtyBitmapArea.isEmpty())
 800d920:	f107 0308 	add.w	r3, r7, #8
 800d924:	4618      	mov	r0, r3
 800d926:	f7fe fbb5 	bl	800c094 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d92a:	4603      	mov	r3, r0
 800d92c:	f083 0301 	eor.w	r3, r3, #1
 800d930:	b2db      	uxtb	r3, r3
 800d932:	2b00      	cmp	r3, #0
 800d934:	d017      	beq.n	800d966 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x8e>
    {
        HAL::lcd().drawPartialBitmap(bitmap, meAbs.x, meAbs.y, dirtyBitmapArea, alpha);
 800d936:	f7ff fa9d 	bl	800ce74 <_ZN8touchgfx3HAL3lcdEv>
 800d93a:	6803      	ldr	r3, [r0, #0]
 800d93c:	330c      	adds	r3, #12
 800d93e:	681c      	ldr	r4, [r3, #0]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800d946:	f9b7 5010 	ldrsh.w	r5, [r7, #16]
 800d94a:	f9b7 6012 	ldrsh.w	r6, [r7, #18]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d954:	2201      	movs	r2, #1
 800d956:	9202      	str	r2, [sp, #8]
 800d958:	9301      	str	r3, [sp, #4]
 800d95a:	f107 0308 	add.w	r3, r7, #8
 800d95e:	9300      	str	r3, [sp, #0]
 800d960:	4633      	mov	r3, r6
 800d962:	462a      	mov	r2, r5
 800d964:	47a0      	blx	r4
    }
}
 800d966:	bf00      	nop
 800d968:	3724      	adds	r7, #36	; 0x24
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d96e <_ZNK8touchgfx5Image12getSolidRectEv>:

Rect Image::getSolidRect() const
{
 800d96e:	b580      	push	{r7, lr}
 800d970:	b084      	sub	sp, #16
 800d972:	af02      	add	r7, sp, #8
 800d974:	6078      	str	r0, [r7, #4]
 800d976:	6039      	str	r1, [r7, #0]
    // If alpha is less than solid, we have an empty solid rect.
    if (alpha < 255)
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d97e:	2bff      	cmp	r3, #255	; 0xff
 800d980:	d008      	beq.n	800d994 <_ZNK8touchgfx5Image12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 800d982:	2300      	movs	r3, #0
 800d984:	9300      	str	r3, [sp, #0]
 800d986:	2300      	movs	r3, #0
 800d988:	2200      	movs	r2, #0
 800d98a:	2100      	movs	r1, #0
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f7fe f9b9 	bl	800bd04 <_ZN8touchgfx4RectC1Essss>
 800d992:	e007      	b.n	800d9a4 <_ZNK8touchgfx5Image12getSolidRectEv+0x36>
    }
    // Return solid rect from bitmap (precalculated).
    return bitmap.getSolidRect();
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	4611      	mov	r1, r2
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f012 f8f8 	bl	801fb94 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
}
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	3708      	adds	r7, #8
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <_ZNK8touchgfx14SnapshotWidget7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_SNAPSHOTWIDGET.
     */
    virtual uint16_t getType() const
 800d9ac:	b480      	push	{r7}
 800d9ae:	b083      	sub	sp, #12
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_SNAPSHOTWIDGET;
 800d9b4:	230c      	movs	r3, #12
    }
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	370c      	adds	r7, #12
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr
	...

0800d9c4 <_ZN8touchgfx14SnapshotWidgetC1Ev>:

#include <touchgfx/widgets/SnapshotWidget.hpp>

namespace touchgfx
{
SnapshotWidget::SnapshotWidget() : Widget(), fbCopy(0), alpha(255)
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7ff f8a8 	bl	800cb24 <_ZN8touchgfx6WidgetC1Ev>
 800d9d4:	4a07      	ldr	r2, [pc, #28]	; (800d9f4 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x30>)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	601a      	str	r2, [r3, #0]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	629a      	str	r2, [r3, #40]	; 0x28
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	22ff      	movs	r2, #255	; 0xff
 800d9e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
{
}
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3708      	adds	r7, #8
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop
 800d9f4:	08023118 	.word	0x08023118

0800d9f8 <_ZN8touchgfx14SnapshotWidgetD1Ev>:

SnapshotWidget::~SnapshotWidget()
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	4a05      	ldr	r2, [pc, #20]	; (800da18 <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	601a      	str	r2, [r3, #0]
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	4618      	mov	r0, r3
 800da0a:	f7ff f89d 	bl	800cb48 <_ZN8touchgfx6WidgetD1Ev>
{
}
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	4618      	mov	r0, r3
 800da12:	3708      	adds	r7, #8
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	08023118 	.word	0x08023118

0800da1c <_ZN8touchgfx14SnapshotWidgetD0Ev>:
SnapshotWidget::~SnapshotWidget()
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b082      	sub	sp, #8
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
}
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f7ff ffe7 	bl	800d9f8 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800da2a:	2130      	movs	r1, #48	; 0x30
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f013 fba6 	bl	802117e <_ZdlPvj>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	4618      	mov	r0, r3
 800da36:	3708      	adds	r7, #8
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:

void SnapshotWidget::draw(const Rect& invalidatedArea) const
{
 800da3c:	b5b0      	push	{r4, r5, r7, lr}
 800da3e:	b086      	sub	sp, #24
 800da40:	af02      	add	r7, sp, #8
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	6039      	str	r1, [r7, #0]
    if (!fbCopy)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d028      	beq.n	800daa0 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x64>
    {
        return;
    }

    Rect absRect;
 800da4e:	f107 0308 	add.w	r3, r7, #8
 800da52:	4618      	mov	r0, r3
 800da54:	f7fe ffb1 	bl	800c9ba <_ZN8touchgfx4RectC1Ev>
    translateRectToAbsolute(absRect);
 800da58:	687a      	ldr	r2, [r7, #4]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	3324      	adds	r3, #36	; 0x24
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	f107 0108 	add.w	r1, r7, #8
 800da66:	4610      	mov	r0, r2
 800da68:	4798      	blx	r3
    absRect.width = rect.width;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800da70:	81bb      	strh	r3, [r7, #12]
    absRect.height = rect.height;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800da78:	81fb      	strh	r3, [r7, #14]
    HAL::lcd().blitCopy(fbCopy, absRect, invalidatedArea, alpha, false);
 800da7a:	f7ff f9fb 	bl	800ce74 <_ZN8touchgfx3HAL3lcdEv>
 800da7e:	6803      	ldr	r3, [r0, #0]
 800da80:	3310      	adds	r3, #16
 800da82:	681c      	ldr	r4, [r3, #0]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800da8e:	f107 0508 	add.w	r5, r7, #8
 800da92:	2200      	movs	r2, #0
 800da94:	9201      	str	r2, [sp, #4]
 800da96:	9300      	str	r3, [sp, #0]
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	462a      	mov	r2, r5
 800da9c:	47a0      	blx	r4
 800da9e:	e000      	b.n	800daa2 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x66>
        return;
 800daa0:	bf00      	nop
}
 800daa2:	3710      	adds	r7, #16
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bdb0      	pop	{r4, r5, r7, pc}

0800daa8 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:

Rect SnapshotWidget::getSolidRect() const
{
 800daa8:	b590      	push	{r4, r7, lr}
 800daaa:	b085      	sub	sp, #20
 800daac:	af02      	add	r7, sp, #8
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
    if (alpha < 255)
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dab8:	2bff      	cmp	r3, #255	; 0xff
 800daba:	d008      	beq.n	800dace <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 800dabc:	2300      	movs	r3, #0
 800dabe:	9300      	str	r3, [sp, #0]
 800dac0:	2300      	movs	r3, #0
 800dac2:	2200      	movs	r2, #0
 800dac4:	2100      	movs	r1, #0
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f7fe f91c 	bl	800bd04 <_ZN8touchgfx4RectC1Essss>
 800dacc:	e01e      	b.n	800db0c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x64>
    }

    if (!fbCopy)
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d108      	bne.n	800dae8 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x40>
    {
        return Rect(0, 0, 0, 0);
 800dad6:	2300      	movs	r3, #0
 800dad8:	9300      	str	r3, [sp, #0]
 800dada:	2300      	movs	r3, #0
 800dadc:	2200      	movs	r2, #0
 800dade:	2100      	movs	r1, #0
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f7fe f90f 	bl	800bd04 <_ZN8touchgfx4RectC1Essss>
 800dae6:	e011      	b.n	800db0c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x64>
    }
    else
    {
        return Rect(0, 0, getWidth(), getHeight());
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	4618      	mov	r0, r3
 800daec:	f7fe ff0b 	bl	800c906 <_ZNK8touchgfx8Drawable8getWidthEv>
 800daf0:	4603      	mov	r3, r0
 800daf2:	461c      	mov	r4, r3
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7fe ff12 	bl	800c920 <_ZNK8touchgfx8Drawable9getHeightEv>
 800dafc:	4603      	mov	r3, r0
 800dafe:	9300      	str	r3, [sp, #0]
 800db00:	4623      	mov	r3, r4
 800db02:	2200      	movs	r2, #0
 800db04:	2100      	movs	r1, #0
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f7fe f8fc 	bl	800bd04 <_ZN8touchgfx4RectC1Essss>
    }
}
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	370c      	adds	r7, #12
 800db10:	46bd      	mov	sp, r7
 800db12:	bd90      	pop	{r4, r7, pc}

0800db14 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:

void SnapshotWidget::makeSnapshot()
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
    fbCopy = reinterpret_cast<uint16_t*>(HAL::lcd().copyFrameBufferRegionToMemory(rect));
 800db1c:	f7ff f9aa 	bl	800ce74 <_ZN8touchgfx3HAL3lcdEv>
 800db20:	6803      	ldr	r3, [r0, #0]
 800db22:	3318      	adds	r3, #24
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	687a      	ldr	r2, [r7, #4]
 800db28:	1d11      	adds	r1, r2, #4
 800db2a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800db2e:	4798      	blx	r3
 800db30:	4602      	mov	r2, r0
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	629a      	str	r2, [r3, #40]	; 0x28
}
 800db36:	bf00      	nop
 800db38:	3708      	adds	r7, #8
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}

0800db3e <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:

void SnapshotWidget::makeSnapshot(const BitmapId bmp)
{
 800db3e:	b580      	push	{r7, lr}
 800db40:	b082      	sub	sp, #8
 800db42:	af00      	add	r7, sp, #0
 800db44:	6078      	str	r0, [r7, #4]
 800db46:	460b      	mov	r3, r1
 800db48:	807b      	strh	r3, [r7, #2]
    fbCopy = reinterpret_cast<uint16_t*>(HAL::lcd().copyFrameBufferRegionToMemory(rect, bmp));
 800db4a:	f7ff f993 	bl	800ce74 <_ZN8touchgfx3HAL3lcdEv>
 800db4e:	6803      	ldr	r3, [r0, #0]
 800db50:	3318      	adds	r3, #24
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	1d11      	adds	r1, r2, #4
 800db58:	887a      	ldrh	r2, [r7, #2]
 800db5a:	4798      	blx	r3
 800db5c:	4602      	mov	r2, r0
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	629a      	str	r2, [r3, #40]	; 0x28
}
 800db62:	bf00      	nop
 800db64:	3708      	adds	r7, #8
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}

0800db6a <_ZN8touchgfx8TextArea13getTextHeightEv>:
#include <touchgfx/widgets/TextArea.hpp>

namespace touchgfx
{
int16_t TextArea::getTextHeight()
{
 800db6a:	b580      	push	{r7, lr}
 800db6c:	b082      	sub	sp, #8
 800db6e:	af00      	add	r7, sp, #0
 800db70:	6078      	str	r0, [r7, #4]
    if (typedText.hasValidId())
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	3326      	adds	r3, #38	; 0x26
 800db76:	4618      	mov	r0, r3
 800db78:	f7ff f9dc 	bl	800cf34 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800db7c:	4603      	mov	r3, r0
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d00b      	beq.n	800db9a <_ZN8touchgfx8TextArea13getTextHeightEv+0x30>
    {
        return getTextHeightInternal(typedText.getText());
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	3326      	adds	r3, #38	; 0x26
 800db86:	4618      	mov	r0, r3
 800db88:	f7ff f9e8 	bl	800cf5c <_ZNK8touchgfx9TypedText7getTextEv>
 800db8c:	4603      	mov	r3, r0
 800db8e:	4619      	mov	r1, r3
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f000 f906 	bl	800dda2 <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz>
 800db96:	4603      	mov	r3, r0
 800db98:	e000      	b.n	800db9c <_ZN8touchgfx8TextArea13getTextHeightEv+0x32>
    }
    else
    {
        return 0;
 800db9a:	2300      	movs	r3, #0
    }
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3708      	adds	r7, #8
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:

uint16_t TextArea::getTextWidth() const
{
 800dba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dba6:	b083      	sub	sp, #12
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
    return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText()) : 0;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	3326      	adds	r3, #38	; 0x26
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7ff f9bf 	bl	800cf34 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d01b      	beq.n	800dbf4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x50>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	3326      	adds	r3, #38	; 0x26
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f7ff f9e1 	bl	800cf88 <_ZNK8touchgfx9TypedText7getFontEv>
 800dbc6:	4605      	mov	r5, r0
 800dbc8:	682b      	ldr	r3, [r5, #0]
 800dbca:	331c      	adds	r3, #28
 800dbcc:	681c      	ldr	r4, [r3, #0]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	3326      	adds	r3, #38	; 0x26
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7ff fa0c 	bl	800cff0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	461e      	mov	r6, r3
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	3326      	adds	r3, #38	; 0x26
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7ff f9bb 	bl	800cf5c <_ZNK8touchgfx9TypedText7getTextEv>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	461a      	mov	r2, r3
 800dbea:	4631      	mov	r1, r6
 800dbec:	4628      	mov	r0, r5
 800dbee:	47a0      	blx	r4
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	e000      	b.n	800dbf6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x52>
 800dbf4:	2300      	movs	r3, #0
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	370c      	adds	r7, #12
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dbfe <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:

void TextArea::draw(const Rect& area) const
{
 800dbfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc00:	b093      	sub	sp, #76	; 0x4c
 800dc02:	af06      	add	r7, sp, #24
 800dc04:	60f8      	str	r0, [r7, #12]
 800dc06:	60b9      	str	r1, [r7, #8]
    if (typedText.hasValidId())
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	3326      	adds	r3, #38	; 0x26
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7ff f991 	bl	800cf34 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800dc12:	4603      	mov	r3, r0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d04f      	beq.n	800dcb8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xba>
    {
        const Font* fontToDraw = typedText.getFont();
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	3326      	adds	r3, #38	; 0x26
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7ff f9b3 	bl	800cf88 <_ZNK8touchgfx9TypedText7getFontEv>
 800dc22:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (fontToDraw != 0)
 800dc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d046      	beq.n	800dcb8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xba>
        {
            LCD::StringVisuals visuals(fontToDraw, color, alpha, typedText.getAlignment(), linespace, rotation, typedText.getTextDirection(), indentation, wideTextAction);
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	3326      	adds	r3, #38	; 0x26
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7ff f9c3 	bl	800cfc0 <_ZNK8touchgfx9TypedText12getAlignmentEv>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	607b      	str	r3, [r7, #4]
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	3326      	adds	r3, #38	; 0x26
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7ff f9cf 	bl	800cff0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800dc52:	4603      	mov	r3, r0
 800dc54:	603b      	str	r3, [r7, #0]
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dc5c:	68fa      	ldr	r2, [r7, #12]
 800dc5e:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	f107 0010 	add.w	r0, r7, #16
 800dc68:	9105      	str	r1, [sp, #20]
 800dc6a:	9304      	str	r3, [sp, #16]
 800dc6c:	6839      	ldr	r1, [r7, #0]
 800dc6e:	9103      	str	r1, [sp, #12]
 800dc70:	9502      	str	r5, [sp, #8]
 800dc72:	9401      	str	r4, [sp, #4]
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	9300      	str	r3, [sp, #0]
 800dc78:	4633      	mov	r3, r6
 800dc7a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800dc7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc7e:	f7ff f905 	bl	800ce8c <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhtNS_12TextRotationEhhNS_14WideTextActionE>
            HAL::lcd().drawString(getAbsoluteRect(), area, visuals, typedText.getText());
 800dc82:	f7ff f8f7 	bl	800ce74 <_ZN8touchgfx3HAL3lcdEv>
 800dc86:	4604      	mov	r4, r0
 800dc88:	68fa      	ldr	r2, [r7, #12]
 800dc8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dc8e:	4611      	mov	r1, r2
 800dc90:	4618      	mov	r0, r3
 800dc92:	f010 fe12 	bl	801e8ba <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	3326      	adds	r3, #38	; 0x26
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f7ff f95e 	bl	800cf5c <_ZNK8touchgfx9TypedText7getTextEv>
 800dca0:	4603      	mov	r3, r0
 800dca2:	9301      	str	r3, [sp, #4]
 800dca4:	f107 0310 	add.w	r3, r7, #16
 800dca8:	9300      	str	r3, [sp, #0]
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800dcb0:	ca06      	ldmia	r2, {r1, r2}
 800dcb2:	4620      	mov	r0, r4
 800dcb4:	f00f fba6 	bl	801d404 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>
        }
    }
}
 800dcb8:	bf00      	nop
 800dcba:	3734      	adds	r7, #52	; 0x34
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dcc0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:

void TextArea::setTypedText(TypedText t)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	8039      	strh	r1, [r7, #0]
    typedText = t;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	883a      	ldrh	r2, [r7, #0]
 800dcce:	84da      	strh	r2, [r3, #38]	; 0x26
    // If this TextArea does not yet have a width and height,
    // just assign the smallest possible size to fit current text.
    if ((getWidth() == 0) && (getHeight() == 0))
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7fe fe17 	bl	800c906 <_ZNK8touchgfx8Drawable8getWidthEv>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d108      	bne.n	800dcf0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x30>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7fe fe1d 	bl	800c920 <_ZNK8touchgfx8Drawable9getHeightEv>
 800dce6:	4603      	mov	r3, r0
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d101      	bne.n	800dcf0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x30>
 800dcec:	2301      	movs	r3, #1
 800dcee:	e000      	b.n	800dcf2 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x32>
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d002      	beq.n	800dcfc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x3c>
    {
        resizeToCurrentText();
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f000 f804 	bl	800dd04 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    }
}
 800dcfc:	bf00      	nop
 800dcfe:	3708      	adds	r7, #8
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:

void TextArea::resizeToCurrentText()
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
    if (typedText.hasValidId())
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	3326      	adds	r3, #38	; 0x26
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7ff f90f 	bl	800cf34 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d03e      	beq.n	800dd9a <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x96>
    {
        uint16_t w = getTextWidth();
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	3370      	adds	r3, #112	; 0x70
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	4798      	blx	r3
 800dd28:	4603      	mov	r3, r0
 800dd2a:	81fb      	strh	r3, [r7, #14]
        uint16_t h = getTextHeight();
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	336c      	adds	r3, #108	; 0x6c
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	4798      	blx	r3
 800dd38:	4603      	mov	r3, r0
 800dd3a:	81bb      	strh	r3, [r7, #12]
        if (rotation == TEXT_ROTATE_0 || rotation == TEXT_ROTATE_180)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d004      	beq.n	800dd50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x4c>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd4c:	2b02      	cmp	r3, #2
 800dd4e:	d112      	bne.n	800dd76 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x72>
        {
            setWidth(w);
 800dd50:	687a      	ldr	r2, [r7, #4]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	3338      	adds	r3, #56	; 0x38
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800dd5e:	4610      	mov	r0, r2
 800dd60:	4798      	blx	r3
            setHeight(h);
 800dd62:	687a      	ldr	r2, [r7, #4]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	333c      	adds	r3, #60	; 0x3c
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800dd70:	4610      	mov	r0, r2
 800dd72:	4798      	blx	r3
        {
            setWidth(h);
            setHeight(w);
        }
    }
}
 800dd74:	e011      	b.n	800dd9a <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x96>
            setWidth(h);
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	3338      	adds	r3, #56	; 0x38
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800dd84:	4610      	mov	r0, r2
 800dd86:	4798      	blx	r3
            setHeight(w);
 800dd88:	687a      	ldr	r2, [r7, #4]
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	333c      	adds	r3, #60	; 0x3c
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800dd96:	4610      	mov	r0, r2
 800dd98:	4798      	blx	r3
}
 800dd9a:	bf00      	nop
 800dd9c:	3710      	adds	r7, #16
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}

0800dda2 <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz>:
        }
    }
}

int16_t TextArea::getTextHeightInternal(const Unicode::UnicodeChar* format, ...) const
{
 800dda2:	b40e      	push	{r1, r2, r3}
 800dda4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dda6:	b08e      	sub	sp, #56	; 0x38
 800dda8:	af02      	add	r7, sp, #8
 800ddaa:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, format);
 800ddac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ddb0:	623b      	str	r3, [r7, #32]
    TextProvider textProvider;
 800ddb2:	f107 0308 	add.w	r3, r7, #8
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f011 fa4a 	bl	801f250 <_ZN8touchgfx12TextProviderC1Ev>
    textProvider.initialize(format, pArg);
 800ddbc:	f107 0308 	add.w	r3, r7, #8
 800ddc0:	6a3a      	ldr	r2, [r7, #32]
 800ddc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f011 fa4c 	bl	801f262 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>

    int16_t numLines = HAL::lcd().getNumLines(textProvider, wideTextAction, typedText.getTextDirection(), typedText.getFont(), getWidth());
 800ddca:	f7ff f853 	bl	800ce74 <_ZN8touchgfx3HAL3lcdEv>
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	3326      	adds	r3, #38	; 0x26
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f7ff f909 	bl	800cff0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800ddde:	4603      	mov	r3, r0
 800dde0:	461d      	mov	r5, r3
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	3326      	adds	r3, #38	; 0x26
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7ff f8ce 	bl	800cf88 <_ZNK8touchgfx9TypedText7getFontEv>
 800ddec:	4606      	mov	r6, r0
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7fe fd88 	bl	800c906 <_ZNK8touchgfx8Drawable8getWidthEv>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	f107 0008 	add.w	r0, r7, #8
 800ddfc:	9300      	str	r3, [sp, #0]
 800ddfe:	4633      	mov	r3, r6
 800de00:	462a      	mov	r2, r5
 800de02:	4621      	mov	r1, r4
 800de04:	f00f fd23 	bl	801d84e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800de08:	4603      	mov	r3, r0
 800de0a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    const Font* fontToDraw = typedText.getFont();
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	3326      	adds	r3, #38	; 0x26
 800de10:	4618      	mov	r0, r3
 800de12:	f7ff f8b9 	bl	800cf88 <_ZNK8touchgfx9TypedText7getFontEv>
 800de16:	62b8      	str	r0, [r7, #40]	; 0x28
    int16_t textHeight = fontToDraw->getMinimumTextHeight();
 800de18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	3330      	adds	r3, #48	; 0x30
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de22:	4798      	blx	r3
 800de24:	4603      	mov	r3, r0
 800de26:	84fb      	strh	r3, [r7, #38]	; 0x26

    va_end(pArg);
    return numLines * textHeight + (numLines - 1) * linespace;
 800de28:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800de2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800de2c:	fb12 f303 	smulbb	r3, r2, r3
 800de30:	b29a      	uxth	r2, r3
 800de32:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800de36:	3b01      	subs	r3, #1
 800de38:	b299      	uxth	r1, r3
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800de3e:	fb11 f303 	smulbb	r3, r1, r3
 800de42:	b29b      	uxth	r3, r3
 800de44:	4413      	add	r3, r2
 800de46:	b29b      	uxth	r3, r3
 800de48:	b21b      	sxth	r3, r3
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3730      	adds	r7, #48	; 0x30
 800de4e:	46bd      	mov	sp, r7
 800de50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800de54:	b003      	add	sp, #12
 800de56:	4770      	bx	lr

0800de58 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz>:
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

namespace touchgfx
{
int16_t TextAreaWithWildcardBase::calculateTextHeight(const Unicode::UnicodeChar* format, ...) const
{
 800de58:	b40e      	push	{r1, r2, r3}
 800de5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de5c:	b08e      	sub	sp, #56	; 0x38
 800de5e:	af02      	add	r7, sp, #8
 800de60:	6078      	str	r0, [r7, #4]
    if (!typedText.hasValidId())
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	3326      	adds	r3, #38	; 0x26
 800de66:	4618      	mov	r0, r3
 800de68:	f7ff f864 	bl	800cf34 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800de6c:	4603      	mov	r3, r0
 800de6e:	f083 0301 	eor.w	r3, r3, #1
 800de72:	b2db      	uxtb	r3, r3
 800de74:	2b00      	cmp	r3, #0
 800de76:	d001      	beq.n	800de7c <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x24>
    {
        return 0;
 800de78:	2300      	movs	r3, #0
 800de7a:	e04e      	b.n	800df1a <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xc2>
    }

    va_list pArg;
    va_start(pArg, format);
 800de7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de80:	623b      	str	r3, [r7, #32]

    TextProvider textProvider;
 800de82:	f107 0308 	add.w	r3, r7, #8
 800de86:	4618      	mov	r0, r3
 800de88:	f011 f9e2 	bl	801f250 <_ZN8touchgfx12TextProviderC1Ev>
    textProvider.initialize(format, pArg);
 800de8c:	f107 0308 	add.w	r3, r7, #8
 800de90:	6a3a      	ldr	r2, [r7, #32]
 800de92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800de94:	4618      	mov	r0, r3
 800de96:	f011 f9e4 	bl	801f262 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>

    int16_t numLines = HAL::lcd().getNumLines(textProvider, wideTextAction, typedText.getTextDirection(), typedText.getFont(), getWidth());
 800de9a:	f7fe ffeb 	bl	800ce74 <_ZN8touchgfx3HAL3lcdEv>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	3326      	adds	r3, #38	; 0x26
 800dea8:	4618      	mov	r0, r3
 800deaa:	f7ff f8a1 	bl	800cff0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800deae:	4603      	mov	r3, r0
 800deb0:	461d      	mov	r5, r3
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	3326      	adds	r3, #38	; 0x26
 800deb6:	4618      	mov	r0, r3
 800deb8:	f7ff f866 	bl	800cf88 <_ZNK8touchgfx9TypedText7getFontEv>
 800debc:	4606      	mov	r6, r0
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7fe fd20 	bl	800c906 <_ZNK8touchgfx8Drawable8getWidthEv>
 800dec6:	4603      	mov	r3, r0
 800dec8:	f107 0008 	add.w	r0, r7, #8
 800decc:	9300      	str	r3, [sp, #0]
 800dece:	4633      	mov	r3, r6
 800ded0:	462a      	mov	r2, r5
 800ded2:	4621      	mov	r1, r4
 800ded4:	f00f fcbb 	bl	801d84e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800ded8:	4603      	mov	r3, r0
 800deda:	85fb      	strh	r3, [r7, #46]	; 0x2e

    const Font* fontToDraw = typedText.getFont();
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	3326      	adds	r3, #38	; 0x26
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7ff f851 	bl	800cf88 <_ZNK8touchgfx9TypedText7getFontEv>
 800dee6:	62b8      	str	r0, [r7, #40]	; 0x28
    int16_t textHeight = fontToDraw->getMinimumTextHeight();
 800dee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	3330      	adds	r3, #48	; 0x30
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800def2:	4798      	blx	r3
 800def4:	4603      	mov	r3, r0
 800def6:	84fb      	strh	r3, [r7, #38]	; 0x26

    va_end(pArg);
    return numLines * textHeight + (numLines - 1) * linespace;
 800def8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800defa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800defc:	fb12 f303 	smulbb	r3, r2, r3
 800df00:	b29a      	uxth	r2, r3
 800df02:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800df06:	3b01      	subs	r3, #1
 800df08:	b299      	uxth	r1, r3
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800df0e:	fb11 f303 	smulbb	r3, r1, r3
 800df12:	b29b      	uxth	r3, r3
 800df14:	4413      	add	r3, r2
 800df16:	b29b      	uxth	r3, r3
 800df18:	b21b      	sxth	r3, r3
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3730      	adds	r7, #48	; 0x30
 800df1e:	46bd      	mov	sp, r7
 800df20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800df24:	b003      	add	sp, #12
 800df26:	4770      	bx	lr

0800df28 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 800df28:	b480      	push	{r7}
 800df2a:	b083      	sub	sp, #12
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	b29b      	uxth	r3, r3
    }
 800df36:	4618      	mov	r0, r3
 800df38:	370c      	adds	r7, #12
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr

0800df42 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 800df42:	b480      	push	{r7}
 800df44:	b083      	sub	sp, #12
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
        return color;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
    }
 800df4e:	4618      	mov	r0, r3
 800df50:	370c      	adds	r7, #12
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr
	...

0800df5c <_ZN8touchgfx10OSWrappers10initializeEv>:

// Just a dummy value to insert in the VSYNC queue.
static uint8_t dummy = 0x5a;

void OSWrappers::initialize()
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 800df60:	2203      	movs	r2, #3
 800df62:	2100      	movs	r1, #0
 800df64:	2001      	movs	r0, #1
 800df66:	f000 fbd3 	bl	800e710 <xQueueGenericCreate>
 800df6a:	4602      	mov	r2, r0
 800df6c:	4b0b      	ldr	r3, [pc, #44]	; (800df9c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 800df6e:	601a      	str	r2, [r3, #0]
 800df70:	4b0a      	ldr	r3, [pc, #40]	; (800df9c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d006      	beq.n	800df86 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 800df78:	4b08      	ldr	r3, [pc, #32]	; (800df9c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 800df7a:	6818      	ldr	r0, [r3, #0]
 800df7c:	2300      	movs	r3, #0
 800df7e:	2200      	movs	r2, #0
 800df80:	2100      	movs	r1, #0
 800df82:	f000 fc1f 	bl	800e7c4 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 800df86:	2200      	movs	r2, #0
 800df88:	2101      	movs	r1, #1
 800df8a:	2001      	movs	r0, #1
 800df8c:	f000 fbc0 	bl	800e710 <xQueueGenericCreate>
 800df90:	4602      	mov	r2, r0
 800df92:	4b03      	ldr	r3, [pc, #12]	; (800dfa0 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800df94:	601a      	str	r2, [r3, #0]
}
 800df96:	bf00      	nop
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	20000224 	.word	0x20000224
 800dfa0:	20000228 	.word	0x20000228

0800dfa4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

void OSWrappers::takeFrameBufferSemaphore()
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 800dfa8:	4b04      	ldr	r3, [pc, #16]	; (800dfbc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	f04f 31ff 	mov.w	r1, #4294967295
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f000 ff19 	bl	800ede8 <xQueueSemaphoreTake>
}
 800dfb6:	bf00      	nop
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	20000224 	.word	0x20000224

0800dfc0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
void OSWrappers::giveFrameBufferSemaphore()
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 800dfc4:	4b04      	ldr	r3, [pc, #16]	; (800dfd8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 800dfc6:	6818      	ldr	r0, [r3, #0]
 800dfc8:	2300      	movs	r3, #0
 800dfca:	2200      	movs	r2, #0
 800dfcc:	2100      	movs	r1, #0
 800dfce:	f000 fbf9 	bl	800e7c4 <xQueueGenericSend>
}
 800dfd2:	bf00      	nop
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	20000224 	.word	0x20000224

0800dfdc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:

void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 800dfe0:	4b03      	ldr	r3, [pc, #12]	; (800dff0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	2100      	movs	r1, #0
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f000 fefe 	bl	800ede8 <xQueueSemaphoreTake>
}
 800dfec:	bf00      	nop
 800dfee:	bd80      	pop	{r7, pc}
 800dff0:	20000224 	.word	0x20000224

0800dff4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:

void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 800dffa:	2300      	movs	r3, #0
 800dffc:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 800dffe:	4b0b      	ldr	r3, [pc, #44]	; (800e02c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	1d3a      	adds	r2, r7, #4
 800e004:	4611      	mov	r1, r2
 800e006:	4618      	mov	r0, r3
 800e008:	f000 fd7a 	bl	800eb00 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d007      	beq.n	800e022 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 800e012:	4b07      	ldr	r3, [pc, #28]	; (800e030 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 800e014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e018:	601a      	str	r2, [r3, #0]
 800e01a:	f3bf 8f4f 	dsb	sy
 800e01e:	f3bf 8f6f 	isb	sy
}
 800e022:	bf00      	nop
 800e024:	3708      	adds	r7, #8
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	20000224 	.word	0x20000224
 800e030:	e000ed04 	.word	0xe000ed04

0800e034 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:

void OSWrappers::signalVSync()
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b082      	sub	sp, #8
 800e038:	af00      	add	r7, sp, #0
    if (vsync_q)
 800e03a:	4b0e      	ldr	r3, [pc, #56]	; (800e074 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d013      	beq.n	800e06a <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 800e042:	2300      	movs	r3, #0
 800e044:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 800e046:	4b0b      	ldr	r3, [pc, #44]	; (800e074 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 800e048:	6818      	ldr	r0, [r3, #0]
 800e04a:	1d3a      	adds	r2, r7, #4
 800e04c:	2300      	movs	r3, #0
 800e04e:	490a      	ldr	r1, [pc, #40]	; (800e078 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 800e050:	f000 fcba 	bl	800e9c8 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d007      	beq.n	800e06a <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 800e05a:	4b08      	ldr	r3, [pc, #32]	; (800e07c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 800e05c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e060:	601a      	str	r2, [r3, #0]
 800e062:	f3bf 8f4f 	dsb	sy
 800e066:	f3bf 8f6f 	isb	sy
    }
}
 800e06a:	bf00      	nop
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
 800e072:	bf00      	nop
 800e074:	20000228 	.word	0x20000228
 800e078:	20000029 	.word	0x20000029
 800e07c:	e000ed04 	.word	0xe000ed04

0800e080 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:

void OSWrappers::waitForVSync()
{
 800e080:	b580      	push	{r7, lr}
 800e082:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 800e084:	4b08      	ldr	r3, [pc, #32]	; (800e0a8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	2200      	movs	r2, #0
 800e08a:	4908      	ldr	r1, [pc, #32]	; (800e0ac <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800e08c:	4618      	mov	r0, r3
 800e08e:	f000 fdc9 	bl	800ec24 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 800e092:	4b05      	ldr	r3, [pc, #20]	; (800e0a8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f04f 32ff 	mov.w	r2, #4294967295
 800e09a:	4904      	ldr	r1, [pc, #16]	; (800e0ac <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800e09c:	4618      	mov	r0, r3
 800e09e:	f000 fdc1 	bl	800ec24 <xQueueReceive>
}
 800e0a2:	bf00      	nop
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	20000228 	.word	0x20000228
 800e0ac:	20000029 	.word	0x20000029

0800e0b0 <_ZL12IdleTaskHookPv>:
{
    vTaskDelay(ms);
}

static portBASE_TYPE IdleTaskHook(void* p)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b082      	sub	sp, #8
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
    if ((int)p) //idle task sched out
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d007      	beq.n	800e0ce <_ZL12IdleTaskHookPv+0x1e>
    {
        touchgfx::HAL::getInstance()->setMCUActive(true);
 800e0be:	f7fe feaf 	bl	800ce20 <_ZN8touchgfx3HAL11getInstanceEv>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2101      	movs	r1, #1
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f00e ffc0 	bl	801d04c <_ZN8touchgfx3HAL12setMCUActiveEb>
 800e0cc:	e006      	b.n	800e0dc <_ZL12IdleTaskHookPv+0x2c>
    }
    else //idle task sched in
    {
        touchgfx::HAL::getInstance()->setMCUActive(false);
 800e0ce:	f7fe fea7 	bl	800ce20 <_ZN8touchgfx3HAL11getInstanceEv>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	2100      	movs	r1, #0
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f00e ffb8 	bl	801d04c <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
    return pdTRUE;
 800e0dc:	2301      	movs	r3, #1
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3708      	adds	r7, #8
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}

0800e0e6 <vApplicationStackOverflowHook>:
// FreeRTOS specific handlers
extern "C"
{
    void vApplicationStackOverflowHook(xTaskHandle xTask,
                                       signed portCHAR* pcTaskName)
    {
 800e0e6:	b480      	push	{r7}
 800e0e8:	b083      	sub	sp, #12
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6078      	str	r0, [r7, #4]
 800e0ee:	6039      	str	r1, [r7, #0]
        while (1);
 800e0f0:	e7fe      	b.n	800e0f0 <vApplicationStackOverflowHook+0xa>

0800e0f2 <vApplicationMallocFailedHook>:
    }

    void vApplicationMallocFailedHook(xTaskHandle xTask,
                                      signed portCHAR* pcTaskName)
    {
 800e0f2:	b480      	push	{r7}
 800e0f4:	b083      	sub	sp, #12
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	6078      	str	r0, [r7, #4]
 800e0fa:	6039      	str	r1, [r7, #0]
        while (1);
 800e0fc:	e7fe      	b.n	800e0fc <vApplicationMallocFailedHook+0xa>
	...

0800e100 <vApplicationIdleHook>:
    }

    void vApplicationIdleHook(void)
    {
 800e100:	b580      	push	{r7, lr}
 800e102:	af00      	add	r7, sp, #0
        // Set task tag in order to have the "IdleTaskHook" function called when the idle task is
        // switched in/out. Used solely for measuring MCU load, and can be removed if MCU load
        // readout is not needed.
        vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 800e104:	4902      	ldr	r1, [pc, #8]	; (800e110 <vApplicationIdleHook+0x10>)
 800e106:	2000      	movs	r0, #0
 800e108:	f001 fc6c 	bl	800f9e4 <vTaskSetApplicationTaskTag>
    }
 800e10c:	bf00      	nop
 800e10e:	bd80      	pop	{r7, pc}
 800e110:	0800e0b1 	.word	0x0800e0b1

0800e114 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e114:	b480      	push	{r7}
 800e116:	b087      	sub	sp, #28
 800e118:	af00      	add	r7, sp, #0
 800e11a:	60f8      	str	r0, [r7, #12]
 800e11c:	60b9      	str	r1, [r7, #8]
 800e11e:	4613      	mov	r3, r2
 800e120:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e122:	2301      	movs	r3, #1
 800e124:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e126:	2300      	movs	r3, #0
 800e128:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e12a:	4b1f      	ldr	r3, [pc, #124]	; (800e1a8 <FATFS_LinkDriverEx+0x94>)
 800e12c:	7a5b      	ldrb	r3, [r3, #9]
 800e12e:	b2db      	uxtb	r3, r3
 800e130:	2b00      	cmp	r3, #0
 800e132:	d131      	bne.n	800e198 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e134:	4b1c      	ldr	r3, [pc, #112]	; (800e1a8 <FATFS_LinkDriverEx+0x94>)
 800e136:	7a5b      	ldrb	r3, [r3, #9]
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	461a      	mov	r2, r3
 800e13c:	4b1a      	ldr	r3, [pc, #104]	; (800e1a8 <FATFS_LinkDriverEx+0x94>)
 800e13e:	2100      	movs	r1, #0
 800e140:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e142:	4b19      	ldr	r3, [pc, #100]	; (800e1a8 <FATFS_LinkDriverEx+0x94>)
 800e144:	7a5b      	ldrb	r3, [r3, #9]
 800e146:	b2db      	uxtb	r3, r3
 800e148:	4a17      	ldr	r2, [pc, #92]	; (800e1a8 <FATFS_LinkDriverEx+0x94>)
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	4413      	add	r3, r2
 800e14e:	68fa      	ldr	r2, [r7, #12]
 800e150:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e152:	4b15      	ldr	r3, [pc, #84]	; (800e1a8 <FATFS_LinkDriverEx+0x94>)
 800e154:	7a5b      	ldrb	r3, [r3, #9]
 800e156:	b2db      	uxtb	r3, r3
 800e158:	461a      	mov	r2, r3
 800e15a:	4b13      	ldr	r3, [pc, #76]	; (800e1a8 <FATFS_LinkDriverEx+0x94>)
 800e15c:	4413      	add	r3, r2
 800e15e:	79fa      	ldrb	r2, [r7, #7]
 800e160:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e162:	4b11      	ldr	r3, [pc, #68]	; (800e1a8 <FATFS_LinkDriverEx+0x94>)
 800e164:	7a5b      	ldrb	r3, [r3, #9]
 800e166:	b2db      	uxtb	r3, r3
 800e168:	1c5a      	adds	r2, r3, #1
 800e16a:	b2d1      	uxtb	r1, r2
 800e16c:	4a0e      	ldr	r2, [pc, #56]	; (800e1a8 <FATFS_LinkDriverEx+0x94>)
 800e16e:	7251      	strb	r1, [r2, #9]
 800e170:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e172:	7dbb      	ldrb	r3, [r7, #22]
 800e174:	3330      	adds	r3, #48	; 0x30
 800e176:	b2da      	uxtb	r2, r3
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	3301      	adds	r3, #1
 800e180:	223a      	movs	r2, #58	; 0x3a
 800e182:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	3302      	adds	r3, #2
 800e188:	222f      	movs	r2, #47	; 0x2f
 800e18a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	3303      	adds	r3, #3
 800e190:	2200      	movs	r2, #0
 800e192:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e194:	2300      	movs	r3, #0
 800e196:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e198:	7dfb      	ldrb	r3, [r7, #23]
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	371c      	adds	r7, #28
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
 800e1a6:	bf00      	nop
 800e1a8:	2000022c 	.word	0x2000022c

0800e1ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	6839      	ldr	r1, [r7, #0]
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f7ff ffaa 	bl	800e114 <FATFS_LinkDriverEx>
 800e1c0:	4603      	mov	r3, r0
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3708      	adds	r7, #8
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}

0800e1ca <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e1ca:	b480      	push	{r7}
 800e1cc:	b085      	sub	sp, #20
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e1d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e1dc:	2b84      	cmp	r3, #132	; 0x84
 800e1de:	d005      	beq.n	800e1ec <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e1e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	4413      	add	r3, r2
 800e1e8:	3303      	adds	r3, #3
 800e1ea:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3714      	adds	r7, #20
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f8:	4770      	bx	lr

0800e1fa <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e1fa:	b480      	push	{r7}
 800e1fc:	b083      	sub	sp, #12
 800e1fe:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e200:	f3ef 8305 	mrs	r3, IPSR
 800e204:	607b      	str	r3, [r7, #4]
  return(result);
 800e206:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e208:	2b00      	cmp	r3, #0
 800e20a:	bf14      	ite	ne
 800e20c:	2301      	movne	r3, #1
 800e20e:	2300      	moveq	r3, #0
 800e210:	b2db      	uxtb	r3, r3
}
 800e212:	4618      	mov	r0, r3
 800e214:	370c      	adds	r7, #12
 800e216:	46bd      	mov	sp, r7
 800e218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21c:	4770      	bx	lr

0800e21e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e21e:	b580      	push	{r7, lr}
 800e220:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e222:	f001 fa09 	bl	800f638 <vTaskStartScheduler>
  
  return osOK;
 800e226:	2300      	movs	r3, #0
}
 800e228:	4618      	mov	r0, r3
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800e230:	f001 fe70 	bl	800ff14 <xTaskGetSchedulerState>
 800e234:	4603      	mov	r3, r0
 800e236:	2b01      	cmp	r3, #1
 800e238:	d101      	bne.n	800e23e <osKernelRunning+0x12>
    return 0;
 800e23a:	2300      	movs	r3, #0
 800e23c:	e000      	b.n	800e240 <osKernelRunning+0x14>
  else
    return 1;
 800e23e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800e240:	4618      	mov	r0, r3
 800e242:	bd80      	pop	{r7, pc}

0800e244 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800e248:	f7ff ffd7 	bl	800e1fa <inHandlerMode>
 800e24c:	4603      	mov	r3, r0
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d003      	beq.n	800e25a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800e252:	f001 faf7 	bl	800f844 <xTaskGetTickCountFromISR>
 800e256:	4603      	mov	r3, r0
 800e258:	e002      	b.n	800e260 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800e25a:	f001 fae3 	bl	800f824 <xTaskGetTickCount>
 800e25e:	4603      	mov	r3, r0
  }
}
 800e260:	4618      	mov	r0, r3
 800e262:	bd80      	pop	{r7, pc}

0800e264 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e264:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e266:	b087      	sub	sp, #28
 800e268:	af02      	add	r7, sp, #8
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	685c      	ldr	r4, [r3, #4]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e27a:	b29e      	uxth	r6, r3
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e282:	4618      	mov	r0, r3
 800e284:	f7ff ffa1 	bl	800e1ca <makeFreeRtosPriority>
 800e288:	4602      	mov	r2, r0
 800e28a:	f107 030c 	add.w	r3, r7, #12
 800e28e:	9301      	str	r3, [sp, #4]
 800e290:	9200      	str	r2, [sp, #0]
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	4632      	mov	r2, r6
 800e296:	4629      	mov	r1, r5
 800e298:	4620      	mov	r0, r4
 800e29a:	f001 f860 	bl	800f35e <xTaskCreate>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	d001      	beq.n	800e2a8 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	e000      	b.n	800e2aa <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3714      	adds	r7, #20
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e2b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e2b2:	b580      	push	{r7, lr}
 800e2b4:	b084      	sub	sp, #16
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d001      	beq.n	800e2c8 <osDelay+0x16>
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	e000      	b.n	800e2ca <osDelay+0x18>
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f001 f97e 	bl	800f5cc <vTaskDelay>
  
  return osOK;
 800e2d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3710      	adds	r7, #16
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
	...

0800e2dc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800e2ec:	f7ff ff85 	bl	800e1fa <inHandlerMode>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d016      	beq.n	800e324 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e2f6:	f107 0308 	add.w	r3, r7, #8
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f000 fbff 	bl	800eb00 <xQueueGiveFromISR>
 800e302:	4603      	mov	r3, r0
 800e304:	2b01      	cmp	r3, #1
 800e306:	d001      	beq.n	800e30c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800e308:	23ff      	movs	r3, #255	; 0xff
 800e30a:	e017      	b.n	800e33c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d013      	beq.n	800e33a <osSemaphoreRelease+0x5e>
 800e312:	4b0c      	ldr	r3, [pc, #48]	; (800e344 <osSemaphoreRelease+0x68>)
 800e314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e318:	601a      	str	r2, [r3, #0]
 800e31a:	f3bf 8f4f 	dsb	sy
 800e31e:	f3bf 8f6f 	isb	sy
 800e322:	e00a      	b.n	800e33a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e324:	2300      	movs	r3, #0
 800e326:	2200      	movs	r2, #0
 800e328:	2100      	movs	r1, #0
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f000 fa4a 	bl	800e7c4 <xQueueGenericSend>
 800e330:	4603      	mov	r3, r0
 800e332:	2b01      	cmp	r3, #1
 800e334:	d001      	beq.n	800e33a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800e336:	23ff      	movs	r3, #255	; 0xff
 800e338:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800e33a:	68fb      	ldr	r3, [r7, #12]
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3710      	adds	r7, #16
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}
 800e344:	e000ed04 	.word	0xe000ed04

0800e348 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b082      	sub	sp, #8
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6818      	ldr	r0, [r3, #0]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	2200      	movs	r2, #0
 800e35c:	4619      	mov	r1, r3
 800e35e:	f000 f9d7 	bl	800e710 <xQueueGenericCreate>
 800e362:	4603      	mov	r3, r0
#endif
}
 800e364:	4618      	mov	r0, r3
 800e366:	3708      	adds	r7, #8
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b086      	sub	sp, #24
 800e370:	af00      	add	r7, sp, #0
 800e372:	60f8      	str	r0, [r7, #12]
 800e374:	60b9      	str	r1, [r7, #8]
 800e376:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800e378:	2300      	movs	r3, #0
 800e37a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d101      	bne.n	800e38a <osMessagePut+0x1e>
    ticks = 1;
 800e386:	2301      	movs	r3, #1
 800e388:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800e38a:	f7ff ff36 	bl	800e1fa <inHandlerMode>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d018      	beq.n	800e3c6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800e394:	f107 0210 	add.w	r2, r7, #16
 800e398:	f107 0108 	add.w	r1, r7, #8
 800e39c:	2300      	movs	r3, #0
 800e39e:	68f8      	ldr	r0, [r7, #12]
 800e3a0:	f000 fb12 	bl	800e9c8 <xQueueGenericSendFromISR>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d001      	beq.n	800e3ae <osMessagePut+0x42>
      return osErrorOS;
 800e3aa:	23ff      	movs	r3, #255	; 0xff
 800e3ac:	e018      	b.n	800e3e0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d014      	beq.n	800e3de <osMessagePut+0x72>
 800e3b4:	4b0c      	ldr	r3, [pc, #48]	; (800e3e8 <osMessagePut+0x7c>)
 800e3b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3ba:	601a      	str	r2, [r3, #0]
 800e3bc:	f3bf 8f4f 	dsb	sy
 800e3c0:	f3bf 8f6f 	isb	sy
 800e3c4:	e00b      	b.n	800e3de <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800e3c6:	f107 0108 	add.w	r1, r7, #8
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	697a      	ldr	r2, [r7, #20]
 800e3ce:	68f8      	ldr	r0, [r7, #12]
 800e3d0:	f000 f9f8 	bl	800e7c4 <xQueueGenericSend>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d001      	beq.n	800e3de <osMessagePut+0x72>
      return osErrorOS;
 800e3da:	23ff      	movs	r3, #255	; 0xff
 800e3dc:	e000      	b.n	800e3e0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800e3de:	2300      	movs	r3, #0
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3718      	adds	r7, #24
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}
 800e3e8:	e000ed04 	.word	0xe000ed04

0800e3ec <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800e3ec:	b590      	push	{r4, r7, lr}
 800e3ee:	b08b      	sub	sp, #44	; 0x2c
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	60b9      	str	r1, [r7, #8]
 800e3f6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d10a      	bne.n	800e41c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800e406:	2380      	movs	r3, #128	; 0x80
 800e408:	617b      	str	r3, [r7, #20]
    return event;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	461c      	mov	r4, r3
 800e40e:	f107 0314 	add.w	r3, r7, #20
 800e412:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e416:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e41a:	e054      	b.n	800e4c6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e41c:	2300      	movs	r3, #0
 800e41e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e420:	2300      	movs	r3, #0
 800e422:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e42a:	d103      	bne.n	800e434 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800e42c:	f04f 33ff 	mov.w	r3, #4294967295
 800e430:	627b      	str	r3, [r7, #36]	; 0x24
 800e432:	e009      	b.n	800e448 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d006      	beq.n	800e448 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800e43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e440:	2b00      	cmp	r3, #0
 800e442:	d101      	bne.n	800e448 <osMessageGet+0x5c>
      ticks = 1;
 800e444:	2301      	movs	r3, #1
 800e446:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e448:	f7ff fed7 	bl	800e1fa <inHandlerMode>
 800e44c:	4603      	mov	r3, r0
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d01c      	beq.n	800e48c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800e452:	f107 0220 	add.w	r2, r7, #32
 800e456:	f107 0314 	add.w	r3, r7, #20
 800e45a:	3304      	adds	r3, #4
 800e45c:	4619      	mov	r1, r3
 800e45e:	68b8      	ldr	r0, [r7, #8]
 800e460:	f000 fdd2 	bl	800f008 <xQueueReceiveFromISR>
 800e464:	4603      	mov	r3, r0
 800e466:	2b01      	cmp	r3, #1
 800e468:	d102      	bne.n	800e470 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800e46a:	2310      	movs	r3, #16
 800e46c:	617b      	str	r3, [r7, #20]
 800e46e:	e001      	b.n	800e474 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800e470:	2300      	movs	r3, #0
 800e472:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e474:	6a3b      	ldr	r3, [r7, #32]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d01d      	beq.n	800e4b6 <osMessageGet+0xca>
 800e47a:	4b15      	ldr	r3, [pc, #84]	; (800e4d0 <osMessageGet+0xe4>)
 800e47c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e480:	601a      	str	r2, [r3, #0]
 800e482:	f3bf 8f4f 	dsb	sy
 800e486:	f3bf 8f6f 	isb	sy
 800e48a:	e014      	b.n	800e4b6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800e48c:	f107 0314 	add.w	r3, r7, #20
 800e490:	3304      	adds	r3, #4
 800e492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e494:	4619      	mov	r1, r3
 800e496:	68b8      	ldr	r0, [r7, #8]
 800e498:	f000 fbc4 	bl	800ec24 <xQueueReceive>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b01      	cmp	r3, #1
 800e4a0:	d102      	bne.n	800e4a8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800e4a2:	2310      	movs	r3, #16
 800e4a4:	617b      	str	r3, [r7, #20]
 800e4a6:	e006      	b.n	800e4b6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d101      	bne.n	800e4b2 <osMessageGet+0xc6>
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	e000      	b.n	800e4b4 <osMessageGet+0xc8>
 800e4b2:	2340      	movs	r3, #64	; 0x40
 800e4b4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	461c      	mov	r4, r3
 800e4ba:	f107 0314 	add.w	r3, r7, #20
 800e4be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e4c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e4c6:	68f8      	ldr	r0, [r7, #12]
 800e4c8:	372c      	adds	r7, #44	; 0x2c
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd90      	pop	{r4, r7, pc}
 800e4ce:	bf00      	nop
 800e4d0:	e000ed04 	.word	0xe000ed04

0800e4d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f103 0208 	add.w	r2, r3, #8
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f103 0208 	add.w	r2, r3, #8
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f103 0208 	add.w	r2, r3, #8
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2200      	movs	r2, #0
 800e506:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e508:	bf00      	nop
 800e50a:	370c      	adds	r7, #12
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	4770      	bx	lr

0800e514 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e514:	b480      	push	{r7}
 800e516:	b083      	sub	sp, #12
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2200      	movs	r2, #0
 800e520:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e522:	bf00      	nop
 800e524:	370c      	adds	r7, #12
 800e526:	46bd      	mov	sp, r7
 800e528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52c:	4770      	bx	lr

0800e52e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e52e:	b480      	push	{r7}
 800e530:	b085      	sub	sp, #20
 800e532:	af00      	add	r7, sp, #0
 800e534:	6078      	str	r0, [r7, #4]
 800e536:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	685b      	ldr	r3, [r3, #4]
 800e53c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	68fa      	ldr	r2, [r7, #12]
 800e542:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	689a      	ldr	r2, [r3, #8]
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	689b      	ldr	r3, [r3, #8]
 800e550:	683a      	ldr	r2, [r7, #0]
 800e552:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	683a      	ldr	r2, [r7, #0]
 800e558:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	687a      	ldr	r2, [r7, #4]
 800e55e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	1c5a      	adds	r2, r3, #1
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	601a      	str	r2, [r3, #0]
}
 800e56a:	bf00      	nop
 800e56c:	3714      	adds	r7, #20
 800e56e:	46bd      	mov	sp, r7
 800e570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e574:	4770      	bx	lr

0800e576 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e576:	b480      	push	{r7}
 800e578:	b085      	sub	sp, #20
 800e57a:	af00      	add	r7, sp, #0
 800e57c:	6078      	str	r0, [r7, #4]
 800e57e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e58c:	d103      	bne.n	800e596 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	691b      	ldr	r3, [r3, #16]
 800e592:	60fb      	str	r3, [r7, #12]
 800e594:	e00c      	b.n	800e5b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	3308      	adds	r3, #8
 800e59a:	60fb      	str	r3, [r7, #12]
 800e59c:	e002      	b.n	800e5a4 <vListInsert+0x2e>
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	60fb      	str	r3, [r7, #12]
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	68ba      	ldr	r2, [r7, #8]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d2f6      	bcs.n	800e59e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	685a      	ldr	r2, [r3, #4]
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	683a      	ldr	r2, [r7, #0]
 800e5be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	68fa      	ldr	r2, [r7, #12]
 800e5c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	683a      	ldr	r2, [r7, #0]
 800e5ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	1c5a      	adds	r2, r3, #1
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	601a      	str	r2, [r3, #0]
}
 800e5dc:	bf00      	nop
 800e5de:	3714      	adds	r7, #20
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr

0800e5e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b085      	sub	sp, #20
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	691b      	ldr	r3, [r3, #16]
 800e5f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	6892      	ldr	r2, [r2, #8]
 800e5fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	687a      	ldr	r2, [r7, #4]
 800e606:	6852      	ldr	r2, [r2, #4]
 800e608:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	429a      	cmp	r2, r3
 800e612:	d103      	bne.n	800e61c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	689a      	ldr	r2, [r3, #8]
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2200      	movs	r2, #0
 800e620:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	1e5a      	subs	r2, r3, #1
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
}
 800e630:	4618      	mov	r0, r3
 800e632:	3714      	adds	r7, #20
 800e634:	46bd      	mov	sp, r7
 800e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63a:	4770      	bx	lr

0800e63c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b084      	sub	sp, #16
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d10b      	bne.n	800e668 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e654:	b672      	cpsid	i
 800e656:	f383 8811 	msr	BASEPRI, r3
 800e65a:	f3bf 8f6f 	isb	sy
 800e65e:	f3bf 8f4f 	dsb	sy
 800e662:	b662      	cpsie	i
 800e664:	60bb      	str	r3, [r7, #8]
 800e666:	e7fe      	b.n	800e666 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800e668:	f001 ffa6 	bl	80105b8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e674:	68f9      	ldr	r1, [r7, #12]
 800e676:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e678:	fb01 f303 	mul.w	r3, r1, r3
 800e67c:	441a      	add	r2, r3
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	2200      	movs	r2, #0
 800e686:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681a      	ldr	r2, [r3, #0]
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e698:	3b01      	subs	r3, #1
 800e69a:	68f9      	ldr	r1, [r7, #12]
 800e69c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e69e:	fb01 f303 	mul.w	r3, r1, r3
 800e6a2:	441a      	add	r2, r3
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	22ff      	movs	r2, #255	; 0xff
 800e6ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	22ff      	movs	r2, #255	; 0xff
 800e6b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d114      	bne.n	800e6e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	691b      	ldr	r3, [r3, #16]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d01a      	beq.n	800e6fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	3310      	adds	r3, #16
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f001 fa7c 	bl	800fbc8 <xTaskRemoveFromEventList>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d012      	beq.n	800e6fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e6d6:	4b0d      	ldr	r3, [pc, #52]	; (800e70c <xQueueGenericReset+0xd0>)
 800e6d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6dc:	601a      	str	r2, [r3, #0]
 800e6de:	f3bf 8f4f 	dsb	sy
 800e6e2:	f3bf 8f6f 	isb	sy
 800e6e6:	e009      	b.n	800e6fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	3310      	adds	r3, #16
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f7ff fef1 	bl	800e4d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	3324      	adds	r3, #36	; 0x24
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7ff feec 	bl	800e4d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e6fc:	f001 ff8e 	bl	801061c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e700:	2301      	movs	r3, #1
}
 800e702:	4618      	mov	r0, r3
 800e704:	3710      	adds	r7, #16
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
 800e70a:	bf00      	nop
 800e70c:	e000ed04 	.word	0xe000ed04

0800e710 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e710:	b580      	push	{r7, lr}
 800e712:	b08a      	sub	sp, #40	; 0x28
 800e714:	af02      	add	r7, sp, #8
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	60b9      	str	r1, [r7, #8]
 800e71a:	4613      	mov	r3, r2
 800e71c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d10b      	bne.n	800e73c <xQueueGenericCreate+0x2c>
 800e724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e728:	b672      	cpsid	i
 800e72a:	f383 8811 	msr	BASEPRI, r3
 800e72e:	f3bf 8f6f 	isb	sy
 800e732:	f3bf 8f4f 	dsb	sy
 800e736:	b662      	cpsie	i
 800e738:	613b      	str	r3, [r7, #16]
 800e73a:	e7fe      	b.n	800e73a <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d102      	bne.n	800e748 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e742:	2300      	movs	r3, #0
 800e744:	61fb      	str	r3, [r7, #28]
 800e746:	e004      	b.n	800e752 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	68ba      	ldr	r2, [r7, #8]
 800e74c:	fb02 f303 	mul.w	r3, r2, r3
 800e750:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e752:	69fb      	ldr	r3, [r7, #28]
 800e754:	3348      	adds	r3, #72	; 0x48
 800e756:	4618      	mov	r0, r3
 800e758:	f002 f850 	bl	80107fc <pvPortMalloc>
 800e75c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e75e:	69bb      	ldr	r3, [r7, #24]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d00b      	beq.n	800e77c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800e764:	69bb      	ldr	r3, [r7, #24]
 800e766:	3348      	adds	r3, #72	; 0x48
 800e768:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e76a:	79fa      	ldrb	r2, [r7, #7]
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	9300      	str	r3, [sp, #0]
 800e770:	4613      	mov	r3, r2
 800e772:	697a      	ldr	r2, [r7, #20]
 800e774:	68b9      	ldr	r1, [r7, #8]
 800e776:	68f8      	ldr	r0, [r7, #12]
 800e778:	f000 f805 	bl	800e786 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800e77c:	69bb      	ldr	r3, [r7, #24]
	}
 800e77e:	4618      	mov	r0, r3
 800e780:	3720      	adds	r7, #32
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}

0800e786 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e786:	b580      	push	{r7, lr}
 800e788:	b084      	sub	sp, #16
 800e78a:	af00      	add	r7, sp, #0
 800e78c:	60f8      	str	r0, [r7, #12]
 800e78e:	60b9      	str	r1, [r7, #8]
 800e790:	607a      	str	r2, [r7, #4]
 800e792:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d103      	bne.n	800e7a2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	69ba      	ldr	r2, [r7, #24]
 800e79e:	601a      	str	r2, [r3, #0]
 800e7a0:	e002      	b.n	800e7a8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	687a      	ldr	r2, [r7, #4]
 800e7a6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e7a8:	69bb      	ldr	r3, [r7, #24]
 800e7aa:	68fa      	ldr	r2, [r7, #12]
 800e7ac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e7ae:	69bb      	ldr	r3, [r7, #24]
 800e7b0:	68ba      	ldr	r2, [r7, #8]
 800e7b2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e7b4:	2101      	movs	r1, #1
 800e7b6:	69b8      	ldr	r0, [r7, #24]
 800e7b8:	f7ff ff40 	bl	800e63c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e7bc:	bf00      	nop
 800e7be:	3710      	adds	r7, #16
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b08e      	sub	sp, #56	; 0x38
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	607a      	str	r2, [r7, #4]
 800e7d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d10b      	bne.n	800e7f8 <xQueueGenericSend+0x34>
 800e7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e4:	b672      	cpsid	i
 800e7e6:	f383 8811 	msr	BASEPRI, r3
 800e7ea:	f3bf 8f6f 	isb	sy
 800e7ee:	f3bf 8f4f 	dsb	sy
 800e7f2:	b662      	cpsie	i
 800e7f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7f6:	e7fe      	b.n	800e7f6 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d103      	bne.n	800e806 <xQueueGenericSend+0x42>
 800e7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e802:	2b00      	cmp	r3, #0
 800e804:	d101      	bne.n	800e80a <xQueueGenericSend+0x46>
 800e806:	2301      	movs	r3, #1
 800e808:	e000      	b.n	800e80c <xQueueGenericSend+0x48>
 800e80a:	2300      	movs	r3, #0
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d10b      	bne.n	800e828 <xQueueGenericSend+0x64>
 800e810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e814:	b672      	cpsid	i
 800e816:	f383 8811 	msr	BASEPRI, r3
 800e81a:	f3bf 8f6f 	isb	sy
 800e81e:	f3bf 8f4f 	dsb	sy
 800e822:	b662      	cpsie	i
 800e824:	627b      	str	r3, [r7, #36]	; 0x24
 800e826:	e7fe      	b.n	800e826 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	2b02      	cmp	r3, #2
 800e82c:	d103      	bne.n	800e836 <xQueueGenericSend+0x72>
 800e82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e832:	2b01      	cmp	r3, #1
 800e834:	d101      	bne.n	800e83a <xQueueGenericSend+0x76>
 800e836:	2301      	movs	r3, #1
 800e838:	e000      	b.n	800e83c <xQueueGenericSend+0x78>
 800e83a:	2300      	movs	r3, #0
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d10b      	bne.n	800e858 <xQueueGenericSend+0x94>
 800e840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e844:	b672      	cpsid	i
 800e846:	f383 8811 	msr	BASEPRI, r3
 800e84a:	f3bf 8f6f 	isb	sy
 800e84e:	f3bf 8f4f 	dsb	sy
 800e852:	b662      	cpsie	i
 800e854:	623b      	str	r3, [r7, #32]
 800e856:	e7fe      	b.n	800e856 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e858:	f001 fb5c 	bl	800ff14 <xTaskGetSchedulerState>
 800e85c:	4603      	mov	r3, r0
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d102      	bne.n	800e868 <xQueueGenericSend+0xa4>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d101      	bne.n	800e86c <xQueueGenericSend+0xa8>
 800e868:	2301      	movs	r3, #1
 800e86a:	e000      	b.n	800e86e <xQueueGenericSend+0xaa>
 800e86c:	2300      	movs	r3, #0
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d10b      	bne.n	800e88a <xQueueGenericSend+0xc6>
 800e872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e876:	b672      	cpsid	i
 800e878:	f383 8811 	msr	BASEPRI, r3
 800e87c:	f3bf 8f6f 	isb	sy
 800e880:	f3bf 8f4f 	dsb	sy
 800e884:	b662      	cpsie	i
 800e886:	61fb      	str	r3, [r7, #28]
 800e888:	e7fe      	b.n	800e888 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e88a:	f001 fe95 	bl	80105b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e896:	429a      	cmp	r2, r3
 800e898:	d302      	bcc.n	800e8a0 <xQueueGenericSend+0xdc>
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	2b02      	cmp	r3, #2
 800e89e:	d129      	bne.n	800e8f4 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e8a0:	683a      	ldr	r2, [r7, #0]
 800e8a2:	68b9      	ldr	r1, [r7, #8]
 800e8a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8a6:	f000 fc4a 	bl	800f13e <prvCopyDataToQueue>
 800e8aa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d010      	beq.n	800e8d6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b6:	3324      	adds	r3, #36	; 0x24
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f001 f985 	bl	800fbc8 <xTaskRemoveFromEventList>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d013      	beq.n	800e8ec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e8c4:	4b3f      	ldr	r3, [pc, #252]	; (800e9c4 <xQueueGenericSend+0x200>)
 800e8c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8ca:	601a      	str	r2, [r3, #0]
 800e8cc:	f3bf 8f4f 	dsb	sy
 800e8d0:	f3bf 8f6f 	isb	sy
 800e8d4:	e00a      	b.n	800e8ec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d007      	beq.n	800e8ec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e8dc:	4b39      	ldr	r3, [pc, #228]	; (800e9c4 <xQueueGenericSend+0x200>)
 800e8de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8e2:	601a      	str	r2, [r3, #0]
 800e8e4:	f3bf 8f4f 	dsb	sy
 800e8e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e8ec:	f001 fe96 	bl	801061c <vPortExitCritical>
				return pdPASS;
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	e063      	b.n	800e9bc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d103      	bne.n	800e902 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e8fa:	f001 fe8f 	bl	801061c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e8fe:	2300      	movs	r3, #0
 800e900:	e05c      	b.n	800e9bc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e904:	2b00      	cmp	r3, #0
 800e906:	d106      	bne.n	800e916 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e908:	f107 0314 	add.w	r3, r7, #20
 800e90c:	4618      	mov	r0, r3
 800e90e:	f001 f9bf 	bl	800fc90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e912:	2301      	movs	r3, #1
 800e914:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e916:	f001 fe81 	bl	801061c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e91a:	f000 fed7 	bl	800f6cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e91e:	f001 fe4b 	bl	80105b8 <vPortEnterCritical>
 800e922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e928:	b25b      	sxtb	r3, r3
 800e92a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e92e:	d103      	bne.n	800e938 <xQueueGenericSend+0x174>
 800e930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e932:	2200      	movs	r2, #0
 800e934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e93a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e93e:	b25b      	sxtb	r3, r3
 800e940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e944:	d103      	bne.n	800e94e <xQueueGenericSend+0x18a>
 800e946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e948:	2200      	movs	r2, #0
 800e94a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e94e:	f001 fe65 	bl	801061c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e952:	1d3a      	adds	r2, r7, #4
 800e954:	f107 0314 	add.w	r3, r7, #20
 800e958:	4611      	mov	r1, r2
 800e95a:	4618      	mov	r0, r3
 800e95c:	f001 f9ae 	bl	800fcbc <xTaskCheckForTimeOut>
 800e960:	4603      	mov	r3, r0
 800e962:	2b00      	cmp	r3, #0
 800e964:	d124      	bne.n	800e9b0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e966:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e968:	f000 fce1 	bl	800f32e <prvIsQueueFull>
 800e96c:	4603      	mov	r3, r0
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d018      	beq.n	800e9a4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e974:	3310      	adds	r3, #16
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	4611      	mov	r1, r2
 800e97a:	4618      	mov	r0, r3
 800e97c:	f001 f8fe 	bl	800fb7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e982:	f000 fc6c 	bl	800f25e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e986:	f000 feaf 	bl	800f6e8 <xTaskResumeAll>
 800e98a:	4603      	mov	r3, r0
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	f47f af7c 	bne.w	800e88a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e992:	4b0c      	ldr	r3, [pc, #48]	; (800e9c4 <xQueueGenericSend+0x200>)
 800e994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e998:	601a      	str	r2, [r3, #0]
 800e99a:	f3bf 8f4f 	dsb	sy
 800e99e:	f3bf 8f6f 	isb	sy
 800e9a2:	e772      	b.n	800e88a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e9a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9a6:	f000 fc5a 	bl	800f25e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e9aa:	f000 fe9d 	bl	800f6e8 <xTaskResumeAll>
 800e9ae:	e76c      	b.n	800e88a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e9b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9b2:	f000 fc54 	bl	800f25e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e9b6:	f000 fe97 	bl	800f6e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e9ba:	2300      	movs	r3, #0
		}
	}
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3738      	adds	r7, #56	; 0x38
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}
 800e9c4:	e000ed04 	.word	0xe000ed04

0800e9c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b08e      	sub	sp, #56	; 0x38
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	607a      	str	r2, [r7, #4]
 800e9d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d10b      	bne.n	800e9f8 <xQueueGenericSendFromISR+0x30>
 800e9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e4:	b672      	cpsid	i
 800e9e6:	f383 8811 	msr	BASEPRI, r3
 800e9ea:	f3bf 8f6f 	isb	sy
 800e9ee:	f3bf 8f4f 	dsb	sy
 800e9f2:	b662      	cpsie	i
 800e9f4:	627b      	str	r3, [r7, #36]	; 0x24
 800e9f6:	e7fe      	b.n	800e9f6 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d103      	bne.n	800ea06 <xQueueGenericSendFromISR+0x3e>
 800e9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d101      	bne.n	800ea0a <xQueueGenericSendFromISR+0x42>
 800ea06:	2301      	movs	r3, #1
 800ea08:	e000      	b.n	800ea0c <xQueueGenericSendFromISR+0x44>
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d10b      	bne.n	800ea28 <xQueueGenericSendFromISR+0x60>
 800ea10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea14:	b672      	cpsid	i
 800ea16:	f383 8811 	msr	BASEPRI, r3
 800ea1a:	f3bf 8f6f 	isb	sy
 800ea1e:	f3bf 8f4f 	dsb	sy
 800ea22:	b662      	cpsie	i
 800ea24:	623b      	str	r3, [r7, #32]
 800ea26:	e7fe      	b.n	800ea26 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	2b02      	cmp	r3, #2
 800ea2c:	d103      	bne.n	800ea36 <xQueueGenericSendFromISR+0x6e>
 800ea2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea32:	2b01      	cmp	r3, #1
 800ea34:	d101      	bne.n	800ea3a <xQueueGenericSendFromISR+0x72>
 800ea36:	2301      	movs	r3, #1
 800ea38:	e000      	b.n	800ea3c <xQueueGenericSendFromISR+0x74>
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d10b      	bne.n	800ea58 <xQueueGenericSendFromISR+0x90>
 800ea40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea44:	b672      	cpsid	i
 800ea46:	f383 8811 	msr	BASEPRI, r3
 800ea4a:	f3bf 8f6f 	isb	sy
 800ea4e:	f3bf 8f4f 	dsb	sy
 800ea52:	b662      	cpsie	i
 800ea54:	61fb      	str	r3, [r7, #28]
 800ea56:	e7fe      	b.n	800ea56 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ea58:	f001 fe8e 	bl	8010778 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ea5c:	f3ef 8211 	mrs	r2, BASEPRI
 800ea60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea64:	b672      	cpsid	i
 800ea66:	f383 8811 	msr	BASEPRI, r3
 800ea6a:	f3bf 8f6f 	isb	sy
 800ea6e:	f3bf 8f4f 	dsb	sy
 800ea72:	b662      	cpsie	i
 800ea74:	61ba      	str	r2, [r7, #24]
 800ea76:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ea78:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ea7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea84:	429a      	cmp	r2, r3
 800ea86:	d302      	bcc.n	800ea8e <xQueueGenericSendFromISR+0xc6>
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	2b02      	cmp	r3, #2
 800ea8c:	d12c      	bne.n	800eae8 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ea8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ea98:	683a      	ldr	r2, [r7, #0]
 800ea9a:	68b9      	ldr	r1, [r7, #8]
 800ea9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea9e:	f000 fb4e 	bl	800f13e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800eaa2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800eaa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaaa:	d112      	bne.n	800ead2 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eaac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d016      	beq.n	800eae2 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab6:	3324      	adds	r3, #36	; 0x24
 800eab8:	4618      	mov	r0, r3
 800eaba:	f001 f885 	bl	800fbc8 <xTaskRemoveFromEventList>
 800eabe:	4603      	mov	r3, r0
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d00e      	beq.n	800eae2 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d00b      	beq.n	800eae2 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2201      	movs	r2, #1
 800eace:	601a      	str	r2, [r3, #0]
 800ead0:	e007      	b.n	800eae2 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ead2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ead6:	3301      	adds	r3, #1
 800ead8:	b2db      	uxtb	r3, r3
 800eada:	b25a      	sxtb	r2, r3
 800eadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800eae2:	2301      	movs	r3, #1
 800eae4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800eae6:	e001      	b.n	800eaec <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eae8:	2300      	movs	r3, #0
 800eaea:	637b      	str	r3, [r7, #52]	; 0x34
 800eaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eaf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3738      	adds	r7, #56	; 0x38
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b08e      	sub	sp, #56	; 0x38
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
 800eb08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800eb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d10b      	bne.n	800eb2c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800eb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb18:	b672      	cpsid	i
 800eb1a:	f383 8811 	msr	BASEPRI, r3
 800eb1e:	f3bf 8f6f 	isb	sy
 800eb22:	f3bf 8f4f 	dsb	sy
 800eb26:	b662      	cpsie	i
 800eb28:	623b      	str	r3, [r7, #32]
 800eb2a:	e7fe      	b.n	800eb2a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800eb2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d00b      	beq.n	800eb4c <xQueueGiveFromISR+0x4c>
 800eb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb38:	b672      	cpsid	i
 800eb3a:	f383 8811 	msr	BASEPRI, r3
 800eb3e:	f3bf 8f6f 	isb	sy
 800eb42:	f3bf 8f4f 	dsb	sy
 800eb46:	b662      	cpsie	i
 800eb48:	61fb      	str	r3, [r7, #28]
 800eb4a:	e7fe      	b.n	800eb4a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800eb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d103      	bne.n	800eb5c <xQueueGiveFromISR+0x5c>
 800eb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d101      	bne.n	800eb60 <xQueueGiveFromISR+0x60>
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	e000      	b.n	800eb62 <xQueueGiveFromISR+0x62>
 800eb60:	2300      	movs	r3, #0
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d10b      	bne.n	800eb7e <xQueueGiveFromISR+0x7e>
 800eb66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb6a:	b672      	cpsid	i
 800eb6c:	f383 8811 	msr	BASEPRI, r3
 800eb70:	f3bf 8f6f 	isb	sy
 800eb74:	f3bf 8f4f 	dsb	sy
 800eb78:	b662      	cpsie	i
 800eb7a:	61bb      	str	r3, [r7, #24]
 800eb7c:	e7fe      	b.n	800eb7c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb7e:	f001 fdfb 	bl	8010778 <vPortValidateInterruptPriority>
	__asm volatile
 800eb82:	f3ef 8211 	mrs	r2, BASEPRI
 800eb86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb8a:	b672      	cpsid	i
 800eb8c:	f383 8811 	msr	BASEPRI, r3
 800eb90:	f3bf 8f6f 	isb	sy
 800eb94:	f3bf 8f4f 	dsb	sy
 800eb98:	b662      	cpsie	i
 800eb9a:	617a      	str	r2, [r7, #20]
 800eb9c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800eb9e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eba0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eba6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800eba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d22b      	bcs.n	800ec0a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ebb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ebbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebbe:	1c5a      	adds	r2, r3, #1
 800ebc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ebc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ebc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebcc:	d112      	bne.n	800ebf4 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ebce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d016      	beq.n	800ec04 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ebd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd8:	3324      	adds	r3, #36	; 0x24
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f000 fff4 	bl	800fbc8 <xTaskRemoveFromEventList>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d00e      	beq.n	800ec04 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d00b      	beq.n	800ec04 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	2201      	movs	r2, #1
 800ebf0:	601a      	str	r2, [r3, #0]
 800ebf2:	e007      	b.n	800ec04 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ebf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	b2db      	uxtb	r3, r3
 800ebfc:	b25a      	sxtb	r2, r3
 800ebfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ec04:	2301      	movs	r3, #1
 800ec06:	637b      	str	r3, [r7, #52]	; 0x34
 800ec08:	e001      	b.n	800ec0e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	637b      	str	r3, [r7, #52]	; 0x34
 800ec0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec10:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ec18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3738      	adds	r7, #56	; 0x38
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}
	...

0800ec24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b08c      	sub	sp, #48	; 0x30
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	60f8      	str	r0, [r7, #12]
 800ec2c:	60b9      	str	r1, [r7, #8]
 800ec2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ec30:	2300      	movs	r3, #0
 800ec32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ec38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d10b      	bne.n	800ec56 <xQueueReceive+0x32>
	__asm volatile
 800ec3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec42:	b672      	cpsid	i
 800ec44:	f383 8811 	msr	BASEPRI, r3
 800ec48:	f3bf 8f6f 	isb	sy
 800ec4c:	f3bf 8f4f 	dsb	sy
 800ec50:	b662      	cpsie	i
 800ec52:	623b      	str	r3, [r7, #32]
 800ec54:	e7fe      	b.n	800ec54 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d103      	bne.n	800ec64 <xQueueReceive+0x40>
 800ec5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d101      	bne.n	800ec68 <xQueueReceive+0x44>
 800ec64:	2301      	movs	r3, #1
 800ec66:	e000      	b.n	800ec6a <xQueueReceive+0x46>
 800ec68:	2300      	movs	r3, #0
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d10b      	bne.n	800ec86 <xQueueReceive+0x62>
 800ec6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec72:	b672      	cpsid	i
 800ec74:	f383 8811 	msr	BASEPRI, r3
 800ec78:	f3bf 8f6f 	isb	sy
 800ec7c:	f3bf 8f4f 	dsb	sy
 800ec80:	b662      	cpsie	i
 800ec82:	61fb      	str	r3, [r7, #28]
 800ec84:	e7fe      	b.n	800ec84 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ec86:	f001 f945 	bl	800ff14 <xTaskGetSchedulerState>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d102      	bne.n	800ec96 <xQueueReceive+0x72>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d101      	bne.n	800ec9a <xQueueReceive+0x76>
 800ec96:	2301      	movs	r3, #1
 800ec98:	e000      	b.n	800ec9c <xQueueReceive+0x78>
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d10b      	bne.n	800ecb8 <xQueueReceive+0x94>
 800eca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca4:	b672      	cpsid	i
 800eca6:	f383 8811 	msr	BASEPRI, r3
 800ecaa:	f3bf 8f6f 	isb	sy
 800ecae:	f3bf 8f4f 	dsb	sy
 800ecb2:	b662      	cpsie	i
 800ecb4:	61bb      	str	r3, [r7, #24]
 800ecb6:	e7fe      	b.n	800ecb6 <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ecb8:	f001 fc7e 	bl	80105b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ecbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecc0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ecc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d01f      	beq.n	800ed08 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ecc8:	68b9      	ldr	r1, [r7, #8]
 800ecca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eccc:	f000 faa1 	bl	800f212 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ecd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd2:	1e5a      	subs	r2, r3, #1
 800ecd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecda:	691b      	ldr	r3, [r3, #16]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d00f      	beq.n	800ed00 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ece0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece2:	3310      	adds	r3, #16
 800ece4:	4618      	mov	r0, r3
 800ece6:	f000 ff6f 	bl	800fbc8 <xTaskRemoveFromEventList>
 800ecea:	4603      	mov	r3, r0
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d007      	beq.n	800ed00 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ecf0:	4b3c      	ldr	r3, [pc, #240]	; (800ede4 <xQueueReceive+0x1c0>)
 800ecf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecf6:	601a      	str	r2, [r3, #0]
 800ecf8:	f3bf 8f4f 	dsb	sy
 800ecfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ed00:	f001 fc8c 	bl	801061c <vPortExitCritical>
				return pdPASS;
 800ed04:	2301      	movs	r3, #1
 800ed06:	e069      	b.n	800eddc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d103      	bne.n	800ed16 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ed0e:	f001 fc85 	bl	801061c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ed12:	2300      	movs	r3, #0
 800ed14:	e062      	b.n	800eddc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ed16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d106      	bne.n	800ed2a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ed1c:	f107 0310 	add.w	r3, r7, #16
 800ed20:	4618      	mov	r0, r3
 800ed22:	f000 ffb5 	bl	800fc90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ed26:	2301      	movs	r3, #1
 800ed28:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ed2a:	f001 fc77 	bl	801061c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ed2e:	f000 fccd 	bl	800f6cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ed32:	f001 fc41 	bl	80105b8 <vPortEnterCritical>
 800ed36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed3c:	b25b      	sxtb	r3, r3
 800ed3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed42:	d103      	bne.n	800ed4c <xQueueReceive+0x128>
 800ed44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed46:	2200      	movs	r2, #0
 800ed48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed52:	b25b      	sxtb	r3, r3
 800ed54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed58:	d103      	bne.n	800ed62 <xQueueReceive+0x13e>
 800ed5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed62:	f001 fc5b 	bl	801061c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ed66:	1d3a      	adds	r2, r7, #4
 800ed68:	f107 0310 	add.w	r3, r7, #16
 800ed6c:	4611      	mov	r1, r2
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f000 ffa4 	bl	800fcbc <xTaskCheckForTimeOut>
 800ed74:	4603      	mov	r3, r0
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d123      	bne.n	800edc2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ed7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed7c:	f000 fac1 	bl	800f302 <prvIsQueueEmpty>
 800ed80:	4603      	mov	r3, r0
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d017      	beq.n	800edb6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ed86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed88:	3324      	adds	r3, #36	; 0x24
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	4611      	mov	r1, r2
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f000 fef4 	bl	800fb7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ed94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed96:	f000 fa62 	bl	800f25e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ed9a:	f000 fca5 	bl	800f6e8 <xTaskResumeAll>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d189      	bne.n	800ecb8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800eda4:	4b0f      	ldr	r3, [pc, #60]	; (800ede4 <xQueueReceive+0x1c0>)
 800eda6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edaa:	601a      	str	r2, [r3, #0]
 800edac:	f3bf 8f4f 	dsb	sy
 800edb0:	f3bf 8f6f 	isb	sy
 800edb4:	e780      	b.n	800ecb8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800edb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edb8:	f000 fa51 	bl	800f25e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800edbc:	f000 fc94 	bl	800f6e8 <xTaskResumeAll>
 800edc0:	e77a      	b.n	800ecb8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800edc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edc4:	f000 fa4b 	bl	800f25e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800edc8:	f000 fc8e 	bl	800f6e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800edcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edce:	f000 fa98 	bl	800f302 <prvIsQueueEmpty>
 800edd2:	4603      	mov	r3, r0
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	f43f af6f 	beq.w	800ecb8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800edda:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800eddc:	4618      	mov	r0, r3
 800edde:	3730      	adds	r7, #48	; 0x30
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}
 800ede4:	e000ed04 	.word	0xe000ed04

0800ede8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b08e      	sub	sp, #56	; 0x38
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800edf2:	2300      	movs	r3, #0
 800edf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800edfa:	2300      	movs	r3, #0
 800edfc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800edfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d10b      	bne.n	800ee1c <xQueueSemaphoreTake+0x34>
 800ee04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee08:	b672      	cpsid	i
 800ee0a:	f383 8811 	msr	BASEPRI, r3
 800ee0e:	f3bf 8f6f 	isb	sy
 800ee12:	f3bf 8f4f 	dsb	sy
 800ee16:	b662      	cpsie	i
 800ee18:	623b      	str	r3, [r7, #32]
 800ee1a:	e7fe      	b.n	800ee1a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ee1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d00b      	beq.n	800ee3c <xQueueSemaphoreTake+0x54>
 800ee24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee28:	b672      	cpsid	i
 800ee2a:	f383 8811 	msr	BASEPRI, r3
 800ee2e:	f3bf 8f6f 	isb	sy
 800ee32:	f3bf 8f4f 	dsb	sy
 800ee36:	b662      	cpsie	i
 800ee38:	61fb      	str	r3, [r7, #28]
 800ee3a:	e7fe      	b.n	800ee3a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee3c:	f001 f86a 	bl	800ff14 <xTaskGetSchedulerState>
 800ee40:	4603      	mov	r3, r0
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d102      	bne.n	800ee4c <xQueueSemaphoreTake+0x64>
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d101      	bne.n	800ee50 <xQueueSemaphoreTake+0x68>
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	e000      	b.n	800ee52 <xQueueSemaphoreTake+0x6a>
 800ee50:	2300      	movs	r3, #0
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d10b      	bne.n	800ee6e <xQueueSemaphoreTake+0x86>
 800ee56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee5a:	b672      	cpsid	i
 800ee5c:	f383 8811 	msr	BASEPRI, r3
 800ee60:	f3bf 8f6f 	isb	sy
 800ee64:	f3bf 8f4f 	dsb	sy
 800ee68:	b662      	cpsie	i
 800ee6a:	61bb      	str	r3, [r7, #24]
 800ee6c:	e7fe      	b.n	800ee6c <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ee6e:	f001 fba3 	bl	80105b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ee72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee76:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ee78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d024      	beq.n	800eec8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ee7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee80:	1e5a      	subs	r2, r3, #1
 800ee82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee84:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d104      	bne.n	800ee98 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800ee8e:	f001 fa0f 	bl	80102b0 <pvTaskIncrementMutexHeldCount>
 800ee92:	4602      	mov	r2, r0
 800ee94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee96:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9a:	691b      	ldr	r3, [r3, #16]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d00f      	beq.n	800eec0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea2:	3310      	adds	r3, #16
 800eea4:	4618      	mov	r0, r3
 800eea6:	f000 fe8f 	bl	800fbc8 <xTaskRemoveFromEventList>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d007      	beq.n	800eec0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eeb0:	4b54      	ldr	r3, [pc, #336]	; (800f004 <xQueueSemaphoreTake+0x21c>)
 800eeb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eeb6:	601a      	str	r2, [r3, #0]
 800eeb8:	f3bf 8f4f 	dsb	sy
 800eebc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eec0:	f001 fbac 	bl	801061c <vPortExitCritical>
				return pdPASS;
 800eec4:	2301      	movs	r3, #1
 800eec6:	e098      	b.n	800effa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d112      	bne.n	800eef4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800eece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d00b      	beq.n	800eeec <xQueueSemaphoreTake+0x104>
 800eed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed8:	b672      	cpsid	i
 800eeda:	f383 8811 	msr	BASEPRI, r3
 800eede:	f3bf 8f6f 	isb	sy
 800eee2:	f3bf 8f4f 	dsb	sy
 800eee6:	b662      	cpsie	i
 800eee8:	617b      	str	r3, [r7, #20]
 800eeea:	e7fe      	b.n	800eeea <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800eeec:	f001 fb96 	bl	801061c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eef0:	2300      	movs	r3, #0
 800eef2:	e082      	b.n	800effa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d106      	bne.n	800ef08 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eefa:	f107 030c 	add.w	r3, r7, #12
 800eefe:	4618      	mov	r0, r3
 800ef00:	f000 fec6 	bl	800fc90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ef04:	2301      	movs	r3, #1
 800ef06:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ef08:	f001 fb88 	bl	801061c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ef0c:	f000 fbde 	bl	800f6cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef10:	f001 fb52 	bl	80105b8 <vPortEnterCritical>
 800ef14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef1a:	b25b      	sxtb	r3, r3
 800ef1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef20:	d103      	bne.n	800ef2a <xQueueSemaphoreTake+0x142>
 800ef22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef24:	2200      	movs	r2, #0
 800ef26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef30:	b25b      	sxtb	r3, r3
 800ef32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef36:	d103      	bne.n	800ef40 <xQueueSemaphoreTake+0x158>
 800ef38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef40:	f001 fb6c 	bl	801061c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ef44:	463a      	mov	r2, r7
 800ef46:	f107 030c 	add.w	r3, r7, #12
 800ef4a:	4611      	mov	r1, r2
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f000 feb5 	bl	800fcbc <xTaskCheckForTimeOut>
 800ef52:	4603      	mov	r3, r0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d132      	bne.n	800efbe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef5a:	f000 f9d2 	bl	800f302 <prvIsQueueEmpty>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d026      	beq.n	800efb2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ef64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d109      	bne.n	800ef80 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ef6c:	f001 fb24 	bl	80105b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800ef70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef72:	685b      	ldr	r3, [r3, #4]
 800ef74:	4618      	mov	r0, r3
 800ef76:	f000 ffeb 	bl	800ff50 <xTaskPriorityInherit>
 800ef7a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ef7c:	f001 fb4e 	bl	801061c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ef80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef82:	3324      	adds	r3, #36	; 0x24
 800ef84:	683a      	ldr	r2, [r7, #0]
 800ef86:	4611      	mov	r1, r2
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f000 fdf7 	bl	800fb7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ef8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef90:	f000 f965 	bl	800f25e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ef94:	f000 fba8 	bl	800f6e8 <xTaskResumeAll>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	f47f af67 	bne.w	800ee6e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800efa0:	4b18      	ldr	r3, [pc, #96]	; (800f004 <xQueueSemaphoreTake+0x21c>)
 800efa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efa6:	601a      	str	r2, [r3, #0]
 800efa8:	f3bf 8f4f 	dsb	sy
 800efac:	f3bf 8f6f 	isb	sy
 800efb0:	e75d      	b.n	800ee6e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800efb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efb4:	f000 f953 	bl	800f25e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800efb8:	f000 fb96 	bl	800f6e8 <xTaskResumeAll>
 800efbc:	e757      	b.n	800ee6e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800efbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efc0:	f000 f94d 	bl	800f25e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800efc4:	f000 fb90 	bl	800f6e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800efc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efca:	f000 f99a 	bl	800f302 <prvIsQueueEmpty>
 800efce:	4603      	mov	r3, r0
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	f43f af4c 	beq.w	800ee6e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800efd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d00d      	beq.n	800eff8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800efdc:	f001 faec 	bl	80105b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800efe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efe2:	f000 f894 	bl	800f10e <prvGetDisinheritPriorityAfterTimeout>
 800efe6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800efe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800efee:	4618      	mov	r0, r3
 800eff0:	f001 f8bc 	bl	801016c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800eff4:	f001 fb12 	bl	801061c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eff8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800effa:	4618      	mov	r0, r3
 800effc:	3738      	adds	r7, #56	; 0x38
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}
 800f002:	bf00      	nop
 800f004:	e000ed04 	.word	0xe000ed04

0800f008 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b08e      	sub	sp, #56	; 0x38
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d10b      	bne.n	800f036 <xQueueReceiveFromISR+0x2e>
 800f01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f022:	b672      	cpsid	i
 800f024:	f383 8811 	msr	BASEPRI, r3
 800f028:	f3bf 8f6f 	isb	sy
 800f02c:	f3bf 8f4f 	dsb	sy
 800f030:	b662      	cpsie	i
 800f032:	623b      	str	r3, [r7, #32]
 800f034:	e7fe      	b.n	800f034 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d103      	bne.n	800f044 <xQueueReceiveFromISR+0x3c>
 800f03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f040:	2b00      	cmp	r3, #0
 800f042:	d101      	bne.n	800f048 <xQueueReceiveFromISR+0x40>
 800f044:	2301      	movs	r3, #1
 800f046:	e000      	b.n	800f04a <xQueueReceiveFromISR+0x42>
 800f048:	2300      	movs	r3, #0
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d10b      	bne.n	800f066 <xQueueReceiveFromISR+0x5e>
 800f04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f052:	b672      	cpsid	i
 800f054:	f383 8811 	msr	BASEPRI, r3
 800f058:	f3bf 8f6f 	isb	sy
 800f05c:	f3bf 8f4f 	dsb	sy
 800f060:	b662      	cpsie	i
 800f062:	61fb      	str	r3, [r7, #28]
 800f064:	e7fe      	b.n	800f064 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f066:	f001 fb87 	bl	8010778 <vPortValidateInterruptPriority>
	__asm volatile
 800f06a:	f3ef 8211 	mrs	r2, BASEPRI
 800f06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f072:	b672      	cpsid	i
 800f074:	f383 8811 	msr	BASEPRI, r3
 800f078:	f3bf 8f6f 	isb	sy
 800f07c:	f3bf 8f4f 	dsb	sy
 800f080:	b662      	cpsie	i
 800f082:	61ba      	str	r2, [r7, #24]
 800f084:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f086:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f088:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f08e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f092:	2b00      	cmp	r3, #0
 800f094:	d02f      	beq.n	800f0f6 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f09c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f0a0:	68b9      	ldr	r1, [r7, #8]
 800f0a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0a4:	f000 f8b5 	bl	800f212 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0aa:	1e5a      	subs	r2, r3, #1
 800f0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f0b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b8:	d112      	bne.n	800f0e0 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0bc:	691b      	ldr	r3, [r3, #16]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d016      	beq.n	800f0f0 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c4:	3310      	adds	r3, #16
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f000 fd7e 	bl	800fbc8 <xTaskRemoveFromEventList>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d00e      	beq.n	800f0f0 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d00b      	beq.n	800f0f0 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2201      	movs	r2, #1
 800f0dc:	601a      	str	r2, [r3, #0]
 800f0de:	e007      	b.n	800f0f0 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f0e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	b2db      	uxtb	r3, r3
 800f0e8:	b25a      	sxtb	r2, r3
 800f0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	637b      	str	r3, [r7, #52]	; 0x34
 800f0f4:	e001      	b.n	800f0fa <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	637b      	str	r3, [r7, #52]	; 0x34
 800f0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f106:	4618      	mov	r0, r3
 800f108:	3738      	adds	r7, #56	; 0x38
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}

0800f10e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f10e:	b480      	push	{r7}
 800f110:	b085      	sub	sp, #20
 800f112:	af00      	add	r7, sp, #0
 800f114:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d006      	beq.n	800f12c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f1c3 0307 	rsb	r3, r3, #7
 800f128:	60fb      	str	r3, [r7, #12]
 800f12a:	e001      	b.n	800f130 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f12c:	2300      	movs	r3, #0
 800f12e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f130:	68fb      	ldr	r3, [r7, #12]
	}
 800f132:	4618      	mov	r0, r3
 800f134:	3714      	adds	r7, #20
 800f136:	46bd      	mov	sp, r7
 800f138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13c:	4770      	bx	lr

0800f13e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f13e:	b580      	push	{r7, lr}
 800f140:	b086      	sub	sp, #24
 800f142:	af00      	add	r7, sp, #0
 800f144:	60f8      	str	r0, [r7, #12]
 800f146:	60b9      	str	r1, [r7, #8]
 800f148:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f14a:	2300      	movs	r3, #0
 800f14c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f152:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d10d      	bne.n	800f178 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d14d      	bne.n	800f200 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	4618      	mov	r0, r3
 800f16a:	f000 ff77 	bl	801005c <xTaskPriorityDisinherit>
 800f16e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	2200      	movs	r2, #0
 800f174:	605a      	str	r2, [r3, #4]
 800f176:	e043      	b.n	800f200 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d119      	bne.n	800f1b2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	6898      	ldr	r0, [r3, #8]
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f186:	461a      	mov	r2, r3
 800f188:	68b9      	ldr	r1, [r7, #8]
 800f18a:	f012 f87f 	bl	802128c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	689a      	ldr	r2, [r3, #8]
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f196:	441a      	add	r2, r3
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	689a      	ldr	r2, [r3, #8]
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	685b      	ldr	r3, [r3, #4]
 800f1a4:	429a      	cmp	r2, r3
 800f1a6:	d32b      	bcc.n	800f200 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681a      	ldr	r2, [r3, #0]
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	609a      	str	r2, [r3, #8]
 800f1b0:	e026      	b.n	800f200 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	68d8      	ldr	r0, [r3, #12]
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1ba:	461a      	mov	r2, r3
 800f1bc:	68b9      	ldr	r1, [r7, #8]
 800f1be:	f012 f865 	bl	802128c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	68da      	ldr	r2, [r3, #12]
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1ca:	425b      	negs	r3, r3
 800f1cc:	441a      	add	r2, r3
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	68da      	ldr	r2, [r3, #12]
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d207      	bcs.n	800f1ee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	685a      	ldr	r2, [r3, #4]
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1e6:	425b      	negs	r3, r3
 800f1e8:	441a      	add	r2, r3
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2b02      	cmp	r3, #2
 800f1f2:	d105      	bne.n	800f200 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d002      	beq.n	800f200 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	3b01      	subs	r3, #1
 800f1fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	1c5a      	adds	r2, r3, #1
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f208:	697b      	ldr	r3, [r7, #20]
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3718      	adds	r7, #24
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}

0800f212 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f212:	b580      	push	{r7, lr}
 800f214:	b082      	sub	sp, #8
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
 800f21a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f220:	2b00      	cmp	r3, #0
 800f222:	d018      	beq.n	800f256 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	68da      	ldr	r2, [r3, #12]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f22c:	441a      	add	r2, r3
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	68da      	ldr	r2, [r3, #12]
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	685b      	ldr	r3, [r3, #4]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d303      	bcc.n	800f246 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681a      	ldr	r2, [r3, #0]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	68d9      	ldr	r1, [r3, #12]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f24e:	461a      	mov	r2, r3
 800f250:	6838      	ldr	r0, [r7, #0]
 800f252:	f012 f81b 	bl	802128c <memcpy>
	}
}
 800f256:	bf00      	nop
 800f258:	3708      	adds	r7, #8
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}

0800f25e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f25e:	b580      	push	{r7, lr}
 800f260:	b084      	sub	sp, #16
 800f262:	af00      	add	r7, sp, #0
 800f264:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f266:	f001 f9a7 	bl	80105b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f270:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f272:	e011      	b.n	800f298 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d012      	beq.n	800f2a2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	3324      	adds	r3, #36	; 0x24
 800f280:	4618      	mov	r0, r3
 800f282:	f000 fca1 	bl	800fbc8 <xTaskRemoveFromEventList>
 800f286:	4603      	mov	r3, r0
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d001      	beq.n	800f290 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f28c:	f000 fd7a 	bl	800fd84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f290:	7bfb      	ldrb	r3, [r7, #15]
 800f292:	3b01      	subs	r3, #1
 800f294:	b2db      	uxtb	r3, r3
 800f296:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	dce9      	bgt.n	800f274 <prvUnlockQueue+0x16>
 800f2a0:	e000      	b.n	800f2a4 <prvUnlockQueue+0x46>
					break;
 800f2a2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	22ff      	movs	r2, #255	; 0xff
 800f2a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f2ac:	f001 f9b6 	bl	801061c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f2b0:	f001 f982 	bl	80105b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f2ba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f2bc:	e011      	b.n	800f2e2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	691b      	ldr	r3, [r3, #16]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d012      	beq.n	800f2ec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	3310      	adds	r3, #16
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f000 fc7c 	bl	800fbc8 <xTaskRemoveFromEventList>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d001      	beq.n	800f2da <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f2d6:	f000 fd55 	bl	800fd84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f2da:	7bbb      	ldrb	r3, [r7, #14]
 800f2dc:	3b01      	subs	r3, #1
 800f2de:	b2db      	uxtb	r3, r3
 800f2e0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f2e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	dce9      	bgt.n	800f2be <prvUnlockQueue+0x60>
 800f2ea:	e000      	b.n	800f2ee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f2ec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	22ff      	movs	r2, #255	; 0xff
 800f2f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f2f6:	f001 f991 	bl	801061c <vPortExitCritical>
}
 800f2fa:	bf00      	nop
 800f2fc:	3710      	adds	r7, #16
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}

0800f302 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f302:	b580      	push	{r7, lr}
 800f304:	b084      	sub	sp, #16
 800f306:	af00      	add	r7, sp, #0
 800f308:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f30a:	f001 f955 	bl	80105b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f312:	2b00      	cmp	r3, #0
 800f314:	d102      	bne.n	800f31c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f316:	2301      	movs	r3, #1
 800f318:	60fb      	str	r3, [r7, #12]
 800f31a:	e001      	b.n	800f320 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f31c:	2300      	movs	r3, #0
 800f31e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f320:	f001 f97c 	bl	801061c <vPortExitCritical>

	return xReturn;
 800f324:	68fb      	ldr	r3, [r7, #12]
}
 800f326:	4618      	mov	r0, r3
 800f328:	3710      	adds	r7, #16
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}

0800f32e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f32e:	b580      	push	{r7, lr}
 800f330:	b084      	sub	sp, #16
 800f332:	af00      	add	r7, sp, #0
 800f334:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f336:	f001 f93f 	bl	80105b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f342:	429a      	cmp	r2, r3
 800f344:	d102      	bne.n	800f34c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f346:	2301      	movs	r3, #1
 800f348:	60fb      	str	r3, [r7, #12]
 800f34a:	e001      	b.n	800f350 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f34c:	2300      	movs	r3, #0
 800f34e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f350:	f001 f964 	bl	801061c <vPortExitCritical>

	return xReturn;
 800f354:	68fb      	ldr	r3, [r7, #12]
}
 800f356:	4618      	mov	r0, r3
 800f358:	3710      	adds	r7, #16
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b08c      	sub	sp, #48	; 0x30
 800f362:	af04      	add	r7, sp, #16
 800f364:	60f8      	str	r0, [r7, #12]
 800f366:	60b9      	str	r1, [r7, #8]
 800f368:	603b      	str	r3, [r7, #0]
 800f36a:	4613      	mov	r3, r2
 800f36c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f36e:	88fb      	ldrh	r3, [r7, #6]
 800f370:	009b      	lsls	r3, r3, #2
 800f372:	4618      	mov	r0, r3
 800f374:	f001 fa42 	bl	80107fc <pvPortMalloc>
 800f378:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d00e      	beq.n	800f39e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800f380:	2058      	movs	r0, #88	; 0x58
 800f382:	f001 fa3b 	bl	80107fc <pvPortMalloc>
 800f386:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f388:	69fb      	ldr	r3, [r7, #28]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d003      	beq.n	800f396 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f38e:	69fb      	ldr	r3, [r7, #28]
 800f390:	697a      	ldr	r2, [r7, #20]
 800f392:	631a      	str	r2, [r3, #48]	; 0x30
 800f394:	e005      	b.n	800f3a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f396:	6978      	ldr	r0, [r7, #20]
 800f398:	f001 fafc 	bl	8010994 <vPortFree>
 800f39c:	e001      	b.n	800f3a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f3a2:	69fb      	ldr	r3, [r7, #28]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d013      	beq.n	800f3d0 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f3a8:	88fa      	ldrh	r2, [r7, #6]
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	9303      	str	r3, [sp, #12]
 800f3ae:	69fb      	ldr	r3, [r7, #28]
 800f3b0:	9302      	str	r3, [sp, #8]
 800f3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b4:	9301      	str	r3, [sp, #4]
 800f3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b8:	9300      	str	r3, [sp, #0]
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	68b9      	ldr	r1, [r7, #8]
 800f3be:	68f8      	ldr	r0, [r7, #12]
 800f3c0:	f000 f80e 	bl	800f3e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f3c4:	69f8      	ldr	r0, [r7, #28]
 800f3c6:	f000 f897 	bl	800f4f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	61bb      	str	r3, [r7, #24]
 800f3ce:	e002      	b.n	800f3d6 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f3d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f3d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f3d6:	69bb      	ldr	r3, [r7, #24]
	}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3720      	adds	r7, #32
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}

0800f3e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b088      	sub	sp, #32
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	60f8      	str	r0, [r7, #12]
 800f3e8:	60b9      	str	r1, [r7, #8]
 800f3ea:	607a      	str	r2, [r7, #4]
 800f3ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	009b      	lsls	r3, r3, #2
 800f3f6:	461a      	mov	r2, r3
 800f3f8:	21a5      	movs	r1, #165	; 0xa5
 800f3fa:	f011 ff52 	bl	80212a2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800f3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f402:	6879      	ldr	r1, [r7, #4]
 800f404:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f408:	440b      	add	r3, r1
 800f40a:	009b      	lsls	r3, r3, #2
 800f40c:	4413      	add	r3, r2
 800f40e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800f410:	69bb      	ldr	r3, [r7, #24]
 800f412:	f023 0307 	bic.w	r3, r3, #7
 800f416:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f418:	69bb      	ldr	r3, [r7, #24]
 800f41a:	f003 0307 	and.w	r3, r3, #7
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d00b      	beq.n	800f43a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f426:	b672      	cpsid	i
 800f428:	f383 8811 	msr	BASEPRI, r3
 800f42c:	f3bf 8f6f 	isb	sy
 800f430:	f3bf 8f4f 	dsb	sy
 800f434:	b662      	cpsie	i
 800f436:	617b      	str	r3, [r7, #20]
 800f438:	e7fe      	b.n	800f438 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f43a:	2300      	movs	r3, #0
 800f43c:	61fb      	str	r3, [r7, #28]
 800f43e:	e012      	b.n	800f466 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f440:	68ba      	ldr	r2, [r7, #8]
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	4413      	add	r3, r2
 800f446:	7819      	ldrb	r1, [r3, #0]
 800f448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	4413      	add	r3, r2
 800f44e:	3334      	adds	r3, #52	; 0x34
 800f450:	460a      	mov	r2, r1
 800f452:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800f454:	68ba      	ldr	r2, [r7, #8]
 800f456:	69fb      	ldr	r3, [r7, #28]
 800f458:	4413      	add	r3, r2
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d006      	beq.n	800f46e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f460:	69fb      	ldr	r3, [r7, #28]
 800f462:	3301      	adds	r3, #1
 800f464:	61fb      	str	r3, [r7, #28]
 800f466:	69fb      	ldr	r3, [r7, #28]
 800f468:	2b0f      	cmp	r3, #15
 800f46a:	d9e9      	bls.n	800f440 <prvInitialiseNewTask+0x60>
 800f46c:	e000      	b.n	800f470 <prvInitialiseNewTask+0x90>
		{
			break;
 800f46e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f472:	2200      	movs	r2, #0
 800f474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47a:	2b06      	cmp	r3, #6
 800f47c:	d901      	bls.n	800f482 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f47e:	2306      	movs	r3, #6
 800f480:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f486:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f48a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f48c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f490:	2200      	movs	r2, #0
 800f492:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f496:	3304      	adds	r3, #4
 800f498:	4618      	mov	r0, r3
 800f49a:	f7ff f83b 	bl	800e514 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a0:	3318      	adds	r3, #24
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7ff f836 	bl	800e514 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b0:	f1c3 0207 	rsb	r2, r3, #7
 800f4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4bc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800f4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f4d2:	683a      	ldr	r2, [r7, #0]
 800f4d4:	68f9      	ldr	r1, [r7, #12]
 800f4d6:	69b8      	ldr	r0, [r7, #24]
 800f4d8:	f000 ff64 	bl	80103a4 <pxPortInitialiseStack>
 800f4dc:	4602      	mov	r2, r0
 800f4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800f4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d002      	beq.n	800f4ee <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f4ee:	bf00      	nop
 800f4f0:	3720      	adds	r7, #32
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}
	...

0800f4f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b082      	sub	sp, #8
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f500:	f001 f85a 	bl	80105b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f504:	4b2a      	ldr	r3, [pc, #168]	; (800f5b0 <prvAddNewTaskToReadyList+0xb8>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	3301      	adds	r3, #1
 800f50a:	4a29      	ldr	r2, [pc, #164]	; (800f5b0 <prvAddNewTaskToReadyList+0xb8>)
 800f50c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f50e:	4b29      	ldr	r3, [pc, #164]	; (800f5b4 <prvAddNewTaskToReadyList+0xbc>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d109      	bne.n	800f52a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f516:	4a27      	ldr	r2, [pc, #156]	; (800f5b4 <prvAddNewTaskToReadyList+0xbc>)
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f51c:	4b24      	ldr	r3, [pc, #144]	; (800f5b0 <prvAddNewTaskToReadyList+0xb8>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	2b01      	cmp	r3, #1
 800f522:	d110      	bne.n	800f546 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f524:	f000 fc54 	bl	800fdd0 <prvInitialiseTaskLists>
 800f528:	e00d      	b.n	800f546 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f52a:	4b23      	ldr	r3, [pc, #140]	; (800f5b8 <prvAddNewTaskToReadyList+0xc0>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d109      	bne.n	800f546 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f532:	4b20      	ldr	r3, [pc, #128]	; (800f5b4 <prvAddNewTaskToReadyList+0xbc>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f53c:	429a      	cmp	r2, r3
 800f53e:	d802      	bhi.n	800f546 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f540:	4a1c      	ldr	r2, [pc, #112]	; (800f5b4 <prvAddNewTaskToReadyList+0xbc>)
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f546:	4b1d      	ldr	r3, [pc, #116]	; (800f5bc <prvAddNewTaskToReadyList+0xc4>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	3301      	adds	r3, #1
 800f54c:	4a1b      	ldr	r2, [pc, #108]	; (800f5bc <prvAddNewTaskToReadyList+0xc4>)
 800f54e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f554:	2201      	movs	r2, #1
 800f556:	409a      	lsls	r2, r3
 800f558:	4b19      	ldr	r3, [pc, #100]	; (800f5c0 <prvAddNewTaskToReadyList+0xc8>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	4313      	orrs	r3, r2
 800f55e:	4a18      	ldr	r2, [pc, #96]	; (800f5c0 <prvAddNewTaskToReadyList+0xc8>)
 800f560:	6013      	str	r3, [r2, #0]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f566:	4613      	mov	r3, r2
 800f568:	009b      	lsls	r3, r3, #2
 800f56a:	4413      	add	r3, r2
 800f56c:	009b      	lsls	r3, r3, #2
 800f56e:	4a15      	ldr	r2, [pc, #84]	; (800f5c4 <prvAddNewTaskToReadyList+0xcc>)
 800f570:	441a      	add	r2, r3
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	3304      	adds	r3, #4
 800f576:	4619      	mov	r1, r3
 800f578:	4610      	mov	r0, r2
 800f57a:	f7fe ffd8 	bl	800e52e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f57e:	f001 f84d 	bl	801061c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f582:	4b0d      	ldr	r3, [pc, #52]	; (800f5b8 <prvAddNewTaskToReadyList+0xc0>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d00e      	beq.n	800f5a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f58a:	4b0a      	ldr	r3, [pc, #40]	; (800f5b4 <prvAddNewTaskToReadyList+0xbc>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f594:	429a      	cmp	r2, r3
 800f596:	d207      	bcs.n	800f5a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f598:	4b0b      	ldr	r3, [pc, #44]	; (800f5c8 <prvAddNewTaskToReadyList+0xd0>)
 800f59a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f59e:	601a      	str	r2, [r3, #0]
 800f5a0:	f3bf 8f4f 	dsb	sy
 800f5a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f5a8:	bf00      	nop
 800f5aa:	3708      	adds	r7, #8
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}
 800f5b0:	20000338 	.word	0x20000338
 800f5b4:	20000238 	.word	0x20000238
 800f5b8:	20000344 	.word	0x20000344
 800f5bc:	20000354 	.word	0x20000354
 800f5c0:	20000340 	.word	0x20000340
 800f5c4:	2000023c 	.word	0x2000023c
 800f5c8:	e000ed04 	.word	0xe000ed04

0800f5cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b084      	sub	sp, #16
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d018      	beq.n	800f610 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f5de:	4b14      	ldr	r3, [pc, #80]	; (800f630 <vTaskDelay+0x64>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d00b      	beq.n	800f5fe <vTaskDelay+0x32>
 800f5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ea:	b672      	cpsid	i
 800f5ec:	f383 8811 	msr	BASEPRI, r3
 800f5f0:	f3bf 8f6f 	isb	sy
 800f5f4:	f3bf 8f4f 	dsb	sy
 800f5f8:	b662      	cpsie	i
 800f5fa:	60bb      	str	r3, [r7, #8]
 800f5fc:	e7fe      	b.n	800f5fc <vTaskDelay+0x30>
			vTaskSuspendAll();
 800f5fe:	f000 f865 	bl	800f6cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f602:	2100      	movs	r1, #0
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f000 fe67 	bl	80102d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f60a:	f000 f86d 	bl	800f6e8 <xTaskResumeAll>
 800f60e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d107      	bne.n	800f626 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f616:	4b07      	ldr	r3, [pc, #28]	; (800f634 <vTaskDelay+0x68>)
 800f618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f61c:	601a      	str	r2, [r3, #0]
 800f61e:	f3bf 8f4f 	dsb	sy
 800f622:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f626:	bf00      	nop
 800f628:	3710      	adds	r7, #16
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}
 800f62e:	bf00      	nop
 800f630:	20000360 	.word	0x20000360
 800f634:	e000ed04 	.word	0xe000ed04

0800f638 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b086      	sub	sp, #24
 800f63c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800f63e:	4b1d      	ldr	r3, [pc, #116]	; (800f6b4 <vTaskStartScheduler+0x7c>)
 800f640:	9301      	str	r3, [sp, #4]
 800f642:	2300      	movs	r3, #0
 800f644:	9300      	str	r3, [sp, #0]
 800f646:	2300      	movs	r3, #0
 800f648:	2280      	movs	r2, #128	; 0x80
 800f64a:	491b      	ldr	r1, [pc, #108]	; (800f6b8 <vTaskStartScheduler+0x80>)
 800f64c:	481b      	ldr	r0, [pc, #108]	; (800f6bc <vTaskStartScheduler+0x84>)
 800f64e:	f7ff fe86 	bl	800f35e <xTaskCreate>
 800f652:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	2b01      	cmp	r3, #1
 800f658:	d117      	bne.n	800f68a <vTaskStartScheduler+0x52>
 800f65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f65e:	b672      	cpsid	i
 800f660:	f383 8811 	msr	BASEPRI, r3
 800f664:	f3bf 8f6f 	isb	sy
 800f668:	f3bf 8f4f 	dsb	sy
 800f66c:	b662      	cpsie	i
 800f66e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f670:	4b13      	ldr	r3, [pc, #76]	; (800f6c0 <vTaskStartScheduler+0x88>)
 800f672:	f04f 32ff 	mov.w	r2, #4294967295
 800f676:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f678:	4b12      	ldr	r3, [pc, #72]	; (800f6c4 <vTaskStartScheduler+0x8c>)
 800f67a:	2201      	movs	r2, #1
 800f67c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f67e:	4b12      	ldr	r3, [pc, #72]	; (800f6c8 <vTaskStartScheduler+0x90>)
 800f680:	2200      	movs	r2, #0
 800f682:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f684:	f000 ff1c 	bl	80104c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f688:	e00f      	b.n	800f6aa <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f690:	d10b      	bne.n	800f6aa <vTaskStartScheduler+0x72>
 800f692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f696:	b672      	cpsid	i
 800f698:	f383 8811 	msr	BASEPRI, r3
 800f69c:	f3bf 8f6f 	isb	sy
 800f6a0:	f3bf 8f4f 	dsb	sy
 800f6a4:	b662      	cpsie	i
 800f6a6:	607b      	str	r3, [r7, #4]
 800f6a8:	e7fe      	b.n	800f6a8 <vTaskStartScheduler+0x70>
}
 800f6aa:	bf00      	nop
 800f6ac:	3710      	adds	r7, #16
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}
 800f6b2:	bf00      	nop
 800f6b4:	2000035c 	.word	0x2000035c
 800f6b8:	08022404 	.word	0x08022404
 800f6bc:	0800fd9d 	.word	0x0800fd9d
 800f6c0:	20000358 	.word	0x20000358
 800f6c4:	20000344 	.word	0x20000344
 800f6c8:	2000033c 	.word	0x2000033c

0800f6cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f6d0:	4b04      	ldr	r3, [pc, #16]	; (800f6e4 <vTaskSuspendAll+0x18>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	4a03      	ldr	r2, [pc, #12]	; (800f6e4 <vTaskSuspendAll+0x18>)
 800f6d8:	6013      	str	r3, [r2, #0]
}
 800f6da:	bf00      	nop
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr
 800f6e4:	20000360 	.word	0x20000360

0800f6e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b084      	sub	sp, #16
 800f6ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f6f6:	4b42      	ldr	r3, [pc, #264]	; (800f800 <xTaskResumeAll+0x118>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d10b      	bne.n	800f716 <xTaskResumeAll+0x2e>
 800f6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f702:	b672      	cpsid	i
 800f704:	f383 8811 	msr	BASEPRI, r3
 800f708:	f3bf 8f6f 	isb	sy
 800f70c:	f3bf 8f4f 	dsb	sy
 800f710:	b662      	cpsie	i
 800f712:	603b      	str	r3, [r7, #0]
 800f714:	e7fe      	b.n	800f714 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f716:	f000 ff4f 	bl	80105b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f71a:	4b39      	ldr	r3, [pc, #228]	; (800f800 <xTaskResumeAll+0x118>)
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	3b01      	subs	r3, #1
 800f720:	4a37      	ldr	r2, [pc, #220]	; (800f800 <xTaskResumeAll+0x118>)
 800f722:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f724:	4b36      	ldr	r3, [pc, #216]	; (800f800 <xTaskResumeAll+0x118>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d161      	bne.n	800f7f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f72c:	4b35      	ldr	r3, [pc, #212]	; (800f804 <xTaskResumeAll+0x11c>)
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d05d      	beq.n	800f7f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f734:	e02e      	b.n	800f794 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f736:	4b34      	ldr	r3, [pc, #208]	; (800f808 <xTaskResumeAll+0x120>)
 800f738:	68db      	ldr	r3, [r3, #12]
 800f73a:	68db      	ldr	r3, [r3, #12]
 800f73c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	3318      	adds	r3, #24
 800f742:	4618      	mov	r0, r3
 800f744:	f7fe ff50 	bl	800e5e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	3304      	adds	r3, #4
 800f74c:	4618      	mov	r0, r3
 800f74e:	f7fe ff4b 	bl	800e5e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f756:	2201      	movs	r2, #1
 800f758:	409a      	lsls	r2, r3
 800f75a:	4b2c      	ldr	r3, [pc, #176]	; (800f80c <xTaskResumeAll+0x124>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	4313      	orrs	r3, r2
 800f760:	4a2a      	ldr	r2, [pc, #168]	; (800f80c <xTaskResumeAll+0x124>)
 800f762:	6013      	str	r3, [r2, #0]
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f768:	4613      	mov	r3, r2
 800f76a:	009b      	lsls	r3, r3, #2
 800f76c:	4413      	add	r3, r2
 800f76e:	009b      	lsls	r3, r3, #2
 800f770:	4a27      	ldr	r2, [pc, #156]	; (800f810 <xTaskResumeAll+0x128>)
 800f772:	441a      	add	r2, r3
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	3304      	adds	r3, #4
 800f778:	4619      	mov	r1, r3
 800f77a:	4610      	mov	r0, r2
 800f77c:	f7fe fed7 	bl	800e52e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f784:	4b23      	ldr	r3, [pc, #140]	; (800f814 <xTaskResumeAll+0x12c>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d302      	bcc.n	800f794 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f78e:	4b22      	ldr	r3, [pc, #136]	; (800f818 <xTaskResumeAll+0x130>)
 800f790:	2201      	movs	r2, #1
 800f792:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f794:	4b1c      	ldr	r3, [pc, #112]	; (800f808 <xTaskResumeAll+0x120>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d1cc      	bne.n	800f736 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d001      	beq.n	800f7a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f7a2:	f000 fb91 	bl	800fec8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f7a6:	4b1d      	ldr	r3, [pc, #116]	; (800f81c <xTaskResumeAll+0x134>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d010      	beq.n	800f7d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f7b2:	f000 f859 	bl	800f868 <xTaskIncrementTick>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d002      	beq.n	800f7c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f7bc:	4b16      	ldr	r3, [pc, #88]	; (800f818 <xTaskResumeAll+0x130>)
 800f7be:	2201      	movs	r2, #1
 800f7c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	3b01      	subs	r3, #1
 800f7c6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d1f1      	bne.n	800f7b2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800f7ce:	4b13      	ldr	r3, [pc, #76]	; (800f81c <xTaskResumeAll+0x134>)
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f7d4:	4b10      	ldr	r3, [pc, #64]	; (800f818 <xTaskResumeAll+0x130>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d009      	beq.n	800f7f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f7dc:	2301      	movs	r3, #1
 800f7de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f7e0:	4b0f      	ldr	r3, [pc, #60]	; (800f820 <xTaskResumeAll+0x138>)
 800f7e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7e6:	601a      	str	r2, [r3, #0]
 800f7e8:	f3bf 8f4f 	dsb	sy
 800f7ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f7f0:	f000 ff14 	bl	801061c <vPortExitCritical>

	return xAlreadyYielded;
 800f7f4:	68bb      	ldr	r3, [r7, #8]
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3710      	adds	r7, #16
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
 800f7fe:	bf00      	nop
 800f800:	20000360 	.word	0x20000360
 800f804:	20000338 	.word	0x20000338
 800f808:	200002f8 	.word	0x200002f8
 800f80c:	20000340 	.word	0x20000340
 800f810:	2000023c 	.word	0x2000023c
 800f814:	20000238 	.word	0x20000238
 800f818:	2000034c 	.word	0x2000034c
 800f81c:	20000348 	.word	0x20000348
 800f820:	e000ed04 	.word	0xe000ed04

0800f824 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f824:	b480      	push	{r7}
 800f826:	b083      	sub	sp, #12
 800f828:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f82a:	4b05      	ldr	r3, [pc, #20]	; (800f840 <xTaskGetTickCount+0x1c>)
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f830:	687b      	ldr	r3, [r7, #4]
}
 800f832:	4618      	mov	r0, r3
 800f834:	370c      	adds	r7, #12
 800f836:	46bd      	mov	sp, r7
 800f838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83c:	4770      	bx	lr
 800f83e:	bf00      	nop
 800f840:	2000033c 	.word	0x2000033c

0800f844 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f84a:	f000 ff95 	bl	8010778 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f84e:	2300      	movs	r3, #0
 800f850:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f852:	4b04      	ldr	r3, [pc, #16]	; (800f864 <xTaskGetTickCountFromISR+0x20>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f858:	683b      	ldr	r3, [r7, #0]
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3708      	adds	r7, #8
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
 800f862:	bf00      	nop
 800f864:	2000033c 	.word	0x2000033c

0800f868 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b086      	sub	sp, #24
 800f86c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f86e:	2300      	movs	r3, #0
 800f870:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f872:	4b51      	ldr	r3, [pc, #324]	; (800f9b8 <xTaskIncrementTick+0x150>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2b00      	cmp	r3, #0
 800f878:	f040 808e 	bne.w	800f998 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f87c:	4b4f      	ldr	r3, [pc, #316]	; (800f9bc <xTaskIncrementTick+0x154>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	3301      	adds	r3, #1
 800f882:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f884:	4a4d      	ldr	r2, [pc, #308]	; (800f9bc <xTaskIncrementTick+0x154>)
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f88a:	693b      	ldr	r3, [r7, #16]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d121      	bne.n	800f8d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f890:	4b4b      	ldr	r3, [pc, #300]	; (800f9c0 <xTaskIncrementTick+0x158>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d00b      	beq.n	800f8b2 <xTaskIncrementTick+0x4a>
 800f89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f89e:	b672      	cpsid	i
 800f8a0:	f383 8811 	msr	BASEPRI, r3
 800f8a4:	f3bf 8f6f 	isb	sy
 800f8a8:	f3bf 8f4f 	dsb	sy
 800f8ac:	b662      	cpsie	i
 800f8ae:	603b      	str	r3, [r7, #0]
 800f8b0:	e7fe      	b.n	800f8b0 <xTaskIncrementTick+0x48>
 800f8b2:	4b43      	ldr	r3, [pc, #268]	; (800f9c0 <xTaskIncrementTick+0x158>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	60fb      	str	r3, [r7, #12]
 800f8b8:	4b42      	ldr	r3, [pc, #264]	; (800f9c4 <xTaskIncrementTick+0x15c>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	4a40      	ldr	r2, [pc, #256]	; (800f9c0 <xTaskIncrementTick+0x158>)
 800f8be:	6013      	str	r3, [r2, #0]
 800f8c0:	4a40      	ldr	r2, [pc, #256]	; (800f9c4 <xTaskIncrementTick+0x15c>)
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	6013      	str	r3, [r2, #0]
 800f8c6:	4b40      	ldr	r3, [pc, #256]	; (800f9c8 <xTaskIncrementTick+0x160>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	4a3e      	ldr	r2, [pc, #248]	; (800f9c8 <xTaskIncrementTick+0x160>)
 800f8ce:	6013      	str	r3, [r2, #0]
 800f8d0:	f000 fafa 	bl	800fec8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f8d4:	4b3d      	ldr	r3, [pc, #244]	; (800f9cc <xTaskIncrementTick+0x164>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	693a      	ldr	r2, [r7, #16]
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d34d      	bcc.n	800f97a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f8de:	4b38      	ldr	r3, [pc, #224]	; (800f9c0 <xTaskIncrementTick+0x158>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d101      	bne.n	800f8ec <xTaskIncrementTick+0x84>
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	e000      	b.n	800f8ee <xTaskIncrementTick+0x86>
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d004      	beq.n	800f8fc <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8f2:	4b36      	ldr	r3, [pc, #216]	; (800f9cc <xTaskIncrementTick+0x164>)
 800f8f4:	f04f 32ff 	mov.w	r2, #4294967295
 800f8f8:	601a      	str	r2, [r3, #0]
					break;
 800f8fa:	e03e      	b.n	800f97a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f8fc:	4b30      	ldr	r3, [pc, #192]	; (800f9c0 <xTaskIncrementTick+0x158>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	68db      	ldr	r3, [r3, #12]
 800f902:	68db      	ldr	r3, [r3, #12]
 800f904:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	685b      	ldr	r3, [r3, #4]
 800f90a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f90c:	693a      	ldr	r2, [r7, #16]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	429a      	cmp	r2, r3
 800f912:	d203      	bcs.n	800f91c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f914:	4a2d      	ldr	r2, [pc, #180]	; (800f9cc <xTaskIncrementTick+0x164>)
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6013      	str	r3, [r2, #0]
						break;
 800f91a:	e02e      	b.n	800f97a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	3304      	adds	r3, #4
 800f920:	4618      	mov	r0, r3
 800f922:	f7fe fe61 	bl	800e5e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d004      	beq.n	800f938 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	3318      	adds	r3, #24
 800f932:	4618      	mov	r0, r3
 800f934:	f7fe fe58 	bl	800e5e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f93c:	2201      	movs	r2, #1
 800f93e:	409a      	lsls	r2, r3
 800f940:	4b23      	ldr	r3, [pc, #140]	; (800f9d0 <xTaskIncrementTick+0x168>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	4313      	orrs	r3, r2
 800f946:	4a22      	ldr	r2, [pc, #136]	; (800f9d0 <xTaskIncrementTick+0x168>)
 800f948:	6013      	str	r3, [r2, #0]
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f94e:	4613      	mov	r3, r2
 800f950:	009b      	lsls	r3, r3, #2
 800f952:	4413      	add	r3, r2
 800f954:	009b      	lsls	r3, r3, #2
 800f956:	4a1f      	ldr	r2, [pc, #124]	; (800f9d4 <xTaskIncrementTick+0x16c>)
 800f958:	441a      	add	r2, r3
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	3304      	adds	r3, #4
 800f95e:	4619      	mov	r1, r3
 800f960:	4610      	mov	r0, r2
 800f962:	f7fe fde4 	bl	800e52e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f96a:	4b1b      	ldr	r3, [pc, #108]	; (800f9d8 <xTaskIncrementTick+0x170>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f970:	429a      	cmp	r2, r3
 800f972:	d3b4      	bcc.n	800f8de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f974:	2301      	movs	r3, #1
 800f976:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f978:	e7b1      	b.n	800f8de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f97a:	4b17      	ldr	r3, [pc, #92]	; (800f9d8 <xTaskIncrementTick+0x170>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f980:	4914      	ldr	r1, [pc, #80]	; (800f9d4 <xTaskIncrementTick+0x16c>)
 800f982:	4613      	mov	r3, r2
 800f984:	009b      	lsls	r3, r3, #2
 800f986:	4413      	add	r3, r2
 800f988:	009b      	lsls	r3, r3, #2
 800f98a:	440b      	add	r3, r1
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	2b01      	cmp	r3, #1
 800f990:	d907      	bls.n	800f9a2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800f992:	2301      	movs	r3, #1
 800f994:	617b      	str	r3, [r7, #20]
 800f996:	e004      	b.n	800f9a2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f998:	4b10      	ldr	r3, [pc, #64]	; (800f9dc <xTaskIncrementTick+0x174>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	3301      	adds	r3, #1
 800f99e:	4a0f      	ldr	r2, [pc, #60]	; (800f9dc <xTaskIncrementTick+0x174>)
 800f9a0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f9a2:	4b0f      	ldr	r3, [pc, #60]	; (800f9e0 <xTaskIncrementTick+0x178>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d001      	beq.n	800f9ae <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f9ae:	697b      	ldr	r3, [r7, #20]
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3718      	adds	r7, #24
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}
 800f9b8:	20000360 	.word	0x20000360
 800f9bc:	2000033c 	.word	0x2000033c
 800f9c0:	200002f0 	.word	0x200002f0
 800f9c4:	200002f4 	.word	0x200002f4
 800f9c8:	20000350 	.word	0x20000350
 800f9cc:	20000358 	.word	0x20000358
 800f9d0:	20000340 	.word	0x20000340
 800f9d4:	2000023c 	.word	0x2000023c
 800f9d8:	20000238 	.word	0x20000238
 800f9dc:	20000348 	.word	0x20000348
 800f9e0:	2000034c 	.word	0x2000034c

0800f9e4 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b084      	sub	sp, #16
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d103      	bne.n	800f9fc <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800f9f4:	4b08      	ldr	r3, [pc, #32]	; (800fa18 <vTaskSetApplicationTaskTag+0x34>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	60fb      	str	r3, [r7, #12]
 800f9fa:	e001      	b.n	800fa00 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 800fa00:	f000 fdda 	bl	80105b8 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	683a      	ldr	r2, [r7, #0]
 800fa08:	64da      	str	r2, [r3, #76]	; 0x4c
		taskEXIT_CRITICAL();
 800fa0a:	f000 fe07 	bl	801061c <vPortExitCritical>
	}
 800fa0e:	bf00      	nop
 800fa10:	3710      	adds	r7, #16
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
 800fa16:	bf00      	nop
 800fa18:	20000238 	.word	0x20000238

0800fa1c <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b084      	sub	sp, #16
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
 800fa24:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d103      	bne.n	800fa34 <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800fa2c:	4b0b      	ldr	r3, [pc, #44]	; (800fa5c <xTaskCallApplicationTaskHook+0x40>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	60fb      	str	r3, [r7, #12]
 800fa32:	e001      	b.n	800fa38 <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d005      	beq.n	800fa4c <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa44:	6838      	ldr	r0, [r7, #0]
 800fa46:	4798      	blx	r3
 800fa48:	60b8      	str	r0, [r7, #8]
 800fa4a:	e001      	b.n	800fa50 <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 800fa50:	68bb      	ldr	r3, [r7, #8]
	}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3710      	adds	r7, #16
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}
 800fa5a:	bf00      	nop
 800fa5c:	20000238 	.word	0x20000238

0800fa60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b088      	sub	sp, #32
 800fa64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fa66:	4b40      	ldr	r3, [pc, #256]	; (800fb68 <vTaskSwitchContext+0x108>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d003      	beq.n	800fa76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fa6e:	4b3f      	ldr	r3, [pc, #252]	; (800fb6c <vTaskSwitchContext+0x10c>)
 800fa70:	2201      	movs	r2, #1
 800fa72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fa74:	e073      	b.n	800fb5e <vTaskSwitchContext+0xfe>
		xYieldPending = pdFALSE;
 800fa76:	4b3d      	ldr	r3, [pc, #244]	; (800fb6c <vTaskSwitchContext+0x10c>)
 800fa78:	2200      	movs	r2, #0
 800fa7a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800fa7c:	4b3c      	ldr	r3, [pc, #240]	; (800fb70 <vTaskSwitchContext+0x110>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	2101      	movs	r1, #1
 800fa82:	4618      	mov	r0, r3
 800fa84:	f7ff ffca 	bl	800fa1c <xTaskCallApplicationTaskHook>
		taskCHECK_FOR_STACK_OVERFLOW();
 800fa88:	4b39      	ldr	r3, [pc, #228]	; (800fb70 <vTaskSwitchContext+0x110>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa8e:	61fb      	str	r3, [r7, #28]
 800fa90:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800fa94:	61bb      	str	r3, [r7, #24]
 800fa96:	69fb      	ldr	r3, [r7, #28]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	69ba      	ldr	r2, [r7, #24]
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d111      	bne.n	800fac4 <vTaskSwitchContext+0x64>
 800faa0:	69fb      	ldr	r3, [r7, #28]
 800faa2:	3304      	adds	r3, #4
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	69ba      	ldr	r2, [r7, #24]
 800faa8:	429a      	cmp	r2, r3
 800faaa:	d10b      	bne.n	800fac4 <vTaskSwitchContext+0x64>
 800faac:	69fb      	ldr	r3, [r7, #28]
 800faae:	3308      	adds	r3, #8
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	69ba      	ldr	r2, [r7, #24]
 800fab4:	429a      	cmp	r2, r3
 800fab6:	d105      	bne.n	800fac4 <vTaskSwitchContext+0x64>
 800fab8:	69fb      	ldr	r3, [r7, #28]
 800faba:	330c      	adds	r3, #12
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	69ba      	ldr	r2, [r7, #24]
 800fac0:	429a      	cmp	r2, r3
 800fac2:	d008      	beq.n	800fad6 <vTaskSwitchContext+0x76>
 800fac4:	4b2a      	ldr	r3, [pc, #168]	; (800fb70 <vTaskSwitchContext+0x110>)
 800fac6:	681a      	ldr	r2, [r3, #0]
 800fac8:	4b29      	ldr	r3, [pc, #164]	; (800fb70 <vTaskSwitchContext+0x110>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	3334      	adds	r3, #52	; 0x34
 800face:	4619      	mov	r1, r3
 800fad0:	4610      	mov	r0, r2
 800fad2:	f7fe fb08 	bl	800e0e6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fad6:	4b27      	ldr	r3, [pc, #156]	; (800fb74 <vTaskSwitchContext+0x114>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	fab3 f383 	clz	r3, r3
 800fae2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fae4:	7afb      	ldrb	r3, [r7, #11]
 800fae6:	f1c3 031f 	rsb	r3, r3, #31
 800faea:	617b      	str	r3, [r7, #20]
 800faec:	4922      	ldr	r1, [pc, #136]	; (800fb78 <vTaskSwitchContext+0x118>)
 800faee:	697a      	ldr	r2, [r7, #20]
 800faf0:	4613      	mov	r3, r2
 800faf2:	009b      	lsls	r3, r3, #2
 800faf4:	4413      	add	r3, r2
 800faf6:	009b      	lsls	r3, r3, #2
 800faf8:	440b      	add	r3, r1
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d10b      	bne.n	800fb18 <vTaskSwitchContext+0xb8>
	__asm volatile
 800fb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb04:	b672      	cpsid	i
 800fb06:	f383 8811 	msr	BASEPRI, r3
 800fb0a:	f3bf 8f6f 	isb	sy
 800fb0e:	f3bf 8f4f 	dsb	sy
 800fb12:	b662      	cpsie	i
 800fb14:	607b      	str	r3, [r7, #4]
 800fb16:	e7fe      	b.n	800fb16 <vTaskSwitchContext+0xb6>
 800fb18:	697a      	ldr	r2, [r7, #20]
 800fb1a:	4613      	mov	r3, r2
 800fb1c:	009b      	lsls	r3, r3, #2
 800fb1e:	4413      	add	r3, r2
 800fb20:	009b      	lsls	r3, r3, #2
 800fb22:	4a15      	ldr	r2, [pc, #84]	; (800fb78 <vTaskSwitchContext+0x118>)
 800fb24:	4413      	add	r3, r2
 800fb26:	613b      	str	r3, [r7, #16]
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	685b      	ldr	r3, [r3, #4]
 800fb2c:	685a      	ldr	r2, [r3, #4]
 800fb2e:	693b      	ldr	r3, [r7, #16]
 800fb30:	605a      	str	r2, [r3, #4]
 800fb32:	693b      	ldr	r3, [r7, #16]
 800fb34:	685a      	ldr	r2, [r3, #4]
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	3308      	adds	r3, #8
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	d104      	bne.n	800fb48 <vTaskSwitchContext+0xe8>
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	685b      	ldr	r3, [r3, #4]
 800fb42:	685a      	ldr	r2, [r3, #4]
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	605a      	str	r2, [r3, #4]
 800fb48:	693b      	ldr	r3, [r7, #16]
 800fb4a:	685b      	ldr	r3, [r3, #4]
 800fb4c:	68db      	ldr	r3, [r3, #12]
 800fb4e:	4a08      	ldr	r2, [pc, #32]	; (800fb70 <vTaskSwitchContext+0x110>)
 800fb50:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800fb52:	4b07      	ldr	r3, [pc, #28]	; (800fb70 <vTaskSwitchContext+0x110>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	2100      	movs	r1, #0
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7ff ff5f 	bl	800fa1c <xTaskCallApplicationTaskHook>
}
 800fb5e:	bf00      	nop
 800fb60:	3720      	adds	r7, #32
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
 800fb66:	bf00      	nop
 800fb68:	20000360 	.word	0x20000360
 800fb6c:	2000034c 	.word	0x2000034c
 800fb70:	20000238 	.word	0x20000238
 800fb74:	20000340 	.word	0x20000340
 800fb78:	2000023c 	.word	0x2000023c

0800fb7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b084      	sub	sp, #16
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d10b      	bne.n	800fba4 <vTaskPlaceOnEventList+0x28>
 800fb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb90:	b672      	cpsid	i
 800fb92:	f383 8811 	msr	BASEPRI, r3
 800fb96:	f3bf 8f6f 	isb	sy
 800fb9a:	f3bf 8f4f 	dsb	sy
 800fb9e:	b662      	cpsie	i
 800fba0:	60fb      	str	r3, [r7, #12]
 800fba2:	e7fe      	b.n	800fba2 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fba4:	4b07      	ldr	r3, [pc, #28]	; (800fbc4 <vTaskPlaceOnEventList+0x48>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	3318      	adds	r3, #24
 800fbaa:	4619      	mov	r1, r3
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f7fe fce2 	bl	800e576 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fbb2:	2101      	movs	r1, #1
 800fbb4:	6838      	ldr	r0, [r7, #0]
 800fbb6:	f000 fb8f 	bl	80102d8 <prvAddCurrentTaskToDelayedList>
}
 800fbba:	bf00      	nop
 800fbbc:	3710      	adds	r7, #16
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}
 800fbc2:	bf00      	nop
 800fbc4:	20000238 	.word	0x20000238

0800fbc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b086      	sub	sp, #24
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	68db      	ldr	r3, [r3, #12]
 800fbd4:	68db      	ldr	r3, [r3, #12]
 800fbd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fbd8:	693b      	ldr	r3, [r7, #16]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d10b      	bne.n	800fbf6 <xTaskRemoveFromEventList+0x2e>
 800fbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe2:	b672      	cpsid	i
 800fbe4:	f383 8811 	msr	BASEPRI, r3
 800fbe8:	f3bf 8f6f 	isb	sy
 800fbec:	f3bf 8f4f 	dsb	sy
 800fbf0:	b662      	cpsie	i
 800fbf2:	60fb      	str	r3, [r7, #12]
 800fbf4:	e7fe      	b.n	800fbf4 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fbf6:	693b      	ldr	r3, [r7, #16]
 800fbf8:	3318      	adds	r3, #24
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f7fe fcf4 	bl	800e5e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc00:	4b1d      	ldr	r3, [pc, #116]	; (800fc78 <xTaskRemoveFromEventList+0xb0>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d11c      	bne.n	800fc42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	3304      	adds	r3, #4
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f7fe fceb 	bl	800e5e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fc12:	693b      	ldr	r3, [r7, #16]
 800fc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc16:	2201      	movs	r2, #1
 800fc18:	409a      	lsls	r2, r3
 800fc1a:	4b18      	ldr	r3, [pc, #96]	; (800fc7c <xTaskRemoveFromEventList+0xb4>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	4313      	orrs	r3, r2
 800fc20:	4a16      	ldr	r2, [pc, #88]	; (800fc7c <xTaskRemoveFromEventList+0xb4>)
 800fc22:	6013      	str	r3, [r2, #0]
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc28:	4613      	mov	r3, r2
 800fc2a:	009b      	lsls	r3, r3, #2
 800fc2c:	4413      	add	r3, r2
 800fc2e:	009b      	lsls	r3, r3, #2
 800fc30:	4a13      	ldr	r2, [pc, #76]	; (800fc80 <xTaskRemoveFromEventList+0xb8>)
 800fc32:	441a      	add	r2, r3
 800fc34:	693b      	ldr	r3, [r7, #16]
 800fc36:	3304      	adds	r3, #4
 800fc38:	4619      	mov	r1, r3
 800fc3a:	4610      	mov	r0, r2
 800fc3c:	f7fe fc77 	bl	800e52e <vListInsertEnd>
 800fc40:	e005      	b.n	800fc4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	3318      	adds	r3, #24
 800fc46:	4619      	mov	r1, r3
 800fc48:	480e      	ldr	r0, [pc, #56]	; (800fc84 <xTaskRemoveFromEventList+0xbc>)
 800fc4a:	f7fe fc70 	bl	800e52e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc52:	4b0d      	ldr	r3, [pc, #52]	; (800fc88 <xTaskRemoveFromEventList+0xc0>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	d905      	bls.n	800fc68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fc60:	4b0a      	ldr	r3, [pc, #40]	; (800fc8c <xTaskRemoveFromEventList+0xc4>)
 800fc62:	2201      	movs	r2, #1
 800fc64:	601a      	str	r2, [r3, #0]
 800fc66:	e001      	b.n	800fc6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800fc68:	2300      	movs	r3, #0
 800fc6a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800fc6c:	697b      	ldr	r3, [r7, #20]
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3718      	adds	r7, #24
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	bf00      	nop
 800fc78:	20000360 	.word	0x20000360
 800fc7c:	20000340 	.word	0x20000340
 800fc80:	2000023c 	.word	0x2000023c
 800fc84:	200002f8 	.word	0x200002f8
 800fc88:	20000238 	.word	0x20000238
 800fc8c:	2000034c 	.word	0x2000034c

0800fc90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fc90:	b480      	push	{r7}
 800fc92:	b083      	sub	sp, #12
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fc98:	4b06      	ldr	r3, [pc, #24]	; (800fcb4 <vTaskInternalSetTimeOutState+0x24>)
 800fc9a:	681a      	ldr	r2, [r3, #0]
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fca0:	4b05      	ldr	r3, [pc, #20]	; (800fcb8 <vTaskInternalSetTimeOutState+0x28>)
 800fca2:	681a      	ldr	r2, [r3, #0]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	605a      	str	r2, [r3, #4]
}
 800fca8:	bf00      	nop
 800fcaa:	370c      	adds	r7, #12
 800fcac:	46bd      	mov	sp, r7
 800fcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb2:	4770      	bx	lr
 800fcb4:	20000350 	.word	0x20000350
 800fcb8:	2000033c 	.word	0x2000033c

0800fcbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b088      	sub	sp, #32
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d10b      	bne.n	800fce4 <xTaskCheckForTimeOut+0x28>
 800fccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd0:	b672      	cpsid	i
 800fcd2:	f383 8811 	msr	BASEPRI, r3
 800fcd6:	f3bf 8f6f 	isb	sy
 800fcda:	f3bf 8f4f 	dsb	sy
 800fcde:	b662      	cpsie	i
 800fce0:	613b      	str	r3, [r7, #16]
 800fce2:	e7fe      	b.n	800fce2 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d10b      	bne.n	800fd02 <xTaskCheckForTimeOut+0x46>
 800fcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcee:	b672      	cpsid	i
 800fcf0:	f383 8811 	msr	BASEPRI, r3
 800fcf4:	f3bf 8f6f 	isb	sy
 800fcf8:	f3bf 8f4f 	dsb	sy
 800fcfc:	b662      	cpsie	i
 800fcfe:	60fb      	str	r3, [r7, #12]
 800fd00:	e7fe      	b.n	800fd00 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800fd02:	f000 fc59 	bl	80105b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fd06:	4b1d      	ldr	r3, [pc, #116]	; (800fd7c <xTaskCheckForTimeOut+0xc0>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	69ba      	ldr	r2, [r7, #24]
 800fd12:	1ad3      	subs	r3, r2, r3
 800fd14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd1e:	d102      	bne.n	800fd26 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fd20:	2300      	movs	r3, #0
 800fd22:	61fb      	str	r3, [r7, #28]
 800fd24:	e023      	b.n	800fd6e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681a      	ldr	r2, [r3, #0]
 800fd2a:	4b15      	ldr	r3, [pc, #84]	; (800fd80 <xTaskCheckForTimeOut+0xc4>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d007      	beq.n	800fd42 <xTaskCheckForTimeOut+0x86>
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	685b      	ldr	r3, [r3, #4]
 800fd36:	69ba      	ldr	r2, [r7, #24]
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d302      	bcc.n	800fd42 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fd3c:	2301      	movs	r3, #1
 800fd3e:	61fb      	str	r3, [r7, #28]
 800fd40:	e015      	b.n	800fd6e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	697a      	ldr	r2, [r7, #20]
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d20b      	bcs.n	800fd64 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	681a      	ldr	r2, [r3, #0]
 800fd50:	697b      	ldr	r3, [r7, #20]
 800fd52:	1ad2      	subs	r2, r2, r3
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f7ff ff99 	bl	800fc90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fd5e:	2300      	movs	r3, #0
 800fd60:	61fb      	str	r3, [r7, #28]
 800fd62:	e004      	b.n	800fd6e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	2200      	movs	r2, #0
 800fd68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fd6e:	f000 fc55 	bl	801061c <vPortExitCritical>

	return xReturn;
 800fd72:	69fb      	ldr	r3, [r7, #28]
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3720      	adds	r7, #32
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}
 800fd7c:	2000033c 	.word	0x2000033c
 800fd80:	20000350 	.word	0x20000350

0800fd84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fd84:	b480      	push	{r7}
 800fd86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fd88:	4b03      	ldr	r3, [pc, #12]	; (800fd98 <vTaskMissedYield+0x14>)
 800fd8a:	2201      	movs	r2, #1
 800fd8c:	601a      	str	r2, [r3, #0]
}
 800fd8e:	bf00      	nop
 800fd90:	46bd      	mov	sp, r7
 800fd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd96:	4770      	bx	lr
 800fd98:	2000034c 	.word	0x2000034c

0800fd9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b082      	sub	sp, #8
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fda4:	f000 f854 	bl	800fe50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fda8:	4b07      	ldr	r3, [pc, #28]	; (800fdc8 <prvIdleTask+0x2c>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	2b01      	cmp	r3, #1
 800fdae:	d907      	bls.n	800fdc0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800fdb0:	4b06      	ldr	r3, [pc, #24]	; (800fdcc <prvIdleTask+0x30>)
 800fdb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdb6:	601a      	str	r2, [r3, #0]
 800fdb8:	f3bf 8f4f 	dsb	sy
 800fdbc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800fdc0:	f7fe f99e 	bl	800e100 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800fdc4:	e7ee      	b.n	800fda4 <prvIdleTask+0x8>
 800fdc6:	bf00      	nop
 800fdc8:	2000023c 	.word	0x2000023c
 800fdcc:	e000ed04 	.word	0xe000ed04

0800fdd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b082      	sub	sp, #8
 800fdd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	607b      	str	r3, [r7, #4]
 800fdda:	e00c      	b.n	800fdf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fddc:	687a      	ldr	r2, [r7, #4]
 800fdde:	4613      	mov	r3, r2
 800fde0:	009b      	lsls	r3, r3, #2
 800fde2:	4413      	add	r3, r2
 800fde4:	009b      	lsls	r3, r3, #2
 800fde6:	4a12      	ldr	r2, [pc, #72]	; (800fe30 <prvInitialiseTaskLists+0x60>)
 800fde8:	4413      	add	r3, r2
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7fe fb72 	bl	800e4d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	3301      	adds	r3, #1
 800fdf4:	607b      	str	r3, [r7, #4]
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2b06      	cmp	r3, #6
 800fdfa:	d9ef      	bls.n	800fddc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fdfc:	480d      	ldr	r0, [pc, #52]	; (800fe34 <prvInitialiseTaskLists+0x64>)
 800fdfe:	f7fe fb69 	bl	800e4d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fe02:	480d      	ldr	r0, [pc, #52]	; (800fe38 <prvInitialiseTaskLists+0x68>)
 800fe04:	f7fe fb66 	bl	800e4d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fe08:	480c      	ldr	r0, [pc, #48]	; (800fe3c <prvInitialiseTaskLists+0x6c>)
 800fe0a:	f7fe fb63 	bl	800e4d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fe0e:	480c      	ldr	r0, [pc, #48]	; (800fe40 <prvInitialiseTaskLists+0x70>)
 800fe10:	f7fe fb60 	bl	800e4d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fe14:	480b      	ldr	r0, [pc, #44]	; (800fe44 <prvInitialiseTaskLists+0x74>)
 800fe16:	f7fe fb5d 	bl	800e4d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fe1a:	4b0b      	ldr	r3, [pc, #44]	; (800fe48 <prvInitialiseTaskLists+0x78>)
 800fe1c:	4a05      	ldr	r2, [pc, #20]	; (800fe34 <prvInitialiseTaskLists+0x64>)
 800fe1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fe20:	4b0a      	ldr	r3, [pc, #40]	; (800fe4c <prvInitialiseTaskLists+0x7c>)
 800fe22:	4a05      	ldr	r2, [pc, #20]	; (800fe38 <prvInitialiseTaskLists+0x68>)
 800fe24:	601a      	str	r2, [r3, #0]
}
 800fe26:	bf00      	nop
 800fe28:	3708      	adds	r7, #8
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}
 800fe2e:	bf00      	nop
 800fe30:	2000023c 	.word	0x2000023c
 800fe34:	200002c8 	.word	0x200002c8
 800fe38:	200002dc 	.word	0x200002dc
 800fe3c:	200002f8 	.word	0x200002f8
 800fe40:	2000030c 	.word	0x2000030c
 800fe44:	20000324 	.word	0x20000324
 800fe48:	200002f0 	.word	0x200002f0
 800fe4c:	200002f4 	.word	0x200002f4

0800fe50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b082      	sub	sp, #8
 800fe54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe56:	e019      	b.n	800fe8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fe58:	f000 fbae 	bl	80105b8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800fe5c:	4b0f      	ldr	r3, [pc, #60]	; (800fe9c <prvCheckTasksWaitingTermination+0x4c>)
 800fe5e:	68db      	ldr	r3, [r3, #12]
 800fe60:	68db      	ldr	r3, [r3, #12]
 800fe62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	3304      	adds	r3, #4
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f7fe fbbd 	bl	800e5e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fe6e:	4b0c      	ldr	r3, [pc, #48]	; (800fea0 <prvCheckTasksWaitingTermination+0x50>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	3b01      	subs	r3, #1
 800fe74:	4a0a      	ldr	r2, [pc, #40]	; (800fea0 <prvCheckTasksWaitingTermination+0x50>)
 800fe76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fe78:	4b0a      	ldr	r3, [pc, #40]	; (800fea4 <prvCheckTasksWaitingTermination+0x54>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	3b01      	subs	r3, #1
 800fe7e:	4a09      	ldr	r2, [pc, #36]	; (800fea4 <prvCheckTasksWaitingTermination+0x54>)
 800fe80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fe82:	f000 fbcb 	bl	801061c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f000 f80e 	bl	800fea8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe8c:	4b05      	ldr	r3, [pc, #20]	; (800fea4 <prvCheckTasksWaitingTermination+0x54>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d1e1      	bne.n	800fe58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fe94:	bf00      	nop
 800fe96:	3708      	adds	r7, #8
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	2000030c 	.word	0x2000030c
 800fea0:	20000338 	.word	0x20000338
 800fea4:	20000320 	.word	0x20000320

0800fea8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feb4:	4618      	mov	r0, r3
 800feb6:	f000 fd6d 	bl	8010994 <vPortFree>
			vPortFree( pxTCB );
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f000 fd6a 	bl	8010994 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fec0:	bf00      	nop
 800fec2:	3708      	adds	r7, #8
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fec8:	b480      	push	{r7}
 800feca:	b083      	sub	sp, #12
 800fecc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fece:	4b0f      	ldr	r3, [pc, #60]	; (800ff0c <prvResetNextTaskUnblockTime+0x44>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d101      	bne.n	800fedc <prvResetNextTaskUnblockTime+0x14>
 800fed8:	2301      	movs	r3, #1
 800feda:	e000      	b.n	800fede <prvResetNextTaskUnblockTime+0x16>
 800fedc:	2300      	movs	r3, #0
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d004      	beq.n	800feec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fee2:	4b0b      	ldr	r3, [pc, #44]	; (800ff10 <prvResetNextTaskUnblockTime+0x48>)
 800fee4:	f04f 32ff 	mov.w	r2, #4294967295
 800fee8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800feea:	e008      	b.n	800fefe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800feec:	4b07      	ldr	r3, [pc, #28]	; (800ff0c <prvResetNextTaskUnblockTime+0x44>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	68db      	ldr	r3, [r3, #12]
 800fef2:	68db      	ldr	r3, [r3, #12]
 800fef4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	685b      	ldr	r3, [r3, #4]
 800fefa:	4a05      	ldr	r2, [pc, #20]	; (800ff10 <prvResetNextTaskUnblockTime+0x48>)
 800fefc:	6013      	str	r3, [r2, #0]
}
 800fefe:	bf00      	nop
 800ff00:	370c      	adds	r7, #12
 800ff02:	46bd      	mov	sp, r7
 800ff04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff08:	4770      	bx	lr
 800ff0a:	bf00      	nop
 800ff0c:	200002f0 	.word	0x200002f0
 800ff10:	20000358 	.word	0x20000358

0800ff14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ff14:	b480      	push	{r7}
 800ff16:	b083      	sub	sp, #12
 800ff18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ff1a:	4b0b      	ldr	r3, [pc, #44]	; (800ff48 <xTaskGetSchedulerState+0x34>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d102      	bne.n	800ff28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ff22:	2301      	movs	r3, #1
 800ff24:	607b      	str	r3, [r7, #4]
 800ff26:	e008      	b.n	800ff3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff28:	4b08      	ldr	r3, [pc, #32]	; (800ff4c <xTaskGetSchedulerState+0x38>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d102      	bne.n	800ff36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ff30:	2302      	movs	r3, #2
 800ff32:	607b      	str	r3, [r7, #4]
 800ff34:	e001      	b.n	800ff3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ff36:	2300      	movs	r3, #0
 800ff38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ff3a:	687b      	ldr	r3, [r7, #4]
	}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	370c      	adds	r7, #12
 800ff40:	46bd      	mov	sp, r7
 800ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff46:	4770      	bx	lr
 800ff48:	20000344 	.word	0x20000344
 800ff4c:	20000360 	.word	0x20000360

0800ff50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b084      	sub	sp, #16
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d06e      	beq.n	8010044 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff6a:	4b39      	ldr	r3, [pc, #228]	; (8010050 <xTaskPriorityInherit+0x100>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d25e      	bcs.n	8010032 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	699b      	ldr	r3, [r3, #24]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	db06      	blt.n	800ff8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff7c:	4b34      	ldr	r3, [pc, #208]	; (8010050 <xTaskPriorityInherit+0x100>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff82:	f1c3 0207 	rsb	r2, r3, #7
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	6959      	ldr	r1, [r3, #20]
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff92:	4613      	mov	r3, r2
 800ff94:	009b      	lsls	r3, r3, #2
 800ff96:	4413      	add	r3, r2
 800ff98:	009b      	lsls	r3, r3, #2
 800ff9a:	4a2e      	ldr	r2, [pc, #184]	; (8010054 <xTaskPriorityInherit+0x104>)
 800ff9c:	4413      	add	r3, r2
 800ff9e:	4299      	cmp	r1, r3
 800ffa0:	d101      	bne.n	800ffa6 <xTaskPriorityInherit+0x56>
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	e000      	b.n	800ffa8 <xTaskPriorityInherit+0x58>
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d03a      	beq.n	8010022 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	3304      	adds	r3, #4
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7fe fb19 	bl	800e5e8 <uxListRemove>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d115      	bne.n	800ffe8 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffc0:	4924      	ldr	r1, [pc, #144]	; (8010054 <xTaskPriorityInherit+0x104>)
 800ffc2:	4613      	mov	r3, r2
 800ffc4:	009b      	lsls	r3, r3, #2
 800ffc6:	4413      	add	r3, r2
 800ffc8:	009b      	lsls	r3, r3, #2
 800ffca:	440b      	add	r3, r1
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d10a      	bne.n	800ffe8 <xTaskPriorityInherit+0x98>
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	fa02 f303 	lsl.w	r3, r2, r3
 800ffdc:	43da      	mvns	r2, r3
 800ffde:	4b1e      	ldr	r3, [pc, #120]	; (8010058 <xTaskPriorityInherit+0x108>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	4013      	ands	r3, r2
 800ffe4:	4a1c      	ldr	r2, [pc, #112]	; (8010058 <xTaskPriorityInherit+0x108>)
 800ffe6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ffe8:	4b19      	ldr	r3, [pc, #100]	; (8010050 <xTaskPriorityInherit+0x100>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffee:	68bb      	ldr	r3, [r7, #8]
 800fff0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fff6:	2201      	movs	r2, #1
 800fff8:	409a      	lsls	r2, r3
 800fffa:	4b17      	ldr	r3, [pc, #92]	; (8010058 <xTaskPriorityInherit+0x108>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	4313      	orrs	r3, r2
 8010000:	4a15      	ldr	r2, [pc, #84]	; (8010058 <xTaskPriorityInherit+0x108>)
 8010002:	6013      	str	r3, [r2, #0]
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010008:	4613      	mov	r3, r2
 801000a:	009b      	lsls	r3, r3, #2
 801000c:	4413      	add	r3, r2
 801000e:	009b      	lsls	r3, r3, #2
 8010010:	4a10      	ldr	r2, [pc, #64]	; (8010054 <xTaskPriorityInherit+0x104>)
 8010012:	441a      	add	r2, r3
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	3304      	adds	r3, #4
 8010018:	4619      	mov	r1, r3
 801001a:	4610      	mov	r0, r2
 801001c:	f7fe fa87 	bl	800e52e <vListInsertEnd>
 8010020:	e004      	b.n	801002c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010022:	4b0b      	ldr	r3, [pc, #44]	; (8010050 <xTaskPriorityInherit+0x100>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801002c:	2301      	movs	r3, #1
 801002e:	60fb      	str	r3, [r7, #12]
 8010030:	e008      	b.n	8010044 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010036:	4b06      	ldr	r3, [pc, #24]	; (8010050 <xTaskPriorityInherit+0x100>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801003c:	429a      	cmp	r2, r3
 801003e:	d201      	bcs.n	8010044 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010040:	2301      	movs	r3, #1
 8010042:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010044:	68fb      	ldr	r3, [r7, #12]
	}
 8010046:	4618      	mov	r0, r3
 8010048:	3710      	adds	r7, #16
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}
 801004e:	bf00      	nop
 8010050:	20000238 	.word	0x20000238
 8010054:	2000023c 	.word	0x2000023c
 8010058:	20000340 	.word	0x20000340

0801005c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801005c:	b580      	push	{r7, lr}
 801005e:	b086      	sub	sp, #24
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010068:	2300      	movs	r3, #0
 801006a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d070      	beq.n	8010154 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010072:	4b3b      	ldr	r3, [pc, #236]	; (8010160 <xTaskPriorityDisinherit+0x104>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	693a      	ldr	r2, [r7, #16]
 8010078:	429a      	cmp	r2, r3
 801007a:	d00b      	beq.n	8010094 <xTaskPriorityDisinherit+0x38>
 801007c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010080:	b672      	cpsid	i
 8010082:	f383 8811 	msr	BASEPRI, r3
 8010086:	f3bf 8f6f 	isb	sy
 801008a:	f3bf 8f4f 	dsb	sy
 801008e:	b662      	cpsie	i
 8010090:	60fb      	str	r3, [r7, #12]
 8010092:	e7fe      	b.n	8010092 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010098:	2b00      	cmp	r3, #0
 801009a:	d10b      	bne.n	80100b4 <xTaskPriorityDisinherit+0x58>
 801009c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a0:	b672      	cpsid	i
 80100a2:	f383 8811 	msr	BASEPRI, r3
 80100a6:	f3bf 8f6f 	isb	sy
 80100aa:	f3bf 8f4f 	dsb	sy
 80100ae:	b662      	cpsie	i
 80100b0:	60bb      	str	r3, [r7, #8]
 80100b2:	e7fe      	b.n	80100b2 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80100b8:	1e5a      	subs	r2, r3, #1
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80100be:	693b      	ldr	r3, [r7, #16]
 80100c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d044      	beq.n	8010154 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d140      	bne.n	8010154 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	3304      	adds	r3, #4
 80100d6:	4618      	mov	r0, r3
 80100d8:	f7fe fa86 	bl	800e5e8 <uxListRemove>
 80100dc:	4603      	mov	r3, r0
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d115      	bne.n	801010e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80100e2:	693b      	ldr	r3, [r7, #16]
 80100e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100e6:	491f      	ldr	r1, [pc, #124]	; (8010164 <xTaskPriorityDisinherit+0x108>)
 80100e8:	4613      	mov	r3, r2
 80100ea:	009b      	lsls	r3, r3, #2
 80100ec:	4413      	add	r3, r2
 80100ee:	009b      	lsls	r3, r3, #2
 80100f0:	440b      	add	r3, r1
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d10a      	bne.n	801010e <xTaskPriorityDisinherit+0xb2>
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100fc:	2201      	movs	r2, #1
 80100fe:	fa02 f303 	lsl.w	r3, r2, r3
 8010102:	43da      	mvns	r2, r3
 8010104:	4b18      	ldr	r3, [pc, #96]	; (8010168 <xTaskPriorityDisinherit+0x10c>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4013      	ands	r3, r2
 801010a:	4a17      	ldr	r2, [pc, #92]	; (8010168 <xTaskPriorityDisinherit+0x10c>)
 801010c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010112:	693b      	ldr	r3, [r7, #16]
 8010114:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010116:	693b      	ldr	r3, [r7, #16]
 8010118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801011a:	f1c3 0207 	rsb	r2, r3, #7
 801011e:	693b      	ldr	r3, [r7, #16]
 8010120:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010126:	2201      	movs	r2, #1
 8010128:	409a      	lsls	r2, r3
 801012a:	4b0f      	ldr	r3, [pc, #60]	; (8010168 <xTaskPriorityDisinherit+0x10c>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	4313      	orrs	r3, r2
 8010130:	4a0d      	ldr	r2, [pc, #52]	; (8010168 <xTaskPriorityDisinherit+0x10c>)
 8010132:	6013      	str	r3, [r2, #0]
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010138:	4613      	mov	r3, r2
 801013a:	009b      	lsls	r3, r3, #2
 801013c:	4413      	add	r3, r2
 801013e:	009b      	lsls	r3, r3, #2
 8010140:	4a08      	ldr	r2, [pc, #32]	; (8010164 <xTaskPriorityDisinherit+0x108>)
 8010142:	441a      	add	r2, r3
 8010144:	693b      	ldr	r3, [r7, #16]
 8010146:	3304      	adds	r3, #4
 8010148:	4619      	mov	r1, r3
 801014a:	4610      	mov	r0, r2
 801014c:	f7fe f9ef 	bl	800e52e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010150:	2301      	movs	r3, #1
 8010152:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010154:	697b      	ldr	r3, [r7, #20]
	}
 8010156:	4618      	mov	r0, r3
 8010158:	3718      	adds	r7, #24
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
 801015e:	bf00      	nop
 8010160:	20000238 	.word	0x20000238
 8010164:	2000023c 	.word	0x2000023c
 8010168:	20000340 	.word	0x20000340

0801016c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801016c:	b580      	push	{r7, lr}
 801016e:	b088      	sub	sp, #32
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
 8010174:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801017a:	2301      	movs	r3, #1
 801017c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	2b00      	cmp	r3, #0
 8010182:	f000 808a 	beq.w	801029a <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010186:	69bb      	ldr	r3, [r7, #24]
 8010188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801018a:	2b00      	cmp	r3, #0
 801018c:	d10b      	bne.n	80101a6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 801018e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010192:	b672      	cpsid	i
 8010194:	f383 8811 	msr	BASEPRI, r3
 8010198:	f3bf 8f6f 	isb	sy
 801019c:	f3bf 8f4f 	dsb	sy
 80101a0:	b662      	cpsie	i
 80101a2:	60fb      	str	r3, [r7, #12]
 80101a4:	e7fe      	b.n	80101a4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80101a6:	69bb      	ldr	r3, [r7, #24]
 80101a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101aa:	683a      	ldr	r2, [r7, #0]
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d902      	bls.n	80101b6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	61fb      	str	r3, [r7, #28]
 80101b4:	e002      	b.n	80101bc <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80101b6:	69bb      	ldr	r3, [r7, #24]
 80101b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101ba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80101bc:	69bb      	ldr	r3, [r7, #24]
 80101be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101c0:	69fa      	ldr	r2, [r7, #28]
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d069      	beq.n	801029a <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80101c6:	69bb      	ldr	r3, [r7, #24]
 80101c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80101ca:	697a      	ldr	r2, [r7, #20]
 80101cc:	429a      	cmp	r2, r3
 80101ce:	d164      	bne.n	801029a <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80101d0:	4b34      	ldr	r3, [pc, #208]	; (80102a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	69ba      	ldr	r2, [r7, #24]
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d10b      	bne.n	80101f2 <vTaskPriorityDisinheritAfterTimeout+0x86>
 80101da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101de:	b672      	cpsid	i
 80101e0:	f383 8811 	msr	BASEPRI, r3
 80101e4:	f3bf 8f6f 	isb	sy
 80101e8:	f3bf 8f4f 	dsb	sy
 80101ec:	b662      	cpsie	i
 80101ee:	60bb      	str	r3, [r7, #8]
 80101f0:	e7fe      	b.n	80101f0 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80101f2:	69bb      	ldr	r3, [r7, #24]
 80101f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101f6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80101f8:	69bb      	ldr	r3, [r7, #24]
 80101fa:	69fa      	ldr	r2, [r7, #28]
 80101fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80101fe:	69bb      	ldr	r3, [r7, #24]
 8010200:	699b      	ldr	r3, [r3, #24]
 8010202:	2b00      	cmp	r3, #0
 8010204:	db04      	blt.n	8010210 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010206:	69fb      	ldr	r3, [r7, #28]
 8010208:	f1c3 0207 	rsb	r2, r3, #7
 801020c:	69bb      	ldr	r3, [r7, #24]
 801020e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010210:	69bb      	ldr	r3, [r7, #24]
 8010212:	6959      	ldr	r1, [r3, #20]
 8010214:	693a      	ldr	r2, [r7, #16]
 8010216:	4613      	mov	r3, r2
 8010218:	009b      	lsls	r3, r3, #2
 801021a:	4413      	add	r3, r2
 801021c:	009b      	lsls	r3, r3, #2
 801021e:	4a22      	ldr	r2, [pc, #136]	; (80102a8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8010220:	4413      	add	r3, r2
 8010222:	4299      	cmp	r1, r3
 8010224:	d101      	bne.n	801022a <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8010226:	2301      	movs	r3, #1
 8010228:	e000      	b.n	801022c <vTaskPriorityDisinheritAfterTimeout+0xc0>
 801022a:	2300      	movs	r3, #0
 801022c:	2b00      	cmp	r3, #0
 801022e:	d034      	beq.n	801029a <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010230:	69bb      	ldr	r3, [r7, #24]
 8010232:	3304      	adds	r3, #4
 8010234:	4618      	mov	r0, r3
 8010236:	f7fe f9d7 	bl	800e5e8 <uxListRemove>
 801023a:	4603      	mov	r3, r0
 801023c:	2b00      	cmp	r3, #0
 801023e:	d115      	bne.n	801026c <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010240:	69bb      	ldr	r3, [r7, #24]
 8010242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010244:	4918      	ldr	r1, [pc, #96]	; (80102a8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8010246:	4613      	mov	r3, r2
 8010248:	009b      	lsls	r3, r3, #2
 801024a:	4413      	add	r3, r2
 801024c:	009b      	lsls	r3, r3, #2
 801024e:	440b      	add	r3, r1
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d10a      	bne.n	801026c <vTaskPriorityDisinheritAfterTimeout+0x100>
 8010256:	69bb      	ldr	r3, [r7, #24]
 8010258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801025a:	2201      	movs	r2, #1
 801025c:	fa02 f303 	lsl.w	r3, r2, r3
 8010260:	43da      	mvns	r2, r3
 8010262:	4b12      	ldr	r3, [pc, #72]	; (80102ac <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	4013      	ands	r3, r2
 8010268:	4a10      	ldr	r2, [pc, #64]	; (80102ac <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801026a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801026c:	69bb      	ldr	r3, [r7, #24]
 801026e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010270:	2201      	movs	r2, #1
 8010272:	409a      	lsls	r2, r3
 8010274:	4b0d      	ldr	r3, [pc, #52]	; (80102ac <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	4313      	orrs	r3, r2
 801027a:	4a0c      	ldr	r2, [pc, #48]	; (80102ac <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801027c:	6013      	str	r3, [r2, #0]
 801027e:	69bb      	ldr	r3, [r7, #24]
 8010280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010282:	4613      	mov	r3, r2
 8010284:	009b      	lsls	r3, r3, #2
 8010286:	4413      	add	r3, r2
 8010288:	009b      	lsls	r3, r3, #2
 801028a:	4a07      	ldr	r2, [pc, #28]	; (80102a8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801028c:	441a      	add	r2, r3
 801028e:	69bb      	ldr	r3, [r7, #24]
 8010290:	3304      	adds	r3, #4
 8010292:	4619      	mov	r1, r3
 8010294:	4610      	mov	r0, r2
 8010296:	f7fe f94a 	bl	800e52e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801029a:	bf00      	nop
 801029c:	3720      	adds	r7, #32
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop
 80102a4:	20000238 	.word	0x20000238
 80102a8:	2000023c 	.word	0x2000023c
 80102ac:	20000340 	.word	0x20000340

080102b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80102b0:	b480      	push	{r7}
 80102b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80102b4:	4b07      	ldr	r3, [pc, #28]	; (80102d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d004      	beq.n	80102c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80102bc:	4b05      	ldr	r3, [pc, #20]	; (80102d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80102c2:	3201      	adds	r2, #1
 80102c4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80102c6:	4b03      	ldr	r3, [pc, #12]	; (80102d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80102c8:	681b      	ldr	r3, [r3, #0]
	}
 80102ca:	4618      	mov	r0, r3
 80102cc:	46bd      	mov	sp, r7
 80102ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d2:	4770      	bx	lr
 80102d4:	20000238 	.word	0x20000238

080102d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b084      	sub	sp, #16
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80102e2:	4b29      	ldr	r3, [pc, #164]	; (8010388 <prvAddCurrentTaskToDelayedList+0xb0>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80102e8:	4b28      	ldr	r3, [pc, #160]	; (801038c <prvAddCurrentTaskToDelayedList+0xb4>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	3304      	adds	r3, #4
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7fe f97a 	bl	800e5e8 <uxListRemove>
 80102f4:	4603      	mov	r3, r0
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d10b      	bne.n	8010312 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80102fa:	4b24      	ldr	r3, [pc, #144]	; (801038c <prvAddCurrentTaskToDelayedList+0xb4>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010300:	2201      	movs	r2, #1
 8010302:	fa02 f303 	lsl.w	r3, r2, r3
 8010306:	43da      	mvns	r2, r3
 8010308:	4b21      	ldr	r3, [pc, #132]	; (8010390 <prvAddCurrentTaskToDelayedList+0xb8>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	4013      	ands	r3, r2
 801030e:	4a20      	ldr	r2, [pc, #128]	; (8010390 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010310:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010318:	d10a      	bne.n	8010330 <prvAddCurrentTaskToDelayedList+0x58>
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d007      	beq.n	8010330 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010320:	4b1a      	ldr	r3, [pc, #104]	; (801038c <prvAddCurrentTaskToDelayedList+0xb4>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	3304      	adds	r3, #4
 8010326:	4619      	mov	r1, r3
 8010328:	481a      	ldr	r0, [pc, #104]	; (8010394 <prvAddCurrentTaskToDelayedList+0xbc>)
 801032a:	f7fe f900 	bl	800e52e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801032e:	e026      	b.n	801037e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010330:	68fa      	ldr	r2, [r7, #12]
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	4413      	add	r3, r2
 8010336:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010338:	4b14      	ldr	r3, [pc, #80]	; (801038c <prvAddCurrentTaskToDelayedList+0xb4>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	68ba      	ldr	r2, [r7, #8]
 801033e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010340:	68ba      	ldr	r2, [r7, #8]
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	429a      	cmp	r2, r3
 8010346:	d209      	bcs.n	801035c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010348:	4b13      	ldr	r3, [pc, #76]	; (8010398 <prvAddCurrentTaskToDelayedList+0xc0>)
 801034a:	681a      	ldr	r2, [r3, #0]
 801034c:	4b0f      	ldr	r3, [pc, #60]	; (801038c <prvAddCurrentTaskToDelayedList+0xb4>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	3304      	adds	r3, #4
 8010352:	4619      	mov	r1, r3
 8010354:	4610      	mov	r0, r2
 8010356:	f7fe f90e 	bl	800e576 <vListInsert>
}
 801035a:	e010      	b.n	801037e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801035c:	4b0f      	ldr	r3, [pc, #60]	; (801039c <prvAddCurrentTaskToDelayedList+0xc4>)
 801035e:	681a      	ldr	r2, [r3, #0]
 8010360:	4b0a      	ldr	r3, [pc, #40]	; (801038c <prvAddCurrentTaskToDelayedList+0xb4>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	3304      	adds	r3, #4
 8010366:	4619      	mov	r1, r3
 8010368:	4610      	mov	r0, r2
 801036a:	f7fe f904 	bl	800e576 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801036e:	4b0c      	ldr	r3, [pc, #48]	; (80103a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	68ba      	ldr	r2, [r7, #8]
 8010374:	429a      	cmp	r2, r3
 8010376:	d202      	bcs.n	801037e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010378:	4a09      	ldr	r2, [pc, #36]	; (80103a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	6013      	str	r3, [r2, #0]
}
 801037e:	bf00      	nop
 8010380:	3710      	adds	r7, #16
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}
 8010386:	bf00      	nop
 8010388:	2000033c 	.word	0x2000033c
 801038c:	20000238 	.word	0x20000238
 8010390:	20000340 	.word	0x20000340
 8010394:	20000324 	.word	0x20000324
 8010398:	200002f4 	.word	0x200002f4
 801039c:	200002f0 	.word	0x200002f0
 80103a0:	20000358 	.word	0x20000358

080103a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80103a4:	b480      	push	{r7}
 80103a6:	b085      	sub	sp, #20
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	60f8      	str	r0, [r7, #12]
 80103ac:	60b9      	str	r1, [r7, #8]
 80103ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	3b04      	subs	r3, #4
 80103b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80103bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	3b04      	subs	r3, #4
 80103c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	f023 0201 	bic.w	r2, r3, #1
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	3b04      	subs	r3, #4
 80103d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80103d4:	4a0c      	ldr	r2, [pc, #48]	; (8010408 <pxPortInitialiseStack+0x64>)
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	3b14      	subs	r3, #20
 80103de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80103e0:	687a      	ldr	r2, [r7, #4]
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	3b04      	subs	r3, #4
 80103ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	f06f 0202 	mvn.w	r2, #2
 80103f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	3b20      	subs	r3, #32
 80103f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80103fa:	68fb      	ldr	r3, [r7, #12]
}
 80103fc:	4618      	mov	r0, r3
 80103fe:	3714      	adds	r7, #20
 8010400:	46bd      	mov	sp, r7
 8010402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010406:	4770      	bx	lr
 8010408:	0801040d 	.word	0x0801040d

0801040c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801040c:	b480      	push	{r7}
 801040e:	b085      	sub	sp, #20
 8010410:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010412:	2300      	movs	r3, #0
 8010414:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010416:	4b13      	ldr	r3, [pc, #76]	; (8010464 <prvTaskExitError+0x58>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801041e:	d00b      	beq.n	8010438 <prvTaskExitError+0x2c>
 8010420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010424:	b672      	cpsid	i
 8010426:	f383 8811 	msr	BASEPRI, r3
 801042a:	f3bf 8f6f 	isb	sy
 801042e:	f3bf 8f4f 	dsb	sy
 8010432:	b662      	cpsie	i
 8010434:	60fb      	str	r3, [r7, #12]
 8010436:	e7fe      	b.n	8010436 <prvTaskExitError+0x2a>
 8010438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801043c:	b672      	cpsid	i
 801043e:	f383 8811 	msr	BASEPRI, r3
 8010442:	f3bf 8f6f 	isb	sy
 8010446:	f3bf 8f4f 	dsb	sy
 801044a:	b662      	cpsie	i
 801044c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801044e:	bf00      	nop
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d0fc      	beq.n	8010450 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010456:	bf00      	nop
 8010458:	3714      	adds	r7, #20
 801045a:	46bd      	mov	sp, r7
 801045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010460:	4770      	bx	lr
 8010462:	bf00      	nop
 8010464:	2000002c 	.word	0x2000002c
	...

08010470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010470:	4b07      	ldr	r3, [pc, #28]	; (8010490 <pxCurrentTCBConst2>)
 8010472:	6819      	ldr	r1, [r3, #0]
 8010474:	6808      	ldr	r0, [r1, #0]
 8010476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801047a:	f380 8809 	msr	PSP, r0
 801047e:	f3bf 8f6f 	isb	sy
 8010482:	f04f 0000 	mov.w	r0, #0
 8010486:	f380 8811 	msr	BASEPRI, r0
 801048a:	4770      	bx	lr
 801048c:	f3af 8000 	nop.w

08010490 <pxCurrentTCBConst2>:
 8010490:	20000238 	.word	0x20000238
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010494:	bf00      	nop
 8010496:	bf00      	nop

08010498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010498:	4808      	ldr	r0, [pc, #32]	; (80104bc <prvPortStartFirstTask+0x24>)
 801049a:	6800      	ldr	r0, [r0, #0]
 801049c:	6800      	ldr	r0, [r0, #0]
 801049e:	f380 8808 	msr	MSP, r0
 80104a2:	f04f 0000 	mov.w	r0, #0
 80104a6:	f380 8814 	msr	CONTROL, r0
 80104aa:	b662      	cpsie	i
 80104ac:	b661      	cpsie	f
 80104ae:	f3bf 8f4f 	dsb	sy
 80104b2:	f3bf 8f6f 	isb	sy
 80104b6:	df00      	svc	0
 80104b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80104ba:	bf00      	nop
 80104bc:	e000ed08 	.word	0xe000ed08

080104c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b084      	sub	sp, #16
 80104c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80104c6:	4b36      	ldr	r3, [pc, #216]	; (80105a0 <xPortStartScheduler+0xe0>)
 80104c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	b2db      	uxtb	r3, r3
 80104d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	22ff      	movs	r2, #255	; 0xff
 80104d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	b2db      	uxtb	r3, r3
 80104de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80104e0:	78fb      	ldrb	r3, [r7, #3]
 80104e2:	b2db      	uxtb	r3, r3
 80104e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80104e8:	b2da      	uxtb	r2, r3
 80104ea:	4b2e      	ldr	r3, [pc, #184]	; (80105a4 <xPortStartScheduler+0xe4>)
 80104ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80104ee:	4b2e      	ldr	r3, [pc, #184]	; (80105a8 <xPortStartScheduler+0xe8>)
 80104f0:	2207      	movs	r2, #7
 80104f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80104f4:	e009      	b.n	801050a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80104f6:	4b2c      	ldr	r3, [pc, #176]	; (80105a8 <xPortStartScheduler+0xe8>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	3b01      	subs	r3, #1
 80104fc:	4a2a      	ldr	r2, [pc, #168]	; (80105a8 <xPortStartScheduler+0xe8>)
 80104fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010500:	78fb      	ldrb	r3, [r7, #3]
 8010502:	b2db      	uxtb	r3, r3
 8010504:	005b      	lsls	r3, r3, #1
 8010506:	b2db      	uxtb	r3, r3
 8010508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801050a:	78fb      	ldrb	r3, [r7, #3]
 801050c:	b2db      	uxtb	r3, r3
 801050e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010512:	2b80      	cmp	r3, #128	; 0x80
 8010514:	d0ef      	beq.n	80104f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010516:	4b24      	ldr	r3, [pc, #144]	; (80105a8 <xPortStartScheduler+0xe8>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	f1c3 0307 	rsb	r3, r3, #7
 801051e:	2b04      	cmp	r3, #4
 8010520:	d00b      	beq.n	801053a <xPortStartScheduler+0x7a>
 8010522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010526:	b672      	cpsid	i
 8010528:	f383 8811 	msr	BASEPRI, r3
 801052c:	f3bf 8f6f 	isb	sy
 8010530:	f3bf 8f4f 	dsb	sy
 8010534:	b662      	cpsie	i
 8010536:	60bb      	str	r3, [r7, #8]
 8010538:	e7fe      	b.n	8010538 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801053a:	4b1b      	ldr	r3, [pc, #108]	; (80105a8 <xPortStartScheduler+0xe8>)
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	021b      	lsls	r3, r3, #8
 8010540:	4a19      	ldr	r2, [pc, #100]	; (80105a8 <xPortStartScheduler+0xe8>)
 8010542:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010544:	4b18      	ldr	r3, [pc, #96]	; (80105a8 <xPortStartScheduler+0xe8>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801054c:	4a16      	ldr	r2, [pc, #88]	; (80105a8 <xPortStartScheduler+0xe8>)
 801054e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	b2da      	uxtb	r2, r3
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010558:	4b14      	ldr	r3, [pc, #80]	; (80105ac <xPortStartScheduler+0xec>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	4a13      	ldr	r2, [pc, #76]	; (80105ac <xPortStartScheduler+0xec>)
 801055e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010562:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010564:	4b11      	ldr	r3, [pc, #68]	; (80105ac <xPortStartScheduler+0xec>)
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	4a10      	ldr	r2, [pc, #64]	; (80105ac <xPortStartScheduler+0xec>)
 801056a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801056e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010570:	f000 f8d4 	bl	801071c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010574:	4b0e      	ldr	r3, [pc, #56]	; (80105b0 <xPortStartScheduler+0xf0>)
 8010576:	2200      	movs	r2, #0
 8010578:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801057a:	f000 f8f3 	bl	8010764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801057e:	4b0d      	ldr	r3, [pc, #52]	; (80105b4 <xPortStartScheduler+0xf4>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	4a0c      	ldr	r2, [pc, #48]	; (80105b4 <xPortStartScheduler+0xf4>)
 8010584:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010588:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801058a:	f7ff ff85 	bl	8010498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801058e:	f7ff fa67 	bl	800fa60 <vTaskSwitchContext>
	prvTaskExitError();
 8010592:	f7ff ff3b 	bl	801040c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010596:	2300      	movs	r3, #0
}
 8010598:	4618      	mov	r0, r3
 801059a:	3710      	adds	r7, #16
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}
 80105a0:	e000e400 	.word	0xe000e400
 80105a4:	20000364 	.word	0x20000364
 80105a8:	20000368 	.word	0x20000368
 80105ac:	e000ed20 	.word	0xe000ed20
 80105b0:	2000002c 	.word	0x2000002c
 80105b4:	e000ef34 	.word	0xe000ef34

080105b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80105b8:	b480      	push	{r7}
 80105ba:	b083      	sub	sp, #12
 80105bc:	af00      	add	r7, sp, #0
 80105be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c2:	b672      	cpsid	i
 80105c4:	f383 8811 	msr	BASEPRI, r3
 80105c8:	f3bf 8f6f 	isb	sy
 80105cc:	f3bf 8f4f 	dsb	sy
 80105d0:	b662      	cpsie	i
 80105d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80105d4:	4b0f      	ldr	r3, [pc, #60]	; (8010614 <vPortEnterCritical+0x5c>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	3301      	adds	r3, #1
 80105da:	4a0e      	ldr	r2, [pc, #56]	; (8010614 <vPortEnterCritical+0x5c>)
 80105dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80105de:	4b0d      	ldr	r3, [pc, #52]	; (8010614 <vPortEnterCritical+0x5c>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	2b01      	cmp	r3, #1
 80105e4:	d110      	bne.n	8010608 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80105e6:	4b0c      	ldr	r3, [pc, #48]	; (8010618 <vPortEnterCritical+0x60>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	b2db      	uxtb	r3, r3
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d00b      	beq.n	8010608 <vPortEnterCritical+0x50>
 80105f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105f4:	b672      	cpsid	i
 80105f6:	f383 8811 	msr	BASEPRI, r3
 80105fa:	f3bf 8f6f 	isb	sy
 80105fe:	f3bf 8f4f 	dsb	sy
 8010602:	b662      	cpsie	i
 8010604:	603b      	str	r3, [r7, #0]
 8010606:	e7fe      	b.n	8010606 <vPortEnterCritical+0x4e>
	}
}
 8010608:	bf00      	nop
 801060a:	370c      	adds	r7, #12
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr
 8010614:	2000002c 	.word	0x2000002c
 8010618:	e000ed04 	.word	0xe000ed04

0801061c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801061c:	b480      	push	{r7}
 801061e:	b083      	sub	sp, #12
 8010620:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010622:	4b12      	ldr	r3, [pc, #72]	; (801066c <vPortExitCritical+0x50>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d10b      	bne.n	8010642 <vPortExitCritical+0x26>
 801062a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801062e:	b672      	cpsid	i
 8010630:	f383 8811 	msr	BASEPRI, r3
 8010634:	f3bf 8f6f 	isb	sy
 8010638:	f3bf 8f4f 	dsb	sy
 801063c:	b662      	cpsie	i
 801063e:	607b      	str	r3, [r7, #4]
 8010640:	e7fe      	b.n	8010640 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8010642:	4b0a      	ldr	r3, [pc, #40]	; (801066c <vPortExitCritical+0x50>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	3b01      	subs	r3, #1
 8010648:	4a08      	ldr	r2, [pc, #32]	; (801066c <vPortExitCritical+0x50>)
 801064a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801064c:	4b07      	ldr	r3, [pc, #28]	; (801066c <vPortExitCritical+0x50>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d104      	bne.n	801065e <vPortExitCritical+0x42>
 8010654:	2300      	movs	r3, #0
 8010656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801065e:	bf00      	nop
 8010660:	370c      	adds	r7, #12
 8010662:	46bd      	mov	sp, r7
 8010664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010668:	4770      	bx	lr
 801066a:	bf00      	nop
 801066c:	2000002c 	.word	0x2000002c

08010670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010670:	f3ef 8009 	mrs	r0, PSP
 8010674:	f3bf 8f6f 	isb	sy
 8010678:	4b15      	ldr	r3, [pc, #84]	; (80106d0 <pxCurrentTCBConst>)
 801067a:	681a      	ldr	r2, [r3, #0]
 801067c:	f01e 0f10 	tst.w	lr, #16
 8010680:	bf08      	it	eq
 8010682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801068a:	6010      	str	r0, [r2, #0]
 801068c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010690:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010694:	b672      	cpsid	i
 8010696:	f380 8811 	msr	BASEPRI, r0
 801069a:	f3bf 8f4f 	dsb	sy
 801069e:	f3bf 8f6f 	isb	sy
 80106a2:	b662      	cpsie	i
 80106a4:	f7ff f9dc 	bl	800fa60 <vTaskSwitchContext>
 80106a8:	f04f 0000 	mov.w	r0, #0
 80106ac:	f380 8811 	msr	BASEPRI, r0
 80106b0:	bc09      	pop	{r0, r3}
 80106b2:	6819      	ldr	r1, [r3, #0]
 80106b4:	6808      	ldr	r0, [r1, #0]
 80106b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106ba:	f01e 0f10 	tst.w	lr, #16
 80106be:	bf08      	it	eq
 80106c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80106c4:	f380 8809 	msr	PSP, r0
 80106c8:	f3bf 8f6f 	isb	sy
 80106cc:	4770      	bx	lr
 80106ce:	bf00      	nop

080106d0 <pxCurrentTCBConst>:
 80106d0:	20000238 	.word	0x20000238
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80106d4:	bf00      	nop
 80106d6:	bf00      	nop

080106d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b082      	sub	sp, #8
 80106dc:	af00      	add	r7, sp, #0
	__asm volatile
 80106de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e2:	b672      	cpsid	i
 80106e4:	f383 8811 	msr	BASEPRI, r3
 80106e8:	f3bf 8f6f 	isb	sy
 80106ec:	f3bf 8f4f 	dsb	sy
 80106f0:	b662      	cpsie	i
 80106f2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80106f4:	f7ff f8b8 	bl	800f868 <xTaskIncrementTick>
 80106f8:	4603      	mov	r3, r0
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d003      	beq.n	8010706 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80106fe:	4b06      	ldr	r3, [pc, #24]	; (8010718 <SysTick_Handler+0x40>)
 8010700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010704:	601a      	str	r2, [r3, #0]
 8010706:	2300      	movs	r3, #0
 8010708:	603b      	str	r3, [r7, #0]
	__asm volatile
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8010710:	bf00      	nop
 8010712:	3708      	adds	r7, #8
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}
 8010718:	e000ed04 	.word	0xe000ed04

0801071c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801071c:	b480      	push	{r7}
 801071e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010720:	4b0b      	ldr	r3, [pc, #44]	; (8010750 <vPortSetupTimerInterrupt+0x34>)
 8010722:	2200      	movs	r2, #0
 8010724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010726:	4b0b      	ldr	r3, [pc, #44]	; (8010754 <vPortSetupTimerInterrupt+0x38>)
 8010728:	2200      	movs	r2, #0
 801072a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801072c:	4b0a      	ldr	r3, [pc, #40]	; (8010758 <vPortSetupTimerInterrupt+0x3c>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	4a0a      	ldr	r2, [pc, #40]	; (801075c <vPortSetupTimerInterrupt+0x40>)
 8010732:	fba2 2303 	umull	r2, r3, r2, r3
 8010736:	099b      	lsrs	r3, r3, #6
 8010738:	4a09      	ldr	r2, [pc, #36]	; (8010760 <vPortSetupTimerInterrupt+0x44>)
 801073a:	3b01      	subs	r3, #1
 801073c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801073e:	4b04      	ldr	r3, [pc, #16]	; (8010750 <vPortSetupTimerInterrupt+0x34>)
 8010740:	2207      	movs	r2, #7
 8010742:	601a      	str	r2, [r3, #0]
}
 8010744:	bf00      	nop
 8010746:	46bd      	mov	sp, r7
 8010748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074c:	4770      	bx	lr
 801074e:	bf00      	nop
 8010750:	e000e010 	.word	0xe000e010
 8010754:	e000e018 	.word	0xe000e018
 8010758:	20000034 	.word	0x20000034
 801075c:	10624dd3 	.word	0x10624dd3
 8010760:	e000e014 	.word	0xe000e014

08010764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010774 <vPortEnableVFP+0x10>
 8010768:	6801      	ldr	r1, [r0, #0]
 801076a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801076e:	6001      	str	r1, [r0, #0]
 8010770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010772:	bf00      	nop
 8010774:	e000ed88 	.word	0xe000ed88

08010778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010778:	b480      	push	{r7}
 801077a:	b085      	sub	sp, #20
 801077c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801077e:	f3ef 8305 	mrs	r3, IPSR
 8010782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	2b0f      	cmp	r3, #15
 8010788:	d915      	bls.n	80107b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801078a:	4a18      	ldr	r2, [pc, #96]	; (80107ec <vPortValidateInterruptPriority+0x74>)
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	4413      	add	r3, r2
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010794:	4b16      	ldr	r3, [pc, #88]	; (80107f0 <vPortValidateInterruptPriority+0x78>)
 8010796:	781b      	ldrb	r3, [r3, #0]
 8010798:	7afa      	ldrb	r2, [r7, #11]
 801079a:	429a      	cmp	r2, r3
 801079c:	d20b      	bcs.n	80107b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801079e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a2:	b672      	cpsid	i
 80107a4:	f383 8811 	msr	BASEPRI, r3
 80107a8:	f3bf 8f6f 	isb	sy
 80107ac:	f3bf 8f4f 	dsb	sy
 80107b0:	b662      	cpsie	i
 80107b2:	607b      	str	r3, [r7, #4]
 80107b4:	e7fe      	b.n	80107b4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80107b6:	4b0f      	ldr	r3, [pc, #60]	; (80107f4 <vPortValidateInterruptPriority+0x7c>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80107be:	4b0e      	ldr	r3, [pc, #56]	; (80107f8 <vPortValidateInterruptPriority+0x80>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	429a      	cmp	r2, r3
 80107c4:	d90b      	bls.n	80107de <vPortValidateInterruptPriority+0x66>
 80107c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ca:	b672      	cpsid	i
 80107cc:	f383 8811 	msr	BASEPRI, r3
 80107d0:	f3bf 8f6f 	isb	sy
 80107d4:	f3bf 8f4f 	dsb	sy
 80107d8:	b662      	cpsie	i
 80107da:	603b      	str	r3, [r7, #0]
 80107dc:	e7fe      	b.n	80107dc <vPortValidateInterruptPriority+0x64>
	}
 80107de:	bf00      	nop
 80107e0:	3714      	adds	r7, #20
 80107e2:	46bd      	mov	sp, r7
 80107e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e8:	4770      	bx	lr
 80107ea:	bf00      	nop
 80107ec:	e000e3f0 	.word	0xe000e3f0
 80107f0:	20000364 	.word	0x20000364
 80107f4:	e000ed0c 	.word	0xe000ed0c
 80107f8:	20000368 	.word	0x20000368

080107fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b08a      	sub	sp, #40	; 0x28
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010804:	2300      	movs	r3, #0
 8010806:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010808:	f7fe ff60 	bl	800f6cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801080c:	4b5c      	ldr	r3, [pc, #368]	; (8010980 <pvPortMalloc+0x184>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d101      	bne.n	8010818 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010814:	f000 f91a 	bl	8010a4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010818:	4b5a      	ldr	r3, [pc, #360]	; (8010984 <pvPortMalloc+0x188>)
 801081a:	681a      	ldr	r2, [r3, #0]
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	4013      	ands	r3, r2
 8010820:	2b00      	cmp	r3, #0
 8010822:	f040 8090 	bne.w	8010946 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d01e      	beq.n	801086a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801082c:	2208      	movs	r2, #8
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	4413      	add	r3, r2
 8010832:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f003 0307 	and.w	r3, r3, #7
 801083a:	2b00      	cmp	r3, #0
 801083c:	d015      	beq.n	801086a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f023 0307 	bic.w	r3, r3, #7
 8010844:	3308      	adds	r3, #8
 8010846:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f003 0307 	and.w	r3, r3, #7
 801084e:	2b00      	cmp	r3, #0
 8010850:	d00b      	beq.n	801086a <pvPortMalloc+0x6e>
 8010852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010856:	b672      	cpsid	i
 8010858:	f383 8811 	msr	BASEPRI, r3
 801085c:	f3bf 8f6f 	isb	sy
 8010860:	f3bf 8f4f 	dsb	sy
 8010864:	b662      	cpsie	i
 8010866:	617b      	str	r3, [r7, #20]
 8010868:	e7fe      	b.n	8010868 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d06a      	beq.n	8010946 <pvPortMalloc+0x14a>
 8010870:	4b45      	ldr	r3, [pc, #276]	; (8010988 <pvPortMalloc+0x18c>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	687a      	ldr	r2, [r7, #4]
 8010876:	429a      	cmp	r2, r3
 8010878:	d865      	bhi.n	8010946 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801087a:	4b44      	ldr	r3, [pc, #272]	; (801098c <pvPortMalloc+0x190>)
 801087c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801087e:	4b43      	ldr	r3, [pc, #268]	; (801098c <pvPortMalloc+0x190>)
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010884:	e004      	b.n	8010890 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010888:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010892:	685b      	ldr	r3, [r3, #4]
 8010894:	687a      	ldr	r2, [r7, #4]
 8010896:	429a      	cmp	r2, r3
 8010898:	d903      	bls.n	80108a2 <pvPortMalloc+0xa6>
 801089a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d1f1      	bne.n	8010886 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80108a2:	4b37      	ldr	r3, [pc, #220]	; (8010980 <pvPortMalloc+0x184>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108a8:	429a      	cmp	r2, r3
 80108aa:	d04c      	beq.n	8010946 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80108ac:	6a3b      	ldr	r3, [r7, #32]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	2208      	movs	r2, #8
 80108b2:	4413      	add	r3, r2
 80108b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80108b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b8:	681a      	ldr	r2, [r3, #0]
 80108ba:	6a3b      	ldr	r3, [r7, #32]
 80108bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80108be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c0:	685a      	ldr	r2, [r3, #4]
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	1ad2      	subs	r2, r2, r3
 80108c6:	2308      	movs	r3, #8
 80108c8:	005b      	lsls	r3, r3, #1
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d920      	bls.n	8010910 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80108ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	4413      	add	r3, r2
 80108d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80108d6:	69bb      	ldr	r3, [r7, #24]
 80108d8:	f003 0307 	and.w	r3, r3, #7
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d00b      	beq.n	80108f8 <pvPortMalloc+0xfc>
 80108e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e4:	b672      	cpsid	i
 80108e6:	f383 8811 	msr	BASEPRI, r3
 80108ea:	f3bf 8f6f 	isb	sy
 80108ee:	f3bf 8f4f 	dsb	sy
 80108f2:	b662      	cpsie	i
 80108f4:	613b      	str	r3, [r7, #16]
 80108f6:	e7fe      	b.n	80108f6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80108f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fa:	685a      	ldr	r2, [r3, #4]
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	1ad2      	subs	r2, r2, r3
 8010900:	69bb      	ldr	r3, [r7, #24]
 8010902:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010906:	687a      	ldr	r2, [r7, #4]
 8010908:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801090a:	69b8      	ldr	r0, [r7, #24]
 801090c:	f000 f900 	bl	8010b10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010910:	4b1d      	ldr	r3, [pc, #116]	; (8010988 <pvPortMalloc+0x18c>)
 8010912:	681a      	ldr	r2, [r3, #0]
 8010914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010916:	685b      	ldr	r3, [r3, #4]
 8010918:	1ad3      	subs	r3, r2, r3
 801091a:	4a1b      	ldr	r2, [pc, #108]	; (8010988 <pvPortMalloc+0x18c>)
 801091c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801091e:	4b1a      	ldr	r3, [pc, #104]	; (8010988 <pvPortMalloc+0x18c>)
 8010920:	681a      	ldr	r2, [r3, #0]
 8010922:	4b1b      	ldr	r3, [pc, #108]	; (8010990 <pvPortMalloc+0x194>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	429a      	cmp	r2, r3
 8010928:	d203      	bcs.n	8010932 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801092a:	4b17      	ldr	r3, [pc, #92]	; (8010988 <pvPortMalloc+0x18c>)
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	4a18      	ldr	r2, [pc, #96]	; (8010990 <pvPortMalloc+0x194>)
 8010930:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010934:	685a      	ldr	r2, [r3, #4]
 8010936:	4b13      	ldr	r3, [pc, #76]	; (8010984 <pvPortMalloc+0x188>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	431a      	orrs	r2, r3
 801093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010942:	2200      	movs	r2, #0
 8010944:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010946:	f7fe fecf 	bl	800f6e8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801094a:	69fb      	ldr	r3, [r7, #28]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d101      	bne.n	8010954 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8010950:	f7fd fbcf 	bl	800e0f2 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010954:	69fb      	ldr	r3, [r7, #28]
 8010956:	f003 0307 	and.w	r3, r3, #7
 801095a:	2b00      	cmp	r3, #0
 801095c:	d00b      	beq.n	8010976 <pvPortMalloc+0x17a>
 801095e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010962:	b672      	cpsid	i
 8010964:	f383 8811 	msr	BASEPRI, r3
 8010968:	f3bf 8f6f 	isb	sy
 801096c:	f3bf 8f4f 	dsb	sy
 8010970:	b662      	cpsie	i
 8010972:	60fb      	str	r3, [r7, #12]
 8010974:	e7fe      	b.n	8010974 <pvPortMalloc+0x178>
	return pvReturn;
 8010976:	69fb      	ldr	r3, [r7, #28]
}
 8010978:	4618      	mov	r0, r3
 801097a:	3728      	adds	r7, #40	; 0x28
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}
 8010980:	20008374 	.word	0x20008374
 8010984:	20008380 	.word	0x20008380
 8010988:	20008378 	.word	0x20008378
 801098c:	2000836c 	.word	0x2000836c
 8010990:	2000837c 	.word	0x2000837c

08010994 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b086      	sub	sp, #24
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d04a      	beq.n	8010a3c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80109a6:	2308      	movs	r3, #8
 80109a8:	425b      	negs	r3, r3
 80109aa:	697a      	ldr	r2, [r7, #20]
 80109ac:	4413      	add	r3, r2
 80109ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	685a      	ldr	r2, [r3, #4]
 80109b8:	4b22      	ldr	r3, [pc, #136]	; (8010a44 <vPortFree+0xb0>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	4013      	ands	r3, r2
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d10b      	bne.n	80109da <vPortFree+0x46>
 80109c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109c6:	b672      	cpsid	i
 80109c8:	f383 8811 	msr	BASEPRI, r3
 80109cc:	f3bf 8f6f 	isb	sy
 80109d0:	f3bf 8f4f 	dsb	sy
 80109d4:	b662      	cpsie	i
 80109d6:	60fb      	str	r3, [r7, #12]
 80109d8:	e7fe      	b.n	80109d8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80109da:	693b      	ldr	r3, [r7, #16]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d00b      	beq.n	80109fa <vPortFree+0x66>
 80109e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109e6:	b672      	cpsid	i
 80109e8:	f383 8811 	msr	BASEPRI, r3
 80109ec:	f3bf 8f6f 	isb	sy
 80109f0:	f3bf 8f4f 	dsb	sy
 80109f4:	b662      	cpsie	i
 80109f6:	60bb      	str	r3, [r7, #8]
 80109f8:	e7fe      	b.n	80109f8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80109fa:	693b      	ldr	r3, [r7, #16]
 80109fc:	685a      	ldr	r2, [r3, #4]
 80109fe:	4b11      	ldr	r3, [pc, #68]	; (8010a44 <vPortFree+0xb0>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	4013      	ands	r3, r2
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d019      	beq.n	8010a3c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d115      	bne.n	8010a3c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010a10:	693b      	ldr	r3, [r7, #16]
 8010a12:	685a      	ldr	r2, [r3, #4]
 8010a14:	4b0b      	ldr	r3, [pc, #44]	; (8010a44 <vPortFree+0xb0>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	43db      	mvns	r3, r3
 8010a1a:	401a      	ands	r2, r3
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010a20:	f7fe fe54 	bl	800f6cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010a24:	693b      	ldr	r3, [r7, #16]
 8010a26:	685a      	ldr	r2, [r3, #4]
 8010a28:	4b07      	ldr	r3, [pc, #28]	; (8010a48 <vPortFree+0xb4>)
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	4413      	add	r3, r2
 8010a2e:	4a06      	ldr	r2, [pc, #24]	; (8010a48 <vPortFree+0xb4>)
 8010a30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010a32:	6938      	ldr	r0, [r7, #16]
 8010a34:	f000 f86c 	bl	8010b10 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010a38:	f7fe fe56 	bl	800f6e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010a3c:	bf00      	nop
 8010a3e:	3718      	adds	r7, #24
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}
 8010a44:	20008380 	.word	0x20008380
 8010a48:	20008378 	.word	0x20008378

08010a4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010a4c:	b480      	push	{r7}
 8010a4e:	b085      	sub	sp, #20
 8010a50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010a56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010a58:	4b27      	ldr	r3, [pc, #156]	; (8010af8 <prvHeapInit+0xac>)
 8010a5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	f003 0307 	and.w	r3, r3, #7
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d00c      	beq.n	8010a80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	3307      	adds	r3, #7
 8010a6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	f023 0307 	bic.w	r3, r3, #7
 8010a72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010a74:	68ba      	ldr	r2, [r7, #8]
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	1ad3      	subs	r3, r2, r3
 8010a7a:	4a1f      	ldr	r2, [pc, #124]	; (8010af8 <prvHeapInit+0xac>)
 8010a7c:	4413      	add	r3, r2
 8010a7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010a84:	4a1d      	ldr	r2, [pc, #116]	; (8010afc <prvHeapInit+0xb0>)
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010a8a:	4b1c      	ldr	r3, [pc, #112]	; (8010afc <prvHeapInit+0xb0>)
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	68ba      	ldr	r2, [r7, #8]
 8010a94:	4413      	add	r3, r2
 8010a96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010a98:	2208      	movs	r2, #8
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	1a9b      	subs	r3, r3, r2
 8010a9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	f023 0307 	bic.w	r3, r3, #7
 8010aa6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	4a15      	ldr	r2, [pc, #84]	; (8010b00 <prvHeapInit+0xb4>)
 8010aac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010aae:	4b14      	ldr	r3, [pc, #80]	; (8010b00 <prvHeapInit+0xb4>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010ab6:	4b12      	ldr	r3, [pc, #72]	; (8010b00 <prvHeapInit+0xb4>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	2200      	movs	r2, #0
 8010abc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	68fa      	ldr	r2, [r7, #12]
 8010ac6:	1ad2      	subs	r2, r2, r3
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010acc:	4b0c      	ldr	r3, [pc, #48]	; (8010b00 <prvHeapInit+0xb4>)
 8010ace:	681a      	ldr	r2, [r3, #0]
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	685b      	ldr	r3, [r3, #4]
 8010ad8:	4a0a      	ldr	r2, [pc, #40]	; (8010b04 <prvHeapInit+0xb8>)
 8010ada:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	685b      	ldr	r3, [r3, #4]
 8010ae0:	4a09      	ldr	r2, [pc, #36]	; (8010b08 <prvHeapInit+0xbc>)
 8010ae2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010ae4:	4b09      	ldr	r3, [pc, #36]	; (8010b0c <prvHeapInit+0xc0>)
 8010ae6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010aea:	601a      	str	r2, [r3, #0]
}
 8010aec:	bf00      	nop
 8010aee:	3714      	adds	r7, #20
 8010af0:	46bd      	mov	sp, r7
 8010af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af6:	4770      	bx	lr
 8010af8:	2000036c 	.word	0x2000036c
 8010afc:	2000836c 	.word	0x2000836c
 8010b00:	20008374 	.word	0x20008374
 8010b04:	2000837c 	.word	0x2000837c
 8010b08:	20008378 	.word	0x20008378
 8010b0c:	20008380 	.word	0x20008380

08010b10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010b10:	b480      	push	{r7}
 8010b12:	b085      	sub	sp, #20
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010b18:	4b28      	ldr	r3, [pc, #160]	; (8010bbc <prvInsertBlockIntoFreeList+0xac>)
 8010b1a:	60fb      	str	r3, [r7, #12]
 8010b1c:	e002      	b.n	8010b24 <prvInsertBlockIntoFreeList+0x14>
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	60fb      	str	r3, [r7, #12]
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	687a      	ldr	r2, [r7, #4]
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d8f7      	bhi.n	8010b1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	685b      	ldr	r3, [r3, #4]
 8010b36:	68ba      	ldr	r2, [r7, #8]
 8010b38:	4413      	add	r3, r2
 8010b3a:	687a      	ldr	r2, [r7, #4]
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	d108      	bne.n	8010b52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	685a      	ldr	r2, [r3, #4]
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	685b      	ldr	r3, [r3, #4]
 8010b48:	441a      	add	r2, r3
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	685b      	ldr	r3, [r3, #4]
 8010b5a:	68ba      	ldr	r2, [r7, #8]
 8010b5c:	441a      	add	r2, r3
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	429a      	cmp	r2, r3
 8010b64:	d118      	bne.n	8010b98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	681a      	ldr	r2, [r3, #0]
 8010b6a:	4b15      	ldr	r3, [pc, #84]	; (8010bc0 <prvInsertBlockIntoFreeList+0xb0>)
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	d00d      	beq.n	8010b8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	685a      	ldr	r2, [r3, #4]
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	685b      	ldr	r3, [r3, #4]
 8010b7c:	441a      	add	r2, r3
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	601a      	str	r2, [r3, #0]
 8010b8c:	e008      	b.n	8010ba0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010b8e:	4b0c      	ldr	r3, [pc, #48]	; (8010bc0 <prvInsertBlockIntoFreeList+0xb0>)
 8010b90:	681a      	ldr	r2, [r3, #0]
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	601a      	str	r2, [r3, #0]
 8010b96:	e003      	b.n	8010ba0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	681a      	ldr	r2, [r3, #0]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010ba0:	68fa      	ldr	r2, [r7, #12]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d002      	beq.n	8010bae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	687a      	ldr	r2, [r7, #4]
 8010bac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010bae:	bf00      	nop
 8010bb0:	3714      	adds	r7, #20
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb8:	4770      	bx	lr
 8010bba:	bf00      	nop
 8010bbc:	2000836c 	.word	0x2000836c
 8010bc0:	20008374 	.word	0x20008374

08010bc4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b082      	sub	sp, #8
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8010bcc:	4b04      	ldr	r3, [pc, #16]	; (8010be0 <HAL_ETH_RxCpltCallback+0x1c>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7fd fb83 	bl	800e2dc <osSemaphoreRelease>
}
 8010bd6:	bf00      	nop
 8010bd8:	3708      	adds	r7, #8
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}
 8010bde:	bf00      	nop
 8010be0:	20008384 	.word	0x20008384

08010be4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010be8:	4904      	ldr	r1, [pc, #16]	; (8010bfc <MX_FATFS_Init+0x18>)
 8010bea:	4805      	ldr	r0, [pc, #20]	; (8010c00 <MX_FATFS_Init+0x1c>)
 8010bec:	f7fd fade 	bl	800e1ac <FATFS_LinkDriver>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	4b03      	ldr	r3, [pc, #12]	; (8010c04 <MX_FATFS_Init+0x20>)
 8010bf6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8010bf8:	bf00      	nop
 8010bfa:	bd80      	pop	{r7, pc}
 8010bfc:	2000da3c 	.word	0x2000da3c
 8010c00:	08023200 	.word	0x08023200
 8010c04:	2000da40 	.word	0x2000da40

08010c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010c08:	b5b0      	push	{r4, r5, r7, lr}
 8010c0a:	b086      	sub	sp, #24
 8010c0c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010c0e:	f7f0 fd43 	bl	8001698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010c12:	f000 f843 	bl	8010c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010c16:	f000 ff25 	bl	8011a64 <_ZL12MX_GPIO_Initv>
  MX_ADC3_Init();
 8010c1a:	f000 f913 	bl	8010e44 <_ZL12MX_ADC3_Initv>
  MX_CRC_Init();
 8010c1e:	f000 f96d 	bl	8010efc <_ZL11MX_CRC_Initv>
  MX_DCMI_Init();
 8010c22:	f000 f993 	bl	8010f4c <_ZL12MX_DCMI_Initv>
  MX_I2C1_Init();
 8010c26:	f000 f9cb 	bl	8010fc0 <_ZL12MX_I2C1_Initv>
  MX_I2C3_Init();
 8010c2a:	f000 fa17 	bl	801105c <_ZL12MX_I2C3_Initv>
  MX_QUADSPI_Init();
 8010c2e:	f000 fa63 	bl	80110f8 <_ZL15MX_QUADSPI_Initv>
  MX_RTC_Init();
 8010c32:	f000 faa9 	bl	8011188 <_ZL11MX_RTC_Initv>
  MX_SAI2_Init();
 8010c36:	f000 fb6d 	bl	8011314 <_ZL12MX_SAI2_Initv>
  MX_SDMMC1_SD_Init();
 8010c3a:	f000 fc1d 	bl	8011478 <_ZL17MX_SDMMC1_SD_Initv>
  MX_SPDIFRX_Init();
 8010c3e:	f000 fc3b 	bl	80114b8 <_ZL15MX_SPDIFRX_Initv>
  MX_SPI2_Init();
 8010c42:	f000 fc6f 	bl	8011524 <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 8010c46:	f000 fcaf 	bl	80115a8 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 8010c4a:	f000 fd3d 	bl	80116c8 <_ZL12MX_TIM5_Initv>
  MX_TIM8_Init();
 8010c4e:	f000 fdcb 	bl	80117e8 <_ZL12MX_TIM8_Initv>
  MX_TIM12_Init();
 8010c52:	f000 fe2b 	bl	80118ac <_ZL13MX_TIM12_Initv>
  MX_USART1_UART_Init();
 8010c56:	f000 fe77 	bl	8011948 <_ZL19MX_USART1_UART_Initv>
  MX_USART6_UART_Init();
 8010c5a:	f000 fea9 	bl	80119b0 <_ZL19MX_USART6_UART_Initv>
  MX_RNG_Init();
 8010c5e:	f000 fa7b 	bl	8011158 <_ZL11MX_RNG_Initv>
  MX_USB_OTG_FS_HCD_Init();
 8010c62:	f000 fed9 	bl	8011a18 <_ZL22MX_USB_OTG_FS_HCD_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

/* Initialise the graphical hardware */
  GRAPHICS_HW_Init();
 8010c66:	f009 ff09 	bl	801aa7c <_Z16GRAPHICS_HW_Initv>

  /* Initialise the graphical stack engine */
  GRAPHICS_Init();
 8010c6a:	f009 ff7f 	bl	801ab6c <_Z13GRAPHICS_Initv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8010c6e:	4b09      	ldr	r3, [pc, #36]	; (8010c94 <main+0x8c>)
 8010c70:	1d3c      	adds	r4, r7, #4
 8010c72:	461d      	mov	r5, r3
 8010c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c78:	682b      	ldr	r3, [r5, #0]
 8010c7a:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8010c7c:	1d3b      	adds	r3, r7, #4
 8010c7e:	2100      	movs	r1, #0
 8010c80:	4618      	mov	r0, r3
 8010c82:	f7fd faef 	bl	800e264 <osThreadCreate>
 8010c86:	4602      	mov	r2, r0
 8010c88:	4b03      	ldr	r3, [pc, #12]	; (8010c98 <main+0x90>)
 8010c8a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8010c8c:	f7fd fac7 	bl	800e21e <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8010c90:	e7fe      	b.n	8010c90 <main+0x88>
 8010c92:	bf00      	nop
 8010c94:	08022418 	.word	0x08022418
 8010c98:	20008c58 	.word	0x20008c58

08010c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b0b4      	sub	sp, #208	; 0xd0
 8010ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010ca2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010ca6:	2230      	movs	r2, #48	; 0x30
 8010ca8:	2100      	movs	r1, #0
 8010caa:	4618      	mov	r0, r3
 8010cac:	f010 faf9 	bl	80212a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010cb0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	601a      	str	r2, [r3, #0]
 8010cb8:	605a      	str	r2, [r3, #4]
 8010cba:	609a      	str	r2, [r3, #8]
 8010cbc:	60da      	str	r2, [r3, #12]
 8010cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010cc0:	f107 0308 	add.w	r3, r7, #8
 8010cc4:	2284      	movs	r2, #132	; 0x84
 8010cc6:	2100      	movs	r1, #0
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f010 faea 	bl	80212a2 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8010cce:	f7f4 ff8d 	bl	8005bec <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8010cd2:	4b59      	ldr	r3, [pc, #356]	; (8010e38 <SystemClock_Config+0x19c>)
 8010cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cd6:	4a58      	ldr	r2, [pc, #352]	; (8010e38 <SystemClock_Config+0x19c>)
 8010cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8010cde:	4b56      	ldr	r3, [pc, #344]	; (8010e38 <SystemClock_Config+0x19c>)
 8010ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010ce6:	607b      	str	r3, [r7, #4]
 8010ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010cea:	4b54      	ldr	r3, [pc, #336]	; (8010e3c <SystemClock_Config+0x1a0>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	4a53      	ldr	r2, [pc, #332]	; (8010e3c <SystemClock_Config+0x1a0>)
 8010cf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010cf4:	6013      	str	r3, [r2, #0]
 8010cf6:	4b51      	ldr	r3, [pc, #324]	; (8010e3c <SystemClock_Config+0x1a0>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010cfe:	603b      	str	r3, [r7, #0]
 8010d00:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8010d02:	2309      	movs	r3, #9
 8010d04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8010d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8010d0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8010d10:	2301      	movs	r3, #1
 8010d12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010d16:	2302      	movs	r3, #2
 8010d18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8010d1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010d20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8010d24:	2319      	movs	r3, #25
 8010d26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8010d2a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8010d2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010d32:	2302      	movs	r3, #2
 8010d34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8010d38:	2309      	movs	r3, #9
 8010d3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010d3e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010d42:	4618      	mov	r0, r3
 8010d44:	f7f5 f882 	bl	8005e4c <HAL_RCC_OscConfig>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	bf14      	ite	ne
 8010d4e:	2301      	movne	r3, #1
 8010d50:	2300      	moveq	r3, #0
 8010d52:	b2db      	uxtb	r3, r3
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d001      	beq.n	8010d5c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8010d58:	f001 f876 	bl	8011e48 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8010d5c:	f7f4 ff56 	bl	8005c0c <HAL_PWREx_EnableOverDrive>
 8010d60:	4603      	mov	r3, r0
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	bf14      	ite	ne
 8010d66:	2301      	movne	r3, #1
 8010d68:	2300      	moveq	r3, #0
 8010d6a:	b2db      	uxtb	r3, r3
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d001      	beq.n	8010d74 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8010d70:	f001 f86a 	bl	8011e48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010d74:	230f      	movs	r3, #15
 8010d76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010d7a:	2302      	movs	r3, #2
 8010d7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010d80:	2300      	movs	r3, #0
 8010d82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8010d86:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8010d8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8010d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8010d96:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010d9a:	2106      	movs	r1, #6
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7f5 fac5 	bl	800632c <HAL_RCC_ClockConfig>
 8010da2:	4603      	mov	r3, r0
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	bf14      	ite	ne
 8010da8:	2301      	movne	r3, #1
 8010daa:	2300      	moveq	r3, #0
 8010dac:	b2db      	uxtb	r3, r3
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d001      	beq.n	8010db6 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8010db2:	f001 f849 	bl	8011e48 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8010db6:	4b22      	ldr	r3, [pc, #136]	; (8010e40 <SystemClock_Config+0x1a4>)
 8010db8:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8010dba:	2364      	movs	r3, #100	; 0x64
 8010dbc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8010dbe:	2302      	movs	r3, #2
 8010dc0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8010dc2:	2302      	movs	r3, #2
 8010dc4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8010dc6:	2302      	movs	r3, #2
 8010dc8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8010dca:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8010dce:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8010dd0:	2305      	movs	r3, #5
 8010dd2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8010dd4:	2302      	movs	r3, #2
 8010dd6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8010dd8:	2303      	movs	r3, #3
 8010dda:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8010ddc:	2301      	movs	r3, #1
 8010dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8010de0:	2301      	movs	r3, #1
 8010de2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8010de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010de8:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8010dea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010dee:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8010df0:	2300      	movs	r3, #0
 8010df2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8010df4:	2300      	movs	r3, #0
 8010df6:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8010df8:	2300      	movs	r3, #0
 8010dfa:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8010e00:	2300      	movs	r3, #0
 8010e02:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8010e04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010e12:	f107 0308 	add.w	r3, r7, #8
 8010e16:	4618      	mov	r0, r3
 8010e18:	f7f5 fc88 	bl	800672c <HAL_RCCEx_PeriphCLKConfig>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	bf14      	ite	ne
 8010e22:	2301      	movne	r3, #1
 8010e24:	2300      	moveq	r3, #0
 8010e26:	b2db      	uxtb	r3, r3
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d001      	beq.n	8010e30 <SystemClock_Config+0x194>
  {
    Error_Handler();
 8010e2c:	f001 f80c 	bl	8011e48 <Error_Handler>
  }
}
 8010e30:	bf00      	nop
 8010e32:	37d0      	adds	r7, #208	; 0xd0
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}
 8010e38:	40023800 	.word	0x40023800
 8010e3c:	40007000 	.word	0x40007000
 8010e40:	01b14868 	.word	0x01b14868

08010e44 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b084      	sub	sp, #16
 8010e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8010e4a:	463b      	mov	r3, r7
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	601a      	str	r2, [r3, #0]
 8010e50:	605a      	str	r2, [r3, #4]
 8010e52:	609a      	str	r2, [r3, #8]
 8010e54:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8010e56:	4b26      	ldr	r3, [pc, #152]	; (8010ef0 <_ZL12MX_ADC3_Initv+0xac>)
 8010e58:	4a26      	ldr	r2, [pc, #152]	; (8010ef4 <_ZL12MX_ADC3_Initv+0xb0>)
 8010e5a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8010e5c:	4b24      	ldr	r3, [pc, #144]	; (8010ef0 <_ZL12MX_ADC3_Initv+0xac>)
 8010e5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010e62:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8010e64:	4b22      	ldr	r3, [pc, #136]	; (8010ef0 <_ZL12MX_ADC3_Initv+0xac>)
 8010e66:	2200      	movs	r2, #0
 8010e68:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8010e6a:	4b21      	ldr	r3, [pc, #132]	; (8010ef0 <_ZL12MX_ADC3_Initv+0xac>)
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8010e70:	4b1f      	ldr	r3, [pc, #124]	; (8010ef0 <_ZL12MX_ADC3_Initv+0xac>)
 8010e72:	2200      	movs	r2, #0
 8010e74:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8010e76:	4b1e      	ldr	r3, [pc, #120]	; (8010ef0 <_ZL12MX_ADC3_Initv+0xac>)
 8010e78:	2200      	movs	r2, #0
 8010e7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8010e7e:	4b1c      	ldr	r3, [pc, #112]	; (8010ef0 <_ZL12MX_ADC3_Initv+0xac>)
 8010e80:	2200      	movs	r2, #0
 8010e82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8010e84:	4b1a      	ldr	r3, [pc, #104]	; (8010ef0 <_ZL12MX_ADC3_Initv+0xac>)
 8010e86:	4a1c      	ldr	r2, [pc, #112]	; (8010ef8 <_ZL12MX_ADC3_Initv+0xb4>)
 8010e88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8010e8a:	4b19      	ldr	r3, [pc, #100]	; (8010ef0 <_ZL12MX_ADC3_Initv+0xac>)
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8010e90:	4b17      	ldr	r3, [pc, #92]	; (8010ef0 <_ZL12MX_ADC3_Initv+0xac>)
 8010e92:	2201      	movs	r2, #1
 8010e94:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8010e96:	4b16      	ldr	r3, [pc, #88]	; (8010ef0 <_ZL12MX_ADC3_Initv+0xac>)
 8010e98:	2200      	movs	r2, #0
 8010e9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8010e9e:	4b14      	ldr	r3, [pc, #80]	; (8010ef0 <_ZL12MX_ADC3_Initv+0xac>)
 8010ea0:	2201      	movs	r2, #1
 8010ea2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8010ea4:	4812      	ldr	r0, [pc, #72]	; (8010ef0 <_ZL12MX_ADC3_Initv+0xac>)
 8010ea6:	f7f0 fc47 	bl	8001738 <HAL_ADC_Init>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	bf14      	ite	ne
 8010eb0:	2301      	movne	r3, #1
 8010eb2:	2300      	moveq	r3, #0
 8010eb4:	b2db      	uxtb	r3, r3
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d001      	beq.n	8010ebe <_ZL12MX_ADC3_Initv+0x7a>
  {
    Error_Handler();
 8010eba:	f000 ffc5 	bl	8011e48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8010ebe:	2304      	movs	r3, #4
 8010ec0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8010ec2:	2301      	movs	r3, #1
 8010ec4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8010eca:	463b      	mov	r3, r7
 8010ecc:	4619      	mov	r1, r3
 8010ece:	4808      	ldr	r0, [pc, #32]	; (8010ef0 <_ZL12MX_ADC3_Initv+0xac>)
 8010ed0:	f7f0 fc76 	bl	80017c0 <HAL_ADC_ConfigChannel>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	bf14      	ite	ne
 8010eda:	2301      	movne	r3, #1
 8010edc:	2300      	moveq	r3, #0
 8010ede:	b2db      	uxtb	r3, r3
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d001      	beq.n	8010ee8 <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 8010ee4:	f000 ffb0 	bl	8011e48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8010ee8:	bf00      	nop
 8010eea:	3710      	adds	r7, #16
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}
 8010ef0:	20008388 	.word	0x20008388
 8010ef4:	40012200 	.word	0x40012200
 8010ef8:	0f000001 	.word	0x0f000001

08010efc <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8010f00:	4b10      	ldr	r3, [pc, #64]	; (8010f44 <_ZL11MX_CRC_Initv+0x48>)
 8010f02:	4a11      	ldr	r2, [pc, #68]	; (8010f48 <_ZL11MX_CRC_Initv+0x4c>)
 8010f04:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8010f06:	4b0f      	ldr	r3, [pc, #60]	; (8010f44 <_ZL11MX_CRC_Initv+0x48>)
 8010f08:	2200      	movs	r2, #0
 8010f0a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8010f0c:	4b0d      	ldr	r3, [pc, #52]	; (8010f44 <_ZL11MX_CRC_Initv+0x48>)
 8010f0e:	2200      	movs	r2, #0
 8010f10:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8010f12:	4b0c      	ldr	r3, [pc, #48]	; (8010f44 <_ZL11MX_CRC_Initv+0x48>)
 8010f14:	2200      	movs	r2, #0
 8010f16:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8010f18:	4b0a      	ldr	r3, [pc, #40]	; (8010f44 <_ZL11MX_CRC_Initv+0x48>)
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8010f1e:	4b09      	ldr	r3, [pc, #36]	; (8010f44 <_ZL11MX_CRC_Initv+0x48>)
 8010f20:	2201      	movs	r2, #1
 8010f22:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8010f24:	4807      	ldr	r0, [pc, #28]	; (8010f44 <_ZL11MX_CRC_Initv+0x48>)
 8010f26:	f7f0 ff8b 	bl	8001e40 <HAL_CRC_Init>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	bf14      	ite	ne
 8010f30:	2301      	movne	r3, #1
 8010f32:	2300      	moveq	r3, #0
 8010f34:	b2db      	uxtb	r3, r3
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d001      	beq.n	8010f3e <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 8010f3a:	f000 ff85 	bl	8011e48 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8010f3e:	bf00      	nop
 8010f40:	bd80      	pop	{r7, pc}
 8010f42:	bf00      	nop
 8010f44:	200083d0 	.word	0x200083d0
 8010f48:	40023000 	.word	0x40023000

08010f4c <_ZL12MX_DCMI_Initv>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8010f50:	4b19      	ldr	r3, [pc, #100]	; (8010fb8 <_ZL12MX_DCMI_Initv+0x6c>)
 8010f52:	4a1a      	ldr	r2, [pc, #104]	; (8010fbc <_ZL12MX_DCMI_Initv+0x70>)
 8010f54:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8010f56:	4b18      	ldr	r3, [pc, #96]	; (8010fb8 <_ZL12MX_DCMI_Initv+0x6c>)
 8010f58:	2200      	movs	r2, #0
 8010f5a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8010f5c:	4b16      	ldr	r3, [pc, #88]	; (8010fb8 <_ZL12MX_DCMI_Initv+0x6c>)
 8010f5e:	2200      	movs	r2, #0
 8010f60:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8010f62:	4b15      	ldr	r3, [pc, #84]	; (8010fb8 <_ZL12MX_DCMI_Initv+0x6c>)
 8010f64:	2200      	movs	r2, #0
 8010f66:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8010f68:	4b13      	ldr	r3, [pc, #76]	; (8010fb8 <_ZL12MX_DCMI_Initv+0x6c>)
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8010f6e:	4b12      	ldr	r3, [pc, #72]	; (8010fb8 <_ZL12MX_DCMI_Initv+0x6c>)
 8010f70:	2200      	movs	r2, #0
 8010f72:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8010f74:	4b10      	ldr	r3, [pc, #64]	; (8010fb8 <_ZL12MX_DCMI_Initv+0x6c>)
 8010f76:	2200      	movs	r2, #0
 8010f78:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8010f7a:	4b0f      	ldr	r3, [pc, #60]	; (8010fb8 <_ZL12MX_DCMI_Initv+0x6c>)
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8010f80:	4b0d      	ldr	r3, [pc, #52]	; (8010fb8 <_ZL12MX_DCMI_Initv+0x6c>)
 8010f82:	2200      	movs	r2, #0
 8010f84:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8010f86:	4b0c      	ldr	r3, [pc, #48]	; (8010fb8 <_ZL12MX_DCMI_Initv+0x6c>)
 8010f88:	2200      	movs	r2, #0
 8010f8a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8010f8c:	4b0a      	ldr	r3, [pc, #40]	; (8010fb8 <_ZL12MX_DCMI_Initv+0x6c>)
 8010f8e:	2200      	movs	r2, #0
 8010f90:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8010f92:	4b09      	ldr	r3, [pc, #36]	; (8010fb8 <_ZL12MX_DCMI_Initv+0x6c>)
 8010f94:	2200      	movs	r2, #0
 8010f96:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8010f98:	4807      	ldr	r0, [pc, #28]	; (8010fb8 <_ZL12MX_DCMI_Initv+0x6c>)
 8010f9a:	f7f1 f83b 	bl	8002014 <HAL_DCMI_Init>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	bf14      	ite	ne
 8010fa4:	2301      	movne	r3, #1
 8010fa6:	2300      	moveq	r3, #0
 8010fa8:	b2db      	uxtb	r3, r3
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d001      	beq.n	8010fb2 <_ZL12MX_DCMI_Initv+0x66>
  {
    Error_Handler();
 8010fae:	f000 ff4b 	bl	8011e48 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8010fb2:	bf00      	nop
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	bf00      	nop
 8010fb8:	200083f4 	.word	0x200083f4
 8010fbc:	50050000 	.word	0x50050000

08010fc0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8010fc4:	4b22      	ldr	r3, [pc, #136]	; (8011050 <_ZL12MX_I2C1_Initv+0x90>)
 8010fc6:	4a23      	ldr	r2, [pc, #140]	; (8011054 <_ZL12MX_I2C1_Initv+0x94>)
 8010fc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8010fca:	4b21      	ldr	r3, [pc, #132]	; (8011050 <_ZL12MX_I2C1_Initv+0x90>)
 8010fcc:	4a22      	ldr	r2, [pc, #136]	; (8011058 <_ZL12MX_I2C1_Initv+0x98>)
 8010fce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8010fd0:	4b1f      	ldr	r3, [pc, #124]	; (8011050 <_ZL12MX_I2C1_Initv+0x90>)
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010fd6:	4b1e      	ldr	r3, [pc, #120]	; (8011050 <_ZL12MX_I2C1_Initv+0x90>)
 8010fd8:	2201      	movs	r2, #1
 8010fda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010fdc:	4b1c      	ldr	r3, [pc, #112]	; (8011050 <_ZL12MX_I2C1_Initv+0x90>)
 8010fde:	2200      	movs	r2, #0
 8010fe0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8010fe2:	4b1b      	ldr	r3, [pc, #108]	; (8011050 <_ZL12MX_I2C1_Initv+0x90>)
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8010fe8:	4b19      	ldr	r3, [pc, #100]	; (8011050 <_ZL12MX_I2C1_Initv+0x90>)
 8010fea:	2200      	movs	r2, #0
 8010fec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010fee:	4b18      	ldr	r3, [pc, #96]	; (8011050 <_ZL12MX_I2C1_Initv+0x90>)
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8010ff4:	4b16      	ldr	r3, [pc, #88]	; (8011050 <_ZL12MX_I2C1_Initv+0x90>)
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8010ffa:	4815      	ldr	r0, [pc, #84]	; (8011050 <_ZL12MX_I2C1_Initv+0x90>)
 8010ffc:	f7f3 fc10 	bl	8004820 <HAL_I2C_Init>
 8011000:	4603      	mov	r3, r0
 8011002:	2b00      	cmp	r3, #0
 8011004:	bf14      	ite	ne
 8011006:	2301      	movne	r3, #1
 8011008:	2300      	moveq	r3, #0
 801100a:	b2db      	uxtb	r3, r3
 801100c:	2b00      	cmp	r3, #0
 801100e:	d001      	beq.n	8011014 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8011010:	f000 ff1a 	bl	8011e48 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8011014:	2100      	movs	r1, #0
 8011016:	480e      	ldr	r0, [pc, #56]	; (8011050 <_ZL12MX_I2C1_Initv+0x90>)
 8011018:	f7f4 f91a 	bl	8005250 <HAL_I2CEx_ConfigAnalogFilter>
 801101c:	4603      	mov	r3, r0
 801101e:	2b00      	cmp	r3, #0
 8011020:	bf14      	ite	ne
 8011022:	2301      	movne	r3, #1
 8011024:	2300      	moveq	r3, #0
 8011026:	b2db      	uxtb	r3, r3
 8011028:	2b00      	cmp	r3, #0
 801102a:	d001      	beq.n	8011030 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 801102c:	f000 ff0c 	bl	8011e48 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8011030:	2100      	movs	r1, #0
 8011032:	4807      	ldr	r0, [pc, #28]	; (8011050 <_ZL12MX_I2C1_Initv+0x90>)
 8011034:	f7f4 f957 	bl	80052e6 <HAL_I2CEx_ConfigDigitalFilter>
 8011038:	4603      	mov	r3, r0
 801103a:	2b00      	cmp	r3, #0
 801103c:	bf14      	ite	ne
 801103e:	2301      	movne	r3, #1
 8011040:	2300      	moveq	r3, #0
 8011042:	b2db      	uxtb	r3, r3
 8011044:	2b00      	cmp	r3, #0
 8011046:	d001      	beq.n	801104c <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8011048:	f000 fefe 	bl	8011e48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 801104c:	bf00      	nop
 801104e:	bd80      	pop	{r7, pc}
 8011050:	20008444 	.word	0x20008444
 8011054:	40005400 	.word	0x40005400
 8011058:	00c0eaff 	.word	0x00c0eaff

0801105c <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8011060:	4b22      	ldr	r3, [pc, #136]	; (80110ec <_ZL12MX_I2C3_Initv+0x90>)
 8011062:	4a23      	ldr	r2, [pc, #140]	; (80110f0 <_ZL12MX_I2C3_Initv+0x94>)
 8011064:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8011066:	4b21      	ldr	r3, [pc, #132]	; (80110ec <_ZL12MX_I2C3_Initv+0x90>)
 8011068:	4a22      	ldr	r2, [pc, #136]	; (80110f4 <_ZL12MX_I2C3_Initv+0x98>)
 801106a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 801106c:	4b1f      	ldr	r3, [pc, #124]	; (80110ec <_ZL12MX_I2C3_Initv+0x90>)
 801106e:	2200      	movs	r2, #0
 8011070:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8011072:	4b1e      	ldr	r3, [pc, #120]	; (80110ec <_ZL12MX_I2C3_Initv+0x90>)
 8011074:	2201      	movs	r2, #1
 8011076:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011078:	4b1c      	ldr	r3, [pc, #112]	; (80110ec <_ZL12MX_I2C3_Initv+0x90>)
 801107a:	2200      	movs	r2, #0
 801107c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 801107e:	4b1b      	ldr	r3, [pc, #108]	; (80110ec <_ZL12MX_I2C3_Initv+0x90>)
 8011080:	2200      	movs	r2, #0
 8011082:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8011084:	4b19      	ldr	r3, [pc, #100]	; (80110ec <_ZL12MX_I2C3_Initv+0x90>)
 8011086:	2200      	movs	r2, #0
 8011088:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801108a:	4b18      	ldr	r3, [pc, #96]	; (80110ec <_ZL12MX_I2C3_Initv+0x90>)
 801108c:	2200      	movs	r2, #0
 801108e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011090:	4b16      	ldr	r3, [pc, #88]	; (80110ec <_ZL12MX_I2C3_Initv+0x90>)
 8011092:	2200      	movs	r2, #0
 8011094:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8011096:	4815      	ldr	r0, [pc, #84]	; (80110ec <_ZL12MX_I2C3_Initv+0x90>)
 8011098:	f7f3 fbc2 	bl	8004820 <HAL_I2C_Init>
 801109c:	4603      	mov	r3, r0
 801109e:	2b00      	cmp	r3, #0
 80110a0:	bf14      	ite	ne
 80110a2:	2301      	movne	r3, #1
 80110a4:	2300      	moveq	r3, #0
 80110a6:	b2db      	uxtb	r3, r3
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d001      	beq.n	80110b0 <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 80110ac:	f000 fecc 	bl	8011e48 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80110b0:	2100      	movs	r1, #0
 80110b2:	480e      	ldr	r0, [pc, #56]	; (80110ec <_ZL12MX_I2C3_Initv+0x90>)
 80110b4:	f7f4 f8cc 	bl	8005250 <HAL_I2CEx_ConfigAnalogFilter>
 80110b8:	4603      	mov	r3, r0
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	bf14      	ite	ne
 80110be:	2301      	movne	r3, #1
 80110c0:	2300      	moveq	r3, #0
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d001      	beq.n	80110cc <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 80110c8:	f000 febe 	bl	8011e48 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80110cc:	2100      	movs	r1, #0
 80110ce:	4807      	ldr	r0, [pc, #28]	; (80110ec <_ZL12MX_I2C3_Initv+0x90>)
 80110d0:	f7f4 f909 	bl	80052e6 <HAL_I2CEx_ConfigDigitalFilter>
 80110d4:	4603      	mov	r3, r0
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	bf14      	ite	ne
 80110da:	2301      	movne	r3, #1
 80110dc:	2300      	moveq	r3, #0
 80110de:	b2db      	uxtb	r3, r3
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d001      	beq.n	80110e8 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 80110e4:	f000 feb0 	bl	8011e48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80110e8:	bf00      	nop
 80110ea:	bd80      	pop	{r7, pc}
 80110ec:	20008490 	.word	0x20008490
 80110f0:	40005c00 	.word	0x40005c00
 80110f4:	00c0eaff 	.word	0x00c0eaff

080110f8 <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80110fc:	4b14      	ldr	r3, [pc, #80]	; (8011150 <_ZL15MX_QUADSPI_Initv+0x58>)
 80110fe:	4a15      	ldr	r2, [pc, #84]	; (8011154 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8011100:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8011102:	4b13      	ldr	r3, [pc, #76]	; (8011150 <_ZL15MX_QUADSPI_Initv+0x58>)
 8011104:	22ff      	movs	r2, #255	; 0xff
 8011106:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8011108:	4b11      	ldr	r3, [pc, #68]	; (8011150 <_ZL15MX_QUADSPI_Initv+0x58>)
 801110a:	2201      	movs	r2, #1
 801110c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 801110e:	4b10      	ldr	r3, [pc, #64]	; (8011150 <_ZL15MX_QUADSPI_Initv+0x58>)
 8011110:	2200      	movs	r2, #0
 8011112:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8011114:	4b0e      	ldr	r3, [pc, #56]	; (8011150 <_ZL15MX_QUADSPI_Initv+0x58>)
 8011116:	2201      	movs	r2, #1
 8011118:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 801111a:	4b0d      	ldr	r3, [pc, #52]	; (8011150 <_ZL15MX_QUADSPI_Initv+0x58>)
 801111c:	2200      	movs	r2, #0
 801111e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8011120:	4b0b      	ldr	r3, [pc, #44]	; (8011150 <_ZL15MX_QUADSPI_Initv+0x58>)
 8011122:	2200      	movs	r2, #0
 8011124:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8011126:	4b0a      	ldr	r3, [pc, #40]	; (8011150 <_ZL15MX_QUADSPI_Initv+0x58>)
 8011128:	2200      	movs	r2, #0
 801112a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 801112c:	4b08      	ldr	r3, [pc, #32]	; (8011150 <_ZL15MX_QUADSPI_Initv+0x58>)
 801112e:	2200      	movs	r2, #0
 8011130:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8011132:	4807      	ldr	r0, [pc, #28]	; (8011150 <_ZL15MX_QUADSPI_Initv+0x58>)
 8011134:	f7f4 fdba 	bl	8005cac <HAL_QSPI_Init>
 8011138:	4603      	mov	r3, r0
 801113a:	2b00      	cmp	r3, #0
 801113c:	bf14      	ite	ne
 801113e:	2301      	movne	r3, #1
 8011140:	2300      	moveq	r3, #0
 8011142:	b2db      	uxtb	r3, r3
 8011144:	2b00      	cmp	r3, #0
 8011146:	d001      	beq.n	801114c <_ZL15MX_QUADSPI_Initv+0x54>
  {
    Error_Handler();
 8011148:	f000 fe7e 	bl	8011e48 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 801114c:	bf00      	nop
 801114e:	bd80      	pop	{r7, pc}
 8011150:	200084dc 	.word	0x200084dc
 8011154:	a0001000 	.word	0xa0001000

08011158 <_ZL11MX_RNG_Initv>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 801115c:	4b08      	ldr	r3, [pc, #32]	; (8011180 <_ZL11MX_RNG_Initv+0x28>)
 801115e:	4a09      	ldr	r2, [pc, #36]	; (8011184 <_ZL11MX_RNG_Initv+0x2c>)
 8011160:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8011162:	4807      	ldr	r0, [pc, #28]	; (8011180 <_ZL11MX_RNG_Initv+0x28>)
 8011164:	f7f6 f804 	bl	8007170 <HAL_RNG_Init>
 8011168:	4603      	mov	r3, r0
 801116a:	2b00      	cmp	r3, #0
 801116c:	bf14      	ite	ne
 801116e:	2301      	movne	r3, #1
 8011170:	2300      	moveq	r3, #0
 8011172:	b2db      	uxtb	r3, r3
 8011174:	2b00      	cmp	r3, #0
 8011176:	d001      	beq.n	801117c <_ZL11MX_RNG_Initv+0x24>
  {
    Error_Handler();
 8011178:	f000 fe66 	bl	8011e48 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 801117c:	bf00      	nop
 801117e:	bd80      	pop	{r7, pc}
 8011180:	20008528 	.word	0x20008528
 8011184:	50060800 	.word	0x50060800

08011188 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b092      	sub	sp, #72	; 0x48
 801118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 801118e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011192:	2200      	movs	r2, #0
 8011194:	601a      	str	r2, [r3, #0]
 8011196:	605a      	str	r2, [r3, #4]
 8011198:	609a      	str	r2, [r3, #8]
 801119a:	60da      	str	r2, [r3, #12]
 801119c:	611a      	str	r2, [r3, #16]
 801119e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80111a0:	2300      	movs	r3, #0
 80111a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80111a4:	463b      	mov	r3, r7
 80111a6:	222c      	movs	r2, #44	; 0x2c
 80111a8:	2100      	movs	r1, #0
 80111aa:	4618      	mov	r0, r3
 80111ac:	f010 f879 	bl	80212a2 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80111b0:	4b56      	ldr	r3, [pc, #344]	; (801130c <_ZL11MX_RTC_Initv+0x184>)
 80111b2:	4a57      	ldr	r2, [pc, #348]	; (8011310 <_ZL11MX_RTC_Initv+0x188>)
 80111b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80111b6:	4b55      	ldr	r3, [pc, #340]	; (801130c <_ZL11MX_RTC_Initv+0x184>)
 80111b8:	2200      	movs	r2, #0
 80111ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80111bc:	4b53      	ldr	r3, [pc, #332]	; (801130c <_ZL11MX_RTC_Initv+0x184>)
 80111be:	227f      	movs	r2, #127	; 0x7f
 80111c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80111c2:	4b52      	ldr	r3, [pc, #328]	; (801130c <_ZL11MX_RTC_Initv+0x184>)
 80111c4:	22ff      	movs	r2, #255	; 0xff
 80111c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80111c8:	4b50      	ldr	r3, [pc, #320]	; (801130c <_ZL11MX_RTC_Initv+0x184>)
 80111ca:	2200      	movs	r2, #0
 80111cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80111ce:	4b4f      	ldr	r3, [pc, #316]	; (801130c <_ZL11MX_RTC_Initv+0x184>)
 80111d0:	2200      	movs	r2, #0
 80111d2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80111d4:	4b4d      	ldr	r3, [pc, #308]	; (801130c <_ZL11MX_RTC_Initv+0x184>)
 80111d6:	2200      	movs	r2, #0
 80111d8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80111da:	484c      	ldr	r0, [pc, #304]	; (801130c <_ZL11MX_RTC_Initv+0x184>)
 80111dc:	f7f5 fff2 	bl	80071c4 <HAL_RTC_Init>
 80111e0:	4603      	mov	r3, r0
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	bf14      	ite	ne
 80111e6:	2301      	movne	r3, #1
 80111e8:	2300      	moveq	r3, #0
 80111ea:	b2db      	uxtb	r3, r3
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d001      	beq.n	80111f4 <_ZL11MX_RTC_Initv+0x6c>
  {
    Error_Handler();
 80111f0:	f000 fe2a 	bl	8011e48 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80111f4:	2300      	movs	r3, #0
 80111f6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80111fa:	2300      	movs	r3, #0
 80111fc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8011200:	2300      	movs	r3, #0
 8011202:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8011206:	2300      	movs	r3, #0
 8011208:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801120a:	2300      	movs	r3, #0
 801120c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 801120e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011212:	2201      	movs	r2, #1
 8011214:	4619      	mov	r1, r3
 8011216:	483d      	ldr	r0, [pc, #244]	; (801130c <_ZL11MX_RTC_Initv+0x184>)
 8011218:	f7f6 f850 	bl	80072bc <HAL_RTC_SetTime>
 801121c:	4603      	mov	r3, r0
 801121e:	2b00      	cmp	r3, #0
 8011220:	bf14      	ite	ne
 8011222:	2301      	movne	r3, #1
 8011224:	2300      	moveq	r3, #0
 8011226:	b2db      	uxtb	r3, r3
 8011228:	2b00      	cmp	r3, #0
 801122a:	d001      	beq.n	8011230 <_ZL11MX_RTC_Initv+0xa8>
  {
    Error_Handler();
 801122c:	f000 fe0c 	bl	8011e48 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8011230:	2301      	movs	r3, #1
 8011232:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8011236:	2301      	movs	r3, #1
 8011238:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 801123c:	2301      	movs	r3, #1
 801123e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8011242:	2300      	movs	r3, #0
 8011244:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8011248:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801124c:	2201      	movs	r2, #1
 801124e:	4619      	mov	r1, r3
 8011250:	482e      	ldr	r0, [pc, #184]	; (801130c <_ZL11MX_RTC_Initv+0x184>)
 8011252:	f7f6 f8f1 	bl	8007438 <HAL_RTC_SetDate>
 8011256:	4603      	mov	r3, r0
 8011258:	2b00      	cmp	r3, #0
 801125a:	bf14      	ite	ne
 801125c:	2301      	movne	r3, #1
 801125e:	2300      	moveq	r3, #0
 8011260:	b2db      	uxtb	r3, r3
 8011262:	2b00      	cmp	r3, #0
 8011264:	d001      	beq.n	801126a <_ZL11MX_RTC_Initv+0xe2>
  {
    Error_Handler();
 8011266:	f000 fdef 	bl	8011e48 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 801126a:	2300      	movs	r3, #0
 801126c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 801126e:	2300      	movs	r3, #0
 8011270:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8011272:	2300      	movs	r3, #0
 8011274:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8011276:	2300      	movs	r3, #0
 8011278:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801127a:	2300      	movs	r3, #0
 801127c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801127e:	2300      	movs	r3, #0
 8011280:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8011282:	2300      	movs	r3, #0
 8011284:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8011286:	2300      	movs	r3, #0
 8011288:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 801128a:	2300      	movs	r3, #0
 801128c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 801128e:	2301      	movs	r3, #1
 8011290:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8011294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011298:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 801129a:	463b      	mov	r3, r7
 801129c:	2201      	movs	r2, #1
 801129e:	4619      	mov	r1, r3
 80112a0:	481a      	ldr	r0, [pc, #104]	; (801130c <_ZL11MX_RTC_Initv+0x184>)
 80112a2:	f7f6 f971 	bl	8007588 <HAL_RTC_SetAlarm>
 80112a6:	4603      	mov	r3, r0
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	bf14      	ite	ne
 80112ac:	2301      	movne	r3, #1
 80112ae:	2300      	moveq	r3, #0
 80112b0:	b2db      	uxtb	r3, r3
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d001      	beq.n	80112ba <_ZL11MX_RTC_Initv+0x132>
  {
    Error_Handler();
 80112b6:	f000 fdc7 	bl	8011e48 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 80112ba:	2301      	movs	r3, #1
 80112bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 80112c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80112c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80112c6:	463b      	mov	r3, r7
 80112c8:	2201      	movs	r2, #1
 80112ca:	4619      	mov	r1, r3
 80112cc:	480f      	ldr	r0, [pc, #60]	; (801130c <_ZL11MX_RTC_Initv+0x184>)
 80112ce:	f7f6 f95b 	bl	8007588 <HAL_RTC_SetAlarm>
 80112d2:	4603      	mov	r3, r0
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	bf14      	ite	ne
 80112d8:	2301      	movne	r3, #1
 80112da:	2300      	moveq	r3, #0
 80112dc:	b2db      	uxtb	r3, r3
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d001      	beq.n	80112e6 <_ZL11MX_RTC_Initv+0x15e>
  {
    Error_Handler();
 80112e2:	f000 fdb1 	bl	8011e48 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80112e6:	2202      	movs	r2, #2
 80112e8:	2100      	movs	r1, #0
 80112ea:	4808      	ldr	r0, [pc, #32]	; (801130c <_ZL11MX_RTC_Initv+0x184>)
 80112ec:	f7f6 fad6 	bl	800789c <HAL_RTCEx_SetTimeStamp>
 80112f0:	4603      	mov	r3, r0
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	bf14      	ite	ne
 80112f6:	2301      	movne	r3, #1
 80112f8:	2300      	moveq	r3, #0
 80112fa:	b2db      	uxtb	r3, r3
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d001      	beq.n	8011304 <_ZL11MX_RTC_Initv+0x17c>
  {
    Error_Handler();
 8011300:	f000 fda2 	bl	8011e48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8011304:	bf00      	nop
 8011306:	3748      	adds	r7, #72	; 0x48
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}
 801130c:	20008538 	.word	0x20008538
 8011310:	40002800 	.word	0x40002800

08011314 <_ZL12MX_SAI2_Initv>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8011318:	4b52      	ldr	r3, [pc, #328]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 801131a:	4a53      	ldr	r2, [pc, #332]	; (8011468 <_ZL12MX_SAI2_Initv+0x154>)
 801131c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 801131e:	4b51      	ldr	r3, [pc, #324]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 8011320:	2200      	movs	r2, #0
 8011322:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8011324:	4b4f      	ldr	r3, [pc, #316]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 8011326:	2200      	movs	r2, #0
 8011328:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 801132a:	4b4e      	ldr	r3, [pc, #312]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 801132c:	2240      	movs	r2, #64	; 0x40
 801132e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8011330:	4b4c      	ldr	r3, [pc, #304]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 8011332:	2200      	movs	r2, #0
 8011334:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8011336:	4b4b      	ldr	r3, [pc, #300]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 8011338:	2200      	movs	r2, #0
 801133a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 801133c:	4b49      	ldr	r3, [pc, #292]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 801133e:	2200      	movs	r2, #0
 8011340:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8011342:	4b48      	ldr	r3, [pc, #288]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 8011344:	2200      	movs	r2, #0
 8011346:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8011348:	4b46      	ldr	r3, [pc, #280]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 801134a:	2200      	movs	r2, #0
 801134c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 801134e:	4b45      	ldr	r3, [pc, #276]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 8011350:	2200      	movs	r2, #0
 8011352:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8011354:	4b43      	ldr	r3, [pc, #268]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 8011356:	4a45      	ldr	r2, [pc, #276]	; (801146c <_ZL12MX_SAI2_Initv+0x158>)
 8011358:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 801135a:	4b42      	ldr	r3, [pc, #264]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 801135c:	2200      	movs	r2, #0
 801135e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8011360:	4b40      	ldr	r3, [pc, #256]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 8011362:	2200      	movs	r2, #0
 8011364:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8011366:	4b3f      	ldr	r3, [pc, #252]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 8011368:	2200      	movs	r2, #0
 801136a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 801136c:	4b3d      	ldr	r3, [pc, #244]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 801136e:	2200      	movs	r2, #0
 8011370:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8011372:	4b3c      	ldr	r3, [pc, #240]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 8011374:	2208      	movs	r2, #8
 8011376:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8011378:	4b3a      	ldr	r3, [pc, #232]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 801137a:	2201      	movs	r2, #1
 801137c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 801137e:	4b39      	ldr	r3, [pc, #228]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 8011380:	2200      	movs	r2, #0
 8011382:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8011384:	4b37      	ldr	r3, [pc, #220]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 8011386:	2200      	movs	r2, #0
 8011388:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 801138a:	4b36      	ldr	r3, [pc, #216]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 801138c:	2200      	movs	r2, #0
 801138e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8011390:	4b34      	ldr	r3, [pc, #208]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 8011392:	2200      	movs	r2, #0
 8011394:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8011396:	4b33      	ldr	r3, [pc, #204]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 8011398:	2200      	movs	r2, #0
 801139a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 801139c:	4b31      	ldr	r3, [pc, #196]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 801139e:	2201      	movs	r2, #1
 80113a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80113a2:	4b30      	ldr	r3, [pc, #192]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 80113a4:	2200      	movs	r2, #0
 80113a6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80113a8:	482e      	ldr	r0, [pc, #184]	; (8011464 <_ZL12MX_SAI2_Initv+0x150>)
 80113aa:	f7f6 facd 	bl	8007948 <HAL_SAI_Init>
 80113ae:	4603      	mov	r3, r0
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	bf14      	ite	ne
 80113b4:	2301      	movne	r3, #1
 80113b6:	2300      	moveq	r3, #0
 80113b8:	b2db      	uxtb	r3, r3
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d001      	beq.n	80113c2 <_ZL12MX_SAI2_Initv+0xae>
  {
    Error_Handler();
 80113be:	f000 fd43 	bl	8011e48 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80113c2:	4b2b      	ldr	r3, [pc, #172]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 80113c4:	4a2b      	ldr	r2, [pc, #172]	; (8011474 <_ZL12MX_SAI2_Initv+0x160>)
 80113c6:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80113c8:	4b29      	ldr	r3, [pc, #164]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 80113ca:	2200      	movs	r2, #0
 80113cc:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80113ce:	4b28      	ldr	r3, [pc, #160]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 80113d0:	2203      	movs	r2, #3
 80113d2:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80113d4:	4b26      	ldr	r3, [pc, #152]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 80113d6:	2240      	movs	r2, #64	; 0x40
 80113d8:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80113da:	4b25      	ldr	r3, [pc, #148]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 80113dc:	2200      	movs	r2, #0
 80113de:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80113e0:	4b23      	ldr	r3, [pc, #140]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 80113e2:	2200      	movs	r2, #0
 80113e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80113e6:	4b22      	ldr	r3, [pc, #136]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 80113e8:	2201      	movs	r2, #1
 80113ea:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80113ec:	4b20      	ldr	r3, [pc, #128]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 80113ee:	2200      	movs	r2, #0
 80113f0:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80113f2:	4b1f      	ldr	r3, [pc, #124]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 80113f4:	2200      	movs	r2, #0
 80113f6:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80113f8:	4b1d      	ldr	r3, [pc, #116]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 80113fa:	2200      	movs	r2, #0
 80113fc:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80113fe:	4b1c      	ldr	r3, [pc, #112]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 8011400:	2200      	movs	r2, #0
 8011402:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8011404:	4b1a      	ldr	r3, [pc, #104]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 8011406:	2200      	movs	r2, #0
 8011408:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 801140a:	4b19      	ldr	r3, [pc, #100]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 801140c:	2200      	movs	r2, #0
 801140e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8011410:	4b17      	ldr	r3, [pc, #92]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 8011412:	2208      	movs	r2, #8
 8011414:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8011416:	4b16      	ldr	r3, [pc, #88]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 8011418:	2201      	movs	r2, #1
 801141a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 801141c:	4b14      	ldr	r3, [pc, #80]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 801141e:	2200      	movs	r2, #0
 8011420:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8011422:	4b13      	ldr	r3, [pc, #76]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 8011424:	2200      	movs	r2, #0
 8011426:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8011428:	4b11      	ldr	r3, [pc, #68]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 801142a:	2200      	movs	r2, #0
 801142c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 801142e:	4b10      	ldr	r3, [pc, #64]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 8011430:	2200      	movs	r2, #0
 8011432:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8011434:	4b0e      	ldr	r3, [pc, #56]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 8011436:	2200      	movs	r2, #0
 8011438:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 801143a:	4b0d      	ldr	r3, [pc, #52]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 801143c:	2201      	movs	r2, #1
 801143e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8011440:	4b0b      	ldr	r3, [pc, #44]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 8011442:	2200      	movs	r2, #0
 8011444:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8011446:	480a      	ldr	r0, [pc, #40]	; (8011470 <_ZL12MX_SAI2_Initv+0x15c>)
 8011448:	f7f6 fa7e 	bl	8007948 <HAL_SAI_Init>
 801144c:	4603      	mov	r3, r0
 801144e:	2b00      	cmp	r3, #0
 8011450:	bf14      	ite	ne
 8011452:	2301      	movne	r3, #1
 8011454:	2300      	moveq	r3, #0
 8011456:	b2db      	uxtb	r3, r3
 8011458:	2b00      	cmp	r3, #0
 801145a:	d001      	beq.n	8011460 <_ZL12MX_SAI2_Initv+0x14c>
  {
    Error_Handler();
 801145c:	f000 fcf4 	bl	8011e48 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8011460:	bf00      	nop
 8011462:	bd80      	pop	{r7, pc}
 8011464:	20008558 	.word	0x20008558
 8011468:	40015c04 	.word	0x40015c04
 801146c:	0002ee00 	.word	0x0002ee00
 8011470:	200085dc 	.word	0x200085dc
 8011474:	40015c24 	.word	0x40015c24

08011478 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8011478:	b480      	push	{r7}
 801147a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 801147c:	4b0c      	ldr	r3, [pc, #48]	; (80114b0 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 801147e:	4a0d      	ldr	r2, [pc, #52]	; (80114b4 <_ZL17MX_SDMMC1_SD_Initv+0x3c>)
 8011480:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8011482:	4b0b      	ldr	r3, [pc, #44]	; (80114b0 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8011484:	2200      	movs	r2, #0
 8011486:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8011488:	4b09      	ldr	r3, [pc, #36]	; (80114b0 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 801148a:	2200      	movs	r2, #0
 801148c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801148e:	4b08      	ldr	r3, [pc, #32]	; (80114b0 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8011490:	2200      	movs	r2, #0
 8011492:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8011494:	4b06      	ldr	r3, [pc, #24]	; (80114b0 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8011496:	2200      	movs	r2, #0
 8011498:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801149a:	4b05      	ldr	r3, [pc, #20]	; (80114b0 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 801149c:	2200      	movs	r2, #0
 801149e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80114a0:	4b03      	ldr	r3, [pc, #12]	; (80114b0 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 80114a2:	2200      	movs	r2, #0
 80114a4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80114a6:	bf00      	nop
 80114a8:	46bd      	mov	sp, r7
 80114aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ae:	4770      	bx	lr
 80114b0:	20008660 	.word	0x20008660
 80114b4:	40012c00 	.word	0x40012c00

080114b8 <_ZL15MX_SPDIFRX_Initv>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80114bc:	4b18      	ldr	r3, [pc, #96]	; (8011520 <_ZL15MX_SPDIFRX_Initv+0x68>)
 80114be:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80114c2:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80114c4:	4b16      	ldr	r3, [pc, #88]	; (8011520 <_ZL15MX_SPDIFRX_Initv+0x68>)
 80114c6:	2200      	movs	r2, #0
 80114c8:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80114ca:	4b15      	ldr	r3, [pc, #84]	; (8011520 <_ZL15MX_SPDIFRX_Initv+0x68>)
 80114cc:	2200      	movs	r2, #0
 80114ce:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80114d0:	4b13      	ldr	r3, [pc, #76]	; (8011520 <_ZL15MX_SPDIFRX_Initv+0x68>)
 80114d2:	2200      	movs	r2, #0
 80114d4:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80114d6:	4b12      	ldr	r3, [pc, #72]	; (8011520 <_ZL15MX_SPDIFRX_Initv+0x68>)
 80114d8:	2200      	movs	r2, #0
 80114da:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80114dc:	4b10      	ldr	r3, [pc, #64]	; (8011520 <_ZL15MX_SPDIFRX_Initv+0x68>)
 80114de:	2200      	movs	r2, #0
 80114e0:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80114e2:	4b0f      	ldr	r3, [pc, #60]	; (8011520 <_ZL15MX_SPDIFRX_Initv+0x68>)
 80114e4:	2200      	movs	r2, #0
 80114e6:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80114e8:	4b0d      	ldr	r3, [pc, #52]	; (8011520 <_ZL15MX_SPDIFRX_Initv+0x68>)
 80114ea:	2200      	movs	r2, #0
 80114ec:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80114ee:	4b0c      	ldr	r3, [pc, #48]	; (8011520 <_ZL15MX_SPDIFRX_Initv+0x68>)
 80114f0:	2200      	movs	r2, #0
 80114f2:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80114f4:	4b0a      	ldr	r3, [pc, #40]	; (8011520 <_ZL15MX_SPDIFRX_Initv+0x68>)
 80114f6:	2200      	movs	r2, #0
 80114f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80114fa:	4b09      	ldr	r3, [pc, #36]	; (8011520 <_ZL15MX_SPDIFRX_Initv+0x68>)
 80114fc:	2200      	movs	r2, #0
 80114fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8011500:	4807      	ldr	r0, [pc, #28]	; (8011520 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8011502:	f7f7 fd09 	bl	8008f18 <HAL_SPDIFRX_Init>
 8011506:	4603      	mov	r3, r0
 8011508:	2b00      	cmp	r3, #0
 801150a:	bf14      	ite	ne
 801150c:	2301      	movne	r3, #1
 801150e:	2300      	moveq	r3, #0
 8011510:	b2db      	uxtb	r3, r3
 8011512:	2b00      	cmp	r3, #0
 8011514:	d001      	beq.n	801151a <_ZL15MX_SPDIFRX_Initv+0x62>
  {
    Error_Handler();
 8011516:	f000 fc97 	bl	8011e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 801151a:	bf00      	nop
 801151c:	bd80      	pop	{r7, pc}
 801151e:	bf00      	nop
 8011520:	200086e4 	.word	0x200086e4

08011524 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8011528:	4b1d      	ldr	r3, [pc, #116]	; (80115a0 <_ZL12MX_SPI2_Initv+0x7c>)
 801152a:	4a1e      	ldr	r2, [pc, #120]	; (80115a4 <_ZL12MX_SPI2_Initv+0x80>)
 801152c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 801152e:	4b1c      	ldr	r3, [pc, #112]	; (80115a0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011530:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011534:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8011536:	4b1a      	ldr	r3, [pc, #104]	; (80115a0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011538:	2200      	movs	r2, #0
 801153a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 801153c:	4b18      	ldr	r3, [pc, #96]	; (80115a0 <_ZL12MX_SPI2_Initv+0x7c>)
 801153e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8011542:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011544:	4b16      	ldr	r3, [pc, #88]	; (80115a0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011546:	2200      	movs	r2, #0
 8011548:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 801154a:	4b15      	ldr	r3, [pc, #84]	; (80115a0 <_ZL12MX_SPI2_Initv+0x7c>)
 801154c:	2200      	movs	r2, #0
 801154e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8011550:	4b13      	ldr	r3, [pc, #76]	; (80115a0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011556:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011558:	4b11      	ldr	r3, [pc, #68]	; (80115a0 <_ZL12MX_SPI2_Initv+0x7c>)
 801155a:	2200      	movs	r2, #0
 801155c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801155e:	4b10      	ldr	r3, [pc, #64]	; (80115a0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011560:	2200      	movs	r2, #0
 8011562:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8011564:	4b0e      	ldr	r3, [pc, #56]	; (80115a0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011566:	2200      	movs	r2, #0
 8011568:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801156a:	4b0d      	ldr	r3, [pc, #52]	; (80115a0 <_ZL12MX_SPI2_Initv+0x7c>)
 801156c:	2200      	movs	r2, #0
 801156e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8011570:	4b0b      	ldr	r3, [pc, #44]	; (80115a0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011572:	2207      	movs	r2, #7
 8011574:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8011576:	4b0a      	ldr	r3, [pc, #40]	; (80115a0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011578:	2200      	movs	r2, #0
 801157a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 801157c:	4b08      	ldr	r3, [pc, #32]	; (80115a0 <_ZL12MX_SPI2_Initv+0x7c>)
 801157e:	2208      	movs	r2, #8
 8011580:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8011582:	4807      	ldr	r0, [pc, #28]	; (80115a0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011584:	f7f7 fd24 	bl	8008fd0 <HAL_SPI_Init>
 8011588:	4603      	mov	r3, r0
 801158a:	2b00      	cmp	r3, #0
 801158c:	bf14      	ite	ne
 801158e:	2301      	movne	r3, #1
 8011590:	2300      	moveq	r3, #0
 8011592:	b2db      	uxtb	r3, r3
 8011594:	2b00      	cmp	r3, #0
 8011596:	d001      	beq.n	801159c <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8011598:	f000 fc56 	bl	8011e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 801159c:	bf00      	nop
 801159e:	bd80      	pop	{r7, pc}
 80115a0:	20008730 	.word	0x20008730
 80115a4:	40003800 	.word	0x40003800

080115a8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b08e      	sub	sp, #56	; 0x38
 80115ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80115ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80115b2:	2200      	movs	r2, #0
 80115b4:	601a      	str	r2, [r3, #0]
 80115b6:	605a      	str	r2, [r3, #4]
 80115b8:	609a      	str	r2, [r3, #8]
 80115ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80115bc:	f107 031c 	add.w	r3, r7, #28
 80115c0:	2200      	movs	r2, #0
 80115c2:	601a      	str	r2, [r3, #0]
 80115c4:	605a      	str	r2, [r3, #4]
 80115c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80115c8:	463b      	mov	r3, r7
 80115ca:	2200      	movs	r2, #0
 80115cc:	601a      	str	r2, [r3, #0]
 80115ce:	605a      	str	r2, [r3, #4]
 80115d0:	609a      	str	r2, [r3, #8]
 80115d2:	60da      	str	r2, [r3, #12]
 80115d4:	611a      	str	r2, [r3, #16]
 80115d6:	615a      	str	r2, [r3, #20]
 80115d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80115da:	4b39      	ldr	r3, [pc, #228]	; (80116c0 <_ZL12MX_TIM3_Initv+0x118>)
 80115dc:	4a39      	ldr	r2, [pc, #228]	; (80116c4 <_ZL12MX_TIM3_Initv+0x11c>)
 80115de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80115e0:	4b37      	ldr	r3, [pc, #220]	; (80116c0 <_ZL12MX_TIM3_Initv+0x118>)
 80115e2:	2200      	movs	r2, #0
 80115e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80115e6:	4b36      	ldr	r3, [pc, #216]	; (80116c0 <_ZL12MX_TIM3_Initv+0x118>)
 80115e8:	2200      	movs	r2, #0
 80115ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80115ec:	4b34      	ldr	r3, [pc, #208]	; (80116c0 <_ZL12MX_TIM3_Initv+0x118>)
 80115ee:	2200      	movs	r2, #0
 80115f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80115f2:	4b33      	ldr	r3, [pc, #204]	; (80116c0 <_ZL12MX_TIM3_Initv+0x118>)
 80115f4:	2200      	movs	r2, #0
 80115f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80115f8:	4b31      	ldr	r3, [pc, #196]	; (80116c0 <_ZL12MX_TIM3_Initv+0x118>)
 80115fa:	2200      	movs	r2, #0
 80115fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80115fe:	4830      	ldr	r0, [pc, #192]	; (80116c0 <_ZL12MX_TIM3_Initv+0x118>)
 8011600:	f7f7 fd78 	bl	80090f4 <HAL_TIM_Base_Init>
 8011604:	4603      	mov	r3, r0
 8011606:	2b00      	cmp	r3, #0
 8011608:	bf14      	ite	ne
 801160a:	2301      	movne	r3, #1
 801160c:	2300      	moveq	r3, #0
 801160e:	b2db      	uxtb	r3, r3
 8011610:	2b00      	cmp	r3, #0
 8011612:	d001      	beq.n	8011618 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8011614:	f000 fc18 	bl	8011e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801161c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 801161e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011622:	4619      	mov	r1, r3
 8011624:	4826      	ldr	r0, [pc, #152]	; (80116c0 <_ZL12MX_TIM3_Initv+0x118>)
 8011626:	f7f8 f847 	bl	80096b8 <HAL_TIM_ConfigClockSource>
 801162a:	4603      	mov	r3, r0
 801162c:	2b00      	cmp	r3, #0
 801162e:	bf14      	ite	ne
 8011630:	2301      	movne	r3, #1
 8011632:	2300      	moveq	r3, #0
 8011634:	b2db      	uxtb	r3, r3
 8011636:	2b00      	cmp	r3, #0
 8011638:	d001      	beq.n	801163e <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 801163a:	f000 fc05 	bl	8011e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 801163e:	4820      	ldr	r0, [pc, #128]	; (80116c0 <_ZL12MX_TIM3_Initv+0x118>)
 8011640:	f7f7 fdd8 	bl	80091f4 <HAL_TIM_PWM_Init>
 8011644:	4603      	mov	r3, r0
 8011646:	2b00      	cmp	r3, #0
 8011648:	bf14      	ite	ne
 801164a:	2301      	movne	r3, #1
 801164c:	2300      	moveq	r3, #0
 801164e:	b2db      	uxtb	r3, r3
 8011650:	2b00      	cmp	r3, #0
 8011652:	d001      	beq.n	8011658 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8011654:	f000 fbf8 	bl	8011e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011658:	2300      	movs	r3, #0
 801165a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801165c:	2300      	movs	r3, #0
 801165e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8011660:	f107 031c 	add.w	r3, r7, #28
 8011664:	4619      	mov	r1, r3
 8011666:	4816      	ldr	r0, [pc, #88]	; (80116c0 <_ZL12MX_TIM3_Initv+0x118>)
 8011668:	f7f8 fca0 	bl	8009fac <HAL_TIMEx_MasterConfigSynchronization>
 801166c:	4603      	mov	r3, r0
 801166e:	2b00      	cmp	r3, #0
 8011670:	bf14      	ite	ne
 8011672:	2301      	movne	r3, #1
 8011674:	2300      	moveq	r3, #0
 8011676:	b2db      	uxtb	r3, r3
 8011678:	2b00      	cmp	r3, #0
 801167a:	d001      	beq.n	8011680 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 801167c:	f000 fbe4 	bl	8011e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8011680:	2360      	movs	r3, #96	; 0x60
 8011682:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8011684:	2300      	movs	r3, #0
 8011686:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8011688:	2300      	movs	r3, #0
 801168a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801168c:	2300      	movs	r3, #0
 801168e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8011690:	463b      	mov	r3, r7
 8011692:	2200      	movs	r2, #0
 8011694:	4619      	mov	r1, r3
 8011696:	480a      	ldr	r0, [pc, #40]	; (80116c0 <_ZL12MX_TIM3_Initv+0x118>)
 8011698:	f7f7 fef6 	bl	8009488 <HAL_TIM_PWM_ConfigChannel>
 801169c:	4603      	mov	r3, r0
 801169e:	2b00      	cmp	r3, #0
 80116a0:	bf14      	ite	ne
 80116a2:	2301      	movne	r3, #1
 80116a4:	2300      	moveq	r3, #0
 80116a6:	b2db      	uxtb	r3, r3
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d001      	beq.n	80116b0 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 80116ac:	f000 fbcc 	bl	8011e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80116b0:	4803      	ldr	r0, [pc, #12]	; (80116c0 <_ZL12MX_TIM3_Initv+0x118>)
 80116b2:	f001 fa3b 	bl	8012b2c <HAL_TIM_MspPostInit>

}
 80116b6:	bf00      	nop
 80116b8:	3738      	adds	r7, #56	; 0x38
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bd80      	pop	{r7, pc}
 80116be:	bf00      	nop
 80116c0:	20008794 	.word	0x20008794
 80116c4:	40000400 	.word	0x40000400

080116c8 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b08e      	sub	sp, #56	; 0x38
 80116cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80116ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80116d2:	2200      	movs	r2, #0
 80116d4:	601a      	str	r2, [r3, #0]
 80116d6:	605a      	str	r2, [r3, #4]
 80116d8:	609a      	str	r2, [r3, #8]
 80116da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80116dc:	f107 031c 	add.w	r3, r7, #28
 80116e0:	2200      	movs	r2, #0
 80116e2:	601a      	str	r2, [r3, #0]
 80116e4:	605a      	str	r2, [r3, #4]
 80116e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80116e8:	463b      	mov	r3, r7
 80116ea:	2200      	movs	r2, #0
 80116ec:	601a      	str	r2, [r3, #0]
 80116ee:	605a      	str	r2, [r3, #4]
 80116f0:	609a      	str	r2, [r3, #8]
 80116f2:	60da      	str	r2, [r3, #12]
 80116f4:	611a      	str	r2, [r3, #16]
 80116f6:	615a      	str	r2, [r3, #20]
 80116f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80116fa:	4b39      	ldr	r3, [pc, #228]	; (80117e0 <_ZL12MX_TIM5_Initv+0x118>)
 80116fc:	4a39      	ldr	r2, [pc, #228]	; (80117e4 <_ZL12MX_TIM5_Initv+0x11c>)
 80116fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8011700:	4b37      	ldr	r3, [pc, #220]	; (80117e0 <_ZL12MX_TIM5_Initv+0x118>)
 8011702:	2200      	movs	r2, #0
 8011704:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011706:	4b36      	ldr	r3, [pc, #216]	; (80117e0 <_ZL12MX_TIM5_Initv+0x118>)
 8011708:	2200      	movs	r2, #0
 801170a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 801170c:	4b34      	ldr	r3, [pc, #208]	; (80117e0 <_ZL12MX_TIM5_Initv+0x118>)
 801170e:	2200      	movs	r2, #0
 8011710:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011712:	4b33      	ldr	r3, [pc, #204]	; (80117e0 <_ZL12MX_TIM5_Initv+0x118>)
 8011714:	2200      	movs	r2, #0
 8011716:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011718:	4b31      	ldr	r3, [pc, #196]	; (80117e0 <_ZL12MX_TIM5_Initv+0x118>)
 801171a:	2200      	movs	r2, #0
 801171c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 801171e:	4830      	ldr	r0, [pc, #192]	; (80117e0 <_ZL12MX_TIM5_Initv+0x118>)
 8011720:	f7f7 fce8 	bl	80090f4 <HAL_TIM_Base_Init>
 8011724:	4603      	mov	r3, r0
 8011726:	2b00      	cmp	r3, #0
 8011728:	bf14      	ite	ne
 801172a:	2301      	movne	r3, #1
 801172c:	2300      	moveq	r3, #0
 801172e:	b2db      	uxtb	r3, r3
 8011730:	2b00      	cmp	r3, #0
 8011732:	d001      	beq.n	8011738 <_ZL12MX_TIM5_Initv+0x70>
  {
    Error_Handler();
 8011734:	f000 fb88 	bl	8011e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801173c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 801173e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011742:	4619      	mov	r1, r3
 8011744:	4826      	ldr	r0, [pc, #152]	; (80117e0 <_ZL12MX_TIM5_Initv+0x118>)
 8011746:	f7f7 ffb7 	bl	80096b8 <HAL_TIM_ConfigClockSource>
 801174a:	4603      	mov	r3, r0
 801174c:	2b00      	cmp	r3, #0
 801174e:	bf14      	ite	ne
 8011750:	2301      	movne	r3, #1
 8011752:	2300      	moveq	r3, #0
 8011754:	b2db      	uxtb	r3, r3
 8011756:	2b00      	cmp	r3, #0
 8011758:	d001      	beq.n	801175e <_ZL12MX_TIM5_Initv+0x96>
  {
    Error_Handler();
 801175a:	f000 fb75 	bl	8011e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 801175e:	4820      	ldr	r0, [pc, #128]	; (80117e0 <_ZL12MX_TIM5_Initv+0x118>)
 8011760:	f7f7 fd48 	bl	80091f4 <HAL_TIM_PWM_Init>
 8011764:	4603      	mov	r3, r0
 8011766:	2b00      	cmp	r3, #0
 8011768:	bf14      	ite	ne
 801176a:	2301      	movne	r3, #1
 801176c:	2300      	moveq	r3, #0
 801176e:	b2db      	uxtb	r3, r3
 8011770:	2b00      	cmp	r3, #0
 8011772:	d001      	beq.n	8011778 <_ZL12MX_TIM5_Initv+0xb0>
  {
    Error_Handler();
 8011774:	f000 fb68 	bl	8011e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011778:	2300      	movs	r3, #0
 801177a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801177c:	2300      	movs	r3, #0
 801177e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8011780:	f107 031c 	add.w	r3, r7, #28
 8011784:	4619      	mov	r1, r3
 8011786:	4816      	ldr	r0, [pc, #88]	; (80117e0 <_ZL12MX_TIM5_Initv+0x118>)
 8011788:	f7f8 fc10 	bl	8009fac <HAL_TIMEx_MasterConfigSynchronization>
 801178c:	4603      	mov	r3, r0
 801178e:	2b00      	cmp	r3, #0
 8011790:	bf14      	ite	ne
 8011792:	2301      	movne	r3, #1
 8011794:	2300      	moveq	r3, #0
 8011796:	b2db      	uxtb	r3, r3
 8011798:	2b00      	cmp	r3, #0
 801179a:	d001      	beq.n	80117a0 <_ZL12MX_TIM5_Initv+0xd8>
  {
    Error_Handler();
 801179c:	f000 fb54 	bl	8011e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80117a0:	2360      	movs	r3, #96	; 0x60
 80117a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80117a4:	2300      	movs	r3, #0
 80117a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80117a8:	2300      	movs	r3, #0
 80117aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80117ac:	2300      	movs	r3, #0
 80117ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80117b0:	463b      	mov	r3, r7
 80117b2:	220c      	movs	r2, #12
 80117b4:	4619      	mov	r1, r3
 80117b6:	480a      	ldr	r0, [pc, #40]	; (80117e0 <_ZL12MX_TIM5_Initv+0x118>)
 80117b8:	f7f7 fe66 	bl	8009488 <HAL_TIM_PWM_ConfigChannel>
 80117bc:	4603      	mov	r3, r0
 80117be:	2b00      	cmp	r3, #0
 80117c0:	bf14      	ite	ne
 80117c2:	2301      	movne	r3, #1
 80117c4:	2300      	moveq	r3, #0
 80117c6:	b2db      	uxtb	r3, r3
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d001      	beq.n	80117d0 <_ZL12MX_TIM5_Initv+0x108>
  {
    Error_Handler();
 80117cc:	f000 fb3c 	bl	8011e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80117d0:	4803      	ldr	r0, [pc, #12]	; (80117e0 <_ZL12MX_TIM5_Initv+0x118>)
 80117d2:	f001 f9ab 	bl	8012b2c <HAL_TIM_MspPostInit>

}
 80117d6:	bf00      	nop
 80117d8:	3738      	adds	r7, #56	; 0x38
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
 80117de:	bf00      	nop
 80117e0:	200087d4 	.word	0x200087d4
 80117e4:	40000c00 	.word	0x40000c00

080117e8 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b088      	sub	sp, #32
 80117ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80117ee:	f107 0310 	add.w	r3, r7, #16
 80117f2:	2200      	movs	r2, #0
 80117f4:	601a      	str	r2, [r3, #0]
 80117f6:	605a      	str	r2, [r3, #4]
 80117f8:	609a      	str	r2, [r3, #8]
 80117fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80117fc:	1d3b      	adds	r3, r7, #4
 80117fe:	2200      	movs	r2, #0
 8011800:	601a      	str	r2, [r3, #0]
 8011802:	605a      	str	r2, [r3, #4]
 8011804:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8011806:	4b27      	ldr	r3, [pc, #156]	; (80118a4 <_ZL12MX_TIM8_Initv+0xbc>)
 8011808:	4a27      	ldr	r2, [pc, #156]	; (80118a8 <_ZL12MX_TIM8_Initv+0xc0>)
 801180a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 801180c:	4b25      	ldr	r3, [pc, #148]	; (80118a4 <_ZL12MX_TIM8_Initv+0xbc>)
 801180e:	2200      	movs	r2, #0
 8011810:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011812:	4b24      	ldr	r3, [pc, #144]	; (80118a4 <_ZL12MX_TIM8_Initv+0xbc>)
 8011814:	2200      	movs	r2, #0
 8011816:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8011818:	4b22      	ldr	r3, [pc, #136]	; (80118a4 <_ZL12MX_TIM8_Initv+0xbc>)
 801181a:	2200      	movs	r2, #0
 801181c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801181e:	4b21      	ldr	r3, [pc, #132]	; (80118a4 <_ZL12MX_TIM8_Initv+0xbc>)
 8011820:	2200      	movs	r2, #0
 8011822:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8011824:	4b1f      	ldr	r3, [pc, #124]	; (80118a4 <_ZL12MX_TIM8_Initv+0xbc>)
 8011826:	2200      	movs	r2, #0
 8011828:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801182a:	4b1e      	ldr	r3, [pc, #120]	; (80118a4 <_ZL12MX_TIM8_Initv+0xbc>)
 801182c:	2200      	movs	r2, #0
 801182e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8011830:	481c      	ldr	r0, [pc, #112]	; (80118a4 <_ZL12MX_TIM8_Initv+0xbc>)
 8011832:	f7f7 fc5f 	bl	80090f4 <HAL_TIM_Base_Init>
 8011836:	4603      	mov	r3, r0
 8011838:	2b00      	cmp	r3, #0
 801183a:	bf14      	ite	ne
 801183c:	2301      	movne	r3, #1
 801183e:	2300      	moveq	r3, #0
 8011840:	b2db      	uxtb	r3, r3
 8011842:	2b00      	cmp	r3, #0
 8011844:	d001      	beq.n	801184a <_ZL12MX_TIM8_Initv+0x62>
  {
    Error_Handler();
 8011846:	f000 faff 	bl	8011e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801184a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801184e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8011850:	f107 0310 	add.w	r3, r7, #16
 8011854:	4619      	mov	r1, r3
 8011856:	4813      	ldr	r0, [pc, #76]	; (80118a4 <_ZL12MX_TIM8_Initv+0xbc>)
 8011858:	f7f7 ff2e 	bl	80096b8 <HAL_TIM_ConfigClockSource>
 801185c:	4603      	mov	r3, r0
 801185e:	2b00      	cmp	r3, #0
 8011860:	bf14      	ite	ne
 8011862:	2301      	movne	r3, #1
 8011864:	2300      	moveq	r3, #0
 8011866:	b2db      	uxtb	r3, r3
 8011868:	2b00      	cmp	r3, #0
 801186a:	d001      	beq.n	8011870 <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 801186c:	f000 faec 	bl	8011e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011870:	2300      	movs	r3, #0
 8011872:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8011874:	2300      	movs	r3, #0
 8011876:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011878:	2300      	movs	r3, #0
 801187a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 801187c:	1d3b      	adds	r3, r7, #4
 801187e:	4619      	mov	r1, r3
 8011880:	4808      	ldr	r0, [pc, #32]	; (80118a4 <_ZL12MX_TIM8_Initv+0xbc>)
 8011882:	f7f8 fb93 	bl	8009fac <HAL_TIMEx_MasterConfigSynchronization>
 8011886:	4603      	mov	r3, r0
 8011888:	2b00      	cmp	r3, #0
 801188a:	bf14      	ite	ne
 801188c:	2301      	movne	r3, #1
 801188e:	2300      	moveq	r3, #0
 8011890:	b2db      	uxtb	r3, r3
 8011892:	2b00      	cmp	r3, #0
 8011894:	d001      	beq.n	801189a <_ZL12MX_TIM8_Initv+0xb2>
  {
    Error_Handler();
 8011896:	f000 fad7 	bl	8011e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 801189a:	bf00      	nop
 801189c:	3720      	adds	r7, #32
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}
 80118a2:	bf00      	nop
 80118a4:	20008814 	.word	0x20008814
 80118a8:	40010400 	.word	0x40010400

080118ac <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b088      	sub	sp, #32
 80118b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80118b2:	1d3b      	adds	r3, r7, #4
 80118b4:	2200      	movs	r2, #0
 80118b6:	601a      	str	r2, [r3, #0]
 80118b8:	605a      	str	r2, [r3, #4]
 80118ba:	609a      	str	r2, [r3, #8]
 80118bc:	60da      	str	r2, [r3, #12]
 80118be:	611a      	str	r2, [r3, #16]
 80118c0:	615a      	str	r2, [r3, #20]
 80118c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80118c4:	4b1e      	ldr	r3, [pc, #120]	; (8011940 <_ZL13MX_TIM12_Initv+0x94>)
 80118c6:	4a1f      	ldr	r2, [pc, #124]	; (8011944 <_ZL13MX_TIM12_Initv+0x98>)
 80118c8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80118ca:	4b1d      	ldr	r3, [pc, #116]	; (8011940 <_ZL13MX_TIM12_Initv+0x94>)
 80118cc:	2200      	movs	r2, #0
 80118ce:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80118d0:	4b1b      	ldr	r3, [pc, #108]	; (8011940 <_ZL13MX_TIM12_Initv+0x94>)
 80118d2:	2200      	movs	r2, #0
 80118d4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 80118d6:	4b1a      	ldr	r3, [pc, #104]	; (8011940 <_ZL13MX_TIM12_Initv+0x94>)
 80118d8:	2200      	movs	r2, #0
 80118da:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80118dc:	4b18      	ldr	r3, [pc, #96]	; (8011940 <_ZL13MX_TIM12_Initv+0x94>)
 80118de:	2200      	movs	r2, #0
 80118e0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80118e2:	4b17      	ldr	r3, [pc, #92]	; (8011940 <_ZL13MX_TIM12_Initv+0x94>)
 80118e4:	2200      	movs	r2, #0
 80118e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80118e8:	4815      	ldr	r0, [pc, #84]	; (8011940 <_ZL13MX_TIM12_Initv+0x94>)
 80118ea:	f7f7 fc83 	bl	80091f4 <HAL_TIM_PWM_Init>
 80118ee:	4603      	mov	r3, r0
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	bf14      	ite	ne
 80118f4:	2301      	movne	r3, #1
 80118f6:	2300      	moveq	r3, #0
 80118f8:	b2db      	uxtb	r3, r3
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d001      	beq.n	8011902 <_ZL13MX_TIM12_Initv+0x56>
  {
    Error_Handler();
 80118fe:	f000 faa3 	bl	8011e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8011902:	2360      	movs	r3, #96	; 0x60
 8011904:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8011906:	2300      	movs	r3, #0
 8011908:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801190a:	2300      	movs	r3, #0
 801190c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801190e:	2300      	movs	r3, #0
 8011910:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8011912:	1d3b      	adds	r3, r7, #4
 8011914:	2200      	movs	r2, #0
 8011916:	4619      	mov	r1, r3
 8011918:	4809      	ldr	r0, [pc, #36]	; (8011940 <_ZL13MX_TIM12_Initv+0x94>)
 801191a:	f7f7 fdb5 	bl	8009488 <HAL_TIM_PWM_ConfigChannel>
 801191e:	4603      	mov	r3, r0
 8011920:	2b00      	cmp	r3, #0
 8011922:	bf14      	ite	ne
 8011924:	2301      	movne	r3, #1
 8011926:	2300      	moveq	r3, #0
 8011928:	b2db      	uxtb	r3, r3
 801192a:	2b00      	cmp	r3, #0
 801192c:	d001      	beq.n	8011932 <_ZL13MX_TIM12_Initv+0x86>
  {
    Error_Handler();
 801192e:	f000 fa8b 	bl	8011e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8011932:	4803      	ldr	r0, [pc, #12]	; (8011940 <_ZL13MX_TIM12_Initv+0x94>)
 8011934:	f001 f8fa 	bl	8012b2c <HAL_TIM_MspPostInit>

}
 8011938:	bf00      	nop
 801193a:	3720      	adds	r7, #32
 801193c:	46bd      	mov	sp, r7
 801193e:	bd80      	pop	{r7, pc}
 8011940:	20008854 	.word	0x20008854
 8011944:	40001800 	.word	0x40001800

08011948 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8011948:	b580      	push	{r7, lr}
 801194a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 801194c:	4b16      	ldr	r3, [pc, #88]	; (80119a8 <_ZL19MX_USART1_UART_Initv+0x60>)
 801194e:	4a17      	ldr	r2, [pc, #92]	; (80119ac <_ZL19MX_USART1_UART_Initv+0x64>)
 8011950:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8011952:	4b15      	ldr	r3, [pc, #84]	; (80119a8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8011954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8011958:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801195a:	4b13      	ldr	r3, [pc, #76]	; (80119a8 <_ZL19MX_USART1_UART_Initv+0x60>)
 801195c:	2200      	movs	r2, #0
 801195e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8011960:	4b11      	ldr	r3, [pc, #68]	; (80119a8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8011962:	2200      	movs	r2, #0
 8011964:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8011966:	4b10      	ldr	r3, [pc, #64]	; (80119a8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8011968:	2200      	movs	r2, #0
 801196a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 801196c:	4b0e      	ldr	r3, [pc, #56]	; (80119a8 <_ZL19MX_USART1_UART_Initv+0x60>)
 801196e:	220c      	movs	r2, #12
 8011970:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011972:	4b0d      	ldr	r3, [pc, #52]	; (80119a8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8011974:	2200      	movs	r2, #0
 8011976:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8011978:	4b0b      	ldr	r3, [pc, #44]	; (80119a8 <_ZL19MX_USART1_UART_Initv+0x60>)
 801197a:	2200      	movs	r2, #0
 801197c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801197e:	4b0a      	ldr	r3, [pc, #40]	; (80119a8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8011980:	2200      	movs	r2, #0
 8011982:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8011984:	4b08      	ldr	r3, [pc, #32]	; (80119a8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8011986:	2200      	movs	r2, #0
 8011988:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801198a:	4807      	ldr	r0, [pc, #28]	; (80119a8 <_ZL19MX_USART1_UART_Initv+0x60>)
 801198c:	f7f8 fb88 	bl	800a0a0 <HAL_UART_Init>
 8011990:	4603      	mov	r3, r0
 8011992:	2b00      	cmp	r3, #0
 8011994:	bf14      	ite	ne
 8011996:	2301      	movne	r3, #1
 8011998:	2300      	moveq	r3, #0
 801199a:	b2db      	uxtb	r3, r3
 801199c:	2b00      	cmp	r3, #0
 801199e:	d001      	beq.n	80119a4 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80119a0:	f000 fa52 	bl	8011e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80119a4:	bf00      	nop
 80119a6:	bd80      	pop	{r7, pc}
 80119a8:	20008894 	.word	0x20008894
 80119ac:	40011000 	.word	0x40011000

080119b0 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80119b4:	4b16      	ldr	r3, [pc, #88]	; (8011a10 <_ZL19MX_USART6_UART_Initv+0x60>)
 80119b6:	4a17      	ldr	r2, [pc, #92]	; (8011a14 <_ZL19MX_USART6_UART_Initv+0x64>)
 80119b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80119ba:	4b15      	ldr	r3, [pc, #84]	; (8011a10 <_ZL19MX_USART6_UART_Initv+0x60>)
 80119bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80119c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80119c2:	4b13      	ldr	r3, [pc, #76]	; (8011a10 <_ZL19MX_USART6_UART_Initv+0x60>)
 80119c4:	2200      	movs	r2, #0
 80119c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80119c8:	4b11      	ldr	r3, [pc, #68]	; (8011a10 <_ZL19MX_USART6_UART_Initv+0x60>)
 80119ca:	2200      	movs	r2, #0
 80119cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80119ce:	4b10      	ldr	r3, [pc, #64]	; (8011a10 <_ZL19MX_USART6_UART_Initv+0x60>)
 80119d0:	2200      	movs	r2, #0
 80119d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80119d4:	4b0e      	ldr	r3, [pc, #56]	; (8011a10 <_ZL19MX_USART6_UART_Initv+0x60>)
 80119d6:	220c      	movs	r2, #12
 80119d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80119da:	4b0d      	ldr	r3, [pc, #52]	; (8011a10 <_ZL19MX_USART6_UART_Initv+0x60>)
 80119dc:	2200      	movs	r2, #0
 80119de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80119e0:	4b0b      	ldr	r3, [pc, #44]	; (8011a10 <_ZL19MX_USART6_UART_Initv+0x60>)
 80119e2:	2200      	movs	r2, #0
 80119e4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80119e6:	4b0a      	ldr	r3, [pc, #40]	; (8011a10 <_ZL19MX_USART6_UART_Initv+0x60>)
 80119e8:	2200      	movs	r2, #0
 80119ea:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80119ec:	4b08      	ldr	r3, [pc, #32]	; (8011a10 <_ZL19MX_USART6_UART_Initv+0x60>)
 80119ee:	2200      	movs	r2, #0
 80119f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80119f2:	4807      	ldr	r0, [pc, #28]	; (8011a10 <_ZL19MX_USART6_UART_Initv+0x60>)
 80119f4:	f7f8 fb54 	bl	800a0a0 <HAL_UART_Init>
 80119f8:	4603      	mov	r3, r0
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	bf14      	ite	ne
 80119fe:	2301      	movne	r3, #1
 8011a00:	2300      	moveq	r3, #0
 8011a02:	b2db      	uxtb	r3, r3
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d001      	beq.n	8011a0c <_ZL19MX_USART6_UART_Initv+0x5c>
  {
    Error_Handler();
 8011a08:	f000 fa1e 	bl	8011e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8011a0c:	bf00      	nop
 8011a0e:	bd80      	pop	{r7, pc}
 8011a10:	20008914 	.word	0x20008914
 8011a14:	40011400 	.word	0x40011400

08011a18 <_ZL22MX_USB_OTG_FS_HCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011a1c:	4b10      	ldr	r3, [pc, #64]	; (8011a60 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8011a1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011a22:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8011a24:	4b0e      	ldr	r3, [pc, #56]	; (8011a60 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8011a26:	2208      	movs	r2, #8
 8011a28:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8011a2a:	4b0d      	ldr	r3, [pc, #52]	; (8011a60 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8011a2c:	2203      	movs	r2, #3
 8011a2e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011a30:	4b0b      	ldr	r3, [pc, #44]	; (8011a60 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8011a32:	2200      	movs	r2, #0
 8011a34:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8011a36:	4b0a      	ldr	r3, [pc, #40]	; (8011a60 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8011a38:	2202      	movs	r2, #2
 8011a3a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011a3c:	4b08      	ldr	r3, [pc, #32]	; (8011a60 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8011a3e:	2200      	movs	r2, #0
 8011a40:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8011a42:	4807      	ldr	r0, [pc, #28]	; (8011a60 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8011a44:	f7f1 fd07 	bl	8003456 <HAL_HCD_Init>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	bf14      	ite	ne
 8011a4e:	2301      	movne	r3, #1
 8011a50:	2300      	moveq	r3, #0
 8011a52:	b2db      	uxtb	r3, r3
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d001      	beq.n	8011a5c <_ZL22MX_USB_OTG_FS_HCD_Initv+0x44>
  {
    Error_Handler();
 8011a58:	f000 f9f6 	bl	8011e48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8011a5c:	bf00      	nop
 8011a5e:	bd80      	pop	{r7, pc}
 8011a60:	20008994 	.word	0x20008994

08011a64 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b090      	sub	sp, #64	; 0x40
 8011a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011a6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011a6e:	2200      	movs	r2, #0
 8011a70:	601a      	str	r2, [r3, #0]
 8011a72:	605a      	str	r2, [r3, #4]
 8011a74:	609a      	str	r2, [r3, #8]
 8011a76:	60da      	str	r2, [r3, #12]
 8011a78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8011a7a:	4baf      	ldr	r3, [pc, #700]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a7e:	4aae      	ldr	r2, [pc, #696]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011a80:	f043 0310 	orr.w	r3, r3, #16
 8011a84:	6313      	str	r3, [r2, #48]	; 0x30
 8011a86:	4bac      	ldr	r3, [pc, #688]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a8a:	f003 0310 	and.w	r3, r3, #16
 8011a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8011a92:	4ba9      	ldr	r3, [pc, #676]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a96:	4aa8      	ldr	r2, [pc, #672]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8011a9e:	4ba6      	ldr	r3, [pc, #664]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8011aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011aaa:	4ba3      	ldr	r3, [pc, #652]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011aae:	4aa2      	ldr	r2, [pc, #648]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011ab0:	f043 0302 	orr.w	r3, r3, #2
 8011ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8011ab6:	4ba0      	ldr	r3, [pc, #640]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011aba:	f003 0302 	and.w	r3, r3, #2
 8011abe:	623b      	str	r3, [r7, #32]
 8011ac0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8011ac2:	4b9d      	ldr	r3, [pc, #628]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ac6:	4a9c      	ldr	r2, [pc, #624]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011ac8:	f043 0308 	orr.w	r3, r3, #8
 8011acc:	6313      	str	r3, [r2, #48]	; 0x30
 8011ace:	4b9a      	ldr	r3, [pc, #616]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ad2:	f003 0308 	and.w	r3, r3, #8
 8011ad6:	61fb      	str	r3, [r7, #28]
 8011ad8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8011ada:	4b97      	ldr	r3, [pc, #604]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ade:	4a96      	ldr	r2, [pc, #600]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011ae0:	f043 0304 	orr.w	r3, r3, #4
 8011ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8011ae6:	4b94      	ldr	r3, [pc, #592]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011aea:	f003 0304 	and.w	r3, r3, #4
 8011aee:	61bb      	str	r3, [r7, #24]
 8011af0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011af2:	4b91      	ldr	r3, [pc, #580]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011af6:	4a90      	ldr	r2, [pc, #576]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011af8:	f043 0301 	orr.w	r3, r3, #1
 8011afc:	6313      	str	r3, [r2, #48]	; 0x30
 8011afe:	4b8e      	ldr	r3, [pc, #568]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b02:	f003 0301 	and.w	r3, r3, #1
 8011b06:	617b      	str	r3, [r7, #20]
 8011b08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8011b0a:	4b8b      	ldr	r3, [pc, #556]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b0e:	4a8a      	ldr	r2, [pc, #552]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011b10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011b14:	6313      	str	r3, [r2, #48]	; 0x30
 8011b16:	4b88      	ldr	r3, [pc, #544]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011b1e:	613b      	str	r3, [r7, #16]
 8011b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8011b22:	4b85      	ldr	r3, [pc, #532]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b26:	4a84      	ldr	r2, [pc, #528]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8011b2e:	4b82      	ldr	r3, [pc, #520]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b36:	60fb      	str	r3, [r7, #12]
 8011b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8011b3a:	4b7f      	ldr	r3, [pc, #508]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b3e:	4a7e      	ldr	r2, [pc, #504]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011b40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011b44:	6313      	str	r3, [r2, #48]	; 0x30
 8011b46:	4b7c      	ldr	r3, [pc, #496]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011b4e:	60bb      	str	r3, [r7, #8]
 8011b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8011b52:	4b79      	ldr	r3, [pc, #484]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b56:	4a78      	ldr	r2, [pc, #480]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011b58:	f043 0320 	orr.w	r3, r3, #32
 8011b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8011b5e:	4b76      	ldr	r3, [pc, #472]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b62:	f003 0320 	and.w	r3, r3, #32
 8011b66:	607b      	str	r3, [r7, #4]
 8011b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011b6a:	4b73      	ldr	r3, [pc, #460]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b6e:	4a72      	ldr	r2, [pc, #456]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b74:	6313      	str	r3, [r2, #48]	; 0x30
 8011b76:	4b70      	ldr	r3, [pc, #448]	; (8011d38 <_ZL12MX_GPIO_Initv+0x2d4>)
 8011b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b7e:	603b      	str	r3, [r7, #0]
 8011b80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8011b82:	2201      	movs	r2, #1
 8011b84:	2120      	movs	r1, #32
 8011b86:	486d      	ldr	r0, [pc, #436]	; (8011d3c <_ZL12MX_GPIO_Initv+0x2d8>)
 8011b88:	f7f1 fc4c 	bl	8003424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	210c      	movs	r1, #12
 8011b90:	486b      	ldr	r0, [pc, #428]	; (8011d40 <_ZL12MX_GPIO_Initv+0x2dc>)
 8011b92:	f7f1 fc47 	bl	8003424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8011b96:	2201      	movs	r2, #1
 8011b98:	2108      	movs	r1, #8
 8011b9a:	486a      	ldr	r0, [pc, #424]	; (8011d44 <_ZL12MX_GPIO_Initv+0x2e0>)
 8011b9c:	f7f1 fc42 	bl	8003424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8011ba0:	2201      	movs	r2, #1
 8011ba2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011ba6:	4866      	ldr	r0, [pc, #408]	; (8011d40 <_ZL12MX_GPIO_Initv+0x2dc>)
 8011ba8:	f7f1 fc3c 	bl	8003424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8011bac:	2200      	movs	r2, #0
 8011bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011bb2:	4865      	ldr	r0, [pc, #404]	; (8011d48 <_ZL12MX_GPIO_Initv+0x2e4>)
 8011bb4:	f7f1 fc36 	bl	8003424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8011bb8:	2200      	movs	r2, #0
 8011bba:	21c8      	movs	r1, #200	; 0xc8
 8011bbc:	4863      	ldr	r0, [pc, #396]	; (8011d4c <_ZL12MX_GPIO_Initv+0x2e8>)
 8011bbe:	f7f1 fc31 	bl	8003424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8011bc2:	2308      	movs	r3, #8
 8011bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011bca:	2300      	movs	r3, #0
 8011bcc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8011bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011bd2:	4619      	mov	r1, r3
 8011bd4:	485e      	ldr	r0, [pc, #376]	; (8011d50 <_ZL12MX_GPIO_Initv+0x2ec>)
 8011bd6:	f7f1 f959 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8011bda:	f643 4323 	movw	r3, #15395	; 0x3c23
 8011bde:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011be0:	2302      	movs	r3, #2
 8011be2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011be4:	2300      	movs	r3, #0
 8011be6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011be8:	2303      	movs	r3, #3
 8011bea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8011bec:	230a      	movs	r3, #10
 8011bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011bf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011bf4:	4619      	mov	r1, r3
 8011bf6:	4857      	ldr	r0, [pc, #348]	; (8011d54 <_ZL12MX_GPIO_Initv+0x2f0>)
 8011bf8:	f7f1 f948 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8011bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c02:	2302      	movs	r3, #2
 8011c04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c06:	2300      	movs	r3, #0
 8011c08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8011c0e:	2301      	movs	r3, #1
 8011c10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8011c12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011c16:	4619      	mov	r1, r3
 8011c18:	484f      	ldr	r0, [pc, #316]	; (8011d58 <_ZL12MX_GPIO_Initv+0x2f4>)
 8011c1a:	f7f1 f937 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8011c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011c24:	2300      	movs	r3, #0
 8011c26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c28:	2300      	movs	r3, #0
 8011c2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8011c2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011c30:	4619      	mov	r1, r3
 8011c32:	484a      	ldr	r0, [pc, #296]	; (8011d5c <_ZL12MX_GPIO_Initv+0x2f8>)
 8011c34:	f7f1 f92a 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8011c38:	2340      	movs	r3, #64	; 0x40
 8011c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8011c3c:	4b48      	ldr	r3, [pc, #288]	; (8011d60 <_ZL12MX_GPIO_Initv+0x2fc>)
 8011c3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c40:	2300      	movs	r3, #0
 8011c42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8011c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011c48:	4619      	mov	r1, r3
 8011c4a:	483c      	ldr	r0, [pc, #240]	; (8011d3c <_ZL12MX_GPIO_Initv+0x2d8>)
 8011c4c:	f7f1 f91e 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8011c50:	2320      	movs	r3, #32
 8011c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011c54:	2301      	movs	r3, #1
 8011c56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8011c60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011c64:	4619      	mov	r1, r3
 8011c66:	4835      	ldr	r0, [pc, #212]	; (8011d3c <_ZL12MX_GPIO_Initv+0x2d8>)
 8011c68:	f7f1 f910 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8011c6c:	f241 030c 	movw	r3, #4108	; 0x100c
 8011c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011c72:	2301      	movs	r3, #1
 8011c74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c76:	2300      	movs	r3, #0
 8011c78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8011c7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011c82:	4619      	mov	r1, r3
 8011c84:	482e      	ldr	r0, [pc, #184]	; (8011d40 <_ZL12MX_GPIO_Initv+0x2dc>)
 8011c86:	f7f1 f901 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8011c8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011c90:	2300      	movs	r3, #0
 8011c92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c94:	2300      	movs	r3, #0
 8011c96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8011c98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011c9c:	4619      	mov	r1, r3
 8011c9e:	4831      	ldr	r0, [pc, #196]	; (8011d64 <_ZL12MX_GPIO_Initv+0x300>)
 8011ca0:	f7f1 f8f4 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8011ca4:	2308      	movs	r3, #8
 8011ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011ca8:	2301      	movs	r3, #1
 8011caa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011cac:	2300      	movs	r3, #0
 8011cae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8011cb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011cb8:	4619      	mov	r1, r3
 8011cba:	4822      	ldr	r0, [pc, #136]	; (8011d44 <_ZL12MX_GPIO_Initv+0x2e0>)
 8011cbc:	f7f1 f8e6 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8011cc0:	2310      	movs	r3, #16
 8011cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011cc8:	2300      	movs	r3, #0
 8011cca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8011ccc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011cd0:	4619      	mov	r1, r3
 8011cd2:	481a      	ldr	r0, [pc, #104]	; (8011d3c <_ZL12MX_GPIO_Initv+0x2d8>)
 8011cd4:	f7f1 f8da 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8011cd8:	f248 0304 	movw	r3, #32772	; 0x8004
 8011cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011cde:	2300      	movs	r3, #0
 8011ce0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8011ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011cea:	4619      	mov	r1, r3
 8011cec:	4816      	ldr	r0, [pc, #88]	; (8011d48 <_ZL12MX_GPIO_Initv+0x2e4>)
 8011cee:	f7f1 f8cd 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8011cf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011cf8:	2301      	movs	r3, #1
 8011cfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d00:	2300      	movs	r3, #0
 8011d02:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8011d04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011d08:	4619      	mov	r1, r3
 8011d0a:	480f      	ldr	r0, [pc, #60]	; (8011d48 <_ZL12MX_GPIO_Initv+0x2e4>)
 8011d0c:	f7f1 f8be 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8011d10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8011d16:	4b12      	ldr	r3, [pc, #72]	; (8011d60 <_ZL12MX_GPIO_Initv+0x2fc>)
 8011d18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8011d1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011d22:	4619      	mov	r1, r3
 8011d24:	4806      	ldr	r0, [pc, #24]	; (8011d40 <_ZL12MX_GPIO_Initv+0x2dc>)
 8011d26:	f7f1 f8b1 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8011d2a:	2310      	movs	r3, #16
 8011d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d2e:	2302      	movs	r3, #2
 8011d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d32:	2300      	movs	r3, #0
 8011d34:	e018      	b.n	8011d68 <_ZL12MX_GPIO_Initv+0x304>
 8011d36:	bf00      	nop
 8011d38:	40023800 	.word	0x40023800
 8011d3c:	40020c00 	.word	0x40020c00
 8011d40:	40022000 	.word	0x40022000
 8011d44:	40022800 	.word	0x40022800
 8011d48:	40021c00 	.word	0x40021c00
 8011d4c:	40021800 	.word	0x40021800
 8011d50:	40021000 	.word	0x40021000
 8011d54:	40020400 	.word	0x40020400
 8011d58:	40020000 	.word	0x40020000
 8011d5c:	40022400 	.word	0x40022400
 8011d60:	10120000 	.word	0x10120000
 8011d64:	40020800 	.word	0x40020800
 8011d68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011d6a:	2303      	movs	r3, #3
 8011d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8011d6e:	230a      	movs	r3, #10
 8011d70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8011d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011d76:	4619      	mov	r1, r3
 8011d78:	4820      	ldr	r0, [pc, #128]	; (8011dfc <_ZL12MX_GPIO_Initv+0x398>)
 8011d7a:	f7f1 f887 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8011d7e:	23c8      	movs	r3, #200	; 0xc8
 8011d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011d82:	2301      	movs	r3, #1
 8011d84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d86:	2300      	movs	r3, #0
 8011d88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8011d8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011d92:	4619      	mov	r1, r3
 8011d94:	481a      	ldr	r0, [pc, #104]	; (8011e00 <_ZL12MX_GPIO_Initv+0x39c>)
 8011d96:	f7f1 f879 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8011d9a:	2305      	movs	r3, #5
 8011d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d9e:	2302      	movs	r3, #2
 8011da0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011da2:	2300      	movs	r3, #0
 8011da4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011da6:	2303      	movs	r3, #3
 8011da8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8011daa:	230a      	movs	r3, #10
 8011dac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011db2:	4619      	mov	r1, r3
 8011db4:	4813      	ldr	r0, [pc, #76]	; (8011e04 <_ZL12MX_GPIO_Initv+0x3a0>)
 8011db6:	f7f1 f869 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8011dba:	2304      	movs	r3, #4
 8011dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8011dc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011dca:	4619      	mov	r1, r3
 8011dcc:	480c      	ldr	r0, [pc, #48]	; (8011e00 <_ZL12MX_GPIO_Initv+0x39c>)
 8011dce:	f7f1 f85d 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8011dd2:	2328      	movs	r3, #40	; 0x28
 8011dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011dd6:	2302      	movs	r3, #2
 8011dd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011dda:	2300      	movs	r3, #0
 8011ddc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011dde:	2303      	movs	r3, #3
 8011de0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8011de2:	230a      	movs	r3, #10
 8011de4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011dea:	4619      	mov	r1, r3
 8011dec:	4806      	ldr	r0, [pc, #24]	; (8011e08 <_ZL12MX_GPIO_Initv+0x3a4>)
 8011dee:	f7f1 f84d 	bl	8002e8c <HAL_GPIO_Init>

}
 8011df2:	bf00      	nop
 8011df4:	3740      	adds	r7, #64	; 0x40
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}
 8011dfa:	bf00      	nop
 8011dfc:	40021c00 	.word	0x40021c00
 8011e00:	40021800 	.word	0x40021800
 8011e04:	40020800 	.word	0x40020800
 8011e08:	40020000 	.word	0x40020000

08011e0c <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b082      	sub	sp, #8
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
    
    
                 
  /* init code for FATFS */
  MX_FATFS_Init();
 8011e14:	f7fe fee6 	bl	8010be4 <MX_FATFS_Init>
           
          
    

/* Graphic application */  
  GRAPHICS_MainTask();
 8011e18:	f008 feae 	bl	801ab78 <_Z17GRAPHICS_MainTaskv>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8011e1c:	2001      	movs	r0, #1
 8011e1e:	f7fc fa48 	bl	800e2b2 <osDelay>
 8011e22:	e7fb      	b.n	8011e1c <_Z16StartDefaultTaskPKv+0x10>

08011e24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b082      	sub	sp, #8
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	4a04      	ldr	r2, [pc, #16]	; (8011e44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8011e32:	4293      	cmp	r3, r2
 8011e34:	d101      	bne.n	8011e3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8011e36:	f7ef fc3d 	bl	80016b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8011e3a:	bf00      	nop
 8011e3c:	3708      	adds	r7, #8
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bd80      	pop	{r7, pc}
 8011e42:	bf00      	nop
 8011e44:	40001000 	.word	0x40001000

08011e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8011e48:	b480      	push	{r7}
 8011e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8011e4c:	bf00      	nop
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e54:	4770      	bx	lr

08011e56 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011e56:	b580      	push	{r7, lr}
 8011e58:	b084      	sub	sp, #16
 8011e5a:	af00      	add	r7, sp, #0
 8011e5c:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 8011e5e:	f7fc f9f1 	bl	800e244 <osKernelSysTick>
 8011e62:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 8011e64:	e006      	b.n	8011e74 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011e66:	f7ef f98f 	bl	8001188 <BSP_SD_GetCardState>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d101      	bne.n	8011e74 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011e70:	2300      	movs	r3, #0
 8011e72:	e009      	b.n	8011e88 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8011e74:	f7fc f9e6 	bl	800e244 <osKernelSysTick>
 8011e78:	4602      	mov	r2, r0
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	1ad3      	subs	r3, r2, r3
 8011e7e:	687a      	ldr	r2, [r7, #4]
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d8f0      	bhi.n	8011e66 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011e84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	3710      	adds	r7, #16
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd80      	pop	{r7, pc}

08011e90 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b082      	sub	sp, #8
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	4603      	mov	r3, r0
 8011e98:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011e9a:	4b0b      	ldr	r3, [pc, #44]	; (8011ec8 <SD_CheckStatus+0x38>)
 8011e9c:	2201      	movs	r2, #1
 8011e9e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011ea0:	f7ef f972 	bl	8001188 <BSP_SD_GetCardState>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d107      	bne.n	8011eba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011eaa:	4b07      	ldr	r3, [pc, #28]	; (8011ec8 <SD_CheckStatus+0x38>)
 8011eac:	781b      	ldrb	r3, [r3, #0]
 8011eae:	b2db      	uxtb	r3, r3
 8011eb0:	f023 0301 	bic.w	r3, r3, #1
 8011eb4:	b2da      	uxtb	r2, r3
 8011eb6:	4b04      	ldr	r3, [pc, #16]	; (8011ec8 <SD_CheckStatus+0x38>)
 8011eb8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011eba:	4b03      	ldr	r3, [pc, #12]	; (8011ec8 <SD_CheckStatus+0x38>)
 8011ebc:	781b      	ldrb	r3, [r3, #0]
 8011ebe:	b2db      	uxtb	r3, r3
}
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	3708      	adds	r7, #8
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd80      	pop	{r7, pc}
 8011ec8:	20000030 	.word	0x20000030

08011ecc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b084      	sub	sp, #16
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 8011ed6:	4b1a      	ldr	r3, [pc, #104]	; (8011f40 <SD_initialize+0x74>)
 8011ed8:	2201      	movs	r2, #1
 8011eda:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 8011edc:	f7fc f9a6 	bl	800e22c <osKernelRunning>
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d025      	beq.n	8011f32 <SD_initialize+0x66>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8011ee6:	f7ee ffa9 	bl	8000e3c <BSP_SD_Init>
 8011eea:	4603      	mov	r3, r0
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d107      	bne.n	8011f00 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8011ef0:	79fb      	ldrb	r3, [r7, #7]
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7ff ffcc 	bl	8011e90 <SD_CheckStatus>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	461a      	mov	r2, r3
 8011efc:	4b10      	ldr	r3, [pc, #64]	; (8011f40 <SD_initialize+0x74>)
 8011efe:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 8011f00:	4b0f      	ldr	r3, [pc, #60]	; (8011f40 <SD_initialize+0x74>)
 8011f02:	781b      	ldrb	r3, [r3, #0]
 8011f04:	b2db      	uxtb	r3, r3
 8011f06:	2b01      	cmp	r3, #1
 8011f08:	d013      	beq.n	8011f32 <SD_initialize+0x66>
 8011f0a:	4b0e      	ldr	r3, [pc, #56]	; (8011f44 <SD_initialize+0x78>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d10f      	bne.n	8011f32 <SD_initialize+0x66>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8011f12:	4a0d      	ldr	r2, [pc, #52]	; (8011f48 <SD_initialize+0x7c>)
 8011f14:	f107 0308 	add.w	r3, r7, #8
 8011f18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f1c:	e883 0003 	stmia.w	r3, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8011f20:	f107 0308 	add.w	r3, r7, #8
 8011f24:	2100      	movs	r1, #0
 8011f26:	4618      	mov	r0, r3
 8011f28:	f7fc fa0e 	bl	800e348 <osMessageCreate>
 8011f2c:	4602      	mov	r2, r0
 8011f2e:	4b05      	ldr	r3, [pc, #20]	; (8011f44 <SD_initialize+0x78>)
 8011f30:	601a      	str	r2, [r3, #0]
    }
  }
  return Stat;
 8011f32:	4b03      	ldr	r3, [pc, #12]	; (8011f40 <SD_initialize+0x74>)
 8011f34:	781b      	ldrb	r3, [r3, #0]
 8011f36:	b2db      	uxtb	r3, r3
}
 8011f38:	4618      	mov	r0, r3
 8011f3a:	3710      	adds	r7, #16
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}
 8011f40:	20000030 	.word	0x20000030
 8011f44:	20008e5c 	.word	0x20008e5c
 8011f48:	0802242c 	.word	0x0802242c

08011f4c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b082      	sub	sp, #8
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	4603      	mov	r3, r0
 8011f54:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011f56:	79fb      	ldrb	r3, [r7, #7]
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f7ff ff99 	bl	8011e90 <SD_CheckStatus>
 8011f5e:	4603      	mov	r3, r0
}
 8011f60:	4618      	mov	r0, r3
 8011f62:	3708      	adds	r7, #8
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bd80      	pop	{r7, pc}

08011f68 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b08e      	sub	sp, #56	; 0x38
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	61b9      	str	r1, [r7, #24]
 8011f70:	617a      	str	r2, [r7, #20]
 8011f72:	613b      	str	r3, [r7, #16]
 8011f74:	4603      	mov	r3, r0
 8011f76:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 8011f78:	2301      	movs	r3, #1
 8011f7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011f7e:	f247 5030 	movw	r0, #30000	; 0x7530
 8011f82:	f7ff ff68 	bl	8011e56 <SD_CheckStatusWithTimeout>
 8011f86:	4603      	mov	r3, r0
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	da02      	bge.n	8011f92 <SD_read+0x2a>
  {
    return res;
 8011f8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f90:	e06c      	b.n	801206c <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8011f92:	69bb      	ldr	r3, [r7, #24]
 8011f94:	f003 0303 	and.w	r3, r3, #3
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d11e      	bne.n	8011fda <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8011f9c:	693a      	ldr	r2, [r7, #16]
 8011f9e:	6979      	ldr	r1, [r7, #20]
 8011fa0:	69b8      	ldr	r0, [r7, #24]
 8011fa2:	f7ee ffad 	bl	8000f00 <BSP_SD_ReadBlocks_DMA>
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 8011fac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d159      	bne.n	8012068 <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8011fb4:	4b2f      	ldr	r3, [pc, #188]	; (8012074 <SD_read+0x10c>)
 8011fb6:	6819      	ldr	r1, [r3, #0]
 8011fb8:	f107 0320 	add.w	r3, r7, #32
 8011fbc:	f247 5230 	movw	r2, #30000	; 0x7530
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f7fc fa13 	bl	800e3ec <osMessageGet>
      if (event.status == osEventMessage) {
 8011fc6:	6a3b      	ldr	r3, [r7, #32]
 8011fc8:	2b10      	cmp	r3, #16
 8011fca:	d14d      	bne.n	8012068 <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 8011fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fce:	2b01      	cmp	r3, #1
 8011fd0:	d14a      	bne.n	8012068 <SD_read+0x100>
          res = RES_OK;
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011fd8:	e046      	b.n	8012068 <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 8011fda:	2300      	movs	r3, #0
 8011fdc:	633b      	str	r3, [r7, #48]	; 0x30
 8011fde:	e032      	b.n	8012046 <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	1c5a      	adds	r2, r3, #1
 8011fe4:	617a      	str	r2, [r7, #20]
 8011fe6:	2201      	movs	r2, #1
 8011fe8:	4619      	mov	r1, r3
 8011fea:	4823      	ldr	r0, [pc, #140]	; (8012078 <SD_read+0x110>)
 8011fec:	f7ee ff88 	bl	8000f00 <BSP_SD_ReadBlocks_DMA>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 8011ff6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d128      	bne.n	8012050 <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8011ffe:	4b1d      	ldr	r3, [pc, #116]	; (8012074 <SD_read+0x10c>)
 8012000:	6819      	ldr	r1, [r3, #0]
 8012002:	463b      	mov	r3, r7
 8012004:	f247 5230 	movw	r2, #30000	; 0x7530
 8012008:	4618      	mov	r0, r3
 801200a:	f7fc f9ef 	bl	800e3ec <osMessageGet>
 801200e:	f107 0320 	add.w	r3, r7, #32
 8012012:	463a      	mov	r2, r7
 8012014:	ca07      	ldmia	r2, {r0, r1, r2}
 8012016:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 801201a:	6a3b      	ldr	r3, [r7, #32]
 801201c:	2b10      	cmp	r3, #16
 801201e:	d10f      	bne.n	8012040 <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 8012020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012022:	2b01      	cmp	r3, #1
 8012024:	d10c      	bne.n	8012040 <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 8012026:	69bb      	ldr	r3, [r7, #24]
 8012028:	4a13      	ldr	r2, [pc, #76]	; (8012078 <SD_read+0x110>)
 801202a:	4618      	mov	r0, r3
 801202c:	4611      	mov	r1, r2
 801202e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012032:	461a      	mov	r2, r3
 8012034:	f00f f92a 	bl	802128c <memcpy>
            buff += BLOCKSIZE;
 8012038:	69bb      	ldr	r3, [r7, #24]
 801203a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801203e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 8012040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012042:	3301      	adds	r3, #1
 8012044:	633b      	str	r3, [r7, #48]	; 0x30
 8012046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012048:	693a      	ldr	r2, [r7, #16]
 801204a:	429a      	cmp	r2, r3
 801204c:	d8c8      	bhi.n	8011fe0 <SD_read+0x78>
 801204e:	e000      	b.n	8012052 <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 8012050:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8012052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012054:	693a      	ldr	r2, [r7, #16]
 8012056:	429a      	cmp	r2, r3
 8012058:	d106      	bne.n	8012068 <SD_read+0x100>
 801205a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801205e:	2b00      	cmp	r3, #0
 8012060:	d102      	bne.n	8012068 <SD_read+0x100>
      res = RES_OK;
 8012062:	2300      	movs	r3, #0
 8012064:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 8012068:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 801206c:	4618      	mov	r0, r3
 801206e:	3738      	adds	r7, #56	; 0x38
 8012070:	46bd      	mov	sp, r7
 8012072:	bd80      	pop	{r7, pc}
 8012074:	20008e5c 	.word	0x20008e5c
 8012078:	20008c5c 	.word	0x20008c5c

0801207c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b090      	sub	sp, #64	; 0x40
 8012080:	af00      	add	r7, sp, #0
 8012082:	61b9      	str	r1, [r7, #24]
 8012084:	617a      	str	r2, [r7, #20]
 8012086:	613b      	str	r3, [r7, #16]
 8012088:	4603      	mov	r3, r0
 801208a:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 801208c:	2301      	movs	r3, #1
 801208e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012092:	f247 5030 	movw	r0, #30000	; 0x7530
 8012096:	f7ff fede 	bl	8011e56 <SD_CheckStatusWithTimeout>
 801209a:	4603      	mov	r3, r0
 801209c:	2b00      	cmp	r3, #0
 801209e:	da02      	bge.n	80120a6 <SD_write+0x2a>
  {
    return res;
 80120a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80120a4:	e07c      	b.n	80121a0 <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80120a6:	69bb      	ldr	r3, [r7, #24]
 80120a8:	f003 0303 	and.w	r3, r3, #3
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d12e      	bne.n	801210e <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80120b0:	693a      	ldr	r2, [r7, #16]
 80120b2:	6979      	ldr	r1, [r7, #20]
 80120b4:	69b8      	ldr	r0, [r7, #24]
 80120b6:	f7ee ff3b 	bl	8000f30 <BSP_SD_WriteBlocks_DMA>
 80120ba:	4603      	mov	r3, r0
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d16d      	bne.n	801219c <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80120c0:	4b39      	ldr	r3, [pc, #228]	; (80121a8 <SD_write+0x12c>)
 80120c2:	6819      	ldr	r1, [r3, #0]
 80120c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80120c8:	f247 5230 	movw	r2, #30000	; 0x7530
 80120cc:	4618      	mov	r0, r3
 80120ce:	f7fc f98d 	bl	800e3ec <osMessageGet>

      if (event.status == osEventMessage)
 80120d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d4:	2b10      	cmp	r3, #16
 80120d6:	d161      	bne.n	801219c <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 80120d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120da:	2b02      	cmp	r3, #2
 80120dc:	d15e      	bne.n	801219c <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 80120de:	f7fc f8b1 	bl	800e244 <osKernelSysTick>
 80120e2:	4602      	mov	r2, r0
 80120e4:	f247 5330 	movw	r3, #30000	; 0x7530
 80120e8:	4413      	add	r3, r2
 80120ea:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 80120ec:	e008      	b.n	8012100 <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80120ee:	f7ef f84b 	bl	8001188 <BSP_SD_GetCardState>
 80120f2:	4603      	mov	r3, r0
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d103      	bne.n	8012100 <SD_write+0x84>
            {
              res = RES_OK;
 80120f8:	2300      	movs	r3, #0
 80120fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 80120fe:	e04d      	b.n	801219c <SD_write+0x120>
          while(timer > osKernelSysTick())
 8012100:	f7fc f8a0 	bl	800e244 <osKernelSysTick>
 8012104:	4602      	mov	r2, r0
 8012106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012108:	4293      	cmp	r3, r2
 801210a:	d8f0      	bhi.n	80120ee <SD_write+0x72>
 801210c:	e046      	b.n	801219c <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 801210e:	2300      	movs	r3, #0
 8012110:	63bb      	str	r3, [r7, #56]	; 0x38
 8012112:	e032      	b.n	801217a <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8012114:	697b      	ldr	r3, [r7, #20]
 8012116:	1c5a      	adds	r2, r3, #1
 8012118:	617a      	str	r2, [r7, #20]
 801211a:	2201      	movs	r2, #1
 801211c:	4619      	mov	r1, r3
 801211e:	4823      	ldr	r0, [pc, #140]	; (80121ac <SD_write+0x130>)
 8012120:	f7ee ff06 	bl	8000f30 <BSP_SD_WriteBlocks_DMA>
 8012124:	4603      	mov	r3, r0
 8012126:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 801212a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801212e:	2b00      	cmp	r3, #0
 8012130:	d128      	bne.n	8012184 <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8012132:	4b1d      	ldr	r3, [pc, #116]	; (80121a8 <SD_write+0x12c>)
 8012134:	6819      	ldr	r1, [r3, #0]
 8012136:	463b      	mov	r3, r7
 8012138:	f247 5230 	movw	r2, #30000	; 0x7530
 801213c:	4618      	mov	r0, r3
 801213e:	f7fc f955 	bl	800e3ec <osMessageGet>
 8012142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012146:	463a      	mov	r2, r7
 8012148:	ca07      	ldmia	r2, {r0, r1, r2}
 801214a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 801214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012150:	2b10      	cmp	r3, #16
 8012152:	d10f      	bne.n	8012174 <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 8012154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012156:	2b02      	cmp	r3, #2
 8012158:	d10c      	bne.n	8012174 <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 801215a:	69bb      	ldr	r3, [r7, #24]
 801215c:	4a13      	ldr	r2, [pc, #76]	; (80121ac <SD_write+0x130>)
 801215e:	4618      	mov	r0, r3
 8012160:	4611      	mov	r1, r2
 8012162:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012166:	461a      	mov	r2, r3
 8012168:	f00f f890 	bl	802128c <memcpy>
            buff += BLOCKSIZE;
 801216c:	69bb      	ldr	r3, [r7, #24]
 801216e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8012172:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 8012174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012176:	3301      	adds	r3, #1
 8012178:	63bb      	str	r3, [r7, #56]	; 0x38
 801217a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801217c:	693a      	ldr	r2, [r7, #16]
 801217e:	429a      	cmp	r2, r3
 8012180:	d8c8      	bhi.n	8012114 <SD_write+0x98>
 8012182:	e000      	b.n	8012186 <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 8012184:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8012186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012188:	693a      	ldr	r2, [r7, #16]
 801218a:	429a      	cmp	r2, r3
 801218c:	d106      	bne.n	801219c <SD_write+0x120>
 801218e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012192:	2b00      	cmp	r3, #0
 8012194:	d102      	bne.n	801219c <SD_write+0x120>
      res = RES_OK;
 8012196:	2300      	movs	r3, #0
 8012198:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 801219c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 80121a0:	4618      	mov	r0, r3
 80121a2:	3740      	adds	r7, #64	; 0x40
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}
 80121a8:	20008e5c 	.word	0x20008e5c
 80121ac:	20008c5c 	.word	0x20008c5c

080121b0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b08c      	sub	sp, #48	; 0x30
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	4603      	mov	r3, r0
 80121b8:	603a      	str	r2, [r7, #0]
 80121ba:	71fb      	strb	r3, [r7, #7]
 80121bc:	460b      	mov	r3, r1
 80121be:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80121c0:	2301      	movs	r3, #1
 80121c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80121c6:	4b25      	ldr	r3, [pc, #148]	; (801225c <SD_ioctl+0xac>)
 80121c8:	781b      	ldrb	r3, [r3, #0]
 80121ca:	b2db      	uxtb	r3, r3
 80121cc:	f003 0301 	and.w	r3, r3, #1
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d001      	beq.n	80121d8 <SD_ioctl+0x28>
 80121d4:	2303      	movs	r3, #3
 80121d6:	e03c      	b.n	8012252 <SD_ioctl+0xa2>

  switch (cmd)
 80121d8:	79bb      	ldrb	r3, [r7, #6]
 80121da:	2b03      	cmp	r3, #3
 80121dc:	d834      	bhi.n	8012248 <SD_ioctl+0x98>
 80121de:	a201      	add	r2, pc, #4	; (adr r2, 80121e4 <SD_ioctl+0x34>)
 80121e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121e4:	080121f5 	.word	0x080121f5
 80121e8:	080121fd 	.word	0x080121fd
 80121ec:	08012215 	.word	0x08012215
 80121f0:	0801222f 	.word	0x0801222f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80121f4:	2300      	movs	r3, #0
 80121f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80121fa:	e028      	b.n	801224e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80121fc:	f107 030c 	add.w	r3, r7, #12
 8012200:	4618      	mov	r0, r3
 8012202:	f7ee ffd1 	bl	80011a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012208:	683b      	ldr	r3, [r7, #0]
 801220a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801220c:	2300      	movs	r3, #0
 801220e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012212:	e01c      	b.n	801224e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012214:	f107 030c 	add.w	r3, r7, #12
 8012218:	4618      	mov	r0, r3
 801221a:	f7ee ffc5 	bl	80011a8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012220:	b29a      	uxth	r2, r3
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012226:	2300      	movs	r3, #0
 8012228:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801222c:	e00f      	b.n	801224e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801222e:	f107 030c 	add.w	r3, r7, #12
 8012232:	4618      	mov	r0, r3
 8012234:	f7ee ffb8 	bl	80011a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801223a:	0a5a      	lsrs	r2, r3, #9
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012240:	2300      	movs	r3, #0
 8012242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012246:	e002      	b.n	801224e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012248:	2304      	movs	r3, #4
 801224a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801224e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012252:	4618      	mov	r0, r3
 8012254:	3730      	adds	r7, #48	; 0x30
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}
 801225a:	bf00      	nop
 801225c:	20000030 	.word	0x20000030

08012260 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8012264:	4b04      	ldr	r3, [pc, #16]	; (8012278 <BSP_SD_ReadCpltCallback+0x18>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	f04f 32ff 	mov.w	r2, #4294967295
 801226c:	2101      	movs	r1, #1
 801226e:	4618      	mov	r0, r3
 8012270:	f7fc f87c 	bl	800e36c <osMessagePut>
}
 8012274:	bf00      	nop
 8012276:	bd80      	pop	{r7, pc}
 8012278:	20008e5c 	.word	0x20008e5c

0801227c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b082      	sub	sp, #8
 8012280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8012282:	4b11      	ldr	r3, [pc, #68]	; (80122c8 <HAL_MspInit+0x4c>)
 8012284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012286:	4a10      	ldr	r2, [pc, #64]	; (80122c8 <HAL_MspInit+0x4c>)
 8012288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801228c:	6413      	str	r3, [r2, #64]	; 0x40
 801228e:	4b0e      	ldr	r3, [pc, #56]	; (80122c8 <HAL_MspInit+0x4c>)
 8012290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012296:	607b      	str	r3, [r7, #4]
 8012298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801229a:	4b0b      	ldr	r3, [pc, #44]	; (80122c8 <HAL_MspInit+0x4c>)
 801229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801229e:	4a0a      	ldr	r2, [pc, #40]	; (80122c8 <HAL_MspInit+0x4c>)
 80122a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80122a4:	6453      	str	r3, [r2, #68]	; 0x44
 80122a6:	4b08      	ldr	r3, [pc, #32]	; (80122c8 <HAL_MspInit+0x4c>)
 80122a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80122ae:	603b      	str	r3, [r7, #0]
 80122b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80122b2:	2200      	movs	r2, #0
 80122b4:	210f      	movs	r1, #15
 80122b6:	f06f 0001 	mvn.w	r0, #1
 80122ba:	f7ef fd89 	bl	8001dd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80122be:	bf00      	nop
 80122c0:	3708      	adds	r7, #8
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}
 80122c6:	bf00      	nop
 80122c8:	40023800 	.word	0x40023800

080122cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b08a      	sub	sp, #40	; 0x28
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80122d4:	f107 0314 	add.w	r3, r7, #20
 80122d8:	2200      	movs	r2, #0
 80122da:	601a      	str	r2, [r3, #0]
 80122dc:	605a      	str	r2, [r3, #4]
 80122de:	609a      	str	r2, [r3, #8]
 80122e0:	60da      	str	r2, [r3, #12]
 80122e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	4a21      	ldr	r2, [pc, #132]	; (8012370 <HAL_ADC_MspInit+0xa4>)
 80122ea:	4293      	cmp	r3, r2
 80122ec:	d13c      	bne.n	8012368 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80122ee:	4b21      	ldr	r3, [pc, #132]	; (8012374 <HAL_ADC_MspInit+0xa8>)
 80122f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122f2:	4a20      	ldr	r2, [pc, #128]	; (8012374 <HAL_ADC_MspInit+0xa8>)
 80122f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80122f8:	6453      	str	r3, [r2, #68]	; 0x44
 80122fa:	4b1e      	ldr	r3, [pc, #120]	; (8012374 <HAL_ADC_MspInit+0xa8>)
 80122fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012302:	613b      	str	r3, [r7, #16]
 8012304:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8012306:	4b1b      	ldr	r3, [pc, #108]	; (8012374 <HAL_ADC_MspInit+0xa8>)
 8012308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801230a:	4a1a      	ldr	r2, [pc, #104]	; (8012374 <HAL_ADC_MspInit+0xa8>)
 801230c:	f043 0320 	orr.w	r3, r3, #32
 8012310:	6313      	str	r3, [r2, #48]	; 0x30
 8012312:	4b18      	ldr	r3, [pc, #96]	; (8012374 <HAL_ADC_MspInit+0xa8>)
 8012314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012316:	f003 0320 	and.w	r3, r3, #32
 801231a:	60fb      	str	r3, [r7, #12]
 801231c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801231e:	4b15      	ldr	r3, [pc, #84]	; (8012374 <HAL_ADC_MspInit+0xa8>)
 8012320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012322:	4a14      	ldr	r2, [pc, #80]	; (8012374 <HAL_ADC_MspInit+0xa8>)
 8012324:	f043 0301 	orr.w	r3, r3, #1
 8012328:	6313      	str	r3, [r2, #48]	; 0x30
 801232a:	4b12      	ldr	r3, [pc, #72]	; (8012374 <HAL_ADC_MspInit+0xa8>)
 801232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801232e:	f003 0301 	and.w	r3, r3, #1
 8012332:	60bb      	str	r3, [r7, #8]
 8012334:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8012336:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 801233a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801233c:	2303      	movs	r3, #3
 801233e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012340:	2300      	movs	r3, #0
 8012342:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8012344:	f107 0314 	add.w	r3, r7, #20
 8012348:	4619      	mov	r1, r3
 801234a:	480b      	ldr	r0, [pc, #44]	; (8012378 <HAL_ADC_MspInit+0xac>)
 801234c:	f7f0 fd9e 	bl	8002e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8012350:	2301      	movs	r3, #1
 8012352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012354:	2303      	movs	r3, #3
 8012356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012358:	2300      	movs	r3, #0
 801235a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 801235c:	f107 0314 	add.w	r3, r7, #20
 8012360:	4619      	mov	r1, r3
 8012362:	4806      	ldr	r0, [pc, #24]	; (801237c <HAL_ADC_MspInit+0xb0>)
 8012364:	f7f0 fd92 	bl	8002e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8012368:	bf00      	nop
 801236a:	3728      	adds	r7, #40	; 0x28
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}
 8012370:	40012200 	.word	0x40012200
 8012374:	40023800 	.word	0x40023800
 8012378:	40021400 	.word	0x40021400
 801237c:	40020000 	.word	0x40020000

08012380 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8012380:	b480      	push	{r7}
 8012382:	b085      	sub	sp, #20
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	4a0a      	ldr	r2, [pc, #40]	; (80123b8 <HAL_CRC_MspInit+0x38>)
 801238e:	4293      	cmp	r3, r2
 8012390:	d10b      	bne.n	80123aa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8012392:	4b0a      	ldr	r3, [pc, #40]	; (80123bc <HAL_CRC_MspInit+0x3c>)
 8012394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012396:	4a09      	ldr	r2, [pc, #36]	; (80123bc <HAL_CRC_MspInit+0x3c>)
 8012398:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801239c:	6313      	str	r3, [r2, #48]	; 0x30
 801239e:	4b07      	ldr	r3, [pc, #28]	; (80123bc <HAL_CRC_MspInit+0x3c>)
 80123a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80123a6:	60fb      	str	r3, [r7, #12]
 80123a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80123aa:	bf00      	nop
 80123ac:	3714      	adds	r7, #20
 80123ae:	46bd      	mov	sp, r7
 80123b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b4:	4770      	bx	lr
 80123b6:	bf00      	nop
 80123b8:	40023000 	.word	0x40023000
 80123bc:	40023800 	.word	0x40023800

080123c0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b08e      	sub	sp, #56	; 0x38
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80123c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80123cc:	2200      	movs	r2, #0
 80123ce:	601a      	str	r2, [r3, #0]
 80123d0:	605a      	str	r2, [r3, #4]
 80123d2:	609a      	str	r2, [r3, #8]
 80123d4:	60da      	str	r2, [r3, #12]
 80123d6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	4a50      	ldr	r2, [pc, #320]	; (8012520 <HAL_DCMI_MspInit+0x160>)
 80123de:	4293      	cmp	r3, r2
 80123e0:	f040 809a 	bne.w	8012518 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80123e4:	4b4f      	ldr	r3, [pc, #316]	; (8012524 <HAL_DCMI_MspInit+0x164>)
 80123e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123e8:	4a4e      	ldr	r2, [pc, #312]	; (8012524 <HAL_DCMI_MspInit+0x164>)
 80123ea:	f043 0301 	orr.w	r3, r3, #1
 80123ee:	6353      	str	r3, [r2, #52]	; 0x34
 80123f0:	4b4c      	ldr	r3, [pc, #304]	; (8012524 <HAL_DCMI_MspInit+0x164>)
 80123f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123f4:	f003 0301 	and.w	r3, r3, #1
 80123f8:	623b      	str	r3, [r7, #32]
 80123fa:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80123fc:	4b49      	ldr	r3, [pc, #292]	; (8012524 <HAL_DCMI_MspInit+0x164>)
 80123fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012400:	4a48      	ldr	r2, [pc, #288]	; (8012524 <HAL_DCMI_MspInit+0x164>)
 8012402:	f043 0310 	orr.w	r3, r3, #16
 8012406:	6313      	str	r3, [r2, #48]	; 0x30
 8012408:	4b46      	ldr	r3, [pc, #280]	; (8012524 <HAL_DCMI_MspInit+0x164>)
 801240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801240c:	f003 0310 	and.w	r3, r3, #16
 8012410:	61fb      	str	r3, [r7, #28]
 8012412:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8012414:	4b43      	ldr	r3, [pc, #268]	; (8012524 <HAL_DCMI_MspInit+0x164>)
 8012416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012418:	4a42      	ldr	r2, [pc, #264]	; (8012524 <HAL_DCMI_MspInit+0x164>)
 801241a:	f043 0308 	orr.w	r3, r3, #8
 801241e:	6313      	str	r3, [r2, #48]	; 0x30
 8012420:	4b40      	ldr	r3, [pc, #256]	; (8012524 <HAL_DCMI_MspInit+0x164>)
 8012422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012424:	f003 0308 	and.w	r3, r3, #8
 8012428:	61bb      	str	r3, [r7, #24]
 801242a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801242c:	4b3d      	ldr	r3, [pc, #244]	; (8012524 <HAL_DCMI_MspInit+0x164>)
 801242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012430:	4a3c      	ldr	r2, [pc, #240]	; (8012524 <HAL_DCMI_MspInit+0x164>)
 8012432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012436:	6313      	str	r3, [r2, #48]	; 0x30
 8012438:	4b3a      	ldr	r3, [pc, #232]	; (8012524 <HAL_DCMI_MspInit+0x164>)
 801243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801243c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012440:	617b      	str	r3, [r7, #20]
 8012442:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8012444:	4b37      	ldr	r3, [pc, #220]	; (8012524 <HAL_DCMI_MspInit+0x164>)
 8012446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012448:	4a36      	ldr	r2, [pc, #216]	; (8012524 <HAL_DCMI_MspInit+0x164>)
 801244a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801244e:	6313      	str	r3, [r2, #48]	; 0x30
 8012450:	4b34      	ldr	r3, [pc, #208]	; (8012524 <HAL_DCMI_MspInit+0x164>)
 8012452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012458:	613b      	str	r3, [r7, #16]
 801245a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801245c:	4b31      	ldr	r3, [pc, #196]	; (8012524 <HAL_DCMI_MspInit+0x164>)
 801245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012460:	4a30      	ldr	r2, [pc, #192]	; (8012524 <HAL_DCMI_MspInit+0x164>)
 8012462:	f043 0301 	orr.w	r3, r3, #1
 8012466:	6313      	str	r3, [r2, #48]	; 0x30
 8012468:	4b2e      	ldr	r3, [pc, #184]	; (8012524 <HAL_DCMI_MspInit+0x164>)
 801246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801246c:	f003 0301 	and.w	r3, r3, #1
 8012470:	60fb      	str	r3, [r7, #12]
 8012472:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8012474:	2360      	movs	r3, #96	; 0x60
 8012476:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012478:	2302      	movs	r3, #2
 801247a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801247c:	2300      	movs	r3, #0
 801247e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012480:	2300      	movs	r3, #0
 8012482:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8012484:	230d      	movs	r3, #13
 8012486:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801248c:	4619      	mov	r1, r3
 801248e:	4826      	ldr	r0, [pc, #152]	; (8012528 <HAL_DCMI_MspInit+0x168>)
 8012490:	f7f0 fcfc 	bl	8002e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8012494:	2308      	movs	r3, #8
 8012496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012498:	2302      	movs	r3, #2
 801249a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801249c:	2300      	movs	r3, #0
 801249e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80124a0:	2300      	movs	r3, #0
 80124a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80124a4:	230d      	movs	r3, #13
 80124a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80124a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80124ac:	4619      	mov	r1, r3
 80124ae:	481f      	ldr	r0, [pc, #124]	; (801252c <HAL_DCMI_MspInit+0x16c>)
 80124b0:	f7f0 fcec 	bl	8002e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80124b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80124b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80124ba:	2302      	movs	r3, #2
 80124bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124be:	2300      	movs	r3, #0
 80124c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80124c2:	2300      	movs	r3, #0
 80124c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80124c6:	230d      	movs	r3, #13
 80124c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80124ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80124ce:	4619      	mov	r1, r3
 80124d0:	4817      	ldr	r0, [pc, #92]	; (8012530 <HAL_DCMI_MspInit+0x170>)
 80124d2:	f7f0 fcdb 	bl	8002e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80124d6:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80124da:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80124dc:	2302      	movs	r3, #2
 80124de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124e0:	2300      	movs	r3, #0
 80124e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80124e4:	2300      	movs	r3, #0
 80124e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80124e8:	230d      	movs	r3, #13
 80124ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80124ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80124f0:	4619      	mov	r1, r3
 80124f2:	4810      	ldr	r0, [pc, #64]	; (8012534 <HAL_DCMI_MspInit+0x174>)
 80124f4:	f7f0 fcca 	bl	8002e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80124f8:	2350      	movs	r3, #80	; 0x50
 80124fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80124fc:	2302      	movs	r3, #2
 80124fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012500:	2300      	movs	r3, #0
 8012502:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012504:	2300      	movs	r3, #0
 8012506:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8012508:	230d      	movs	r3, #13
 801250a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801250c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012510:	4619      	mov	r1, r3
 8012512:	4809      	ldr	r0, [pc, #36]	; (8012538 <HAL_DCMI_MspInit+0x178>)
 8012514:	f7f0 fcba 	bl	8002e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8012518:	bf00      	nop
 801251a:	3738      	adds	r7, #56	; 0x38
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}
 8012520:	50050000 	.word	0x50050000
 8012524:	40023800 	.word	0x40023800
 8012528:	40021000 	.word	0x40021000
 801252c:	40020c00 	.word	0x40020c00
 8012530:	40021800 	.word	0x40021800
 8012534:	40021c00 	.word	0x40021c00
 8012538:	40020000 	.word	0x40020000

0801253c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b08c      	sub	sp, #48	; 0x30
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012544:	f107 031c 	add.w	r3, r7, #28
 8012548:	2200      	movs	r2, #0
 801254a:	601a      	str	r2, [r3, #0]
 801254c:	605a      	str	r2, [r3, #4]
 801254e:	609a      	str	r2, [r3, #8]
 8012550:	60da      	str	r2, [r3, #12]
 8012552:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	4a2f      	ldr	r2, [pc, #188]	; (8012618 <HAL_I2C_MspInit+0xdc>)
 801255a:	4293      	cmp	r3, r2
 801255c:	d129      	bne.n	80125b2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801255e:	4b2f      	ldr	r3, [pc, #188]	; (801261c <HAL_I2C_MspInit+0xe0>)
 8012560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012562:	4a2e      	ldr	r2, [pc, #184]	; (801261c <HAL_I2C_MspInit+0xe0>)
 8012564:	f043 0302 	orr.w	r3, r3, #2
 8012568:	6313      	str	r3, [r2, #48]	; 0x30
 801256a:	4b2c      	ldr	r3, [pc, #176]	; (801261c <HAL_I2C_MspInit+0xe0>)
 801256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801256e:	f003 0302 	and.w	r3, r3, #2
 8012572:	61bb      	str	r3, [r7, #24]
 8012574:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8012576:	f44f 7340 	mov.w	r3, #768	; 0x300
 801257a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801257c:	2312      	movs	r3, #18
 801257e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012580:	2301      	movs	r3, #1
 8012582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012584:	2300      	movs	r3, #0
 8012586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8012588:	2304      	movs	r3, #4
 801258a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801258c:	f107 031c 	add.w	r3, r7, #28
 8012590:	4619      	mov	r1, r3
 8012592:	4823      	ldr	r0, [pc, #140]	; (8012620 <HAL_I2C_MspInit+0xe4>)
 8012594:	f7f0 fc7a 	bl	8002e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8012598:	4b20      	ldr	r3, [pc, #128]	; (801261c <HAL_I2C_MspInit+0xe0>)
 801259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801259c:	4a1f      	ldr	r2, [pc, #124]	; (801261c <HAL_I2C_MspInit+0xe0>)
 801259e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80125a2:	6413      	str	r3, [r2, #64]	; 0x40
 80125a4:	4b1d      	ldr	r3, [pc, #116]	; (801261c <HAL_I2C_MspInit+0xe0>)
 80125a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80125ac:	617b      	str	r3, [r7, #20]
 80125ae:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80125b0:	e02d      	b.n	801260e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	4a1b      	ldr	r2, [pc, #108]	; (8012624 <HAL_I2C_MspInit+0xe8>)
 80125b8:	4293      	cmp	r3, r2
 80125ba:	d128      	bne.n	801260e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80125bc:	4b17      	ldr	r3, [pc, #92]	; (801261c <HAL_I2C_MspInit+0xe0>)
 80125be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125c0:	4a16      	ldr	r2, [pc, #88]	; (801261c <HAL_I2C_MspInit+0xe0>)
 80125c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125c6:	6313      	str	r3, [r2, #48]	; 0x30
 80125c8:	4b14      	ldr	r3, [pc, #80]	; (801261c <HAL_I2C_MspInit+0xe0>)
 80125ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80125d0:	613b      	str	r3, [r7, #16]
 80125d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80125d4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80125d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80125da:	2312      	movs	r3, #18
 80125dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80125de:	2301      	movs	r3, #1
 80125e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80125e2:	2303      	movs	r3, #3
 80125e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80125e6:	2304      	movs	r3, #4
 80125e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80125ea:	f107 031c 	add.w	r3, r7, #28
 80125ee:	4619      	mov	r1, r3
 80125f0:	480d      	ldr	r0, [pc, #52]	; (8012628 <HAL_I2C_MspInit+0xec>)
 80125f2:	f7f0 fc4b 	bl	8002e8c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80125f6:	4b09      	ldr	r3, [pc, #36]	; (801261c <HAL_I2C_MspInit+0xe0>)
 80125f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125fa:	4a08      	ldr	r2, [pc, #32]	; (801261c <HAL_I2C_MspInit+0xe0>)
 80125fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012600:	6413      	str	r3, [r2, #64]	; 0x40
 8012602:	4b06      	ldr	r3, [pc, #24]	; (801261c <HAL_I2C_MspInit+0xe0>)
 8012604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012606:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801260a:	60fb      	str	r3, [r7, #12]
 801260c:	68fb      	ldr	r3, [r7, #12]
}
 801260e:	bf00      	nop
 8012610:	3730      	adds	r7, #48	; 0x30
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}
 8012616:	bf00      	nop
 8012618:	40005400 	.word	0x40005400
 801261c:	40023800 	.word	0x40023800
 8012620:	40020400 	.word	0x40020400
 8012624:	40005c00 	.word	0x40005c00
 8012628:	40021c00 	.word	0x40021c00

0801262c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 801262c:	b580      	push	{r7, lr}
 801262e:	b082      	sub	sp, #8
 8012630:	af00      	add	r7, sp, #0
 8012632:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	4a11      	ldr	r2, [pc, #68]	; (8012680 <HAL_I2C_MspDeInit+0x54>)
 801263a:	4293      	cmp	r3, r2
 801263c:	d10b      	bne.n	8012656 <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 801263e:	4b11      	ldr	r3, [pc, #68]	; (8012684 <HAL_I2C_MspDeInit+0x58>)
 8012640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012642:	4a10      	ldr	r2, [pc, #64]	; (8012684 <HAL_I2C_MspDeInit+0x58>)
 8012644:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012648:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 801264a:	f44f 7140 	mov.w	r1, #768	; 0x300
 801264e:	480e      	ldr	r0, [pc, #56]	; (8012688 <HAL_I2C_MspDeInit+0x5c>)
 8012650:	f7f0 fdc6 	bl	80031e0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8012654:	e00f      	b.n	8012676 <HAL_I2C_MspDeInit+0x4a>
  else if(hi2c->Instance==I2C3)
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	4a0c      	ldr	r2, [pc, #48]	; (801268c <HAL_I2C_MspDeInit+0x60>)
 801265c:	4293      	cmp	r3, r2
 801265e:	d10a      	bne.n	8012676 <HAL_I2C_MspDeInit+0x4a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8012660:	4b08      	ldr	r3, [pc, #32]	; (8012684 <HAL_I2C_MspDeInit+0x58>)
 8012662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012664:	4a07      	ldr	r2, [pc, #28]	; (8012684 <HAL_I2C_MspDeInit+0x58>)
 8012666:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801266a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 801266c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8012670:	4807      	ldr	r0, [pc, #28]	; (8012690 <HAL_I2C_MspDeInit+0x64>)
 8012672:	f7f0 fdb5 	bl	80031e0 <HAL_GPIO_DeInit>
}
 8012676:	bf00      	nop
 8012678:	3708      	adds	r7, #8
 801267a:	46bd      	mov	sp, r7
 801267c:	bd80      	pop	{r7, pc}
 801267e:	bf00      	nop
 8012680:	40005400 	.word	0x40005400
 8012684:	40023800 	.word	0x40023800
 8012688:	40020400 	.word	0x40020400
 801268c:	40005c00 	.word	0x40005c00
 8012690:	40021c00 	.word	0x40021c00

08012694 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b08c      	sub	sp, #48	; 0x30
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801269c:	f107 031c 	add.w	r3, r7, #28
 80126a0:	2200      	movs	r2, #0
 80126a2:	601a      	str	r2, [r3, #0]
 80126a4:	605a      	str	r2, [r3, #4]
 80126a6:	609a      	str	r2, [r3, #8]
 80126a8:	60da      	str	r2, [r3, #12]
 80126aa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	4a3b      	ldr	r2, [pc, #236]	; (80127a0 <HAL_QSPI_MspInit+0x10c>)
 80126b2:	4293      	cmp	r3, r2
 80126b4:	d170      	bne.n	8012798 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80126b6:	4b3b      	ldr	r3, [pc, #236]	; (80127a4 <HAL_QSPI_MspInit+0x110>)
 80126b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126ba:	4a3a      	ldr	r2, [pc, #232]	; (80127a4 <HAL_QSPI_MspInit+0x110>)
 80126bc:	f043 0302 	orr.w	r3, r3, #2
 80126c0:	6393      	str	r3, [r2, #56]	; 0x38
 80126c2:	4b38      	ldr	r3, [pc, #224]	; (80127a4 <HAL_QSPI_MspInit+0x110>)
 80126c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126c6:	f003 0302 	and.w	r3, r3, #2
 80126ca:	61bb      	str	r3, [r7, #24]
 80126cc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80126ce:	4b35      	ldr	r3, [pc, #212]	; (80127a4 <HAL_QSPI_MspInit+0x110>)
 80126d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126d2:	4a34      	ldr	r2, [pc, #208]	; (80127a4 <HAL_QSPI_MspInit+0x110>)
 80126d4:	f043 0310 	orr.w	r3, r3, #16
 80126d8:	6313      	str	r3, [r2, #48]	; 0x30
 80126da:	4b32      	ldr	r3, [pc, #200]	; (80127a4 <HAL_QSPI_MspInit+0x110>)
 80126dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126de:	f003 0310 	and.w	r3, r3, #16
 80126e2:	617b      	str	r3, [r7, #20]
 80126e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80126e6:	4b2f      	ldr	r3, [pc, #188]	; (80127a4 <HAL_QSPI_MspInit+0x110>)
 80126e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126ea:	4a2e      	ldr	r2, [pc, #184]	; (80127a4 <HAL_QSPI_MspInit+0x110>)
 80126ec:	f043 0302 	orr.w	r3, r3, #2
 80126f0:	6313      	str	r3, [r2, #48]	; 0x30
 80126f2:	4b2c      	ldr	r3, [pc, #176]	; (80127a4 <HAL_QSPI_MspInit+0x110>)
 80126f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126f6:	f003 0302 	and.w	r3, r3, #2
 80126fa:	613b      	str	r3, [r7, #16]
 80126fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80126fe:	4b29      	ldr	r3, [pc, #164]	; (80127a4 <HAL_QSPI_MspInit+0x110>)
 8012700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012702:	4a28      	ldr	r2, [pc, #160]	; (80127a4 <HAL_QSPI_MspInit+0x110>)
 8012704:	f043 0308 	orr.w	r3, r3, #8
 8012708:	6313      	str	r3, [r2, #48]	; 0x30
 801270a:	4b26      	ldr	r3, [pc, #152]	; (80127a4 <HAL_QSPI_MspInit+0x110>)
 801270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801270e:	f003 0308 	and.w	r3, r3, #8
 8012712:	60fb      	str	r3, [r7, #12]
 8012714:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8012716:	2304      	movs	r3, #4
 8012718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801271a:	2302      	movs	r3, #2
 801271c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801271e:	2300      	movs	r3, #0
 8012720:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012722:	2303      	movs	r3, #3
 8012724:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8012726:	2309      	movs	r3, #9
 8012728:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 801272a:	f107 031c 	add.w	r3, r7, #28
 801272e:	4619      	mov	r1, r3
 8012730:	481d      	ldr	r0, [pc, #116]	; (80127a8 <HAL_QSPI_MspInit+0x114>)
 8012732:	f7f0 fbab 	bl	8002e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8012736:	2340      	movs	r3, #64	; 0x40
 8012738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801273a:	2302      	movs	r3, #2
 801273c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801273e:	2300      	movs	r3, #0
 8012740:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012742:	2303      	movs	r3, #3
 8012744:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8012746:	230a      	movs	r3, #10
 8012748:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 801274a:	f107 031c 	add.w	r3, r7, #28
 801274e:	4619      	mov	r1, r3
 8012750:	4816      	ldr	r0, [pc, #88]	; (80127ac <HAL_QSPI_MspInit+0x118>)
 8012752:	f7f0 fb9b 	bl	8002e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8012756:	2304      	movs	r3, #4
 8012758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801275a:	2302      	movs	r3, #2
 801275c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801275e:	2300      	movs	r3, #0
 8012760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012762:	2303      	movs	r3, #3
 8012764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8012766:	2309      	movs	r3, #9
 8012768:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801276a:	f107 031c 	add.w	r3, r7, #28
 801276e:	4619      	mov	r1, r3
 8012770:	480e      	ldr	r0, [pc, #56]	; (80127ac <HAL_QSPI_MspInit+0x118>)
 8012772:	f7f0 fb8b 	bl	8002e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8012776:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801277a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801277c:	2302      	movs	r3, #2
 801277e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012780:	2300      	movs	r3, #0
 8012782:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012784:	2303      	movs	r3, #3
 8012786:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8012788:	2309      	movs	r3, #9
 801278a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801278c:	f107 031c 	add.w	r3, r7, #28
 8012790:	4619      	mov	r1, r3
 8012792:	4807      	ldr	r0, [pc, #28]	; (80127b0 <HAL_QSPI_MspInit+0x11c>)
 8012794:	f7f0 fb7a 	bl	8002e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8012798:	bf00      	nop
 801279a:	3730      	adds	r7, #48	; 0x30
 801279c:	46bd      	mov	sp, r7
 801279e:	bd80      	pop	{r7, pc}
 80127a0:	a0001000 	.word	0xa0001000
 80127a4:	40023800 	.word	0x40023800
 80127a8:	40021000 	.word	0x40021000
 80127ac:	40020400 	.word	0x40020400
 80127b0:	40020c00 	.word	0x40020c00

080127b4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80127b4:	b480      	push	{r7}
 80127b6:	b085      	sub	sp, #20
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	4a0a      	ldr	r2, [pc, #40]	; (80127ec <HAL_RNG_MspInit+0x38>)
 80127c2:	4293      	cmp	r3, r2
 80127c4:	d10b      	bne.n	80127de <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80127c6:	4b0a      	ldr	r3, [pc, #40]	; (80127f0 <HAL_RNG_MspInit+0x3c>)
 80127c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127ca:	4a09      	ldr	r2, [pc, #36]	; (80127f0 <HAL_RNG_MspInit+0x3c>)
 80127cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127d0:	6353      	str	r3, [r2, #52]	; 0x34
 80127d2:	4b07      	ldr	r3, [pc, #28]	; (80127f0 <HAL_RNG_MspInit+0x3c>)
 80127d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127da:	60fb      	str	r3, [r7, #12]
 80127dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80127de:	bf00      	nop
 80127e0:	3714      	adds	r7, #20
 80127e2:	46bd      	mov	sp, r7
 80127e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e8:	4770      	bx	lr
 80127ea:	bf00      	nop
 80127ec:	50060800 	.word	0x50060800
 80127f0:	40023800 	.word	0x40023800

080127f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80127f4:	b480      	push	{r7}
 80127f6:	b083      	sub	sp, #12
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	4a07      	ldr	r2, [pc, #28]	; (8012820 <HAL_RTC_MspInit+0x2c>)
 8012802:	4293      	cmp	r3, r2
 8012804:	d105      	bne.n	8012812 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8012806:	4b07      	ldr	r3, [pc, #28]	; (8012824 <HAL_RTC_MspInit+0x30>)
 8012808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801280a:	4a06      	ldr	r2, [pc, #24]	; (8012824 <HAL_RTC_MspInit+0x30>)
 801280c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012810:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8012812:	bf00      	nop
 8012814:	370c      	adds	r7, #12
 8012816:	46bd      	mov	sp, r7
 8012818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281c:	4770      	bx	lr
 801281e:	bf00      	nop
 8012820:	40002800 	.word	0x40002800
 8012824:	40023800 	.word	0x40023800

08012828 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b08a      	sub	sp, #40	; 0x28
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012830:	f107 0314 	add.w	r3, r7, #20
 8012834:	2200      	movs	r2, #0
 8012836:	601a      	str	r2, [r3, #0]
 8012838:	605a      	str	r2, [r3, #4]
 801283a:	609a      	str	r2, [r3, #8]
 801283c:	60da      	str	r2, [r3, #12]
 801283e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	4a25      	ldr	r2, [pc, #148]	; (80128dc <HAL_SD_MspInit+0xb4>)
 8012846:	4293      	cmp	r3, r2
 8012848:	d144      	bne.n	80128d4 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801284a:	4b25      	ldr	r3, [pc, #148]	; (80128e0 <HAL_SD_MspInit+0xb8>)
 801284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801284e:	4a24      	ldr	r2, [pc, #144]	; (80128e0 <HAL_SD_MspInit+0xb8>)
 8012850:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012854:	6453      	str	r3, [r2, #68]	; 0x44
 8012856:	4b22      	ldr	r3, [pc, #136]	; (80128e0 <HAL_SD_MspInit+0xb8>)
 8012858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801285a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801285e:	613b      	str	r3, [r7, #16]
 8012860:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012862:	4b1f      	ldr	r3, [pc, #124]	; (80128e0 <HAL_SD_MspInit+0xb8>)
 8012864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012866:	4a1e      	ldr	r2, [pc, #120]	; (80128e0 <HAL_SD_MspInit+0xb8>)
 8012868:	f043 0304 	orr.w	r3, r3, #4
 801286c:	6313      	str	r3, [r2, #48]	; 0x30
 801286e:	4b1c      	ldr	r3, [pc, #112]	; (80128e0 <HAL_SD_MspInit+0xb8>)
 8012870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012872:	f003 0304 	and.w	r3, r3, #4
 8012876:	60fb      	str	r3, [r7, #12]
 8012878:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801287a:	4b19      	ldr	r3, [pc, #100]	; (80128e0 <HAL_SD_MspInit+0xb8>)
 801287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801287e:	4a18      	ldr	r2, [pc, #96]	; (80128e0 <HAL_SD_MspInit+0xb8>)
 8012880:	f043 0308 	orr.w	r3, r3, #8
 8012884:	6313      	str	r3, [r2, #48]	; 0x30
 8012886:	4b16      	ldr	r3, [pc, #88]	; (80128e0 <HAL_SD_MspInit+0xb8>)
 8012888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801288a:	f003 0308 	and.w	r3, r3, #8
 801288e:	60bb      	str	r3, [r7, #8]
 8012890:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8012892:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8012896:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012898:	2302      	movs	r3, #2
 801289a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801289c:	2300      	movs	r3, #0
 801289e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80128a0:	2303      	movs	r3, #3
 80128a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80128a4:	230c      	movs	r3, #12
 80128a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80128a8:	f107 0314 	add.w	r3, r7, #20
 80128ac:	4619      	mov	r1, r3
 80128ae:	480d      	ldr	r0, [pc, #52]	; (80128e4 <HAL_SD_MspInit+0xbc>)
 80128b0:	f7f0 faec 	bl	8002e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80128b4:	2304      	movs	r3, #4
 80128b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80128b8:	2302      	movs	r3, #2
 80128ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80128bc:	2300      	movs	r3, #0
 80128be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80128c0:	2303      	movs	r3, #3
 80128c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80128c4:	230c      	movs	r3, #12
 80128c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80128c8:	f107 0314 	add.w	r3, r7, #20
 80128cc:	4619      	mov	r1, r3
 80128ce:	4806      	ldr	r0, [pc, #24]	; (80128e8 <HAL_SD_MspInit+0xc0>)
 80128d0:	f7f0 fadc 	bl	8002e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80128d4:	bf00      	nop
 80128d6:	3728      	adds	r7, #40	; 0x28
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}
 80128dc:	40012c00 	.word	0x40012c00
 80128e0:	40023800 	.word	0x40023800
 80128e4:	40020800 	.word	0x40020800
 80128e8:	40020c00 	.word	0x40020c00

080128ec <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b08a      	sub	sp, #40	; 0x28
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80128f4:	f107 0314 	add.w	r3, r7, #20
 80128f8:	2200      	movs	r2, #0
 80128fa:	601a      	str	r2, [r3, #0]
 80128fc:	605a      	str	r2, [r3, #4]
 80128fe:	609a      	str	r2, [r3, #8]
 8012900:	60da      	str	r2, [r3, #12]
 8012902:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 801290c:	d127      	bne.n	801295e <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 801290e:	4b16      	ldr	r3, [pc, #88]	; (8012968 <HAL_SPDIFRX_MspInit+0x7c>)
 8012910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012912:	4a15      	ldr	r2, [pc, #84]	; (8012968 <HAL_SPDIFRX_MspInit+0x7c>)
 8012914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012918:	6413      	str	r3, [r2, #64]	; 0x40
 801291a:	4b13      	ldr	r3, [pc, #76]	; (8012968 <HAL_SPDIFRX_MspInit+0x7c>)
 801291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801291e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012922:	613b      	str	r3, [r7, #16]
 8012924:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8012926:	4b10      	ldr	r3, [pc, #64]	; (8012968 <HAL_SPDIFRX_MspInit+0x7c>)
 8012928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801292a:	4a0f      	ldr	r2, [pc, #60]	; (8012968 <HAL_SPDIFRX_MspInit+0x7c>)
 801292c:	f043 0308 	orr.w	r3, r3, #8
 8012930:	6313      	str	r3, [r2, #48]	; 0x30
 8012932:	4b0d      	ldr	r3, [pc, #52]	; (8012968 <HAL_SPDIFRX_MspInit+0x7c>)
 8012934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012936:	f003 0308 	and.w	r3, r3, #8
 801293a:	60fb      	str	r3, [r7, #12]
 801293c:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 801293e:	2380      	movs	r3, #128	; 0x80
 8012940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012942:	2302      	movs	r3, #2
 8012944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012946:	2300      	movs	r3, #0
 8012948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801294a:	2300      	movs	r3, #0
 801294c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 801294e:	2308      	movs	r3, #8
 8012950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8012952:	f107 0314 	add.w	r3, r7, #20
 8012956:	4619      	mov	r1, r3
 8012958:	4804      	ldr	r0, [pc, #16]	; (801296c <HAL_SPDIFRX_MspInit+0x80>)
 801295a:	f7f0 fa97 	bl	8002e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 801295e:	bf00      	nop
 8012960:	3728      	adds	r7, #40	; 0x28
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}
 8012966:	bf00      	nop
 8012968:	40023800 	.word	0x40023800
 801296c:	40020c00 	.word	0x40020c00

08012970 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b08a      	sub	sp, #40	; 0x28
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012978:	f107 0314 	add.w	r3, r7, #20
 801297c:	2200      	movs	r2, #0
 801297e:	601a      	str	r2, [r3, #0]
 8012980:	605a      	str	r2, [r3, #4]
 8012982:	609a      	str	r2, [r3, #8]
 8012984:	60da      	str	r2, [r3, #12]
 8012986:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	4a25      	ldr	r2, [pc, #148]	; (8012a24 <HAL_SPI_MspInit+0xb4>)
 801298e:	4293      	cmp	r3, r2
 8012990:	d144      	bne.n	8012a1c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8012992:	4b25      	ldr	r3, [pc, #148]	; (8012a28 <HAL_SPI_MspInit+0xb8>)
 8012994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012996:	4a24      	ldr	r2, [pc, #144]	; (8012a28 <HAL_SPI_MspInit+0xb8>)
 8012998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801299c:	6413      	str	r3, [r2, #64]	; 0x40
 801299e:	4b22      	ldr	r3, [pc, #136]	; (8012a28 <HAL_SPI_MspInit+0xb8>)
 80129a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80129a6:	613b      	str	r3, [r7, #16]
 80129a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80129aa:	4b1f      	ldr	r3, [pc, #124]	; (8012a28 <HAL_SPI_MspInit+0xb8>)
 80129ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129ae:	4a1e      	ldr	r2, [pc, #120]	; (8012a28 <HAL_SPI_MspInit+0xb8>)
 80129b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80129b4:	6313      	str	r3, [r2, #48]	; 0x30
 80129b6:	4b1c      	ldr	r3, [pc, #112]	; (8012a28 <HAL_SPI_MspInit+0xb8>)
 80129b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129be:	60fb      	str	r3, [r7, #12]
 80129c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80129c2:	4b19      	ldr	r3, [pc, #100]	; (8012a28 <HAL_SPI_MspInit+0xb8>)
 80129c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129c6:	4a18      	ldr	r2, [pc, #96]	; (8012a28 <HAL_SPI_MspInit+0xb8>)
 80129c8:	f043 0302 	orr.w	r3, r3, #2
 80129cc:	6313      	str	r3, [r2, #48]	; 0x30
 80129ce:	4b16      	ldr	r3, [pc, #88]	; (8012a28 <HAL_SPI_MspInit+0xb8>)
 80129d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129d2:	f003 0302 	and.w	r3, r3, #2
 80129d6:	60bb      	str	r3, [r7, #8]
 80129d8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80129da:	2302      	movs	r3, #2
 80129dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80129de:	2302      	movs	r3, #2
 80129e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80129e2:	2300      	movs	r3, #0
 80129e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80129e6:	2300      	movs	r3, #0
 80129e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80129ea:	2305      	movs	r3, #5
 80129ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80129ee:	f107 0314 	add.w	r3, r7, #20
 80129f2:	4619      	mov	r1, r3
 80129f4:	480d      	ldr	r0, [pc, #52]	; (8012a2c <HAL_SPI_MspInit+0xbc>)
 80129f6:	f7f0 fa49 	bl	8002e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80129fa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80129fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a00:	2302      	movs	r3, #2
 8012a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a04:	2300      	movs	r3, #0
 8012a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012a08:	2300      	movs	r3, #0
 8012a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8012a0c:	2305      	movs	r3, #5
 8012a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012a10:	f107 0314 	add.w	r3, r7, #20
 8012a14:	4619      	mov	r1, r3
 8012a16:	4806      	ldr	r0, [pc, #24]	; (8012a30 <HAL_SPI_MspInit+0xc0>)
 8012a18:	f7f0 fa38 	bl	8002e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8012a1c:	bf00      	nop
 8012a1e:	3728      	adds	r7, #40	; 0x28
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}
 8012a24:	40003800 	.word	0x40003800
 8012a28:	40023800 	.word	0x40023800
 8012a2c:	40022000 	.word	0x40022000
 8012a30:	40020400 	.word	0x40020400

08012a34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8012a34:	b480      	push	{r7}
 8012a36:	b087      	sub	sp, #28
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	4a25      	ldr	r2, [pc, #148]	; (8012ad8 <HAL_TIM_Base_MspInit+0xa4>)
 8012a42:	4293      	cmp	r3, r2
 8012a44:	d10c      	bne.n	8012a60 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8012a46:	4b25      	ldr	r3, [pc, #148]	; (8012adc <HAL_TIM_Base_MspInit+0xa8>)
 8012a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a4a:	4a24      	ldr	r2, [pc, #144]	; (8012adc <HAL_TIM_Base_MspInit+0xa8>)
 8012a4c:	f043 0301 	orr.w	r3, r3, #1
 8012a50:	6453      	str	r3, [r2, #68]	; 0x44
 8012a52:	4b22      	ldr	r3, [pc, #136]	; (8012adc <HAL_TIM_Base_MspInit+0xa8>)
 8012a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a56:	f003 0301 	and.w	r3, r3, #1
 8012a5a:	617b      	str	r3, [r7, #20]
 8012a5c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8012a5e:	e034      	b.n	8012aca <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	4a1e      	ldr	r2, [pc, #120]	; (8012ae0 <HAL_TIM_Base_MspInit+0xac>)
 8012a66:	4293      	cmp	r3, r2
 8012a68:	d10c      	bne.n	8012a84 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8012a6a:	4b1c      	ldr	r3, [pc, #112]	; (8012adc <HAL_TIM_Base_MspInit+0xa8>)
 8012a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a6e:	4a1b      	ldr	r2, [pc, #108]	; (8012adc <HAL_TIM_Base_MspInit+0xa8>)
 8012a70:	f043 0302 	orr.w	r3, r3, #2
 8012a74:	6413      	str	r3, [r2, #64]	; 0x40
 8012a76:	4b19      	ldr	r3, [pc, #100]	; (8012adc <HAL_TIM_Base_MspInit+0xa8>)
 8012a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a7a:	f003 0302 	and.w	r3, r3, #2
 8012a7e:	613b      	str	r3, [r7, #16]
 8012a80:	693b      	ldr	r3, [r7, #16]
}
 8012a82:	e022      	b.n	8012aca <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	4a16      	ldr	r2, [pc, #88]	; (8012ae4 <HAL_TIM_Base_MspInit+0xb0>)
 8012a8a:	4293      	cmp	r3, r2
 8012a8c:	d10c      	bne.n	8012aa8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8012a8e:	4b13      	ldr	r3, [pc, #76]	; (8012adc <HAL_TIM_Base_MspInit+0xa8>)
 8012a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a92:	4a12      	ldr	r2, [pc, #72]	; (8012adc <HAL_TIM_Base_MspInit+0xa8>)
 8012a94:	f043 0308 	orr.w	r3, r3, #8
 8012a98:	6413      	str	r3, [r2, #64]	; 0x40
 8012a9a:	4b10      	ldr	r3, [pc, #64]	; (8012adc <HAL_TIM_Base_MspInit+0xa8>)
 8012a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a9e:	f003 0308 	and.w	r3, r3, #8
 8012aa2:	60fb      	str	r3, [r7, #12]
 8012aa4:	68fb      	ldr	r3, [r7, #12]
}
 8012aa6:	e010      	b.n	8012aca <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	4a0e      	ldr	r2, [pc, #56]	; (8012ae8 <HAL_TIM_Base_MspInit+0xb4>)
 8012aae:	4293      	cmp	r3, r2
 8012ab0:	d10b      	bne.n	8012aca <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8012ab2:	4b0a      	ldr	r3, [pc, #40]	; (8012adc <HAL_TIM_Base_MspInit+0xa8>)
 8012ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ab6:	4a09      	ldr	r2, [pc, #36]	; (8012adc <HAL_TIM_Base_MspInit+0xa8>)
 8012ab8:	f043 0302 	orr.w	r3, r3, #2
 8012abc:	6453      	str	r3, [r2, #68]	; 0x44
 8012abe:	4b07      	ldr	r3, [pc, #28]	; (8012adc <HAL_TIM_Base_MspInit+0xa8>)
 8012ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ac2:	f003 0302 	and.w	r3, r3, #2
 8012ac6:	60bb      	str	r3, [r7, #8]
 8012ac8:	68bb      	ldr	r3, [r7, #8]
}
 8012aca:	bf00      	nop
 8012acc:	371c      	adds	r7, #28
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad4:	4770      	bx	lr
 8012ad6:	bf00      	nop
 8012ad8:	40010000 	.word	0x40010000
 8012adc:	40023800 	.word	0x40023800
 8012ae0:	40000400 	.word	0x40000400
 8012ae4:	40000c00 	.word	0x40000c00
 8012ae8:	40010400 	.word	0x40010400

08012aec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8012aec:	b480      	push	{r7}
 8012aee:	b085      	sub	sp, #20
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	4a0a      	ldr	r2, [pc, #40]	; (8012b24 <HAL_TIM_PWM_MspInit+0x38>)
 8012afa:	4293      	cmp	r3, r2
 8012afc:	d10b      	bne.n	8012b16 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8012afe:	4b0a      	ldr	r3, [pc, #40]	; (8012b28 <HAL_TIM_PWM_MspInit+0x3c>)
 8012b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b02:	4a09      	ldr	r2, [pc, #36]	; (8012b28 <HAL_TIM_PWM_MspInit+0x3c>)
 8012b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b08:	6413      	str	r3, [r2, #64]	; 0x40
 8012b0a:	4b07      	ldr	r3, [pc, #28]	; (8012b28 <HAL_TIM_PWM_MspInit+0x3c>)
 8012b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b12:	60fb      	str	r3, [r7, #12]
 8012b14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8012b16:	bf00      	nop
 8012b18:	3714      	adds	r7, #20
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b20:	4770      	bx	lr
 8012b22:	bf00      	nop
 8012b24:	40001800 	.word	0x40001800
 8012b28:	40023800 	.word	0x40023800

08012b2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b08c      	sub	sp, #48	; 0x30
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012b34:	f107 031c 	add.w	r3, r7, #28
 8012b38:	2200      	movs	r2, #0
 8012b3a:	601a      	str	r2, [r3, #0]
 8012b3c:	605a      	str	r2, [r3, #4]
 8012b3e:	609a      	str	r2, [r3, #8]
 8012b40:	60da      	str	r2, [r3, #12]
 8012b42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	4a44      	ldr	r2, [pc, #272]	; (8012c5c <HAL_TIM_MspPostInit+0x130>)
 8012b4a:	4293      	cmp	r3, r2
 8012b4c:	d11d      	bne.n	8012b8a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012b4e:	4b44      	ldr	r3, [pc, #272]	; (8012c60 <HAL_TIM_MspPostInit+0x134>)
 8012b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b52:	4a43      	ldr	r2, [pc, #268]	; (8012c60 <HAL_TIM_MspPostInit+0x134>)
 8012b54:	f043 0301 	orr.w	r3, r3, #1
 8012b58:	6313      	str	r3, [r2, #48]	; 0x30
 8012b5a:	4b41      	ldr	r3, [pc, #260]	; (8012c60 <HAL_TIM_MspPostInit+0x134>)
 8012b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b5e:	f003 0301 	and.w	r3, r3, #1
 8012b62:	61bb      	str	r3, [r7, #24]
 8012b64:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8012b66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012b6c:	2302      	movs	r3, #2
 8012b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012b70:	2300      	movs	r3, #0
 8012b72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012b74:	2300      	movs	r3, #0
 8012b76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8012b78:	2301      	movs	r3, #1
 8012b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8012b7c:	f107 031c 	add.w	r3, r7, #28
 8012b80:	4619      	mov	r1, r3
 8012b82:	4838      	ldr	r0, [pc, #224]	; (8012c64 <HAL_TIM_MspPostInit+0x138>)
 8012b84:	f7f0 f982 	bl	8002e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8012b88:	e064      	b.n	8012c54 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM3)
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	4a36      	ldr	r2, [pc, #216]	; (8012c68 <HAL_TIM_MspPostInit+0x13c>)
 8012b90:	4293      	cmp	r3, r2
 8012b92:	d11c      	bne.n	8012bce <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012b94:	4b32      	ldr	r3, [pc, #200]	; (8012c60 <HAL_TIM_MspPostInit+0x134>)
 8012b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b98:	4a31      	ldr	r2, [pc, #196]	; (8012c60 <HAL_TIM_MspPostInit+0x134>)
 8012b9a:	f043 0302 	orr.w	r3, r3, #2
 8012b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8012ba0:	4b2f      	ldr	r3, [pc, #188]	; (8012c60 <HAL_TIM_MspPostInit+0x134>)
 8012ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ba4:	f003 0302 	and.w	r3, r3, #2
 8012ba8:	617b      	str	r3, [r7, #20]
 8012baa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8012bac:	2310      	movs	r3, #16
 8012bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012bb0:	2302      	movs	r3, #2
 8012bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012bb8:	2300      	movs	r3, #0
 8012bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8012bbc:	2302      	movs	r3, #2
 8012bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8012bc0:	f107 031c 	add.w	r3, r7, #28
 8012bc4:	4619      	mov	r1, r3
 8012bc6:	4829      	ldr	r0, [pc, #164]	; (8012c6c <HAL_TIM_MspPostInit+0x140>)
 8012bc8:	f7f0 f960 	bl	8002e8c <HAL_GPIO_Init>
}
 8012bcc:	e042      	b.n	8012c54 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM5)
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	4a27      	ldr	r2, [pc, #156]	; (8012c70 <HAL_TIM_MspPostInit+0x144>)
 8012bd4:	4293      	cmp	r3, r2
 8012bd6:	d11c      	bne.n	8012c12 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8012bd8:	4b21      	ldr	r3, [pc, #132]	; (8012c60 <HAL_TIM_MspPostInit+0x134>)
 8012bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bdc:	4a20      	ldr	r2, [pc, #128]	; (8012c60 <HAL_TIM_MspPostInit+0x134>)
 8012bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012be2:	6313      	str	r3, [r2, #48]	; 0x30
 8012be4:	4b1e      	ldr	r3, [pc, #120]	; (8012c60 <HAL_TIM_MspPostInit+0x134>)
 8012be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012bec:	613b      	str	r3, [r7, #16]
 8012bee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8012bf0:	2301      	movs	r3, #1
 8012bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012bf4:	2302      	movs	r3, #2
 8012bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8012c00:	2302      	movs	r3, #2
 8012c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8012c04:	f107 031c 	add.w	r3, r7, #28
 8012c08:	4619      	mov	r1, r3
 8012c0a:	481a      	ldr	r0, [pc, #104]	; (8012c74 <HAL_TIM_MspPostInit+0x148>)
 8012c0c:	f7f0 f93e 	bl	8002e8c <HAL_GPIO_Init>
}
 8012c10:	e020      	b.n	8012c54 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM12)
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	4a18      	ldr	r2, [pc, #96]	; (8012c78 <HAL_TIM_MspPostInit+0x14c>)
 8012c18:	4293      	cmp	r3, r2
 8012c1a:	d11b      	bne.n	8012c54 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8012c1c:	4b10      	ldr	r3, [pc, #64]	; (8012c60 <HAL_TIM_MspPostInit+0x134>)
 8012c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c20:	4a0f      	ldr	r2, [pc, #60]	; (8012c60 <HAL_TIM_MspPostInit+0x134>)
 8012c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c26:	6313      	str	r3, [r2, #48]	; 0x30
 8012c28:	4b0d      	ldr	r3, [pc, #52]	; (8012c60 <HAL_TIM_MspPostInit+0x134>)
 8012c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c30:	60fb      	str	r3, [r7, #12]
 8012c32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8012c34:	2340      	movs	r3, #64	; 0x40
 8012c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012c38:	2302      	movs	r3, #2
 8012c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012c40:	2300      	movs	r3, #0
 8012c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8012c44:	2309      	movs	r3, #9
 8012c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8012c48:	f107 031c 	add.w	r3, r7, #28
 8012c4c:	4619      	mov	r1, r3
 8012c4e:	480b      	ldr	r0, [pc, #44]	; (8012c7c <HAL_TIM_MspPostInit+0x150>)
 8012c50:	f7f0 f91c 	bl	8002e8c <HAL_GPIO_Init>
}
 8012c54:	bf00      	nop
 8012c56:	3730      	adds	r7, #48	; 0x30
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}
 8012c5c:	40010000 	.word	0x40010000
 8012c60:	40023800 	.word	0x40023800
 8012c64:	40020000 	.word	0x40020000
 8012c68:	40000400 	.word	0x40000400
 8012c6c:	40020400 	.word	0x40020400
 8012c70:	40000c00 	.word	0x40000c00
 8012c74:	40022000 	.word	0x40022000
 8012c78:	40001800 	.word	0x40001800
 8012c7c:	40021c00 	.word	0x40021c00

08012c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b08c      	sub	sp, #48	; 0x30
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012c88:	f107 031c 	add.w	r3, r7, #28
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	601a      	str	r2, [r3, #0]
 8012c90:	605a      	str	r2, [r3, #4]
 8012c92:	609a      	str	r2, [r3, #8]
 8012c94:	60da      	str	r2, [r3, #12]
 8012c96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	4a3c      	ldr	r2, [pc, #240]	; (8012d90 <HAL_UART_MspInit+0x110>)
 8012c9e:	4293      	cmp	r3, r2
 8012ca0:	d145      	bne.n	8012d2e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8012ca2:	4b3c      	ldr	r3, [pc, #240]	; (8012d94 <HAL_UART_MspInit+0x114>)
 8012ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ca6:	4a3b      	ldr	r2, [pc, #236]	; (8012d94 <HAL_UART_MspInit+0x114>)
 8012ca8:	f043 0310 	orr.w	r3, r3, #16
 8012cac:	6453      	str	r3, [r2, #68]	; 0x44
 8012cae:	4b39      	ldr	r3, [pc, #228]	; (8012d94 <HAL_UART_MspInit+0x114>)
 8012cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012cb2:	f003 0310 	and.w	r3, r3, #16
 8012cb6:	61bb      	str	r3, [r7, #24]
 8012cb8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012cba:	4b36      	ldr	r3, [pc, #216]	; (8012d94 <HAL_UART_MspInit+0x114>)
 8012cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cbe:	4a35      	ldr	r2, [pc, #212]	; (8012d94 <HAL_UART_MspInit+0x114>)
 8012cc0:	f043 0302 	orr.w	r3, r3, #2
 8012cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8012cc6:	4b33      	ldr	r3, [pc, #204]	; (8012d94 <HAL_UART_MspInit+0x114>)
 8012cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cca:	f003 0302 	and.w	r3, r3, #2
 8012cce:	617b      	str	r3, [r7, #20]
 8012cd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012cd2:	4b30      	ldr	r3, [pc, #192]	; (8012d94 <HAL_UART_MspInit+0x114>)
 8012cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cd6:	4a2f      	ldr	r2, [pc, #188]	; (8012d94 <HAL_UART_MspInit+0x114>)
 8012cd8:	f043 0301 	orr.w	r3, r3, #1
 8012cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8012cde:	4b2d      	ldr	r3, [pc, #180]	; (8012d94 <HAL_UART_MspInit+0x114>)
 8012ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ce2:	f003 0301 	and.w	r3, r3, #1
 8012ce6:	613b      	str	r3, [r7, #16]
 8012ce8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8012cea:	2380      	movs	r3, #128	; 0x80
 8012cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012cee:	2302      	movs	r3, #2
 8012cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8012cfa:	2307      	movs	r3, #7
 8012cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8012cfe:	f107 031c 	add.w	r3, r7, #28
 8012d02:	4619      	mov	r1, r3
 8012d04:	4824      	ldr	r0, [pc, #144]	; (8012d98 <HAL_UART_MspInit+0x118>)
 8012d06:	f7f0 f8c1 	bl	8002e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8012d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d10:	2302      	movs	r3, #2
 8012d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d14:	2300      	movs	r3, #0
 8012d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d18:	2300      	movs	r3, #0
 8012d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8012d1c:	2307      	movs	r3, #7
 8012d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8012d20:	f107 031c 	add.w	r3, r7, #28
 8012d24:	4619      	mov	r1, r3
 8012d26:	481d      	ldr	r0, [pc, #116]	; (8012d9c <HAL_UART_MspInit+0x11c>)
 8012d28:	f7f0 f8b0 	bl	8002e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8012d2c:	e02c      	b.n	8012d88 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	4a1b      	ldr	r2, [pc, #108]	; (8012da0 <HAL_UART_MspInit+0x120>)
 8012d34:	4293      	cmp	r3, r2
 8012d36:	d127      	bne.n	8012d88 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8012d38:	4b16      	ldr	r3, [pc, #88]	; (8012d94 <HAL_UART_MspInit+0x114>)
 8012d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d3c:	4a15      	ldr	r2, [pc, #84]	; (8012d94 <HAL_UART_MspInit+0x114>)
 8012d3e:	f043 0320 	orr.w	r3, r3, #32
 8012d42:	6453      	str	r3, [r2, #68]	; 0x44
 8012d44:	4b13      	ldr	r3, [pc, #76]	; (8012d94 <HAL_UART_MspInit+0x114>)
 8012d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d48:	f003 0320 	and.w	r3, r3, #32
 8012d4c:	60fb      	str	r3, [r7, #12]
 8012d4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012d50:	4b10      	ldr	r3, [pc, #64]	; (8012d94 <HAL_UART_MspInit+0x114>)
 8012d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d54:	4a0f      	ldr	r2, [pc, #60]	; (8012d94 <HAL_UART_MspInit+0x114>)
 8012d56:	f043 0304 	orr.w	r3, r3, #4
 8012d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8012d5c:	4b0d      	ldr	r3, [pc, #52]	; (8012d94 <HAL_UART_MspInit+0x114>)
 8012d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d60:	f003 0304 	and.w	r3, r3, #4
 8012d64:	60bb      	str	r3, [r7, #8]
 8012d66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8012d68:	23c0      	movs	r3, #192	; 0xc0
 8012d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d6c:	2302      	movs	r3, #2
 8012d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d70:	2300      	movs	r3, #0
 8012d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012d74:	2303      	movs	r3, #3
 8012d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8012d78:	2308      	movs	r3, #8
 8012d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012d7c:	f107 031c 	add.w	r3, r7, #28
 8012d80:	4619      	mov	r1, r3
 8012d82:	4808      	ldr	r0, [pc, #32]	; (8012da4 <HAL_UART_MspInit+0x124>)
 8012d84:	f7f0 f882 	bl	8002e8c <HAL_GPIO_Init>
}
 8012d88:	bf00      	nop
 8012d8a:	3730      	adds	r7, #48	; 0x30
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}
 8012d90:	40011000 	.word	0x40011000
 8012d94:	40023800 	.word	0x40023800
 8012d98:	40020400 	.word	0x40020400
 8012d9c:	40020000 	.word	0x40020000
 8012da0:	40011400 	.word	0x40011400
 8012da4:	40020800 	.word	0x40020800

08012da8 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b08a      	sub	sp, #40	; 0x28
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012db0:	f107 0314 	add.w	r3, r7, #20
 8012db4:	2200      	movs	r2, #0
 8012db6:	601a      	str	r2, [r3, #0]
 8012db8:	605a      	str	r2, [r3, #4]
 8012dba:	609a      	str	r2, [r3, #8]
 8012dbc:	60da      	str	r2, [r3, #12]
 8012dbe:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012dc8:	d13c      	bne.n	8012e44 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012dca:	4b20      	ldr	r3, [pc, #128]	; (8012e4c <HAL_HCD_MspInit+0xa4>)
 8012dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dce:	4a1f      	ldr	r2, [pc, #124]	; (8012e4c <HAL_HCD_MspInit+0xa4>)
 8012dd0:	f043 0301 	orr.w	r3, r3, #1
 8012dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8012dd6:	4b1d      	ldr	r3, [pc, #116]	; (8012e4c <HAL_HCD_MspInit+0xa4>)
 8012dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dda:	f003 0301 	and.w	r3, r3, #1
 8012dde:	613b      	str	r3, [r7, #16]
 8012de0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8012de2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8012de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012de8:	2302      	movs	r3, #2
 8012dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012dec:	2300      	movs	r3, #0
 8012dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012df0:	2303      	movs	r3, #3
 8012df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012df4:	230a      	movs	r3, #10
 8012df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012df8:	f107 0314 	add.w	r3, r7, #20
 8012dfc:	4619      	mov	r1, r3
 8012dfe:	4814      	ldr	r0, [pc, #80]	; (8012e50 <HAL_HCD_MspInit+0xa8>)
 8012e00:	f7f0 f844 	bl	8002e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012e04:	4b11      	ldr	r3, [pc, #68]	; (8012e4c <HAL_HCD_MspInit+0xa4>)
 8012e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e08:	4a10      	ldr	r2, [pc, #64]	; (8012e4c <HAL_HCD_MspInit+0xa4>)
 8012e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e0e:	6353      	str	r3, [r2, #52]	; 0x34
 8012e10:	4b0e      	ldr	r3, [pc, #56]	; (8012e4c <HAL_HCD_MspInit+0xa4>)
 8012e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e18:	60fb      	str	r3, [r7, #12]
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	4b0b      	ldr	r3, [pc, #44]	; (8012e4c <HAL_HCD_MspInit+0xa4>)
 8012e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e20:	4a0a      	ldr	r2, [pc, #40]	; (8012e4c <HAL_HCD_MspInit+0xa4>)
 8012e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012e26:	6453      	str	r3, [r2, #68]	; 0x44
 8012e28:	4b08      	ldr	r3, [pc, #32]	; (8012e4c <HAL_HCD_MspInit+0xa4>)
 8012e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012e30:	60bb      	str	r3, [r7, #8]
 8012e32:	68bb      	ldr	r3, [r7, #8]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8012e34:	2200      	movs	r2, #0
 8012e36:	2105      	movs	r1, #5
 8012e38:	2043      	movs	r0, #67	; 0x43
 8012e3a:	f7ee ffc9 	bl	8001dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012e3e:	2043      	movs	r0, #67	; 0x43
 8012e40:	f7ee ffe2 	bl	8001e08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8012e44:	bf00      	nop
 8012e46:	3728      	adds	r7, #40	; 0x28
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}
 8012e4c:	40023800 	.word	0x40023800
 8012e50:	40020000 	.word	0x40020000

08012e54 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b08a      	sub	sp, #40	; 0x28
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	4a2b      	ldr	r2, [pc, #172]	; (8012f10 <HAL_SAI_MspInit+0xbc>)
 8012e62:	4293      	cmp	r3, r2
 8012e64:	d124      	bne.n	8012eb0 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8012e66:	4b2b      	ldr	r3, [pc, #172]	; (8012f14 <HAL_SAI_MspInit+0xc0>)
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d10b      	bne.n	8012e86 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8012e6e:	4b2a      	ldr	r3, [pc, #168]	; (8012f18 <HAL_SAI_MspInit+0xc4>)
 8012e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e72:	4a29      	ldr	r2, [pc, #164]	; (8012f18 <HAL_SAI_MspInit+0xc4>)
 8012e74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012e78:	6453      	str	r3, [r2, #68]	; 0x44
 8012e7a:	4b27      	ldr	r3, [pc, #156]	; (8012f18 <HAL_SAI_MspInit+0xc4>)
 8012e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012e82:	613b      	str	r3, [r7, #16]
 8012e84:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8012e86:	4b23      	ldr	r3, [pc, #140]	; (8012f14 <HAL_SAI_MspInit+0xc0>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	4a21      	ldr	r2, [pc, #132]	; (8012f14 <HAL_SAI_MspInit+0xc0>)
 8012e8e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8012e90:	23f0      	movs	r3, #240	; 0xf0
 8012e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012e94:	2302      	movs	r3, #2
 8012e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e98:	2300      	movs	r3, #0
 8012e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8012ea0:	230a      	movs	r3, #10
 8012ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8012ea4:	f107 0314 	add.w	r3, r7, #20
 8012ea8:	4619      	mov	r1, r3
 8012eaa:	481c      	ldr	r0, [pc, #112]	; (8012f1c <HAL_SAI_MspInit+0xc8>)
 8012eac:	f7ef ffee 	bl	8002e8c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	4a1a      	ldr	r2, [pc, #104]	; (8012f20 <HAL_SAI_MspInit+0xcc>)
 8012eb6:	4293      	cmp	r3, r2
 8012eb8:	d125      	bne.n	8012f06 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8012eba:	4b16      	ldr	r3, [pc, #88]	; (8012f14 <HAL_SAI_MspInit+0xc0>)
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d10b      	bne.n	8012eda <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8012ec2:	4b15      	ldr	r3, [pc, #84]	; (8012f18 <HAL_SAI_MspInit+0xc4>)
 8012ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ec6:	4a14      	ldr	r2, [pc, #80]	; (8012f18 <HAL_SAI_MspInit+0xc4>)
 8012ec8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8012ece:	4b12      	ldr	r3, [pc, #72]	; (8012f18 <HAL_SAI_MspInit+0xc4>)
 8012ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012ed6:	60fb      	str	r3, [r7, #12]
 8012ed8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8012eda:	4b0e      	ldr	r3, [pc, #56]	; (8012f14 <HAL_SAI_MspInit+0xc0>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	3301      	adds	r3, #1
 8012ee0:	4a0c      	ldr	r2, [pc, #48]	; (8012f14 <HAL_SAI_MspInit+0xc0>)
 8012ee2:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8012ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012eea:	2302      	movs	r3, #2
 8012eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012eee:	2300      	movs	r3, #0
 8012ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8012ef6:	230a      	movs	r3, #10
 8012ef8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8012efa:	f107 0314 	add.w	r3, r7, #20
 8012efe:	4619      	mov	r1, r3
 8012f00:	4808      	ldr	r0, [pc, #32]	; (8012f24 <HAL_SAI_MspInit+0xd0>)
 8012f02:	f7ef ffc3 	bl	8002e8c <HAL_GPIO_Init>

    }
}
 8012f06:	bf00      	nop
 8012f08:	3728      	adds	r7, #40	; 0x28
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}
 8012f0e:	bf00      	nop
 8012f10:	40015c04 	.word	0x40015c04
 8012f14:	20008e60 	.word	0x20008e60
 8012f18:	40023800 	.word	0x40023800
 8012f1c:	40022000 	.word	0x40022000
 8012f20:	40015c24 	.word	0x40015c24
 8012f24:	40021800 	.word	0x40021800

08012f28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b08c      	sub	sp, #48	; 0x30
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8012f30:	2300      	movs	r3, #0
 8012f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8012f34:	2300      	movs	r3, #0
 8012f36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8012f38:	2200      	movs	r2, #0
 8012f3a:	6879      	ldr	r1, [r7, #4]
 8012f3c:	2036      	movs	r0, #54	; 0x36
 8012f3e:	f7ee ff47 	bl	8001dd0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8012f42:	2036      	movs	r0, #54	; 0x36
 8012f44:	f7ee ff60 	bl	8001e08 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8012f48:	4b1f      	ldr	r3, [pc, #124]	; (8012fc8 <HAL_InitTick+0xa0>)
 8012f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f4c:	4a1e      	ldr	r2, [pc, #120]	; (8012fc8 <HAL_InitTick+0xa0>)
 8012f4e:	f043 0310 	orr.w	r3, r3, #16
 8012f52:	6413      	str	r3, [r2, #64]	; 0x40
 8012f54:	4b1c      	ldr	r3, [pc, #112]	; (8012fc8 <HAL_InitTick+0xa0>)
 8012f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f58:	f003 0310 	and.w	r3, r3, #16
 8012f5c:	60fb      	str	r3, [r7, #12]
 8012f5e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8012f60:	f107 0210 	add.w	r2, r7, #16
 8012f64:	f107 0314 	add.w	r3, r7, #20
 8012f68:	4611      	mov	r1, r2
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7f3 fbac 	bl	80066c8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8012f70:	f7f3 fb82 	bl	8006678 <HAL_RCC_GetPCLK1Freq>
 8012f74:	4603      	mov	r3, r0
 8012f76:	005b      	lsls	r3, r3, #1
 8012f78:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8012f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f7c:	4a13      	ldr	r2, [pc, #76]	; (8012fcc <HAL_InitTick+0xa4>)
 8012f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8012f82:	0c9b      	lsrs	r3, r3, #18
 8012f84:	3b01      	subs	r3, #1
 8012f86:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8012f88:	4b11      	ldr	r3, [pc, #68]	; (8012fd0 <HAL_InitTick+0xa8>)
 8012f8a:	4a12      	ldr	r2, [pc, #72]	; (8012fd4 <HAL_InitTick+0xac>)
 8012f8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8012f8e:	4b10      	ldr	r3, [pc, #64]	; (8012fd0 <HAL_InitTick+0xa8>)
 8012f90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8012f94:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8012f96:	4a0e      	ldr	r2, [pc, #56]	; (8012fd0 <HAL_InitTick+0xa8>)
 8012f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f9a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8012f9c:	4b0c      	ldr	r3, [pc, #48]	; (8012fd0 <HAL_InitTick+0xa8>)
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012fa2:	4b0b      	ldr	r3, [pc, #44]	; (8012fd0 <HAL_InitTick+0xa8>)
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8012fa8:	4809      	ldr	r0, [pc, #36]	; (8012fd0 <HAL_InitTick+0xa8>)
 8012faa:	f7f6 f8a3 	bl	80090f4 <HAL_TIM_Base_Init>
 8012fae:	4603      	mov	r3, r0
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d104      	bne.n	8012fbe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8012fb4:	4806      	ldr	r0, [pc, #24]	; (8012fd0 <HAL_InitTick+0xa8>)
 8012fb6:	f7f6 f8f3 	bl	80091a0 <HAL_TIM_Base_Start_IT>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	e000      	b.n	8012fc0 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8012fbe:	2301      	movs	r3, #1
}
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	3730      	adds	r7, #48	; 0x30
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bd80      	pop	{r7, pc}
 8012fc8:	40023800 	.word	0x40023800
 8012fcc:	431bde83 	.word	0x431bde83
 8012fd0:	2000da44 	.word	0x2000da44
 8012fd4:	40001000 	.word	0x40001000

08012fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012fd8:	b480      	push	{r7}
 8012fda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8012fdc:	bf00      	nop
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe4:	4770      	bx	lr

08012fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012fe6:	b480      	push	{r7}
 8012fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012fea:	e7fe      	b.n	8012fea <HardFault_Handler+0x4>

08012fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012fec:	b480      	push	{r7}
 8012fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012ff0:	e7fe      	b.n	8012ff0 <MemManage_Handler+0x4>

08012ff2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012ff2:	b480      	push	{r7}
 8012ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012ff6:	e7fe      	b.n	8012ff6 <BusFault_Handler+0x4>

08012ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012ff8:	b480      	push	{r7}
 8012ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012ffc:	e7fe      	b.n	8012ffc <UsageFault_Handler+0x4>

08012ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012ffe:	b480      	push	{r7}
 8013000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8013002:	bf00      	nop
 8013004:	46bd      	mov	sp, r7
 8013006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300a:	4770      	bx	lr

0801300c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 801300c:	b580      	push	{r7, lr}
 801300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8013010:	4802      	ldr	r0, [pc, #8]	; (801301c <TIM6_DAC_IRQHandler+0x10>)
 8013012:	f7f6 f91a 	bl	800924a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8013016:	bf00      	nop
 8013018:	bd80      	pop	{r7, pc}
 801301a:	bf00      	nop
 801301c:	2000da44 	.word	0x2000da44

08013020 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8013020:	b580      	push	{r7, lr}
 8013022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8013024:	4802      	ldr	r0, [pc, #8]	; (8013030 <ETH_IRQHandler+0x10>)
 8013026:	f7ef feb5 	bl	8002d94 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 801302a:	bf00      	nop
 801302c:	bd80      	pop	{r7, pc}
 801302e:	bf00      	nop
 8013030:	2000bcc0 	.word	0x2000bcc0

08013034 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8013034:	b580      	push	{r7, lr}
 8013036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8013038:	4802      	ldr	r0, [pc, #8]	; (8013044 <OTG_FS_IRQHandler+0x10>)
 801303a:	f7f0 fa62 	bl	8003502 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801303e:	bf00      	nop
 8013040:	bd80      	pop	{r7, pc}
 8013042:	bf00      	nop
 8013044:	20008994 	.word	0x20008994

08013048 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8013048:	b580      	push	{r7, lr}
 801304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 801304c:	4802      	ldr	r0, [pc, #8]	; (8013058 <LTDC_IRQHandler+0x10>)
 801304e:	f7f2 fa7f 	bl	8005550 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8013052:	bf00      	nop
 8013054:	bd80      	pop	{r7, pc}
 8013056:	bf00      	nop
 8013058:	2000a1a8 	.word	0x2000a1a8

0801305c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8013060:	4802      	ldr	r0, [pc, #8]	; (801306c <DMA2D_IRQHandler+0x10>)
 8013062:	f7ef fc58 	bl	8002916 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8013066:	bf00      	nop
 8013068:	bd80      	pop	{r7, pc}
 801306a:	bf00      	nop
 801306c:	2000a250 	.word	0x2000a250

08013070 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8013070:	b480      	push	{r7}
 8013072:	af00      	add	r7, sp, #0
	return 1;
 8013074:	2301      	movs	r3, #1
}
 8013076:	4618      	mov	r0, r3
 8013078:	46bd      	mov	sp, r7
 801307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307e:	4770      	bx	lr

08013080 <_kill>:

int _kill(int pid, int sig)
{
 8013080:	b480      	push	{r7}
 8013082:	b083      	sub	sp, #12
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
 8013088:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801308a:	4b05      	ldr	r3, [pc, #20]	; (80130a0 <_kill+0x20>)
 801308c:	2216      	movs	r2, #22
 801308e:	601a      	str	r2, [r3, #0]
	return -1;
 8013090:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013094:	4618      	mov	r0, r3
 8013096:	370c      	adds	r7, #12
 8013098:	46bd      	mov	sp, r7
 801309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801309e:	4770      	bx	lr
 80130a0:	2000a4e8 	.word	0x2000a4e8

080130a4 <_exit>:

void _exit (int status)
{
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b082      	sub	sp, #8
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80130ac:	f04f 31ff 	mov.w	r1, #4294967295
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f7ff ffe5 	bl	8013080 <_kill>
	while (1) {}		/* Make sure we hang here */
 80130b6:	e7fe      	b.n	80130b6 <_exit+0x12>

080130b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b086      	sub	sp, #24
 80130bc:	af00      	add	r7, sp, #0
 80130be:	60f8      	str	r0, [r7, #12]
 80130c0:	60b9      	str	r1, [r7, #8]
 80130c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80130c4:	2300      	movs	r3, #0
 80130c6:	617b      	str	r3, [r7, #20]
 80130c8:	e00a      	b.n	80130e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80130ca:	f3af 8000 	nop.w
 80130ce:	4601      	mov	r1, r0
 80130d0:	68bb      	ldr	r3, [r7, #8]
 80130d2:	1c5a      	adds	r2, r3, #1
 80130d4:	60ba      	str	r2, [r7, #8]
 80130d6:	b2ca      	uxtb	r2, r1
 80130d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80130da:	697b      	ldr	r3, [r7, #20]
 80130dc:	3301      	adds	r3, #1
 80130de:	617b      	str	r3, [r7, #20]
 80130e0:	697a      	ldr	r2, [r7, #20]
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	429a      	cmp	r2, r3
 80130e6:	dbf0      	blt.n	80130ca <_read+0x12>
	}

return len;
 80130e8:	687b      	ldr	r3, [r7, #4]
}
 80130ea:	4618      	mov	r0, r3
 80130ec:	3718      	adds	r7, #24
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}

080130f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80130f2:	b580      	push	{r7, lr}
 80130f4:	b086      	sub	sp, #24
 80130f6:	af00      	add	r7, sp, #0
 80130f8:	60f8      	str	r0, [r7, #12]
 80130fa:	60b9      	str	r1, [r7, #8]
 80130fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80130fe:	2300      	movs	r3, #0
 8013100:	617b      	str	r3, [r7, #20]
 8013102:	e009      	b.n	8013118 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	1c5a      	adds	r2, r3, #1
 8013108:	60ba      	str	r2, [r7, #8]
 801310a:	781b      	ldrb	r3, [r3, #0]
 801310c:	4618      	mov	r0, r3
 801310e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013112:	697b      	ldr	r3, [r7, #20]
 8013114:	3301      	adds	r3, #1
 8013116:	617b      	str	r3, [r7, #20]
 8013118:	697a      	ldr	r2, [r7, #20]
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	429a      	cmp	r2, r3
 801311e:	dbf1      	blt.n	8013104 <_write+0x12>
	}
	return len;
 8013120:	687b      	ldr	r3, [r7, #4]
}
 8013122:	4618      	mov	r0, r3
 8013124:	3718      	adds	r7, #24
 8013126:	46bd      	mov	sp, r7
 8013128:	bd80      	pop	{r7, pc}

0801312a <_close>:

int _close(int file)
{
 801312a:	b480      	push	{r7}
 801312c:	b083      	sub	sp, #12
 801312e:	af00      	add	r7, sp, #0
 8013130:	6078      	str	r0, [r7, #4]
	return -1;
 8013132:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013136:	4618      	mov	r0, r3
 8013138:	370c      	adds	r7, #12
 801313a:	46bd      	mov	sp, r7
 801313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013140:	4770      	bx	lr

08013142 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8013142:	b480      	push	{r7}
 8013144:	b083      	sub	sp, #12
 8013146:	af00      	add	r7, sp, #0
 8013148:	6078      	str	r0, [r7, #4]
 801314a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013152:	605a      	str	r2, [r3, #4]
	return 0;
 8013154:	2300      	movs	r3, #0
}
 8013156:	4618      	mov	r0, r3
 8013158:	370c      	adds	r7, #12
 801315a:	46bd      	mov	sp, r7
 801315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013160:	4770      	bx	lr

08013162 <_isatty>:

int _isatty(int file)
{
 8013162:	b480      	push	{r7}
 8013164:	b083      	sub	sp, #12
 8013166:	af00      	add	r7, sp, #0
 8013168:	6078      	str	r0, [r7, #4]
	return 1;
 801316a:	2301      	movs	r3, #1
}
 801316c:	4618      	mov	r0, r3
 801316e:	370c      	adds	r7, #12
 8013170:	46bd      	mov	sp, r7
 8013172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013176:	4770      	bx	lr

08013178 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8013178:	b480      	push	{r7}
 801317a:	b085      	sub	sp, #20
 801317c:	af00      	add	r7, sp, #0
 801317e:	60f8      	str	r0, [r7, #12]
 8013180:	60b9      	str	r1, [r7, #8]
 8013182:	607a      	str	r2, [r7, #4]
	return 0;
 8013184:	2300      	movs	r3, #0
}
 8013186:	4618      	mov	r0, r3
 8013188:	3714      	adds	r7, #20
 801318a:	46bd      	mov	sp, r7
 801318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013190:	4770      	bx	lr
	...

08013194 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8013194:	b480      	push	{r7}
 8013196:	b085      	sub	sp, #20
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801319c:	4b11      	ldr	r3, [pc, #68]	; (80131e4 <_sbrk+0x50>)
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d102      	bne.n	80131aa <_sbrk+0x16>
		heap_end = &end;
 80131a4:	4b0f      	ldr	r3, [pc, #60]	; (80131e4 <_sbrk+0x50>)
 80131a6:	4a10      	ldr	r2, [pc, #64]	; (80131e8 <_sbrk+0x54>)
 80131a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80131aa:	4b0e      	ldr	r3, [pc, #56]	; (80131e4 <_sbrk+0x50>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80131b0:	4b0c      	ldr	r3, [pc, #48]	; (80131e4 <_sbrk+0x50>)
 80131b2:	681a      	ldr	r2, [r3, #0]
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	4413      	add	r3, r2
 80131b8:	466a      	mov	r2, sp
 80131ba:	4293      	cmp	r3, r2
 80131bc:	d905      	bls.n	80131ca <_sbrk+0x36>
	{
		errno = ENOMEM;
 80131be:	4b0b      	ldr	r3, [pc, #44]	; (80131ec <_sbrk+0x58>)
 80131c0:	220c      	movs	r2, #12
 80131c2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80131c4:	f04f 33ff 	mov.w	r3, #4294967295
 80131c8:	e006      	b.n	80131d8 <_sbrk+0x44>
	}

	heap_end += incr;
 80131ca:	4b06      	ldr	r3, [pc, #24]	; (80131e4 <_sbrk+0x50>)
 80131cc:	681a      	ldr	r2, [r3, #0]
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	4413      	add	r3, r2
 80131d2:	4a04      	ldr	r2, [pc, #16]	; (80131e4 <_sbrk+0x50>)
 80131d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80131d6:	68fb      	ldr	r3, [r7, #12]
}
 80131d8:	4618      	mov	r0, r3
 80131da:	3714      	adds	r7, #20
 80131dc:	46bd      	mov	sp, r7
 80131de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e2:	4770      	bx	lr
 80131e4:	20008e64 	.word	0x20008e64
 80131e8:	2000da88 	.word	0x2000da88
 80131ec:	2000a4e8 	.word	0x2000a4e8

080131f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80131f0:	b480      	push	{r7}
 80131f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80131f4:	4b15      	ldr	r3, [pc, #84]	; (801324c <SystemInit+0x5c>)
 80131f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80131fa:	4a14      	ldr	r2, [pc, #80]	; (801324c <SystemInit+0x5c>)
 80131fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8013204:	4b12      	ldr	r3, [pc, #72]	; (8013250 <SystemInit+0x60>)
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	4a11      	ldr	r2, [pc, #68]	; (8013250 <SystemInit+0x60>)
 801320a:	f043 0301 	orr.w	r3, r3, #1
 801320e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8013210:	4b0f      	ldr	r3, [pc, #60]	; (8013250 <SystemInit+0x60>)
 8013212:	2200      	movs	r2, #0
 8013214:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8013216:	4b0e      	ldr	r3, [pc, #56]	; (8013250 <SystemInit+0x60>)
 8013218:	681a      	ldr	r2, [r3, #0]
 801321a:	490d      	ldr	r1, [pc, #52]	; (8013250 <SystemInit+0x60>)
 801321c:	4b0d      	ldr	r3, [pc, #52]	; (8013254 <SystemInit+0x64>)
 801321e:	4013      	ands	r3, r2
 8013220:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8013222:	4b0b      	ldr	r3, [pc, #44]	; (8013250 <SystemInit+0x60>)
 8013224:	4a0c      	ldr	r2, [pc, #48]	; (8013258 <SystemInit+0x68>)
 8013226:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8013228:	4b09      	ldr	r3, [pc, #36]	; (8013250 <SystemInit+0x60>)
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	4a08      	ldr	r2, [pc, #32]	; (8013250 <SystemInit+0x60>)
 801322e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013232:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8013234:	4b06      	ldr	r3, [pc, #24]	; (8013250 <SystemInit+0x60>)
 8013236:	2200      	movs	r2, #0
 8013238:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801323a:	4b04      	ldr	r3, [pc, #16]	; (801324c <SystemInit+0x5c>)
 801323c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013240:	609a      	str	r2, [r3, #8]
#endif
}
 8013242:	bf00      	nop
 8013244:	46bd      	mov	sp, r7
 8013246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324a:	4770      	bx	lr
 801324c:	e000ed00 	.word	0xe000ed00
 8013250:	40023800 	.word	0x40023800
 8013254:	fef6ffff 	.word	0xfef6ffff
 8013258:	24003010 	.word	0x24003010

0801325c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 801325c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8013294 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8013260:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8013262:	e003      	b.n	801326c <LoopCopyDataInit>

08013264 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8013264:	4b0c      	ldr	r3, [pc, #48]	; (8013298 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8013266:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8013268:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801326a:	3104      	adds	r1, #4

0801326c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801326c:	480b      	ldr	r0, [pc, #44]	; (801329c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801326e:	4b0c      	ldr	r3, [pc, #48]	; (80132a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8013270:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8013272:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8013274:	d3f6      	bcc.n	8013264 <CopyDataInit>
  ldr  r2, =_sbss
 8013276:	4a0b      	ldr	r2, [pc, #44]	; (80132a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8013278:	e002      	b.n	8013280 <LoopFillZerobss>

0801327a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801327a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801327c:	f842 3b04 	str.w	r3, [r2], #4

08013280 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8013280:	4b09      	ldr	r3, [pc, #36]	; (80132a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8013282:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8013284:	d3f9      	bcc.n	801327a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8013286:	f7ff ffb3 	bl	80131f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801328a:	f00d ffcb 	bl	8021224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801328e:	f7fd fcbb 	bl	8010c08 <main>
  bx  lr    
 8013292:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8013294:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8013298:	080cda38 	.word	0x080cda38
  ldr  r0, =_sdata
 801329c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80132a0:	200000c0 	.word	0x200000c0
  ldr  r2, =_sbss
 80132a4:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
 80132a8:	2000da84 	.word	0x2000da84

080132ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80132ac:	e7fe      	b.n	80132ac <ADC_IRQHandler>
	...

080132b0 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 80132b0:	b480      	push	{r7}
 80132b2:	b083      	sub	sp, #12
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
    {
 80132b8:	4a04      	ldr	r2, [pc, #16]	; (80132cc <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	601a      	str	r2, [r3, #0]
    }
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	4618      	mov	r0, r3
 80132c2:	370c      	adds	r7, #12
 80132c4:	46bd      	mov	sp, r7
 80132c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ca:	4770      	bx	lr
 80132cc:	08023248 	.word	0x08023248

080132d0 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b082      	sub	sp, #8
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
    }
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f7ff ffe9 	bl	80132b0 <_ZN8touchgfx12FontProviderD1Ev>
 80132de:	2104      	movs	r1, #4
 80132e0:	6878      	ldr	r0, [r7, #4]
 80132e2:	f00d ff4c 	bl	802117e <_ZdlPvj>
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	4618      	mov	r0, r3
 80132ea:	3708      	adds	r7, #8
 80132ec:	46bd      	mov	sp, r7
 80132ee:	bd80      	pop	{r7, pc}

080132f0 <_ZN23ApplicationFontProvider7getFontEt>:
extern touchgfx::InternalFlashFont& getFont_Asap_Regular_27_4bpp();
extern touchgfx::InternalFlashFont& getFont_Asap_Regular_15_4bpp();
extern touchgfx::InternalFlashFont& getFont_arial_15_4bpp();

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId fontId)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b082      	sub	sp, #8
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
 80132f8:	460b      	mov	r3, r1
 80132fa:	807b      	strh	r3, [r7, #2]
    switch (fontId)
 80132fc:	887b      	ldrh	r3, [r7, #2]
 80132fe:	2b03      	cmp	r3, #3
 8013300:	d81a      	bhi.n	8013338 <_ZN23ApplicationFontProvider7getFontEt+0x48>
 8013302:	a201      	add	r2, pc, #4	; (adr r2, 8013308 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8013304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013308:	08013319 	.word	0x08013319
 801330c:	08013321 	.word	0x08013321
 8013310:	08013329 	.word	0x08013329
 8013314:	08013331 	.word	0x08013331
    {
    case Typography::DEFAULT:
        return &(getFont_Asap_Regular_80_4bpp());
 8013318:	f000 f8fc 	bl	8013514 <_Z28getFont_Asap_Regular_80_4bppv>
 801331c:	4603      	mov	r3, r0
 801331e:	e00c      	b.n	801333a <_ZN23ApplicationFontProvider7getFontEt+0x4a>
    case Typography::BUTTONDOWN:
        return &(getFont_Asap_Regular_27_4bpp());
 8013320:	f000 f8ba 	bl	8013498 <_Z28getFont_Asap_Regular_27_4bppv>
 8013324:	4603      	mov	r3, r0
 8013326:	e008      	b.n	801333a <_ZN23ApplicationFontProvider7getFontEt+0x4a>
    case Typography::LABEL:
        return &(getFont_Asap_Regular_15_4bpp());
 8013328:	f000 f878 	bl	801341c <_Z28getFont_Asap_Regular_15_4bppv>
 801332c:	4603      	mov	r3, r0
 801332e:	e004      	b.n	801333a <_ZN23ApplicationFontProvider7getFontEt+0x4a>
    case Typography::IP_ADDRESS:
        return &(getFont_arial_15_4bpp());
 8013330:	f000 f92e 	bl	8013590 <_Z21getFont_arial_15_4bppv>
 8013334:	4603      	mov	r3, r0
 8013336:	e000      	b.n	801333a <_ZN23ApplicationFontProvider7getFontEt+0x4a>
    default:
        return 0;
 8013338:	2300      	movs	r3, #0
    }
}
 801333a:	4618      	mov	r0, r3
 801333c:	3708      	adds	r7, #8
 801333e:	46bd      	mov	sp, r7
 8013340:	bd80      	pop	{r7, pc}
 8013342:	bf00      	nop

08013344 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId BUTTONDOWN = 1;
    static const touchgfx::FontId LABEL = 2;
    static const touchgfx::FontId IP_ADDRESS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8013344:	b580      	push	{r7, lr}
 8013346:	b082      	sub	sp, #8
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	4a05      	ldr	r2, [pc, #20]	; (8013364 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	601a      	str	r2, [r3, #0]
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	4618      	mov	r0, r3
 8013356:	f7ff ffab 	bl	80132b0 <_ZN8touchgfx12FontProviderD1Ev>
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	4618      	mov	r0, r3
 801335e:	3708      	adds	r7, #8
 8013360:	46bd      	mov	sp, r7
 8013362:	bd80      	pop	{r7, pc}
 8013364:	08023234 	.word	0x08023234

08013368 <_ZN23ApplicationFontProviderD0Ev>:
 8013368:	b580      	push	{r7, lr}
 801336a:	b082      	sub	sp, #8
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
 8013370:	6878      	ldr	r0, [r7, #4]
 8013372:	f7ff ffe7 	bl	8013344 <_ZN23ApplicationFontProviderD1Ev>
 8013376:	2104      	movs	r1, #4
 8013378:	6878      	ldr	r0, [r7, #4]
 801337a:	f00d ff00 	bl	802117e <_ZdlPvj>
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	4618      	mov	r0, r3
 8013382:	3708      	adds	r7, #8
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}

08013388 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 8013388:	b480      	push	{r7}
 801338a:	b083      	sub	sp, #12
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
 8013390:	4a04      	ldr	r2, [pc, #16]	; (80133a4 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	601a      	str	r2, [r3, #0]
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	4618      	mov	r0, r3
 801339a:	370c      	adds	r7, #12
 801339c:	46bd      	mov	sp, r7
 801339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a2:	4770      	bx	lr
 80133a4:	080253d8 	.word	0x080253d8

080133a8 <_ZN8touchgfx4FontD0Ev>:
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b082      	sub	sp, #8
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
 80133b0:	6878      	ldr	r0, [r7, #4]
 80133b2:	f7ff ffe9 	bl	8013388 <_ZN8touchgfx4FontD1Ev>
 80133b6:	2110      	movs	r1, #16
 80133b8:	6878      	ldr	r0, [r7, #4]
 80133ba:	f00d fee0 	bl	802117e <_ZdlPvj>
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	4618      	mov	r0, r3
 80133c2:	3708      	adds	r7, #8
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}

080133c8 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b082      	sub	sp, #8
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
 80133d0:	4a05      	ldr	r2, [pc, #20]	; (80133e8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	601a      	str	r2, [r3, #0]
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	4618      	mov	r0, r3
 80133da:	f7ff ffd5 	bl	8013388 <_ZN8touchgfx4FontD1Ev>
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	4618      	mov	r0, r3
 80133e2:	3708      	adds	r7, #8
 80133e4:	46bd      	mov	sp, r7
 80133e6:	bd80      	pop	{r7, pc}
 80133e8:	0802548c 	.word	0x0802548c

080133ec <_ZN8touchgfx9ConstFontD0Ev>:
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b082      	sub	sp, #8
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
 80133f4:	6878      	ldr	r0, [r7, #4]
 80133f6:	f7ff ffe7 	bl	80133c8 <_ZN8touchgfx9ConstFontD1Ev>
 80133fa:	2118      	movs	r1, #24
 80133fc:	6878      	ldr	r0, [r7, #4]
 80133fe:	f00d febe 	bl	802117e <_ZdlPvj>
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	4618      	mov	r0, r3
 8013406:	3708      	adds	r7, #8
 8013408:	46bd      	mov	sp, r7
 801340a:	bd80      	pop	{r7, pc}

0801340c <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Regular_15_4bpp[];
touchgfx::InternalFlashFont& getFont_Asap_Regular_15_4bpp();

touchgfx::InternalFlashFont& getFont_Asap_Regular_15_4bpp()
{
    static touchgfx::InternalFlashFont Asap_Regular_15_4bpp(glyphs_Asap_Regular_15_4bpp, 32, 15, 3, 4, 0, 1, unicodes_Asap_Regular_15_4bpp, kerning_Asap_Regular_15_4bpp, 63, 0);
 801340c:	b580      	push	{r7, lr}
 801340e:	af00      	add	r7, sp, #0
 8013410:	4801      	ldr	r0, [pc, #4]	; (8013418 <__tcf_0+0xc>)
 8013412:	f000 f8f3 	bl	80135fc <_ZN8touchgfx17InternalFlashFontD1Ev>
 8013416:	bd80      	pop	{r7, pc}
 8013418:	20008e68 	.word	0x20008e68

0801341c <_Z28getFont_Asap_Regular_15_4bppv>:
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b088      	sub	sp, #32
 8013420:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont Asap_Regular_15_4bpp(glyphs_Asap_Regular_15_4bpp, 32, 15, 3, 4, 0, 1, unicodes_Asap_Regular_15_4bpp, kerning_Asap_Regular_15_4bpp, 63, 0);
 8013422:	4b13      	ldr	r3, [pc, #76]	; (8013470 <_Z28getFont_Asap_Regular_15_4bppv+0x54>)
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	f003 0301 	and.w	r3, r3, #1
 801342a:	2b00      	cmp	r3, #0
 801342c:	d11b      	bne.n	8013466 <_Z28getFont_Asap_Regular_15_4bppv+0x4a>
 801342e:	2300      	movs	r3, #0
 8013430:	9307      	str	r3, [sp, #28]
 8013432:	233f      	movs	r3, #63	; 0x3f
 8013434:	9306      	str	r3, [sp, #24]
 8013436:	4b0f      	ldr	r3, [pc, #60]	; (8013474 <_Z28getFont_Asap_Regular_15_4bppv+0x58>)
 8013438:	9305      	str	r3, [sp, #20]
 801343a:	4b0f      	ldr	r3, [pc, #60]	; (8013478 <_Z28getFont_Asap_Regular_15_4bppv+0x5c>)
 801343c:	9304      	str	r3, [sp, #16]
 801343e:	2301      	movs	r3, #1
 8013440:	9303      	str	r3, [sp, #12]
 8013442:	2300      	movs	r3, #0
 8013444:	9302      	str	r3, [sp, #8]
 8013446:	2304      	movs	r3, #4
 8013448:	9301      	str	r3, [sp, #4]
 801344a:	2303      	movs	r3, #3
 801344c:	9300      	str	r3, [sp, #0]
 801344e:	230f      	movs	r3, #15
 8013450:	2220      	movs	r2, #32
 8013452:	490a      	ldr	r1, [pc, #40]	; (801347c <_Z28getFont_Asap_Regular_15_4bppv+0x60>)
 8013454:	480a      	ldr	r0, [pc, #40]	; (8013480 <_Z28getFont_Asap_Regular_15_4bppv+0x64>)
 8013456:	f00b fe4d 	bl	801f0f4 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 801345a:	4b05      	ldr	r3, [pc, #20]	; (8013470 <_Z28getFont_Asap_Regular_15_4bppv+0x54>)
 801345c:	2201      	movs	r2, #1
 801345e:	601a      	str	r2, [r3, #0]
 8013460:	4808      	ldr	r0, [pc, #32]	; (8013484 <_Z28getFont_Asap_Regular_15_4bppv+0x68>)
 8013462:	f00d fec7 	bl	80211f4 <atexit>
    return Asap_Regular_15_4bpp;
 8013466:	4b06      	ldr	r3, [pc, #24]	; (8013480 <_Z28getFont_Asap_Regular_15_4bppv+0x64>)
}
 8013468:	4618      	mov	r0, r3
 801346a:	46bd      	mov	sp, r7
 801346c:	bd80      	pop	{r7, pc}
 801346e:	bf00      	nop
 8013470:	20008e88 	.word	0x20008e88
 8013474:	08029168 	.word	0x08029168
 8013478:	08025cd8 	.word	0x08025cd8
 801347c:	08029178 	.word	0x08029178
 8013480:	20008e68 	.word	0x20008e68
 8013484:	0801340d 	.word	0x0801340d

08013488 <__tcf_1>:
extern const touchgfx::KerningNode kerning_Asap_Regular_27_4bpp[];
touchgfx::InternalFlashFont& getFont_Asap_Regular_27_4bpp();

touchgfx::InternalFlashFont& getFont_Asap_Regular_27_4bpp()
{
    static touchgfx::InternalFlashFont Asap_Regular_27_4bpp(glyphs_Asap_Regular_27_4bpp, 5, 27, 0, 4, 0, 0, unicodes_Asap_Regular_27_4bpp, kerning_Asap_Regular_27_4bpp, 63, 0);
 8013488:	b580      	push	{r7, lr}
 801348a:	af00      	add	r7, sp, #0
 801348c:	4801      	ldr	r0, [pc, #4]	; (8013494 <__tcf_1+0xc>)
 801348e:	f000 f8b5 	bl	80135fc <_ZN8touchgfx17InternalFlashFontD1Ev>
 8013492:	bd80      	pop	{r7, pc}
 8013494:	20008e8c 	.word	0x20008e8c

08013498 <_Z28getFont_Asap_Regular_27_4bppv>:
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b088      	sub	sp, #32
 801349c:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont Asap_Regular_27_4bpp(glyphs_Asap_Regular_27_4bpp, 5, 27, 0, 4, 0, 0, unicodes_Asap_Regular_27_4bpp, kerning_Asap_Regular_27_4bpp, 63, 0);
 801349e:	4b13      	ldr	r3, [pc, #76]	; (80134ec <_Z28getFont_Asap_Regular_27_4bppv+0x54>)
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	f003 0301 	and.w	r3, r3, #1
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d11b      	bne.n	80134e2 <_Z28getFont_Asap_Regular_27_4bppv+0x4a>
 80134aa:	2300      	movs	r3, #0
 80134ac:	9307      	str	r3, [sp, #28]
 80134ae:	233f      	movs	r3, #63	; 0x3f
 80134b0:	9306      	str	r3, [sp, #24]
 80134b2:	4b0f      	ldr	r3, [pc, #60]	; (80134f0 <_Z28getFont_Asap_Regular_27_4bppv+0x58>)
 80134b4:	9305      	str	r3, [sp, #20]
 80134b6:	4b0f      	ldr	r3, [pc, #60]	; (80134f4 <_Z28getFont_Asap_Regular_27_4bppv+0x5c>)
 80134b8:	9304      	str	r3, [sp, #16]
 80134ba:	2300      	movs	r3, #0
 80134bc:	9303      	str	r3, [sp, #12]
 80134be:	2300      	movs	r3, #0
 80134c0:	9302      	str	r3, [sp, #8]
 80134c2:	2304      	movs	r3, #4
 80134c4:	9301      	str	r3, [sp, #4]
 80134c6:	2300      	movs	r3, #0
 80134c8:	9300      	str	r3, [sp, #0]
 80134ca:	231b      	movs	r3, #27
 80134cc:	2205      	movs	r2, #5
 80134ce:	490a      	ldr	r1, [pc, #40]	; (80134f8 <_Z28getFont_Asap_Regular_27_4bppv+0x60>)
 80134d0:	480a      	ldr	r0, [pc, #40]	; (80134fc <_Z28getFont_Asap_Regular_27_4bppv+0x64>)
 80134d2:	f00b fe0f 	bl	801f0f4 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 80134d6:	4b05      	ldr	r3, [pc, #20]	; (80134ec <_Z28getFont_Asap_Regular_27_4bppv+0x54>)
 80134d8:	2201      	movs	r2, #1
 80134da:	601a      	str	r2, [r3, #0]
 80134dc:	4808      	ldr	r0, [pc, #32]	; (8013500 <_Z28getFont_Asap_Regular_27_4bppv+0x68>)
 80134de:	f00d fe89 	bl	80211f4 <atexit>
    return Asap_Regular_27_4bpp;
 80134e2:	4b06      	ldr	r3, [pc, #24]	; (80134fc <_Z28getFont_Asap_Regular_27_4bppv+0x64>)
}
 80134e4:	4618      	mov	r0, r3
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}
 80134ea:	bf00      	nop
 80134ec:	20008eac 	.word	0x20008eac
 80134f0:	0802916c 	.word	0x0802916c
 80134f4:	080261d4 	.word	0x080261d4
 80134f8:	08029338 	.word	0x08029338
 80134fc:	20008e8c 	.word	0x20008e8c
 8013500:	08013489 	.word	0x08013489

08013504 <__tcf_2>:
extern const touchgfx::KerningNode kerning_Asap_Regular_80_4bpp[];
touchgfx::InternalFlashFont& getFont_Asap_Regular_80_4bpp();

touchgfx::InternalFlashFont& getFont_Asap_Regular_80_4bpp()
{
    static touchgfx::InternalFlashFont Asap_Regular_80_4bpp(glyphs_Asap_Regular_80_4bpp, 14, 80, 9, 4, 0, 0, unicodes_Asap_Regular_80_4bpp, kerning_Asap_Regular_80_4bpp, 0, 0);
 8013504:	b580      	push	{r7, lr}
 8013506:	af00      	add	r7, sp, #0
 8013508:	4801      	ldr	r0, [pc, #4]	; (8013510 <__tcf_2+0xc>)
 801350a:	f000 f877 	bl	80135fc <_ZN8touchgfx17InternalFlashFontD1Ev>
 801350e:	bd80      	pop	{r7, pc}
 8013510:	20008eb0 	.word	0x20008eb0

08013514 <_Z28getFont_Asap_Regular_80_4bppv>:
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b088      	sub	sp, #32
 8013518:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont Asap_Regular_80_4bpp(glyphs_Asap_Regular_80_4bpp, 14, 80, 9, 4, 0, 0, unicodes_Asap_Regular_80_4bpp, kerning_Asap_Regular_80_4bpp, 0, 0);
 801351a:	4b13      	ldr	r3, [pc, #76]	; (8013568 <_Z28getFont_Asap_Regular_80_4bppv+0x54>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	f003 0301 	and.w	r3, r3, #1
 8013522:	2b00      	cmp	r3, #0
 8013524:	d11b      	bne.n	801355e <_Z28getFont_Asap_Regular_80_4bppv+0x4a>
 8013526:	2300      	movs	r3, #0
 8013528:	9307      	str	r3, [sp, #28]
 801352a:	2300      	movs	r3, #0
 801352c:	9306      	str	r3, [sp, #24]
 801352e:	4b0f      	ldr	r3, [pc, #60]	; (801356c <_Z28getFont_Asap_Regular_80_4bppv+0x58>)
 8013530:	9305      	str	r3, [sp, #20]
 8013532:	4b0f      	ldr	r3, [pc, #60]	; (8013570 <_Z28getFont_Asap_Regular_80_4bppv+0x5c>)
 8013534:	9304      	str	r3, [sp, #16]
 8013536:	2300      	movs	r3, #0
 8013538:	9303      	str	r3, [sp, #12]
 801353a:	2300      	movs	r3, #0
 801353c:	9302      	str	r3, [sp, #8]
 801353e:	2304      	movs	r3, #4
 8013540:	9301      	str	r3, [sp, #4]
 8013542:	2309      	movs	r3, #9
 8013544:	9300      	str	r3, [sp, #0]
 8013546:	2350      	movs	r3, #80	; 0x50
 8013548:	220e      	movs	r2, #14
 801354a:	490a      	ldr	r1, [pc, #40]	; (8013574 <_Z28getFont_Asap_Regular_80_4bppv+0x60>)
 801354c:	480a      	ldr	r0, [pc, #40]	; (8013578 <_Z28getFont_Asap_Regular_80_4bppv+0x64>)
 801354e:	f00b fdd1 	bl	801f0f4 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 8013552:	4b05      	ldr	r3, [pc, #20]	; (8013568 <_Z28getFont_Asap_Regular_80_4bppv+0x54>)
 8013554:	2201      	movs	r2, #1
 8013556:	601a      	str	r2, [r3, #0]
 8013558:	4808      	ldr	r0, [pc, #32]	; (801357c <_Z28getFont_Asap_Regular_80_4bppv+0x68>)
 801355a:	f00d fe4b 	bl	80211f4 <atexit>
    return Asap_Regular_80_4bpp;
 801355e:	4b06      	ldr	r3, [pc, #24]	; (8013578 <_Z28getFont_Asap_Regular_80_4bppv+0x64>)
}
 8013560:	4618      	mov	r0, r3
 8013562:	46bd      	mov	sp, r7
 8013564:	bd80      	pop	{r7, pc}
 8013566:	bf00      	nop
 8013568:	20008ed0 	.word	0x20008ed0
 801356c:	08029170 	.word	0x08029170
 8013570:	080263cc 	.word	0x080263cc
 8013574:	08029380 	.word	0x08029380
 8013578:	20008eb0 	.word	0x20008eb0
 801357c:	08013505 	.word	0x08013505

08013580 <__tcf_3>:
extern const touchgfx::KerningNode kerning_arial_15_4bpp[];
touchgfx::InternalFlashFont& getFont_arial_15_4bpp();

touchgfx::InternalFlashFont& getFont_arial_15_4bpp()
{
    static touchgfx::InternalFlashFont arial_15_4bpp(glyphs_arial_15_4bpp, 12, 15, 0, 4, 0, 0, unicodes_arial_15_4bpp, kerning_arial_15_4bpp, 43, 0);
 8013580:	b580      	push	{r7, lr}
 8013582:	af00      	add	r7, sp, #0
 8013584:	4801      	ldr	r0, [pc, #4]	; (801358c <__tcf_3+0xc>)
 8013586:	f000 f839 	bl	80135fc <_ZN8touchgfx17InternalFlashFontD1Ev>
 801358a:	bd80      	pop	{r7, pc}
 801358c:	20008ed4 	.word	0x20008ed4

08013590 <_Z21getFont_arial_15_4bppv>:
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b088      	sub	sp, #32
 8013594:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont arial_15_4bpp(glyphs_arial_15_4bpp, 12, 15, 0, 4, 0, 0, unicodes_arial_15_4bpp, kerning_arial_15_4bpp, 43, 0);
 8013596:	4b13      	ldr	r3, [pc, #76]	; (80135e4 <_Z21getFont_arial_15_4bppv+0x54>)
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	f003 0301 	and.w	r3, r3, #1
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d11b      	bne.n	80135da <_Z21getFont_arial_15_4bppv+0x4a>
 80135a2:	2300      	movs	r3, #0
 80135a4:	9307      	str	r3, [sp, #28]
 80135a6:	232b      	movs	r3, #43	; 0x2b
 80135a8:	9306      	str	r3, [sp, #24]
 80135aa:	4b0f      	ldr	r3, [pc, #60]	; (80135e8 <_Z21getFont_arial_15_4bppv+0x58>)
 80135ac:	9305      	str	r3, [sp, #20]
 80135ae:	4b0f      	ldr	r3, [pc, #60]	; (80135ec <_Z21getFont_arial_15_4bppv+0x5c>)
 80135b0:	9304      	str	r3, [sp, #16]
 80135b2:	2300      	movs	r3, #0
 80135b4:	9303      	str	r3, [sp, #12]
 80135b6:	2300      	movs	r3, #0
 80135b8:	9302      	str	r3, [sp, #8]
 80135ba:	2304      	movs	r3, #4
 80135bc:	9301      	str	r3, [sp, #4]
 80135be:	2300      	movs	r3, #0
 80135c0:	9300      	str	r3, [sp, #0]
 80135c2:	230f      	movs	r3, #15
 80135c4:	220c      	movs	r2, #12
 80135c6:	490a      	ldr	r1, [pc, #40]	; (80135f0 <_Z21getFont_arial_15_4bppv+0x60>)
 80135c8:	480a      	ldr	r0, [pc, #40]	; (80135f4 <_Z21getFont_arial_15_4bppv+0x64>)
 80135ca:	f00b fd93 	bl	801f0f4 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 80135ce:	4b05      	ldr	r3, [pc, #20]	; (80135e4 <_Z21getFont_arial_15_4bppv+0x54>)
 80135d0:	2201      	movs	r2, #1
 80135d2:	601a      	str	r2, [r3, #0]
 80135d4:	4808      	ldr	r0, [pc, #32]	; (80135f8 <_Z21getFont_arial_15_4bppv+0x68>)
 80135d6:	f00d fe0d 	bl	80211f4 <atexit>
    return arial_15_4bpp;
 80135da:	4b06      	ldr	r3, [pc, #24]	; (80135f4 <_Z21getFont_arial_15_4bppv+0x64>)
}
 80135dc:	4618      	mov	r0, r3
 80135de:	46bd      	mov	sp, r7
 80135e0:	bd80      	pop	{r7, pc}
 80135e2:	bf00      	nop
 80135e4:	20008ef4 	.word	0x20008ef4
 80135e8:	08029174 	.word	0x08029174
 80135ec:	08028f98 	.word	0x08028f98
 80135f0:	08029444 	.word	0x08029444
 80135f4:	20008ed4 	.word	0x20008ed4
 80135f8:	08013581 	.word	0x08013581

080135fc <_ZN8touchgfx17InternalFlashFontD1Ev>:
 *        An InternalFlashFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class InternalFlashFont : public ConstFont
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b082      	sub	sp, #8
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
 8013604:	4a05      	ldr	r2, [pc, #20]	; (801361c <_ZN8touchgfx17InternalFlashFontD1Ev+0x20>)
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	601a      	str	r2, [r3, #0]
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	4618      	mov	r0, r3
 801360e:	f7ff fedb 	bl	80133c8 <_ZN8touchgfx9ConstFontD1Ev>
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	4618      	mov	r0, r3
 8013616:	3708      	adds	r7, #8
 8013618:	46bd      	mov	sp, r7
 801361a:	bd80      	pop	{r7, pc}
 801361c:	08025520 	.word	0x08025520

08013620 <_ZN8touchgfx17InternalFlashFontD0Ev>:
 8013620:	b580      	push	{r7, lr}
 8013622:	b082      	sub	sp, #8
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
 8013628:	6878      	ldr	r0, [r7, #4]
 801362a:	f7ff ffe7 	bl	80135fc <_ZN8touchgfx17InternalFlashFontD1Ev>
 801362e:	2120      	movs	r1, #32
 8013630:	6878      	ldr	r0, [r7, #4]
 8013632:	f00d fda4 	bl	802117e <_ZdlPvj>
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	4618      	mov	r0, r3
 801363a:	3708      	adds	r7, #8
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}

08013640 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8013640:	b480      	push	{r7}
 8013642:	b083      	sub	sp, #12
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
 8013648:	6039      	str	r1, [r7, #0]
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	4618      	mov	r0, r3
 801364e:	370c      	adds	r7, #12
 8013650:	46bd      	mov	sp, r7
 8013652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013656:	4770      	bx	lr

08013658 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8013658:	b480      	push	{r7}
 801365a:	b083      	sub	sp, #12
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
 8013660:	6039      	str	r1, [r7, #0]
    {
    }
 8013662:	bf00      	nop
 8013664:	370c      	adds	r7, #12
 8013666:	46bd      	mov	sp, r7
 8013668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366c:	4770      	bx	lr

0801366e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 801366e:	b480      	push	{r7}
 8013670:	b083      	sub	sp, #12
 8013672:	af00      	add	r7, sp, #0
 8013674:	6078      	str	r0, [r7, #4]
 8013676:	6039      	str	r1, [r7, #0]
    {
    }
 8013678:	bf00      	nop
 801367a:	370c      	adds	r7, #12
 801367c:	46bd      	mov	sp, r7
 801367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013682:	4770      	bx	lr

08013684 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8013684:	b480      	push	{r7}
 8013686:	b083      	sub	sp, #12
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
 801368c:	6039      	str	r1, [r7, #0]
    {
    }
 801368e:	bf00      	nop
 8013690:	370c      	adds	r7, #12
 8013692:	46bd      	mov	sp, r7
 8013694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013698:	4770      	bx	lr

0801369a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 801369a:	b480      	push	{r7}
 801369c:	b083      	sub	sp, #12
 801369e:	af00      	add	r7, sp, #0
 80136a0:	6078      	str	r0, [r7, #4]
 80136a2:	460b      	mov	r3, r1
 80136a4:	70fb      	strb	r3, [r7, #3]
    {
    }
 80136a6:	bf00      	nop
 80136a8:	370c      	adds	r7, #12
 80136aa:	46bd      	mov	sp, r7
 80136ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b0:	4770      	bx	lr

080136b2 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80136b2:	b480      	push	{r7}
 80136b4:	b083      	sub	sp, #12
 80136b6:	af00      	add	r7, sp, #0
 80136b8:	6078      	str	r0, [r7, #4]
    {
    }
 80136ba:	bf00      	nop
 80136bc:	370c      	adds	r7, #12
 80136be:	46bd      	mov	sp, r7
 80136c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c4:	4770      	bx	lr

080136c6 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 80136c6:	b480      	push	{r7}
 80136c8:	b083      	sub	sp, #12
 80136ca:	af00      	add	r7, sp, #0
 80136cc:	6078      	str	r0, [r7, #4]
    {
    }
 80136ce:	bf00      	nop
 80136d0:	370c      	adds	r7, #12
 80136d2:	46bd      	mov	sp, r7
 80136d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d8:	4770      	bx	lr
	...

080136dc <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 80136dc:	b480      	push	{r7}
 80136de:	b083      	sub	sp, #12
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
    {
 80136e4:	4a04      	ldr	r2, [pc, #16]	; (80136f8 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	601a      	str	r2, [r3, #0]
    }
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	4618      	mov	r0, r3
 80136ee:	370c      	adds	r7, #12
 80136f0:	46bd      	mov	sp, r7
 80136f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f6:	4770      	bx	lr
 80136f8:	08023430 	.word	0x08023430

080136fc <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b082      	sub	sp, #8
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
    }
 8013704:	6878      	ldr	r0, [r7, #4]
 8013706:	f7ff ffe9 	bl	80136dc <_ZN8touchgfx15UIEventListenerD1Ev>
 801370a:	2104      	movs	r1, #4
 801370c:	6878      	ldr	r0, [r7, #4]
 801370e:	f00d fd36 	bl	802117e <_ZdlPvj>
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	4618      	mov	r0, r3
 8013716:	3708      	adds	r7, #8
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}

0801371c <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 801371c:	b480      	push	{r7}
 801371e:	b083      	sub	sp, #12
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 8013724:	4a07      	ldr	r2, [pc, #28]	; (8013744 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	601a      	str	r2, [r3, #0]
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	2200      	movs	r2, #0
 801372e:	605a      	str	r2, [r3, #4]
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	2200      	movs	r2, #0
 8013734:	721a      	strb	r2, [r3, #8]
    {
    }
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	4618      	mov	r0, r3
 801373a:	370c      	adds	r7, #12
 801373c:	46bd      	mov	sp, r7
 801373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013742:	4770      	bx	lr
 8013744:	08023410 	.word	0x08023410

08013748 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 8013748:	b480      	push	{r7}
 801374a:	b083      	sub	sp, #12
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
    {
 8013750:	4a04      	ldr	r2, [pc, #16]	; (8013764 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	601a      	str	r2, [r3, #0]
    }
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	4618      	mov	r0, r3
 801375a:	370c      	adds	r7, #12
 801375c:	46bd      	mov	sp, r7
 801375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013762:	4770      	bx	lr
 8013764:	08023410 	.word	0x08023410

08013768 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8013768:	b580      	push	{r7, lr}
 801376a:	b082      	sub	sp, #8
 801376c:	af00      	add	r7, sp, #0
 801376e:	6078      	str	r0, [r7, #4]
    }
 8013770:	6878      	ldr	r0, [r7, #4]
 8013772:	f7ff ffe9 	bl	8013748 <_ZN8touchgfx10TransitionD1Ev>
 8013776:	210c      	movs	r1, #12
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f00d fd00 	bl	802117e <_ZdlPvj>
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	4618      	mov	r0, r3
 8013782:	3708      	adds	r7, #8
 8013784:	46bd      	mov	sp, r7
 8013786:	bd80      	pop	{r7, pc}

08013788 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 8013788:	b480      	push	{r7}
 801378a:	b083      	sub	sp, #12
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
 8013790:	bf00      	nop
 8013792:	370c      	adds	r7, #12
 8013794:	46bd      	mov	sp, r7
 8013796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379a:	4770      	bx	lr

0801379c <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 801379c:	b480      	push	{r7}
 801379e:	b083      	sub	sp, #12
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
 80137a4:	bf00      	nop
 80137a6:	370c      	adds	r7, #12
 80137a8:	46bd      	mov	sp, r7
 80137aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ae:	4770      	bx	lr

080137b0 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 80137b0:	b480      	push	{r7}
 80137b2:	b083      	sub	sp, #12
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
 80137b8:	bf00      	nop
 80137ba:	370c      	adds	r7, #12
 80137bc:	46bd      	mov	sp, r7
 80137be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c2:	4770      	bx	lr

080137c4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80137c4:	b480      	push	{r7}
 80137c6:	b083      	sub	sp, #12
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
 80137cc:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	683a      	ldr	r2, [r7, #0]
 80137d2:	605a      	str	r2, [r3, #4]
    }
 80137d4:	bf00      	nop
 80137d6:	370c      	adds	r7, #12
 80137d8:	46bd      	mov	sp, r7
 80137da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137de:	4770      	bx	lr

080137e0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 80137e0:	b480      	push	{r7}
 80137e2:	b083      	sub	sp, #12
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
 80137e8:	460b      	mov	r3, r1
 80137ea:	70fb      	strb	r3, [r7, #3]
    {
    }
 80137ec:	bf00      	nop
 80137ee:	370c      	adds	r7, #12
 80137f0:	46bd      	mov	sp, r7
 80137f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f6:	4770      	bx	lr

080137f8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 80137f8:	b480      	push	{r7}
 80137fa:	b083      	sub	sp, #12
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
    {
 8013800:	4a04      	ldr	r2, [pc, #16]	; (8013814 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	601a      	str	r2, [r3, #0]
    }
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	4618      	mov	r0, r3
 801380a:	370c      	adds	r7, #12
 801380c:	46bd      	mov	sp, r7
 801380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013812:	4770      	bx	lr
 8013814:	080233f8 	.word	0x080233f8

08013818 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8013818:	b580      	push	{r7, lr}
 801381a:	b082      	sub	sp, #8
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
    }
 8013820:	6878      	ldr	r0, [r7, #4]
 8013822:	f7ff ffe9 	bl	80137f8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8013826:	2104      	movs	r1, #4
 8013828:	6878      	ldr	r0, [r7, #4]
 801382a:	f00d fca8 	bl	802117e <_ZdlPvj>
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	4618      	mov	r0, r3
 8013832:	3708      	adds	r7, #8
 8013834:	46bd      	mov	sp, r7
 8013836:	bd80      	pop	{r7, pc}

08013838 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8013838:	b580      	push	{r7, lr}
 801383a:	b082      	sub	sp, #8
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]
 8013840:	4a05      	ldr	r2, [pc, #20]	; (8013858 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	601a      	str	r2, [r3, #0]
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	4618      	mov	r0, r3
 801384a:	f7ff ff47 	bl	80136dc <_ZN8touchgfx15UIEventListenerD1Ev>
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	4618      	mov	r0, r3
 8013852:	3708      	adds	r7, #8
 8013854:	46bd      	mov	sp, r7
 8013856:	bd80      	pop	{r7, pc}
 8013858:	080252ac 	.word	0x080252ac

0801385c <_ZN8touchgfx11ApplicationD0Ev>:
 801385c:	b580      	push	{r7, lr}
 801385e:	b082      	sub	sp, #8
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
 8013864:	6878      	ldr	r0, [r7, #4]
 8013866:	f7ff ffe7 	bl	8013838 <_ZN8touchgfx11ApplicationD1Ev>
 801386a:	f44f 7198 	mov.w	r1, #304	; 0x130
 801386e:	6878      	ldr	r0, [r7, #4]
 8013870:	f00d fc85 	bl	802117e <_ZdlPvj>
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	4618      	mov	r0, r3
 8013878:	3708      	adds	r7, #8
 801387a:	46bd      	mov	sp, r7
 801387c:	bd80      	pop	{r7, pc}
	...

08013880 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 8013880:	b580      	push	{r7, lr}
 8013882:	b082      	sub	sp, #8
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	4618      	mov	r0, r3
 801388c:	f00a fbe8 	bl	801e060 <_ZN8touchgfx11ApplicationC1Ev>
 8013890:	4a09      	ldr	r2, [pc, #36]	; (80138b8 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	601a      	str	r2, [r3, #0]
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	2200      	movs	r2, #0
 801389a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	2200      	movs	r2, #0
 80138a2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	4a04      	ldr	r2, [pc, #16]	; (80138bc <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 80138aa:	6013      	str	r3, [r2, #0]
    }
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	4618      	mov	r0, r3
 80138b0:	3708      	adds	r7, #8
 80138b2:	46bd      	mov	sp, r7
 80138b4:	bd80      	pop	{r7, pc}
 80138b6:	bf00      	nop
 80138b8:	080233bc 	.word	0x080233bc
 80138bc:	2000a388 	.word	0x2000a388

080138c0 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b082      	sub	sp, #8
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
 80138c8:	4a05      	ldr	r2, [pc, #20]	; (80138e0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	601a      	str	r2, [r3, #0]
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	4618      	mov	r0, r3
 80138d2:	f7ff ffb1 	bl	8013838 <_ZN8touchgfx11ApplicationD1Ev>
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	4618      	mov	r0, r3
 80138da:	3708      	adds	r7, #8
 80138dc:	46bd      	mov	sp, r7
 80138de:	bd80      	pop	{r7, pc}
 80138e0:	080233bc 	.word	0x080233bc

080138e4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b082      	sub	sp, #8
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
 80138ec:	6878      	ldr	r0, [r7, #4]
 80138ee:	f7ff ffe7 	bl	80138c0 <_ZN8touchgfx14MVPApplicationD1Ev>
 80138f2:	f44f 719c 	mov.w	r1, #312	; 0x138
 80138f6:	6878      	ldr	r0, [r7, #4]
 80138f8:	f00d fc41 	bl	802117e <_ZdlPvj>
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	4618      	mov	r0, r3
 8013900:	3708      	adds	r7, #8
 8013902:	46bd      	mov	sp, r7
 8013904:	bd80      	pop	{r7, pc}

08013906 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8013906:	b580      	push	{r7, lr}
 8013908:	b082      	sub	sp, #8
 801390a:	af00      	add	r7, sp, #0
 801390c:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 801390e:	6878      	ldr	r0, [r7, #4]
 8013910:	f000 f804 	bl	801391c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8013914:	bf00      	nop
 8013916:	3708      	adds	r7, #8
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}

0801391c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 801391c:	b580      	push	{r7, lr}
 801391e:	b082      	sub	sp, #8
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 801392a:	2b00      	cmp	r3, #0
 801392c:	d00f      	beq.n	801394e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	330c      	adds	r3, #12
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	4610      	mov	r0, r2
 8013942:	4798      	blx	r3
 8013944:	4603      	mov	r3, r0
 8013946:	2b00      	cmp	r3, #0
 8013948:	d001      	beq.n	801394e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 801394a:	2301      	movs	r3, #1
 801394c:	e000      	b.n	8013950 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 801394e:	2300      	movs	r3, #0
 8013950:	2b00      	cmp	r3, #0
 8013952:	d00e      	beq.n	8013972 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	3308      	adds	r3, #8
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	4610      	mov	r0, r2
 8013968:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2200      	movs	r2, #0
 801396e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 8013972:	bf00      	nop
 8013974:	3708      	adds	r7, #8
 8013976:	46bd      	mov	sp, r7
 8013978:	bd80      	pop	{r7, pc}

0801397a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 801397a:	b580      	push	{r7, lr}
 801397c:	b084      	sub	sp, #16
 801397e:	af00      	add	r7, sp, #0
 8013980:	60f8      	str	r0, [r7, #12]
 8013982:	60b9      	str	r1, [r7, #8]
 8013984:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 8013986:	f00a fb01 	bl	801df8c <_ZN8touchgfx11Application11getInstanceEv>
 801398a:	4603      	mov	r3, r0
 801398c:	4618      	mov	r0, r3
 801398e:	f00a fb4a 	bl	801e026 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d008      	beq.n	80139ac <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	681a      	ldr	r2, [r3, #0]
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	330c      	adds	r3, #12
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	4610      	mov	r0, r2
 80139aa:	4798      	blx	r3
    }
    if (*currentTrans)
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d007      	beq.n	80139c4 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	681a      	ldr	r2, [r3, #0]
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	4610      	mov	r0, r2
 80139c2:	4798      	blx	r3
    }
    if (*currentScreen)
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d008      	beq.n	80139de <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	681a      	ldr	r2, [r3, #0]
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	3314      	adds	r3, #20
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	4610      	mov	r0, r2
 80139dc:	4798      	blx	r3
    }
    if (*currentPresenter)
 80139de:	68bb      	ldr	r3, [r7, #8]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d008      	beq.n	80139f8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 80139e6:	68bb      	ldr	r3, [r7, #8]
 80139e8:	681a      	ldr	r2, [r3, #0]
 80139ea:	68bb      	ldr	r3, [r7, #8]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	3304      	adds	r3, #4
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	4610      	mov	r0, r2
 80139f6:	4798      	blx	r3
    }
    if (*currentScreen)
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d007      	beq.n	8013a10 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	681a      	ldr	r2, [r3, #0]
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	4610      	mov	r0, r2
 8013a0e:	4798      	blx	r3
    }
    if (*currentPresenter)
 8013a10:	68bb      	ldr	r3, [r7, #8]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d008      	beq.n	8013a2a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 8013a18:	68bb      	ldr	r3, [r7, #8]
 8013a1a:	681a      	ldr	r2, [r3, #0]
 8013a1c:	68bb      	ldr	r3, [r7, #8]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	3308      	adds	r3, #8
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	4610      	mov	r0, r2
 8013a28:	4798      	blx	r3
    }
}
 8013a2a:	bf00      	nop
 8013a2c:	3710      	adds	r7, #16
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	bd80      	pop	{r7, pc}

08013a32 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 8013a32:	b580      	push	{r7, lr}
 8013a34:	b084      	sub	sp, #16
 8013a36:	af00      	add	r7, sp, #0
 8013a38:	60f8      	str	r0, [r7, #12]
 8013a3a:	60b9      	str	r1, [r7, #8]
 8013a3c:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	330c      	adds	r3, #12
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	68f8      	ldr	r0, [r7, #12]
 8013a48:	4798      	blx	r3
    newPresenter->activate();
 8013a4a:	68bb      	ldr	r3, [r7, #8]
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	68b8      	ldr	r0, [r7, #8]
 8013a52:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8013a54:	6879      	ldr	r1, [r7, #4]
 8013a56:	68f8      	ldr	r0, [r7, #12]
 8013a58:	f00b faee 	bl	801f038 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	3310      	adds	r3, #16
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	6878      	ldr	r0, [r7, #4]
 8013a66:	4798      	blx	r3

    Application::getInstance()->draw();
 8013a68:	f00a fa90 	bl	801df8c <_ZN8touchgfx11Application11getInstanceEv>
 8013a6c:	4602      	mov	r2, r0
 8013a6e:	6813      	ldr	r3, [r2, #0]
 8013a70:	3328      	adds	r3, #40	; 0x28
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	4610      	mov	r0, r2
 8013a76:	4798      	blx	r3
}
 8013a78:	bf00      	nop
 8013a7a:	3710      	adds	r7, #16
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}

08013a80 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8013a80:	b480      	push	{r7}
 8013a82:	b083      	sub	sp, #12
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
 8013a88:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	683a      	ldr	r2, [r7, #0]
 8013a8e:	601a      	str	r2, [r3, #0]
    }
 8013a90:	bf00      	nop
 8013a92:	370c      	adds	r7, #12
 8013a94:	46bd      	mov	sp, r7
 8013a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9a:	4770      	bx	lr

08013a9c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b082      	sub	sp, #8
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
 8013aa4:	4a08      	ldr	r2, [pc, #32]	; (8013ac8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	601a      	str	r2, [r3, #0]
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f001 fa4b 	bl	8014f4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	4618      	mov	r0, r3
 8013aba:	f7ff ff01 	bl	80138c0 <_ZN8touchgfx14MVPApplicationD1Ev>
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	3708      	adds	r7, #8
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}
 8013ac8:	08023368 	.word	0x08023368

08013acc <_ZN23FrontendApplicationBaseD0Ev>:
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b082      	sub	sp, #8
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]
 8013ad4:	6878      	ldr	r0, [r7, #4]
 8013ad6:	f7ff ffe1 	bl	8013a9c <_ZN23FrontendApplicationBaseD1Ev>
 8013ada:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8013ade:	6878      	ldr	r0, [r7, #4]
 8013ae0:	f00d fb4d 	bl	802117e <_ZdlPvj>
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	3708      	adds	r7, #8
 8013aea:	46bd      	mov	sp, r7
 8013aec:	bd80      	pop	{r7, pc}
	...

08013af0 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b082      	sub	sp, #8
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	4618      	mov	r0, r3
 8013afc:	f7ff fe0e 	bl	801371c <_ZN8touchgfx10TransitionC1Ev>
 8013b00:	4a03      	ldr	r2, [pc, #12]	; (8013b10 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	601a      	str	r2, [r3, #0]
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	4618      	mov	r0, r3
 8013b0a:	3708      	adds	r7, #8
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}
 8013b10:	08023348 	.word	0x08023348

08013b14 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b082      	sub	sp, #8
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
 8013b1c:	4a05      	ldr	r2, [pc, #20]	; (8013b34 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	601a      	str	r2, [r3, #0]
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	4618      	mov	r0, r3
 8013b26:	f7ff fe0f 	bl	8013748 <_ZN8touchgfx10TransitionD1Ev>
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	3708      	adds	r7, #8
 8013b30:	46bd      	mov	sp, r7
 8013b32:	bd80      	pop	{r7, pc}
 8013b34:	08023348 	.word	0x08023348

08013b38 <_ZN8touchgfx12NoTransitionD0Ev>:
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b082      	sub	sp, #8
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	6078      	str	r0, [r7, #4]
 8013b40:	6878      	ldr	r0, [r7, #4]
 8013b42:	f7ff ffe7 	bl	8013b14 <_ZN8touchgfx12NoTransitionD1Ev>
 8013b46:	210c      	movs	r1, #12
 8013b48:	6878      	ldr	r0, [r7, #4]
 8013b4a:	f00d fb18 	bl	802117e <_ZdlPvj>
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	4618      	mov	r0, r3
 8013b52:	3708      	adds	r7, #8
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}

08013b58 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 8013b58:	b480      	push	{r7}
 8013b5a:	b083      	sub	sp, #12
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	2201      	movs	r2, #1
 8013b64:	721a      	strb	r2, [r3, #8]
    }
 8013b66:	bf00      	nop
 8013b68:	370c      	adds	r7, #12
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b70:	4770      	bx	lr

08013b72 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 8013b72:	b480      	push	{r7}
 8013b74:	b083      	sub	sp, #12
 8013b76:	af00      	add	r7, sp, #0
 8013b78:	6078      	str	r0, [r7, #4]
 8013b7a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	683a      	ldr	r2, [r7, #0]
 8013b80:	605a      	str	r2, [r3, #4]
    }
 8013b82:	bf00      	nop
 8013b84:	370c      	adds	r7, #12
 8013b86:	46bd      	mov	sp, r7
 8013b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8c:	4770      	bx	lr
	...

08013b90 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/iocontrol_screen/IOControlPresenter.hpp>

using namespace touchgfx;


FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b084      	sub	sp, #16
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	60f8      	str	r0, [r7, #12]
 8013b98:	60b9      	str	r1, [r7, #8]
 8013b9a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f7ff fe6e 	bl	8013880 <_ZN8touchgfx14MVPApplicationC1Ev>
 8013ba4:	4a0c      	ldr	r2, [pc, #48]	; (8013bd8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>)
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	601a      	str	r2, [r3, #0]
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f000 f9ef 	bl	8013f94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	687a      	ldr	r2, [r7, #4]
 8013bba:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	68ba      	ldr	r2, [r7, #8]
 8013bc2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    Texts::setLanguage(GB);
 8013bc6:	2000      	movs	r0, #0
 8013bc8:	f005 fbfe 	bl	80193c8 <_ZN8touchgfx5Texts11setLanguageEt>
}
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	4618      	mov	r0, r3
 8013bd0:	3710      	adds	r7, #16
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	bd80      	pop	{r7, pc}
 8013bd6:	bf00      	nop
 8013bd8:	08023368 	.word	0x08023368

08013bdc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8013bdc:	b480      	push	{r7}
 8013bde:	b083      	sub	sp, #12
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
 8013be4:	6039      	str	r1, [r7, #0]
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	4618      	mov	r0, r3
 8013bea:	370c      	adds	r7, #12
 8013bec:	46bd      	mov	sp, r7
 8013bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf2:	4770      	bx	lr

08013bf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b082      	sub	sp, #8
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
 8013bfc:	6039      	str	r1, [r7, #0]
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	683a      	ldr	r2, [r7, #0]
 8013c02:	4611      	mov	r1, r2
 8013c04:	4618      	mov	r0, r3
 8013c06:	f7ff ffe9 	bl	8013bdc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8013c0a:	683b      	ldr	r3, [r7, #0]
 8013c0c:	685a      	ldr	r2, [r3, #4]
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	605a      	str	r2, [r3, #4]
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	683a      	ldr	r2, [r7, #0]
 8013c16:	3308      	adds	r3, #8
 8013c18:	3208      	adds	r2, #8
 8013c1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013c1e:	e883 0003 	stmia.w	r3, {r0, r1}
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	4618      	mov	r0, r3
 8013c26:	3708      	adds	r7, #8
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd80      	pop	{r7, pc}

08013c2c <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 * Screen Transition Declarations
 */
// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 8013c2c:	b590      	push	{r4, r7, lr}
 8013c2e:	b089      	sub	sp, #36	; 0x24
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8013c3a:	4b10      	ldr	r3, [pc, #64]	; (8013c7c <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 8013c3c:	61bb      	str	r3, [r7, #24]
 8013c3e:	2300      	movs	r3, #0
 8013c40:	61fb      	str	r3, [r7, #28]
 8013c42:	f107 0008 	add.w	r0, r7, #8
 8013c46:	f107 0318 	add.w	r3, r7, #24
 8013c4a:	cb0c      	ldmia	r3, {r2, r3}
 8013c4c:	6879      	ldr	r1, [r7, #4]
 8013c4e:	f000 f9bd 	bl	8013fcc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8013c52:	f107 0308 	add.w	r3, r7, #8
 8013c56:	4619      	mov	r1, r3
 8013c58:	4620      	mov	r0, r4
 8013c5a:	f7ff ffcb 	bl	8013bf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8013c5e:	f107 0308 	add.w	r3, r7, #8
 8013c62:	4618      	mov	r0, r3
 8013c64:	f001 f972 	bl	8014f4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8013c74:	bf00      	nop
 8013c76:	3724      	adds	r7, #36	; 0x24
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd90      	pop	{r4, r7, pc}
 8013c7c:	08013c81 	.word	0x08013c81

08013c80 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b084      	sub	sp, #16
 8013c84:	af02      	add	r7, sp, #8
 8013c86:	6078      	str	r0, [r7, #4]
    makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8013c94:	461a      	mov	r2, r3
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8013c9c:	9300      	str	r3, [sp, #0]
 8013c9e:	4b04      	ldr	r3, [pc, #16]	; (8013cb0 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 8013ca0:	4804      	ldr	r0, [pc, #16]	; (8013cb4 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 8013ca2:	f000 f9b3 	bl	801400c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8013ca6:	bf00      	nop
 8013ca8:	3708      	adds	r7, #8
 8013caa:	46bd      	mov	sp, r7
 8013cac:	bd80      	pop	{r7, pc}
 8013cae:	bf00      	nop
 8013cb0:	2000a384 	.word	0x2000a384
 8013cb4:	2000a380 	.word	0x2000a380

08013cb8 <_ZN23FrontendApplicationBase34gotoMainScreenSlideTransitionNorthEv>:


void FrontendApplicationBase::gotoMainScreenSlideTransitionNorth()
{
 8013cb8:	b590      	push	{r4, r7, lr}
 8013cba:	b089      	sub	sp, #36	; 0x24
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenSlideTransitionNorthImpl);
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8013cc6:	4b10      	ldr	r3, [pc, #64]	; (8013d08 <_ZN23FrontendApplicationBase34gotoMainScreenSlideTransitionNorthEv+0x50>)
 8013cc8:	61bb      	str	r3, [r7, #24]
 8013cca:	2300      	movs	r3, #0
 8013ccc:	61fb      	str	r3, [r7, #28]
 8013cce:	f107 0008 	add.w	r0, r7, #8
 8013cd2:	f107 0318 	add.w	r3, r7, #24
 8013cd6:	cb0c      	ldmia	r3, {r2, r3}
 8013cd8:	6879      	ldr	r1, [r7, #4]
 8013cda:	f000 f977 	bl	8013fcc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8013cde:	f107 0308 	add.w	r3, r7, #8
 8013ce2:	4619      	mov	r1, r3
 8013ce4:	4620      	mov	r0, r4
 8013ce6:	f7ff ff85 	bl	8013bf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8013cea:	f107 0308 	add.w	r3, r7, #8
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f001 f92c 	bl	8014f4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8013d00:	bf00      	nop
 8013d02:	3724      	adds	r7, #36	; 0x24
 8013d04:	46bd      	mov	sp, r7
 8013d06:	bd90      	pop	{r4, r7, pc}
 8013d08:	08013d0d 	.word	0x08013d0d

08013d0c <_ZN23FrontendApplicationBase38gotoMainScreenSlideTransitionNorthImplEv>:

void FrontendApplicationBase::gotoMainScreenSlideTransitionNorthImpl()
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b084      	sub	sp, #16
 8013d10:	af02      	add	r7, sp, #8
 8013d12:	6078      	str	r0, [r7, #4]
    makeTransition<MainView, MainPresenter, touchgfx::SlideTransition<NORTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8013d20:	461a      	mov	r2, r3
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8013d28:	9300      	str	r3, [sp, #0]
 8013d2a:	4b04      	ldr	r3, [pc, #16]	; (8013d3c <_ZN23FrontendApplicationBase38gotoMainScreenSlideTransitionNorthImplEv+0x30>)
 8013d2c:	4804      	ldr	r0, [pc, #16]	; (8013d40 <_ZN23FrontendApplicationBase38gotoMainScreenSlideTransitionNorthImplEv+0x34>)
 8013d2e:	f000 fa27 	bl	8014180 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8013d32:	bf00      	nop
 8013d34:	3708      	adds	r7, #8
 8013d36:	46bd      	mov	sp, r7
 8013d38:	bd80      	pop	{r7, pc}
 8013d3a:	bf00      	nop
 8013d3c:	2000a384 	.word	0x2000a384
 8013d40:	2000a380 	.word	0x2000a380

08013d44 <_ZN23FrontendApplicationBase34gotoMainScreenCoverTransitionSouthEv>:


void FrontendApplicationBase::gotoMainScreenCoverTransitionSouth()
{
 8013d44:	b590      	push	{r4, r7, lr}
 8013d46:	b089      	sub	sp, #36	; 0x24
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenCoverTransitionSouthImpl);
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8013d52:	4b10      	ldr	r3, [pc, #64]	; (8013d94 <_ZN23FrontendApplicationBase34gotoMainScreenCoverTransitionSouthEv+0x50>)
 8013d54:	61bb      	str	r3, [r7, #24]
 8013d56:	2300      	movs	r3, #0
 8013d58:	61fb      	str	r3, [r7, #28]
 8013d5a:	f107 0008 	add.w	r0, r7, #8
 8013d5e:	f107 0318 	add.w	r3, r7, #24
 8013d62:	cb0c      	ldmia	r3, {r2, r3}
 8013d64:	6879      	ldr	r1, [r7, #4]
 8013d66:	f000 f931 	bl	8013fcc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8013d6a:	f107 0308 	add.w	r3, r7, #8
 8013d6e:	4619      	mov	r1, r3
 8013d70:	4620      	mov	r0, r4
 8013d72:	f7ff ff3f 	bl	8013bf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8013d76:	f107 0308 	add.w	r3, r7, #8
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	f001 f8e6 	bl	8014f4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8013d8c:	bf00      	nop
 8013d8e:	3724      	adds	r7, #36	; 0x24
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bd90      	pop	{r4, r7, pc}
 8013d94:	08013d99 	.word	0x08013d99

08013d98 <_ZN23FrontendApplicationBase38gotoMainScreenCoverTransitionSouthImplEv>:

void FrontendApplicationBase::gotoMainScreenCoverTransitionSouthImpl()
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b084      	sub	sp, #16
 8013d9c:	af02      	add	r7, sp, #8
 8013d9e:	6078      	str	r0, [r7, #4]
    makeTransition<MainView, MainPresenter, touchgfx::CoverTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8013dac:	461a      	mov	r2, r3
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8013db4:	9300      	str	r3, [sp, #0]
 8013db6:	4b04      	ldr	r3, [pc, #16]	; (8013dc8 <_ZN23FrontendApplicationBase38gotoMainScreenCoverTransitionSouthImplEv+0x30>)
 8013db8:	4804      	ldr	r0, [pc, #16]	; (8013dcc <_ZN23FrontendApplicationBase38gotoMainScreenCoverTransitionSouthImplEv+0x34>)
 8013dba:	f000 fa9d 	bl	80142f8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8013dbe:	bf00      	nop
 8013dc0:	3708      	adds	r7, #8
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	bd80      	pop	{r7, pc}
 8013dc6:	bf00      	nop
 8013dc8:	2000a384 	.word	0x2000a384
 8013dcc:	2000a380 	.word	0x2000a380

08013dd0 <_ZN23FrontendApplicationBase28gotoLoggerScreenNoTransitionEv>:

// Logger

void FrontendApplicationBase::gotoLoggerScreenNoTransition()
{
 8013dd0:	b590      	push	{r4, r7, lr}
 8013dd2:	b089      	sub	sp, #36	; 0x24
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoLoggerScreenNoTransitionImpl);
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8013dde:	4b10      	ldr	r3, [pc, #64]	; (8013e20 <_ZN23FrontendApplicationBase28gotoLoggerScreenNoTransitionEv+0x50>)
 8013de0:	61bb      	str	r3, [r7, #24]
 8013de2:	2300      	movs	r3, #0
 8013de4:	61fb      	str	r3, [r7, #28]
 8013de6:	f107 0008 	add.w	r0, r7, #8
 8013dea:	f107 0318 	add.w	r3, r7, #24
 8013dee:	cb0c      	ldmia	r3, {r2, r3}
 8013df0:	6879      	ldr	r1, [r7, #4]
 8013df2:	f000 f8eb 	bl	8013fcc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8013df6:	f107 0308 	add.w	r3, r7, #8
 8013dfa:	4619      	mov	r1, r3
 8013dfc:	4620      	mov	r0, r4
 8013dfe:	f7ff fef9 	bl	8013bf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8013e02:	f107 0308 	add.w	r3, r7, #8
 8013e06:	4618      	mov	r0, r3
 8013e08:	f001 f8a0 	bl	8014f4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8013e18:	bf00      	nop
 8013e1a:	3724      	adds	r7, #36	; 0x24
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	bd90      	pop	{r4, r7, pc}
 8013e20:	08013e25 	.word	0x08013e25

08013e24 <_ZN23FrontendApplicationBase32gotoLoggerScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoLoggerScreenNoTransitionImpl()
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b084      	sub	sp, #16
 8013e28:	af02      	add	r7, sp, #8
 8013e2a:	6078      	str	r0, [r7, #4]
    makeTransition<LoggerView, LoggerPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8013e38:	461a      	mov	r2, r3
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8013e40:	9300      	str	r3, [sp, #0]
 8013e42:	4b04      	ldr	r3, [pc, #16]	; (8013e54 <_ZN23FrontendApplicationBase32gotoLoggerScreenNoTransitionImplEv+0x30>)
 8013e44:	4804      	ldr	r0, [pc, #16]	; (8013e58 <_ZN23FrontendApplicationBase32gotoLoggerScreenNoTransitionImplEv+0x34>)
 8013e46:	f000 fb13 	bl	8014470 <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8013e4a:	bf00      	nop
 8013e4c:	3708      	adds	r7, #8
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	bd80      	pop	{r7, pc}
 8013e52:	bf00      	nop
 8013e54:	2000a384 	.word	0x2000a384
 8013e58:	2000a380 	.word	0x2000a380

08013e5c <_ZN23FrontendApplicationBase29gotoNetworkScreenNoTransitionEv>:

// Network

void FrontendApplicationBase::gotoNetworkScreenNoTransition()
{
 8013e5c:	b590      	push	{r4, r7, lr}
 8013e5e:	b089      	sub	sp, #36	; 0x24
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoNetworkScreenNoTransitionImpl);
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8013e6a:	4b10      	ldr	r3, [pc, #64]	; (8013eac <_ZN23FrontendApplicationBase29gotoNetworkScreenNoTransitionEv+0x50>)
 8013e6c:	61bb      	str	r3, [r7, #24]
 8013e6e:	2300      	movs	r3, #0
 8013e70:	61fb      	str	r3, [r7, #28]
 8013e72:	f107 0008 	add.w	r0, r7, #8
 8013e76:	f107 0318 	add.w	r3, r7, #24
 8013e7a:	cb0c      	ldmia	r3, {r2, r3}
 8013e7c:	6879      	ldr	r1, [r7, #4]
 8013e7e:	f000 f8a5 	bl	8013fcc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8013e82:	f107 0308 	add.w	r3, r7, #8
 8013e86:	4619      	mov	r1, r3
 8013e88:	4620      	mov	r0, r4
 8013e8a:	f7ff feb3 	bl	8013bf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8013e8e:	f107 0308 	add.w	r3, r7, #8
 8013e92:	4618      	mov	r0, r3
 8013e94:	f001 f85a 	bl	8014f4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8013ea4:	bf00      	nop
 8013ea6:	3724      	adds	r7, #36	; 0x24
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd90      	pop	{r4, r7, pc}
 8013eac:	08013eb1 	.word	0x08013eb1

08013eb0 <_ZN23FrontendApplicationBase33gotoNetworkScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoNetworkScreenNoTransitionImpl()
{
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b084      	sub	sp, #16
 8013eb4:	af02      	add	r7, sp, #8
 8013eb6:	6078      	str	r0, [r7, #4]
    makeTransition<NetworkView, NetworkPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8013ec4:	461a      	mov	r2, r3
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8013ecc:	9300      	str	r3, [sp, #0]
 8013ece:	4b04      	ldr	r3, [pc, #16]	; (8013ee0 <_ZN23FrontendApplicationBase33gotoNetworkScreenNoTransitionImplEv+0x30>)
 8013ed0:	4804      	ldr	r0, [pc, #16]	; (8013ee4 <_ZN23FrontendApplicationBase33gotoNetworkScreenNoTransitionImplEv+0x34>)
 8013ed2:	f000 fb87 	bl	80145e4 <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8013ed6:	bf00      	nop
 8013ed8:	3708      	adds	r7, #8
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd80      	pop	{r7, pc}
 8013ede:	bf00      	nop
 8013ee0:	2000a384 	.word	0x2000a384
 8013ee4:	2000a380 	.word	0x2000a380

08013ee8 <_ZN23FrontendApplicationBase31gotoIOControlScreenNoTransitionEv>:

// IOControl

void FrontendApplicationBase::gotoIOControlScreenNoTransition()
{
 8013ee8:	b590      	push	{r4, r7, lr}
 8013eea:	b089      	sub	sp, #36	; 0x24
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoIOControlScreenNoTransitionImpl);
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8013ef6:	4b10      	ldr	r3, [pc, #64]	; (8013f38 <_ZN23FrontendApplicationBase31gotoIOControlScreenNoTransitionEv+0x50>)
 8013ef8:	61bb      	str	r3, [r7, #24]
 8013efa:	2300      	movs	r3, #0
 8013efc:	61fb      	str	r3, [r7, #28]
 8013efe:	f107 0008 	add.w	r0, r7, #8
 8013f02:	f107 0318 	add.w	r3, r7, #24
 8013f06:	cb0c      	ldmia	r3, {r2, r3}
 8013f08:	6879      	ldr	r1, [r7, #4]
 8013f0a:	f000 f85f 	bl	8013fcc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8013f0e:	f107 0308 	add.w	r3, r7, #8
 8013f12:	4619      	mov	r1, r3
 8013f14:	4620      	mov	r0, r4
 8013f16:	f7ff fe6d 	bl	8013bf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8013f1a:	f107 0308 	add.w	r3, r7, #8
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f001 f814 	bl	8014f4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8013f30:	bf00      	nop
 8013f32:	3724      	adds	r7, #36	; 0x24
 8013f34:	46bd      	mov	sp, r7
 8013f36:	bd90      	pop	{r4, r7, pc}
 8013f38:	08013f3d 	.word	0x08013f3d

08013f3c <_ZN23FrontendApplicationBase35gotoIOControlScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoIOControlScreenNoTransitionImpl()
{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b084      	sub	sp, #16
 8013f40:	af02      	add	r7, sp, #8
 8013f42:	6078      	str	r0, [r7, #4]
    makeTransition<IOControlView, IOControlPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8013f50:	461a      	mov	r2, r3
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8013f58:	9300      	str	r3, [sp, #0]
 8013f5a:	4b04      	ldr	r3, [pc, #16]	; (8013f6c <_ZN23FrontendApplicationBase35gotoIOControlScreenNoTransitionImplEv+0x30>)
 8013f5c:	4804      	ldr	r0, [pc, #16]	; (8013f70 <_ZN23FrontendApplicationBase35gotoIOControlScreenNoTransitionImplEv+0x34>)
 8013f5e:	f000 fbfb 	bl	8014758 <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8013f62:	bf00      	nop
 8013f64:	3708      	adds	r7, #8
 8013f66:	46bd      	mov	sp, r7
 8013f68:	bd80      	pop	{r7, pc}
 8013f6a:	bf00      	nop
 8013f6c:	2000a384 	.word	0x2000a384
 8013f70:	2000a380 	.word	0x2000a380

08013f74 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8013f74:	b480      	push	{r7}
 8013f76:	b083      	sub	sp, #12
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
 8013f7c:	4a04      	ldr	r2, [pc, #16]	; (8013f90 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	601a      	str	r2, [r3, #0]
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	4618      	mov	r0, r3
 8013f86:	370c      	adds	r7, #12
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8e:	4770      	bx	lr
 8013f90:	080233f8 	.word	0x080233f8

08013f94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b082      	sub	sp, #8
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f7ff ffe8 	bl	8013f74 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8013fa4:	4a08      	ldr	r2, [pc, #32]	; (8013fc8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	601a      	str	r2, [r3, #0]
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	2200      	movs	r2, #0
 8013fae:	605a      	str	r2, [r3, #4]
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	609a      	str	r2, [r3, #8]
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	2200      	movs	r2, #0
 8013fba:	60da      	str	r2, [r3, #12]
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	3708      	adds	r7, #8
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}
 8013fc6:	bf00      	nop
 8013fc8:	080233a4 	.word	0x080233a4

08013fcc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b084      	sub	sp, #16
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	60f8      	str	r0, [r7, #12]
 8013fd4:	60b9      	str	r1, [r7, #8]
 8013fd6:	4639      	mov	r1, r7
 8013fd8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	4618      	mov	r0, r3
 8013fe0:	f7ff ffc8 	bl	8013f74 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8013fe4:	4a08      	ldr	r2, [pc, #32]	; (8014008 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	68ba      	ldr	r2, [r7, #8]
 8013fee:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	3308      	adds	r3, #8
 8013ff4:	463a      	mov	r2, r7
 8013ff6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013ffa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	4618      	mov	r0, r3
 8014002:	3710      	adds	r7, #16
 8014004:	46bd      	mov	sp, r7
 8014006:	bd80      	pop	{r7, pc}
 8014008:	080233a4 	.word	0x080233a4

0801400c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801400c:	b590      	push	{r4, r7, lr}
 801400e:	b089      	sub	sp, #36	; 0x24
 8014010:	af00      	add	r7, sp, #0
 8014012:	60f8      	str	r0, [r7, #12]
 8014014:	60b9      	str	r1, [r7, #8]
 8014016:	607a      	str	r2, [r7, #4]
 8014018:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	689a      	ldr	r2, [r3, #8]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	689b      	ldr	r3, [r3, #8]
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	3320      	adds	r3, #32
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	4610      	mov	r0, r2
 801402a:	4798      	blx	r3
 801402c:	4603      	mov	r3, r0
 801402e:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8014032:	d205      	bcs.n	8014040 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8014034:	4b4d      	ldr	r3, [pc, #308]	; (801416c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 8014036:	4a4e      	ldr	r2, [pc, #312]	; (8014170 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8014038:	21c2      	movs	r1, #194	; 0xc2
 801403a:	484e      	ldr	r0, [pc, #312]	; (8014174 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801403c:	f00d f8bc 	bl	80211b8 <__assert_func>
 8014040:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	685a      	ldr	r2, [r3, #4]
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	685b      	ldr	r3, [r3, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	3320      	adds	r3, #32
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	4610      	mov	r0, r2
 8014052:	4798      	blx	r3
 8014054:	4603      	mov	r3, r0
 8014056:	2b0f      	cmp	r3, #15
 8014058:	d805      	bhi.n	8014066 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 801405a:	4b47      	ldr	r3, [pc, #284]	; (8014178 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801405c:	4a44      	ldr	r2, [pc, #272]	; (8014170 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801405e:	21c3      	movs	r1, #195	; 0xc3
 8014060:	4844      	ldr	r0, [pc, #272]	; (8014174 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8014062:	f00d f8a9 	bl	80211b8 <__assert_func>
 8014066:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	68da      	ldr	r2, [r3, #12]
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	68db      	ldr	r3, [r3, #12]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	3320      	adds	r3, #32
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	4610      	mov	r0, r2
 8014078:	4798      	blx	r3
 801407a:	4603      	mov	r3, r0
 801407c:	2b0b      	cmp	r3, #11
 801407e:	d805      	bhi.n	801408c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8014080:	4b3e      	ldr	r3, [pc, #248]	; (801417c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8014082:	4a3b      	ldr	r2, [pc, #236]	; (8014170 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8014084:	21c4      	movs	r1, #196	; 0xc4
 8014086:	483b      	ldr	r0, [pc, #236]	; (8014174 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8014088:	f00d f896 	bl	80211b8 <__assert_func>
 801408c:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 801408e:	683a      	ldr	r2, [r7, #0]
 8014090:	68b9      	ldr	r1, [r7, #8]
 8014092:	68f8      	ldr	r0, [r7, #12]
 8014094:	f7ff fc71 	bl	801397a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	68db      	ldr	r3, [r3, #12]
 801409c:	2100      	movs	r1, #0
 801409e:	4618      	mov	r0, r3
 80140a0:	f000 fc14 	bl	80148cc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80140a4:	4603      	mov	r3, r0
 80140a6:	4619      	mov	r1, r3
 80140a8:	200c      	movs	r0, #12
 80140aa:	f7ff fac9 	bl	8013640 <_ZnwjPv>
 80140ae:	4604      	mov	r4, r0
 80140b0:	2c00      	cmp	r4, #0
 80140b2:	d004      	beq.n	80140be <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 80140b4:	4620      	mov	r0, r4
 80140b6:	f7ff fd1b 	bl	8013af0 <_ZN8touchgfx12NoTransitionC1Ev>
 80140ba:	4623      	mov	r3, r4
 80140bc:	e000      	b.n	80140c0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 80140be:	4623      	mov	r3, r4
 80140c0:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	689b      	ldr	r3, [r3, #8]
 80140c6:	2100      	movs	r1, #0
 80140c8:	4618      	mov	r0, r3
 80140ca:	f000 fc12 	bl	80148f2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 80140ce:	4603      	mov	r3, r0
 80140d0:	4619      	mov	r1, r3
 80140d2:	f44f 60af 	mov.w	r0, #1400	; 0x578
 80140d6:	f7ff fab3 	bl	8013640 <_ZnwjPv>
 80140da:	4604      	mov	r4, r0
 80140dc:	2c00      	cmp	r4, #0
 80140de:	d004      	beq.n	80140ea <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 80140e0:	4620      	mov	r0, r4
 80140e2:	f005 fdb7 	bl	8019c54 <_ZN8MainViewC1Ev>
 80140e6:	4623      	mov	r3, r4
 80140e8:	e000      	b.n	80140ec <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 80140ea:	4623      	mov	r3, r4
 80140ec:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	685b      	ldr	r3, [r3, #4]
 80140f2:	2100      	movs	r1, #0
 80140f4:	4618      	mov	r0, r3
 80140f6:	f000 fc0f 	bl	8014918 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 80140fa:	4603      	mov	r3, r0
 80140fc:	4619      	mov	r1, r3
 80140fe:	2010      	movs	r0, #16
 8014100:	f7ff fa9e 	bl	8013640 <_ZnwjPv>
 8014104:	4604      	mov	r4, r0
 8014106:	2c00      	cmp	r4, #0
 8014108:	d005      	beq.n	8014116 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 801410a:	69b9      	ldr	r1, [r7, #24]
 801410c:	4620      	mov	r0, r4
 801410e:	f005 fd1f 	bl	8019b50 <_ZN13MainPresenterC1ER8MainView>
 8014112:	4623      	mov	r3, r4
 8014114:	e000      	b.n	8014118 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 8014116:	4623      	mov	r3, r4
 8014118:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 801411a:	683b      	ldr	r3, [r7, #0]
 801411c:	69fa      	ldr	r2, [r7, #28]
 801411e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8014120:	68bb      	ldr	r3, [r7, #8]
 8014122:	697a      	ldr	r2, [r7, #20]
 8014124:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	69ba      	ldr	r2, [r7, #24]
 801412a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d002      	beq.n	8014138 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 8014132:	697b      	ldr	r3, [r7, #20]
 8014134:	3304      	adds	r3, #4
 8014136:	e000      	b.n	801413a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 8014138:	2300      	movs	r3, #0
 801413a:	4619      	mov	r1, r3
 801413c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801413e:	f7ff fc9f 	bl	8013a80 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	3304      	adds	r3, #4
 8014146:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014148:	4618      	mov	r0, r3
 801414a:	f7ff fd12 	bl	8013b72 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801414e:	69bb      	ldr	r3, [r7, #24]
 8014150:	6979      	ldr	r1, [r7, #20]
 8014152:	4618      	mov	r0, r3
 8014154:	f000 fbf3 	bl	801493e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8014158:	69fa      	ldr	r2, [r7, #28]
 801415a:	6979      	ldr	r1, [r7, #20]
 801415c:	69b8      	ldr	r0, [r7, #24]
 801415e:	f7ff fc68 	bl	8013a32 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 8014162:	697b      	ldr	r3, [r7, #20]
}
 8014164:	4618      	mov	r0, r3
 8014166:	3724      	adds	r7, #36	; 0x24
 8014168:	46bd      	mov	sp, r7
 801416a:	bd90      	pop	{r4, r7, pc}
 801416c:	08022434 	.word	0x08022434
 8014170:	08023450 	.word	0x08023450
 8014174:	080224c4 	.word	0x080224c4
 8014178:	08022514 	.word	0x08022514
 801417c:	080225b8 	.word	0x080225b8

08014180 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8014180:	b590      	push	{r4, r7, lr}
 8014182:	b089      	sub	sp, #36	; 0x24
 8014184:	af00      	add	r7, sp, #0
 8014186:	60f8      	str	r0, [r7, #12]
 8014188:	60b9      	str	r1, [r7, #8]
 801418a:	607a      	str	r2, [r7, #4]
 801418c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	689a      	ldr	r2, [r3, #8]
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	689b      	ldr	r3, [r3, #8]
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	3320      	adds	r3, #32
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	4610      	mov	r0, r2
 801419e:	4798      	blx	r3
 80141a0:	4603      	mov	r3, r0
 80141a2:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80141a6:	d205      	bcs.n	80141b4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80141a8:	4b4e      	ldr	r3, [pc, #312]	; (80142e4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 80141aa:	4a4f      	ldr	r2, [pc, #316]	; (80142e8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80141ac:	21c2      	movs	r1, #194	; 0xc2
 80141ae:	484f      	ldr	r0, [pc, #316]	; (80142ec <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80141b0:	f00d f802 	bl	80211b8 <__assert_func>
 80141b4:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	685a      	ldr	r2, [r3, #4]
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	685b      	ldr	r3, [r3, #4]
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	3320      	adds	r3, #32
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	4610      	mov	r0, r2
 80141c6:	4798      	blx	r3
 80141c8:	4603      	mov	r3, r0
 80141ca:	2b0f      	cmp	r3, #15
 80141cc:	d805      	bhi.n	80141da <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80141ce:	4b48      	ldr	r3, [pc, #288]	; (80142f0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 80141d0:	4a45      	ldr	r2, [pc, #276]	; (80142e8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80141d2:	21c3      	movs	r1, #195	; 0xc3
 80141d4:	4845      	ldr	r0, [pc, #276]	; (80142ec <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80141d6:	f00c ffef 	bl	80211b8 <__assert_func>
 80141da:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	68da      	ldr	r2, [r3, #12]
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	68db      	ldr	r3, [r3, #12]
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	3320      	adds	r3, #32
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	4610      	mov	r0, r2
 80141ec:	4798      	blx	r3
 80141ee:	4603      	mov	r3, r0
 80141f0:	2b57      	cmp	r3, #87	; 0x57
 80141f2:	d805      	bhi.n	8014200 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80141f4:	4b3f      	ldr	r3, [pc, #252]	; (80142f4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 80141f6:	4a3c      	ldr	r2, [pc, #240]	; (80142e8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80141f8:	21c4      	movs	r1, #196	; 0xc4
 80141fa:	483c      	ldr	r0, [pc, #240]	; (80142ec <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80141fc:	f00c ffdc 	bl	80211b8 <__assert_func>
 8014200:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8014202:	683a      	ldr	r2, [r7, #0]
 8014204:	68b9      	ldr	r1, [r7, #8]
 8014206:	68f8      	ldr	r0, [r7, #12]
 8014208:	f7ff fbb7 	bl	801397a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	68db      	ldr	r3, [r3, #12]
 8014210:	2100      	movs	r1, #0
 8014212:	4618      	mov	r0, r3
 8014214:	f000 fba1 	bl	801495a <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE0EEEEERT_t>
 8014218:	4603      	mov	r3, r0
 801421a:	4619      	mov	r1, r3
 801421c:	2058      	movs	r0, #88	; 0x58
 801421e:	f7ff fa0f 	bl	8013640 <_ZnwjPv>
 8014222:	4604      	mov	r4, r0
 8014224:	2c00      	cmp	r4, #0
 8014226:	d005      	beq.n	8014234 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 8014228:	2114      	movs	r1, #20
 801422a:	4620      	mov	r0, r4
 801422c:	f000 fbca 	bl	80149c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EEC1Eh>
 8014230:	4623      	mov	r3, r4
 8014232:	e000      	b.n	8014236 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 8014234:	4623      	mov	r3, r4
 8014236:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	689b      	ldr	r3, [r3, #8]
 801423c:	2100      	movs	r1, #0
 801423e:	4618      	mov	r0, r3
 8014240:	f000 fb57 	bl	80148f2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8014244:	4603      	mov	r3, r0
 8014246:	4619      	mov	r1, r3
 8014248:	f44f 60af 	mov.w	r0, #1400	; 0x578
 801424c:	f7ff f9f8 	bl	8013640 <_ZnwjPv>
 8014250:	4604      	mov	r4, r0
 8014252:	2c00      	cmp	r4, #0
 8014254:	d004      	beq.n	8014260 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 8014256:	4620      	mov	r0, r4
 8014258:	f005 fcfc 	bl	8019c54 <_ZN8MainViewC1Ev>
 801425c:	4623      	mov	r3, r4
 801425e:	e000      	b.n	8014262 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 8014260:	4623      	mov	r3, r4
 8014262:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	685b      	ldr	r3, [r3, #4]
 8014268:	2100      	movs	r1, #0
 801426a:	4618      	mov	r0, r3
 801426c:	f000 fb54 	bl	8014918 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8014270:	4603      	mov	r3, r0
 8014272:	4619      	mov	r1, r3
 8014274:	2010      	movs	r0, #16
 8014276:	f7ff f9e3 	bl	8013640 <_ZnwjPv>
 801427a:	4604      	mov	r4, r0
 801427c:	2c00      	cmp	r4, #0
 801427e:	d005      	beq.n	801428c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 8014280:	69b9      	ldr	r1, [r7, #24]
 8014282:	4620      	mov	r0, r4
 8014284:	f005 fc64 	bl	8019b50 <_ZN13MainPresenterC1ER8MainView>
 8014288:	4623      	mov	r3, r4
 801428a:	e000      	b.n	801428e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 801428c:	4623      	mov	r3, r4
 801428e:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8014290:	683b      	ldr	r3, [r7, #0]
 8014292:	69fa      	ldr	r2, [r7, #28]
 8014294:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8014296:	68bb      	ldr	r3, [r7, #8]
 8014298:	697a      	ldr	r2, [r7, #20]
 801429a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	69ba      	ldr	r2, [r7, #24]
 80142a0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80142a2:	697b      	ldr	r3, [r7, #20]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d002      	beq.n	80142ae <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 80142a8:	697b      	ldr	r3, [r7, #20]
 80142aa:	3304      	adds	r3, #4
 80142ac:	e000      	b.n	80142b0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 80142ae:	2300      	movs	r3, #0
 80142b0:	4619      	mov	r1, r3
 80142b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80142b4:	f7ff fbe4 	bl	8013a80 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80142b8:	697b      	ldr	r3, [r7, #20]
 80142ba:	3304      	adds	r3, #4
 80142bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80142be:	4618      	mov	r0, r3
 80142c0:	f7ff fc57 	bl	8013b72 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80142c4:	69bb      	ldr	r3, [r7, #24]
 80142c6:	6979      	ldr	r1, [r7, #20]
 80142c8:	4618      	mov	r0, r3
 80142ca:	f000 fb38 	bl	801493e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 80142ce:	69fa      	ldr	r2, [r7, #28]
 80142d0:	6979      	ldr	r1, [r7, #20]
 80142d2:	69b8      	ldr	r0, [r7, #24]
 80142d4:	f7ff fbad 	bl	8013a32 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 80142d8:	697b      	ldr	r3, [r7, #20]
}
 80142da:	4618      	mov	r0, r3
 80142dc:	3724      	adds	r7, #36	; 0x24
 80142de:	46bd      	mov	sp, r7
 80142e0:	bd90      	pop	{r4, r7, pc}
 80142e2:	bf00      	nop
 80142e4:	08022434 	.word	0x08022434
 80142e8:	08023550 	.word	0x08023550
 80142ec:	080224c4 	.word	0x080224c4
 80142f0:	08022514 	.word	0x08022514
 80142f4:	080225b8 	.word	0x080225b8

080142f8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80142f8:	b590      	push	{r4, r7, lr}
 80142fa:	b089      	sub	sp, #36	; 0x24
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	60f8      	str	r0, [r7, #12]
 8014300:	60b9      	str	r1, [r7, #8]
 8014302:	607a      	str	r2, [r7, #4]
 8014304:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	689a      	ldr	r2, [r3, #8]
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	689b      	ldr	r3, [r3, #8]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	3320      	adds	r3, #32
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	4610      	mov	r0, r2
 8014316:	4798      	blx	r3
 8014318:	4603      	mov	r3, r0
 801431a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 801431e:	d205      	bcs.n	801432c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8014320:	4b4e      	ldr	r3, [pc, #312]	; (801445c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8014322:	4a4f      	ldr	r2, [pc, #316]	; (8014460 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8014324:	21c2      	movs	r1, #194	; 0xc2
 8014326:	484f      	ldr	r0, [pc, #316]	; (8014464 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8014328:	f00c ff46 	bl	80211b8 <__assert_func>
 801432c:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	685a      	ldr	r2, [r3, #4]
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	685b      	ldr	r3, [r3, #4]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	3320      	adds	r3, #32
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	4610      	mov	r0, r2
 801433e:	4798      	blx	r3
 8014340:	4603      	mov	r3, r0
 8014342:	2b0f      	cmp	r3, #15
 8014344:	d805      	bhi.n	8014352 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8014346:	4b48      	ldr	r3, [pc, #288]	; (8014468 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8014348:	4a45      	ldr	r2, [pc, #276]	; (8014460 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801434a:	21c3      	movs	r1, #195	; 0xc3
 801434c:	4845      	ldr	r0, [pc, #276]	; (8014464 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801434e:	f00c ff33 	bl	80211b8 <__assert_func>
 8014352:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	68da      	ldr	r2, [r3, #12]
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	68db      	ldr	r3, [r3, #12]
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	3320      	adds	r3, #32
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	4610      	mov	r0, r2
 8014364:	4798      	blx	r3
 8014366:	4603      	mov	r3, r0
 8014368:	2b4f      	cmp	r3, #79	; 0x4f
 801436a:	d805      	bhi.n	8014378 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 801436c:	4b3f      	ldr	r3, [pc, #252]	; (801446c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 801436e:	4a3c      	ldr	r2, [pc, #240]	; (8014460 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8014370:	21c4      	movs	r1, #196	; 0xc4
 8014372:	483c      	ldr	r0, [pc, #240]	; (8014464 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8014374:	f00c ff20 	bl	80211b8 <__assert_func>
 8014378:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 801437a:	683a      	ldr	r2, [r7, #0]
 801437c:	68b9      	ldr	r1, [r7, #8]
 801437e:	68f8      	ldr	r0, [r7, #12]
 8014380:	f7ff fafb 	bl	801397a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	68db      	ldr	r3, [r3, #12]
 8014388:	2100      	movs	r1, #0
 801438a:	4618      	mov	r0, r3
 801438c:	f000 fbae 	bl	8014aec <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE1EEEEERT_t>
 8014390:	4603      	mov	r3, r0
 8014392:	4619      	mov	r1, r3
 8014394:	2050      	movs	r0, #80	; 0x50
 8014396:	f7ff f953 	bl	8013640 <_ZnwjPv>
 801439a:	4604      	mov	r4, r0
 801439c:	2c00      	cmp	r4, #0
 801439e:	d005      	beq.n	80143ac <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 80143a0:	2114      	movs	r1, #20
 80143a2:	4620      	mov	r0, r4
 80143a4:	f000 fbd8 	bl	8014b58 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EEC1Eh>
 80143a8:	4623      	mov	r3, r4
 80143aa:	e000      	b.n	80143ae <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 80143ac:	4623      	mov	r3, r4
 80143ae:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	689b      	ldr	r3, [r3, #8]
 80143b4:	2100      	movs	r1, #0
 80143b6:	4618      	mov	r0, r3
 80143b8:	f000 fa9b 	bl	80148f2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 80143bc:	4603      	mov	r3, r0
 80143be:	4619      	mov	r1, r3
 80143c0:	f44f 60af 	mov.w	r0, #1400	; 0x578
 80143c4:	f7ff f93c 	bl	8013640 <_ZnwjPv>
 80143c8:	4604      	mov	r4, r0
 80143ca:	2c00      	cmp	r4, #0
 80143cc:	d004      	beq.n	80143d8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 80143ce:	4620      	mov	r0, r4
 80143d0:	f005 fc40 	bl	8019c54 <_ZN8MainViewC1Ev>
 80143d4:	4623      	mov	r3, r4
 80143d6:	e000      	b.n	80143da <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 80143d8:	4623      	mov	r3, r4
 80143da:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	685b      	ldr	r3, [r3, #4]
 80143e0:	2100      	movs	r1, #0
 80143e2:	4618      	mov	r0, r3
 80143e4:	f000 fa98 	bl	8014918 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 80143e8:	4603      	mov	r3, r0
 80143ea:	4619      	mov	r1, r3
 80143ec:	2010      	movs	r0, #16
 80143ee:	f7ff f927 	bl	8013640 <_ZnwjPv>
 80143f2:	4604      	mov	r4, r0
 80143f4:	2c00      	cmp	r4, #0
 80143f6:	d005      	beq.n	8014404 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 80143f8:	69b9      	ldr	r1, [r7, #24]
 80143fa:	4620      	mov	r0, r4
 80143fc:	f005 fba8 	bl	8019b50 <_ZN13MainPresenterC1ER8MainView>
 8014400:	4623      	mov	r3, r4
 8014402:	e000      	b.n	8014406 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 8014404:	4623      	mov	r3, r4
 8014406:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	69fa      	ldr	r2, [r7, #28]
 801440c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801440e:	68bb      	ldr	r3, [r7, #8]
 8014410:	697a      	ldr	r2, [r7, #20]
 8014412:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	69ba      	ldr	r2, [r7, #24]
 8014418:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801441a:	697b      	ldr	r3, [r7, #20]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d002      	beq.n	8014426 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 8014420:	697b      	ldr	r3, [r7, #20]
 8014422:	3304      	adds	r3, #4
 8014424:	e000      	b.n	8014428 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15CoverTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 8014426:	2300      	movs	r3, #0
 8014428:	4619      	mov	r1, r3
 801442a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801442c:	f7ff fb28 	bl	8013a80 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8014430:	697b      	ldr	r3, [r7, #20]
 8014432:	3304      	adds	r3, #4
 8014434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014436:	4618      	mov	r0, r3
 8014438:	f7ff fb9b 	bl	8013b72 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801443c:	69bb      	ldr	r3, [r7, #24]
 801443e:	6979      	ldr	r1, [r7, #20]
 8014440:	4618      	mov	r0, r3
 8014442:	f000 fa7c 	bl	801493e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8014446:	69fa      	ldr	r2, [r7, #28]
 8014448:	6979      	ldr	r1, [r7, #20]
 801444a:	69b8      	ldr	r0, [r7, #24]
 801444c:	f7ff faf1 	bl	8013a32 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 8014450:	697b      	ldr	r3, [r7, #20]
}
 8014452:	4618      	mov	r0, r3
 8014454:	3724      	adds	r7, #36	; 0x24
 8014456:	46bd      	mov	sp, r7
 8014458:	bd90      	pop	{r4, r7, pc}
 801445a:	bf00      	nop
 801445c:	08022434 	.word	0x08022434
 8014460:	0802366c 	.word	0x0802366c
 8014464:	080224c4 	.word	0x080224c4
 8014468:	08022514 	.word	0x08022514
 801446c:	080225b8 	.word	0x080225b8

08014470 <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8014470:	b590      	push	{r4, r7, lr}
 8014472:	b089      	sub	sp, #36	; 0x24
 8014474:	af00      	add	r7, sp, #0
 8014476:	60f8      	str	r0, [r7, #12]
 8014478:	60b9      	str	r1, [r7, #8]
 801447a:	607a      	str	r2, [r7, #4]
 801447c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	689a      	ldr	r2, [r3, #8]
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	689b      	ldr	r3, [r3, #8]
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	3320      	adds	r3, #32
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	4610      	mov	r0, r2
 801448e:	4798      	blx	r3
 8014490:	4603      	mov	r3, r0
 8014492:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8014496:	d205      	bcs.n	80144a4 <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8014498:	4b4d      	ldr	r3, [pc, #308]	; (80145d0 <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 801449a:	4a4e      	ldr	r2, [pc, #312]	; (80145d4 <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801449c:	21c2      	movs	r1, #194	; 0xc2
 801449e:	484e      	ldr	r0, [pc, #312]	; (80145d8 <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80144a0:	f00c fe8a 	bl	80211b8 <__assert_func>
 80144a4:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	685a      	ldr	r2, [r3, #4]
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	685b      	ldr	r3, [r3, #4]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	3320      	adds	r3, #32
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	4610      	mov	r0, r2
 80144b6:	4798      	blx	r3
 80144b8:	4603      	mov	r3, r0
 80144ba:	2b0f      	cmp	r3, #15
 80144bc:	d805      	bhi.n	80144ca <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80144be:	4b47      	ldr	r3, [pc, #284]	; (80145dc <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80144c0:	4a44      	ldr	r2, [pc, #272]	; (80145d4 <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 80144c2:	21c3      	movs	r1, #195	; 0xc3
 80144c4:	4844      	ldr	r0, [pc, #272]	; (80145d8 <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80144c6:	f00c fe77 	bl	80211b8 <__assert_func>
 80144ca:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	68da      	ldr	r2, [r3, #12]
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	68db      	ldr	r3, [r3, #12]
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	3320      	adds	r3, #32
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	4610      	mov	r0, r2
 80144dc:	4798      	blx	r3
 80144de:	4603      	mov	r3, r0
 80144e0:	2b0b      	cmp	r3, #11
 80144e2:	d805      	bhi.n	80144f0 <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80144e4:	4b3e      	ldr	r3, [pc, #248]	; (80145e0 <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 80144e6:	4a3b      	ldr	r2, [pc, #236]	; (80145d4 <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 80144e8:	21c4      	movs	r1, #196	; 0xc4
 80144ea:	483b      	ldr	r0, [pc, #236]	; (80145d8 <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80144ec:	f00c fe64 	bl	80211b8 <__assert_func>
 80144f0:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 80144f2:	683a      	ldr	r2, [r7, #0]
 80144f4:	68b9      	ldr	r1, [r7, #8]
 80144f6:	68f8      	ldr	r0, [r7, #12]
 80144f8:	f7ff fa3f 	bl	801397a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	68db      	ldr	r3, [r3, #12]
 8014500:	2100      	movs	r1, #0
 8014502:	4618      	mov	r0, r3
 8014504:	f000 f9e2 	bl	80148cc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8014508:	4603      	mov	r3, r0
 801450a:	4619      	mov	r1, r3
 801450c:	200c      	movs	r0, #12
 801450e:	f7ff f897 	bl	8013640 <_ZnwjPv>
 8014512:	4604      	mov	r4, r0
 8014514:	2c00      	cmp	r4, #0
 8014516:	d004      	beq.n	8014522 <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 8014518:	4620      	mov	r0, r4
 801451a:	f7ff fae9 	bl	8013af0 <_ZN8touchgfx12NoTransitionC1Ev>
 801451e:	4623      	mov	r3, r4
 8014520:	e000      	b.n	8014524 <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 8014522:	4623      	mov	r3, r4
 8014524:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	689b      	ldr	r3, [r3, #8]
 801452a:	2100      	movs	r1, #0
 801452c:	4618      	mov	r0, r3
 801452e:	f000 fb91 	bl	8014c54 <_ZN8touchgfx17AbstractPartition2atI10LoggerViewEERT_t>
 8014532:	4603      	mov	r3, r0
 8014534:	4619      	mov	r1, r3
 8014536:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
 801453a:	f7ff f881 	bl	8013640 <_ZnwjPv>
 801453e:	4604      	mov	r4, r0
 8014540:	2c00      	cmp	r4, #0
 8014542:	d004      	beq.n	801454e <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 8014544:	4620      	mov	r0, r4
 8014546:	f005 fa65 	bl	8019a14 <_ZN10LoggerViewC1Ev>
 801454a:	4623      	mov	r3, r4
 801454c:	e000      	b.n	8014550 <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 801454e:	4623      	mov	r3, r4
 8014550:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	685b      	ldr	r3, [r3, #4]
 8014556:	2100      	movs	r1, #0
 8014558:	4618      	mov	r0, r3
 801455a:	f000 fb8e 	bl	8014c7a <_ZN8touchgfx17AbstractPartition2atI15LoggerPresenterEERT_t>
 801455e:	4603      	mov	r3, r0
 8014560:	4619      	mov	r1, r3
 8014562:	2010      	movs	r0, #16
 8014564:	f7ff f86c 	bl	8013640 <_ZnwjPv>
 8014568:	4604      	mov	r4, r0
 801456a:	2c00      	cmp	r4, #0
 801456c:	d005      	beq.n	801457a <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 801456e:	69b9      	ldr	r1, [r7, #24]
 8014570:	4620      	mov	r0, r4
 8014572:	f005 f9b5 	bl	80198e0 <_ZN15LoggerPresenterC1ER10LoggerView>
 8014576:	4623      	mov	r3, r4
 8014578:	e000      	b.n	801457c <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 801457a:	4623      	mov	r3, r4
 801457c:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 801457e:	683b      	ldr	r3, [r7, #0]
 8014580:	69fa      	ldr	r2, [r7, #28]
 8014582:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8014584:	68bb      	ldr	r3, [r7, #8]
 8014586:	697a      	ldr	r2, [r7, #20]
 8014588:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	69ba      	ldr	r2, [r7, #24]
 801458e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8014590:	697b      	ldr	r3, [r7, #20]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d002      	beq.n	801459c <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 8014596:	697b      	ldr	r3, [r7, #20]
 8014598:	3304      	adds	r3, #4
 801459a:	e000      	b.n	801459e <_ZN8touchgfx14makeTransitionI10LoggerView15LoggerPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 801459c:	2300      	movs	r3, #0
 801459e:	4619      	mov	r1, r3
 80145a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80145a2:	f7ff fa6d 	bl	8013a80 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80145a6:	697b      	ldr	r3, [r7, #20]
 80145a8:	3304      	adds	r3, #4
 80145aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80145ac:	4618      	mov	r0, r3
 80145ae:	f7ff fae0 	bl	8013b72 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80145b2:	69bb      	ldr	r3, [r7, #24]
 80145b4:	6979      	ldr	r1, [r7, #20]
 80145b6:	4618      	mov	r0, r3
 80145b8:	f000 fb72 	bl	8014ca0 <_ZN8touchgfx4ViewI15LoggerPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 80145bc:	69fa      	ldr	r2, [r7, #28]
 80145be:	6979      	ldr	r1, [r7, #20]
 80145c0:	69b8      	ldr	r0, [r7, #24]
 80145c2:	f7ff fa36 	bl	8013a32 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 80145c6:	697b      	ldr	r3, [r7, #20]
}
 80145c8:	4618      	mov	r0, r3
 80145ca:	3724      	adds	r7, #36	; 0x24
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd90      	pop	{r4, r7, pc}
 80145d0:	08022434 	.word	0x08022434
 80145d4:	08023788 	.word	0x08023788
 80145d8:	080224c4 	.word	0x080224c4
 80145dc:	08022514 	.word	0x08022514
 80145e0:	080225b8 	.word	0x080225b8

080145e4 <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80145e4:	b590      	push	{r4, r7, lr}
 80145e6:	b089      	sub	sp, #36	; 0x24
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	60f8      	str	r0, [r7, #12]
 80145ec:	60b9      	str	r1, [r7, #8]
 80145ee:	607a      	str	r2, [r7, #4]
 80145f0:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	689a      	ldr	r2, [r3, #8]
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	689b      	ldr	r3, [r3, #8]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	3320      	adds	r3, #32
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	4610      	mov	r0, r2
 8014602:	4798      	blx	r3
 8014604:	4603      	mov	r3, r0
 8014606:	f5b3 7f4f 	cmp.w	r3, #828	; 0x33c
 801460a:	d205      	bcs.n	8014618 <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 801460c:	4b4d      	ldr	r3, [pc, #308]	; (8014744 <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 801460e:	4a4e      	ldr	r2, [pc, #312]	; (8014748 <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8014610:	21c2      	movs	r1, #194	; 0xc2
 8014612:	484e      	ldr	r0, [pc, #312]	; (801474c <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8014614:	f00c fdd0 	bl	80211b8 <__assert_func>
 8014618:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	685a      	ldr	r2, [r3, #4]
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	685b      	ldr	r3, [r3, #4]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	3320      	adds	r3, #32
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	4610      	mov	r0, r2
 801462a:	4798      	blx	r3
 801462c:	4603      	mov	r3, r0
 801462e:	2b0f      	cmp	r3, #15
 8014630:	d805      	bhi.n	801463e <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8014632:	4b47      	ldr	r3, [pc, #284]	; (8014750 <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8014634:	4a44      	ldr	r2, [pc, #272]	; (8014748 <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8014636:	21c3      	movs	r1, #195	; 0xc3
 8014638:	4844      	ldr	r0, [pc, #272]	; (801474c <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801463a:	f00c fdbd 	bl	80211b8 <__assert_func>
 801463e:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	68da      	ldr	r2, [r3, #12]
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	68db      	ldr	r3, [r3, #12]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	3320      	adds	r3, #32
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	4610      	mov	r0, r2
 8014650:	4798      	blx	r3
 8014652:	4603      	mov	r3, r0
 8014654:	2b0b      	cmp	r3, #11
 8014656:	d805      	bhi.n	8014664 <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8014658:	4b3e      	ldr	r3, [pc, #248]	; (8014754 <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 801465a:	4a3b      	ldr	r2, [pc, #236]	; (8014748 <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801465c:	21c4      	movs	r1, #196	; 0xc4
 801465e:	483b      	ldr	r0, [pc, #236]	; (801474c <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8014660:	f00c fdaa 	bl	80211b8 <__assert_func>
 8014664:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8014666:	683a      	ldr	r2, [r7, #0]
 8014668:	68b9      	ldr	r1, [r7, #8]
 801466a:	68f8      	ldr	r0, [r7, #12]
 801466c:	f7ff f985 	bl	801397a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	68db      	ldr	r3, [r3, #12]
 8014674:	2100      	movs	r1, #0
 8014676:	4618      	mov	r0, r3
 8014678:	f000 f928 	bl	80148cc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 801467c:	4603      	mov	r3, r0
 801467e:	4619      	mov	r1, r3
 8014680:	200c      	movs	r0, #12
 8014682:	f7fe ffdd 	bl	8013640 <_ZnwjPv>
 8014686:	4604      	mov	r4, r0
 8014688:	2c00      	cmp	r4, #0
 801468a:	d004      	beq.n	8014696 <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 801468c:	4620      	mov	r0, r4
 801468e:	f7ff fa2f 	bl	8013af0 <_ZN8touchgfx12NoTransitionC1Ev>
 8014692:	4623      	mov	r3, r4
 8014694:	e000      	b.n	8014698 <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 8014696:	4623      	mov	r3, r4
 8014698:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	689b      	ldr	r3, [r3, #8]
 801469e:	2100      	movs	r1, #0
 80146a0:	4618      	mov	r0, r3
 80146a2:	f000 fb0b 	bl	8014cbc <_ZN8touchgfx17AbstractPartition2atI11NetworkViewEERT_t>
 80146a6:	4603      	mov	r3, r0
 80146a8:	4619      	mov	r1, r3
 80146aa:	f44f 704f 	mov.w	r0, #828	; 0x33c
 80146ae:	f7fe ffc7 	bl	8013640 <_ZnwjPv>
 80146b2:	4604      	mov	r4, r0
 80146b4:	2c00      	cmp	r4, #0
 80146b6:	d004      	beq.n	80146c2 <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 80146b8:	4620      	mov	r0, r4
 80146ba:	f005 fe03 	bl	801a2c4 <_ZN11NetworkViewC1Ev>
 80146be:	4623      	mov	r3, r4
 80146c0:	e000      	b.n	80146c4 <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 80146c2:	4623      	mov	r3, r4
 80146c4:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	685b      	ldr	r3, [r3, #4]
 80146ca:	2100      	movs	r1, #0
 80146cc:	4618      	mov	r0, r3
 80146ce:	f000 fb08 	bl	8014ce2 <_ZN8touchgfx17AbstractPartition2atI16NetworkPresenterEERT_t>
 80146d2:	4603      	mov	r3, r0
 80146d4:	4619      	mov	r1, r3
 80146d6:	2010      	movs	r0, #16
 80146d8:	f7fe ffb2 	bl	8013640 <_ZnwjPv>
 80146dc:	4604      	mov	r4, r0
 80146de:	2c00      	cmp	r4, #0
 80146e0:	d005      	beq.n	80146ee <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 80146e2:	69b9      	ldr	r1, [r7, #24]
 80146e4:	4620      	mov	r0, r4
 80146e6:	f005 fd61 	bl	801a1ac <_ZN16NetworkPresenterC1ER11NetworkView>
 80146ea:	4623      	mov	r3, r4
 80146ec:	e000      	b.n	80146f0 <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 80146ee:	4623      	mov	r3, r4
 80146f0:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 80146f2:	683b      	ldr	r3, [r7, #0]
 80146f4:	69fa      	ldr	r2, [r7, #28]
 80146f6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80146f8:	68bb      	ldr	r3, [r7, #8]
 80146fa:	697a      	ldr	r2, [r7, #20]
 80146fc:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	69ba      	ldr	r2, [r7, #24]
 8014702:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8014704:	697b      	ldr	r3, [r7, #20]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d002      	beq.n	8014710 <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 801470a:	697b      	ldr	r3, [r7, #20]
 801470c:	3304      	adds	r3, #4
 801470e:	e000      	b.n	8014712 <_ZN8touchgfx14makeTransitionI11NetworkView16NetworkPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 8014710:	2300      	movs	r3, #0
 8014712:	4619      	mov	r1, r3
 8014714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014716:	f7ff f9b3 	bl	8013a80 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801471a:	697b      	ldr	r3, [r7, #20]
 801471c:	3304      	adds	r3, #4
 801471e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014720:	4618      	mov	r0, r3
 8014722:	f7ff fa26 	bl	8013b72 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8014726:	69bb      	ldr	r3, [r7, #24]
 8014728:	6979      	ldr	r1, [r7, #20]
 801472a:	4618      	mov	r0, r3
 801472c:	f000 faec 	bl	8014d08 <_ZN8touchgfx4ViewI16NetworkPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8014730:	69fa      	ldr	r2, [r7, #28]
 8014732:	6979      	ldr	r1, [r7, #20]
 8014734:	69b8      	ldr	r0, [r7, #24]
 8014736:	f7ff f97c 	bl	8013a32 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 801473a:	697b      	ldr	r3, [r7, #20]
}
 801473c:	4618      	mov	r0, r3
 801473e:	3724      	adds	r7, #36	; 0x24
 8014740:	46bd      	mov	sp, r7
 8014742:	bd90      	pop	{r4, r7, pc}
 8014744:	08022434 	.word	0x08022434
 8014748:	0802388c 	.word	0x0802388c
 801474c:	080224c4 	.word	0x080224c4
 8014750:	08022514 	.word	0x08022514
 8014754:	080225b8 	.word	0x080225b8

08014758 <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8014758:	b590      	push	{r4, r7, lr}
 801475a:	b089      	sub	sp, #36	; 0x24
 801475c:	af00      	add	r7, sp, #0
 801475e:	60f8      	str	r0, [r7, #12]
 8014760:	60b9      	str	r1, [r7, #8]
 8014762:	607a      	str	r2, [r7, #4]
 8014764:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	689a      	ldr	r2, [r3, #8]
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	689b      	ldr	r3, [r3, #8]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	3320      	adds	r3, #32
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	4610      	mov	r0, r2
 8014776:	4798      	blx	r3
 8014778:	4603      	mov	r3, r0
 801477a:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 801477e:	d205      	bcs.n	801478c <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8014780:	4b4d      	ldr	r3, [pc, #308]	; (80148b8 <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 8014782:	4a4e      	ldr	r2, [pc, #312]	; (80148bc <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8014784:	21c2      	movs	r1, #194	; 0xc2
 8014786:	484e      	ldr	r0, [pc, #312]	; (80148c0 <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8014788:	f00c fd16 	bl	80211b8 <__assert_func>
 801478c:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	685a      	ldr	r2, [r3, #4]
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	685b      	ldr	r3, [r3, #4]
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	3320      	adds	r3, #32
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	4610      	mov	r0, r2
 801479e:	4798      	blx	r3
 80147a0:	4603      	mov	r3, r0
 80147a2:	2b0f      	cmp	r3, #15
 80147a4:	d805      	bhi.n	80147b2 <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80147a6:	4b47      	ldr	r3, [pc, #284]	; (80148c4 <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80147a8:	4a44      	ldr	r2, [pc, #272]	; (80148bc <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 80147aa:	21c3      	movs	r1, #195	; 0xc3
 80147ac:	4844      	ldr	r0, [pc, #272]	; (80148c0 <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80147ae:	f00c fd03 	bl	80211b8 <__assert_func>
 80147b2:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	68da      	ldr	r2, [r3, #12]
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	68db      	ldr	r3, [r3, #12]
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	3320      	adds	r3, #32
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	4610      	mov	r0, r2
 80147c4:	4798      	blx	r3
 80147c6:	4603      	mov	r3, r0
 80147c8:	2b0b      	cmp	r3, #11
 80147ca:	d805      	bhi.n	80147d8 <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80147cc:	4b3e      	ldr	r3, [pc, #248]	; (80148c8 <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 80147ce:	4a3b      	ldr	r2, [pc, #236]	; (80148bc <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 80147d0:	21c4      	movs	r1, #196	; 0xc4
 80147d2:	483b      	ldr	r0, [pc, #236]	; (80148c0 <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80147d4:	f00c fcf0 	bl	80211b8 <__assert_func>
 80147d8:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 80147da:	683a      	ldr	r2, [r7, #0]
 80147dc:	68b9      	ldr	r1, [r7, #8]
 80147de:	68f8      	ldr	r0, [r7, #12]
 80147e0:	f7ff f8cb 	bl	801397a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	68db      	ldr	r3, [r3, #12]
 80147e8:	2100      	movs	r1, #0
 80147ea:	4618      	mov	r0, r3
 80147ec:	f000 f86e 	bl	80148cc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80147f0:	4603      	mov	r3, r0
 80147f2:	4619      	mov	r1, r3
 80147f4:	200c      	movs	r0, #12
 80147f6:	f7fe ff23 	bl	8013640 <_ZnwjPv>
 80147fa:	4604      	mov	r4, r0
 80147fc:	2c00      	cmp	r4, #0
 80147fe:	d004      	beq.n	801480a <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 8014800:	4620      	mov	r0, r4
 8014802:	f7ff f975 	bl	8013af0 <_ZN8touchgfx12NoTransitionC1Ev>
 8014806:	4623      	mov	r3, r4
 8014808:	e000      	b.n	801480c <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 801480a:	4623      	mov	r3, r4
 801480c:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	689b      	ldr	r3, [r3, #8]
 8014812:	2100      	movs	r1, #0
 8014814:	4618      	mov	r0, r3
 8014816:	f000 fa85 	bl	8014d24 <_ZN8touchgfx17AbstractPartition2atI13IOControlViewEERT_t>
 801481a:	4603      	mov	r3, r0
 801481c:	4619      	mov	r1, r3
 801481e:	f44f 6084 	mov.w	r0, #1056	; 0x420
 8014822:	f7fe ff0d 	bl	8013640 <_ZnwjPv>
 8014826:	4604      	mov	r4, r0
 8014828:	2c00      	cmp	r4, #0
 801482a:	d004      	beq.n	8014836 <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 801482c:	4620      	mov	r0, r4
 801482e:	f004 ffdb 	bl	80197e8 <_ZN13IOControlViewC1Ev>
 8014832:	4623      	mov	r3, r4
 8014834:	e000      	b.n	8014838 <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 8014836:	4623      	mov	r3, r4
 8014838:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	685b      	ldr	r3, [r3, #4]
 801483e:	2100      	movs	r1, #0
 8014840:	4618      	mov	r0, r3
 8014842:	f000 fa82 	bl	8014d4a <_ZN8touchgfx17AbstractPartition2atI18IOControlPresenterEERT_t>
 8014846:	4603      	mov	r3, r0
 8014848:	4619      	mov	r1, r3
 801484a:	2010      	movs	r0, #16
 801484c:	f7fe fef8 	bl	8013640 <_ZnwjPv>
 8014850:	4604      	mov	r4, r0
 8014852:	2c00      	cmp	r4, #0
 8014854:	d005      	beq.n	8014862 <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 8014856:	69b9      	ldr	r1, [r7, #24]
 8014858:	4620      	mov	r0, r4
 801485a:	f004 ff5b 	bl	8019714 <_ZN18IOControlPresenterC1ER13IOControlView>
 801485e:	4623      	mov	r3, r4
 8014860:	e000      	b.n	8014864 <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 8014862:	4623      	mov	r3, r4
 8014864:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8014866:	683b      	ldr	r3, [r7, #0]
 8014868:	69fa      	ldr	r2, [r7, #28]
 801486a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801486c:	68bb      	ldr	r3, [r7, #8]
 801486e:	697a      	ldr	r2, [r7, #20]
 8014870:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	69ba      	ldr	r2, [r7, #24]
 8014876:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8014878:	697b      	ldr	r3, [r7, #20]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d002      	beq.n	8014884 <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 801487e:	697b      	ldr	r3, [r7, #20]
 8014880:	3304      	adds	r3, #4
 8014882:	e000      	b.n	8014886 <_ZN8touchgfx14makeTransitionI13IOControlView18IOControlPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 8014884:	2300      	movs	r3, #0
 8014886:	4619      	mov	r1, r3
 8014888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801488a:	f7ff f8f9 	bl	8013a80 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801488e:	697b      	ldr	r3, [r7, #20]
 8014890:	3304      	adds	r3, #4
 8014892:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014894:	4618      	mov	r0, r3
 8014896:	f7ff f96c 	bl	8013b72 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801489a:	69bb      	ldr	r3, [r7, #24]
 801489c:	6979      	ldr	r1, [r7, #20]
 801489e:	4618      	mov	r0, r3
 80148a0:	f000 fa66 	bl	8014d70 <_ZN8touchgfx4ViewI18IOControlPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 80148a4:	69fa      	ldr	r2, [r7, #28]
 80148a6:	6979      	ldr	r1, [r7, #20]
 80148a8:	69b8      	ldr	r0, [r7, #24]
 80148aa:	f7ff f8c2 	bl	8013a32 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 80148ae:	697b      	ldr	r3, [r7, #20]
}
 80148b0:	4618      	mov	r0, r3
 80148b2:	3724      	adds	r7, #36	; 0x24
 80148b4:	46bd      	mov	sp, r7
 80148b6:	bd90      	pop	{r4, r7, pc}
 80148b8:	08022434 	.word	0x08022434
 80148bc:	08023990 	.word	0x08023990
 80148c0:	080224c4 	.word	0x080224c4
 80148c4:	08022514 	.word	0x08022514
 80148c8:	080225b8 	.word	0x080225b8

080148cc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b082      	sub	sp, #8
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
 80148d4:	460b      	mov	r3, r1
 80148d6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	3324      	adds	r3, #36	; 0x24
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	887a      	ldrh	r2, [r7, #2]
 80148e2:	4611      	mov	r1, r2
 80148e4:	6878      	ldr	r0, [r7, #4]
 80148e6:	4798      	blx	r3
 80148e8:	4603      	mov	r3, r0
    }
 80148ea:	4618      	mov	r0, r3
 80148ec:	3708      	adds	r7, #8
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd80      	pop	{r7, pc}

080148f2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 80148f2:	b580      	push	{r7, lr}
 80148f4:	b082      	sub	sp, #8
 80148f6:	af00      	add	r7, sp, #0
 80148f8:	6078      	str	r0, [r7, #4]
 80148fa:	460b      	mov	r3, r1
 80148fc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	3324      	adds	r3, #36	; 0x24
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	887a      	ldrh	r2, [r7, #2]
 8014908:	4611      	mov	r1, r2
 801490a:	6878      	ldr	r0, [r7, #4]
 801490c:	4798      	blx	r3
 801490e:	4603      	mov	r3, r0
    }
 8014910:	4618      	mov	r0, r3
 8014912:	3708      	adds	r7, #8
 8014914:	46bd      	mov	sp, r7
 8014916:	bd80      	pop	{r7, pc}

08014918 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8014918:	b580      	push	{r7, lr}
 801491a:	b082      	sub	sp, #8
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
 8014920:	460b      	mov	r3, r1
 8014922:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	3324      	adds	r3, #36	; 0x24
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	887a      	ldrh	r2, [r7, #2]
 801492e:	4611      	mov	r1, r2
 8014930:	6878      	ldr	r0, [r7, #4]
 8014932:	4798      	blx	r3
 8014934:	4603      	mov	r3, r0
    }
 8014936:	4618      	mov	r0, r3
 8014938:	3708      	adds	r7, #8
 801493a:	46bd      	mov	sp, r7
 801493c:	bd80      	pop	{r7, pc}

0801493e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 801493e:	b480      	push	{r7}
 8014940:	b083      	sub	sp, #12
 8014942:	af00      	add	r7, sp, #0
 8014944:	6078      	str	r0, [r7, #4]
 8014946:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	683a      	ldr	r2, [r7, #0]
 801494c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801494e:	bf00      	nop
 8014950:	370c      	adds	r7, #12
 8014952:	46bd      	mov	sp, r7
 8014954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014958:	4770      	bx	lr

0801495a <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE0EEEEERT_t>:
    T& at(const uint16_t index)
 801495a:	b580      	push	{r7, lr}
 801495c:	b082      	sub	sp, #8
 801495e:	af00      	add	r7, sp, #0
 8014960:	6078      	str	r0, [r7, #4]
 8014962:	460b      	mov	r3, r1
 8014964:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	3324      	adds	r3, #36	; 0x24
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	887a      	ldrh	r2, [r7, #2]
 8014970:	4611      	mov	r1, r2
 8014972:	6878      	ldr	r0, [r7, #4]
 8014974:	4798      	blx	r3
 8014976:	4603      	mov	r3, r0
    }
 8014978:	4618      	mov	r0, r3
 801497a:	3708      	adds	r7, #8
 801497c:	46bd      	mov	sp, r7
 801497e:	bd80      	pop	{r7, pc}

08014980 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8014980:	b580      	push	{r7, lr}
 8014982:	b082      	sub	sp, #8
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
 8014988:	4a05      	ldr	r2, [pc, #20]	; (80149a0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvED1Ev+0x20>)
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	601a      	str	r2, [r3, #0]
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	4618      	mov	r0, r3
 8014992:	f7f7 ffe3 	bl	800c95c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	4618      	mov	r0, r3
 801499a:	3708      	adds	r7, #8
 801499c:	46bd      	mov	sp, r7
 801499e:	bd80      	pop	{r7, pc}
 80149a0:	08023330 	.word	0x08023330

080149a4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvED0Ev>:
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b082      	sub	sp, #8
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f7ff ffe7 	bl	8014980 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvED1Ev>
 80149b2:	2110      	movs	r1, #16
 80149b4:	6878      	ldr	r0, [r7, #4]
 80149b6:	f00c fbe2 	bl	802117e <_ZdlPvj>
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	4618      	mov	r0, r3
 80149be:	3708      	adds	r7, #8
 80149c0:	46bd      	mov	sp, r7
 80149c2:	bd80      	pop	{r7, pc}

080149c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EEC1Eh>:
     *
     *        Constructor.
     *
     * @param transitionSteps Number of steps in the transition animation.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 80149c4:	b590      	push	{r4, r7, lr}
 80149c6:	b087      	sub	sp, #28
 80149c8:	af02      	add	r7, sp, #8
 80149ca:	6078      	str	r0, [r7, #4]
 80149cc:	460b      	mov	r3, r1
 80149ce:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	4618      	mov	r0, r3
 80149d4:	f7fe fea2 	bl	801371c <_ZN8touchgfx10TransitionC1Ev>
 80149d8:	4a3f      	ldr	r2, [pc, #252]	; (8014ad8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EEC1Eh+0x114>)
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	601a      	str	r2, [r3, #0]
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	330c      	adds	r3, #12
 80149e2:	4618      	mov	r0, r3
 80149e4:	f7f8 ffee 	bl	800d9c4 <_ZN8touchgfx14SnapshotWidgetC1Ev>
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	f103 020c 	add.w	r2, r3, #12
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80149f8:	4a38      	ldr	r2, [pc, #224]	; (8014adc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EEC1Eh+0x118>)
 80149fa:	f107 0308 	add.w	r3, r7, #8
 80149fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014a02:	e883 0003 	stmia.w	r3, {r0, r1}
 8014a06:	f107 0308 	add.w	r3, r7, #8
 8014a0a:	cb0c      	ldmia	r3, {r2, r3}
 8014a0c:	6879      	ldr	r1, [r7, #4]
 8014a0e:	4620      	mov	r0, r4
 8014a10:	f000 f9f6 	bl	8014e00 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	2200      	movs	r2, #0
 8014a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	78fa      	ldrb	r2, [r7, #3]
 8014a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2200      	movs	r2, #0
 8014a28:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	2200      	movs	r2, #0
 8014a30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    {
        if (HAL::USE_ANIMATION_STORAGE)
 8014a34:	4b2a      	ldr	r3, [pc, #168]	; (8014ae0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EEC1Eh+0x11c>)
 8014a36:	781b      	ldrb	r3, [r3, #0]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d047      	beq.n	8014acc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f103 000c 	add.w	r0, r3, #12
 8014a42:	4b28      	ldr	r3, [pc, #160]	; (8014ae4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EEC1Eh+0x120>)
 8014a44:	881b      	ldrh	r3, [r3, #0]
 8014a46:	b21a      	sxth	r2, r3
 8014a48:	4b27      	ldr	r3, [pc, #156]	; (8014ae8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EEC1Eh+0x124>)
 8014a4a:	881b      	ldrh	r3, [r3, #0]
 8014a4c:	b21b      	sxth	r3, r3
 8014a4e:	9300      	str	r3, [sp, #0]
 8014a50:	4613      	mov	r3, r2
 8014a52:	2200      	movs	r2, #0
 8014a54:	2100      	movs	r1, #0
 8014a56:	f7f7 fb61 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	330c      	adds	r3, #12
 8014a5e:	4618      	mov	r0, r3
 8014a60:	f7f9 f858 	bl	800db14 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014a6a:	2b03      	cmp	r3, #3
 8014a6c:	d82a      	bhi.n	8014ac4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EEC1Eh+0x100>
 8014a6e:	a201      	add	r2, pc, #4	; (adr r2, 8014a74 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EEC1Eh+0xb0>)
 8014a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a74:	08014aa5 	.word	0x08014aa5
 8014a78:	08014ab3 	.word	0x08014ab3
 8014a7c:	08014a85 	.word	0x08014a85
 8014a80:	08014a97 	.word	0x08014a97
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 8014a84:	4b17      	ldr	r3, [pc, #92]	; (8014ae4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EEC1Eh+0x120>)
 8014a86:	881b      	ldrh	r3, [r3, #0]
 8014a88:	425b      	negs	r3, r3
 8014a8a:	b29b      	uxth	r3, r3
 8014a8c:	b21a      	sxth	r2, r3
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                break;
 8014a94:	e01a      	b.n	8014acc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 8014a96:	4b13      	ldr	r3, [pc, #76]	; (8014ae4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EEC1Eh+0x120>)
 8014a98:	881b      	ldrh	r3, [r3, #0]
 8014a9a:	b21a      	sxth	r2, r3
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                break;
 8014aa2:	e013      	b.n	8014acc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 8014aa4:	4b10      	ldr	r3, [pc, #64]	; (8014ae8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EEC1Eh+0x124>)
 8014aa6:	881b      	ldrh	r3, [r3, #0]
 8014aa8:	b21a      	sxth	r2, r3
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                break;
 8014ab0:	e00c      	b.n	8014acc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 8014ab2:	4b0d      	ldr	r3, [pc, #52]	; (8014ae8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EEC1Eh+0x124>)
 8014ab4:	881b      	ldrh	r3, [r3, #0]
 8014ab6:	425b      	negs	r3, r3
 8014ab8:	b29b      	uxth	r3, r3
 8014aba:	b21a      	sxth	r2, r3
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                break;
 8014ac2:	e003      	b.n	8014acc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EEC1Eh+0x108>
            default:
                done = true;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	2201      	movs	r2, #1
 8014ac8:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 8014aca:	bf00      	nop
            }
        }
    }
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	4618      	mov	r0, r3
 8014ad0:	3714      	adds	r7, #20
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	bd90      	pop	{r4, r7, pc}
 8014ad6:	bf00      	nop
 8014ad8:	08023308 	.word	0x08023308
 8014adc:	0802265c 	.word	0x0802265c
 8014ae0:	2000a32b 	.word	0x2000a32b
 8014ae4:	2000a320 	.word	0x2000a320
 8014ae8:	2000a322 	.word	0x2000a322

08014aec <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE1EEEEERT_t>:
    T& at(const uint16_t index)
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b082      	sub	sp, #8
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	6078      	str	r0, [r7, #4]
 8014af4:	460b      	mov	r3, r1
 8014af6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	3324      	adds	r3, #36	; 0x24
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	887a      	ldrh	r2, [r7, #2]
 8014b02:	4611      	mov	r1, r2
 8014b04:	6878      	ldr	r0, [r7, #4]
 8014b06:	4798      	blx	r3
 8014b08:	4603      	mov	r3, r0
    }
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	3708      	adds	r7, #8
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bd80      	pop	{r7, pc}
	...

08014b14 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>:
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b082      	sub	sp, #8
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
 8014b1c:	4a05      	ldr	r2, [pc, #20]	; (8014b34 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev+0x20>)
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	601a      	str	r2, [r3, #0]
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7f7 ff19 	bl	800c95c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	3708      	adds	r7, #8
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd80      	pop	{r7, pc}
 8014b34:	080232f0 	.word	0x080232f0

08014b38 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED0Ev>:
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b082      	sub	sp, #8
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
 8014b40:	6878      	ldr	r0, [r7, #4]
 8014b42:	f7ff ffe7 	bl	8014b14 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>
 8014b46:	2110      	movs	r1, #16
 8014b48:	6878      	ldr	r0, [r7, #4]
 8014b4a:	f00c fb18 	bl	802117e <_ZdlPvj>
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	4618      	mov	r0, r3
 8014b52:	3708      	adds	r7, #8
 8014b54:	46bd      	mov	sp, r7
 8014b56:	bd80      	pop	{r7, pc}

08014b58 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EEC1Eh>:
     *
     *        Constructor.
     *
     * @param transitionSteps Number of steps in the transition animation.
     */
    CoverTransition(const uint8_t transitionSteps = 20)
 8014b58:	b590      	push	{r4, r7, lr}
 8014b5a:	b087      	sub	sp, #28
 8014b5c:	af02      	add	r7, sp, #8
 8014b5e:	6078      	str	r0, [r7, #4]
 8014b60:	460b      	mov	r3, r1
 8014b62:	70fb      	strb	r3, [r7, #3]
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          movedToPos(0),
          solid()
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	4618      	mov	r0, r3
 8014b68:	f7fe fdd8 	bl	801371c <_ZN8touchgfx10TransitionC1Ev>
 8014b6c:	4a35      	ldr	r2, [pc, #212]	; (8014c44 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EEC1Eh+0xec>)
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	601a      	str	r2, [r3, #0]
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	f103 040c 	add.w	r4, r3, #12
 8014b78:	4a33      	ldr	r2, [pc, #204]	; (8014c48 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EEC1Eh+0xf0>)
 8014b7a:	f107 0308 	add.w	r3, r7, #8
 8014b7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014b82:	e883 0003 	stmia.w	r3, {r0, r1}
 8014b86:	f107 0308 	add.w	r3, r7, #8
 8014b8a:	cb0c      	ldmia	r3, {r2, r3}
 8014b8c:	6879      	ldr	r1, [r7, #4]
 8014b8e:	4620      	mov	r0, r4
 8014b90:	f000 f988 	bl	8014ea4 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	2201      	movs	r2, #1
 8014b98:	771a      	strb	r2, [r3, #28]
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	78fa      	ldrb	r2, [r7, #3]
 8014b9e:	775a      	strb	r2, [r3, #29]
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	779a      	strb	r2, [r3, #30]
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	2200      	movs	r2, #0
 8014baa:	845a      	strh	r2, [r3, #34]	; 0x22
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	2200      	movs	r2, #0
 8014bb0:	849a      	strh	r2, [r3, #36]	; 0x24
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	3328      	adds	r3, #40	; 0x28
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	f000 f994 	bl	8014ee4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE13FullSolidRectC1Ev>
    {
        switch (direction)
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	7f1b      	ldrb	r3, [r3, #28]
 8014bc0:	2b03      	cmp	r3, #3
 8014bc2:	d827      	bhi.n	8014c14 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EEC1Eh+0xbc>
 8014bc4:	a201      	add	r2, pc, #4	; (adr r2, 8014bcc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EEC1Eh+0x74>)
 8014bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bca:	bf00      	nop
 8014bcc:	08014bf9 	.word	0x08014bf9
 8014bd0:	08014c05 	.word	0x08014c05
 8014bd4:	08014bdd 	.word	0x08014bdd
 8014bd8:	08014bed 	.word	0x08014bed
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
 8014bdc:	4b1b      	ldr	r3, [pc, #108]	; (8014c4c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EEC1Eh+0xf4>)
 8014bde:	881b      	ldrh	r3, [r3, #0]
 8014be0:	425b      	negs	r3, r3
 8014be2:	b29b      	uxth	r3, r3
 8014be4:	b21a      	sxth	r2, r3
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	841a      	strh	r2, [r3, #32]
            break;
 8014bea:	e017      	b.n	8014c1c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EEC1Eh+0xc4>
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 8014bec:	4b17      	ldr	r3, [pc, #92]	; (8014c4c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EEC1Eh+0xf4>)
 8014bee:	881b      	ldrh	r3, [r3, #0]
 8014bf0:	b21a      	sxth	r2, r3
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	841a      	strh	r2, [r3, #32]
            break;
 8014bf6:	e011      	b.n	8014c1c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EEC1Eh+0xc4>
        case NORTH:
            targetValue = HAL::DISPLAY_HEIGHT;
 8014bf8:	4b15      	ldr	r3, [pc, #84]	; (8014c50 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EEC1Eh+0xf8>)
 8014bfa:	881b      	ldrh	r3, [r3, #0]
 8014bfc:	b21a      	sxth	r2, r3
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	841a      	strh	r2, [r3, #32]
            break;
 8014c02:	e00b      	b.n	8014c1c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EEC1Eh+0xc4>
        case SOUTH:
            targetValue = -HAL::DISPLAY_HEIGHT;
 8014c04:	4b12      	ldr	r3, [pc, #72]	; (8014c50 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EEC1Eh+0xf8>)
 8014c06:	881b      	ldrh	r3, [r3, #0]
 8014c08:	425b      	negs	r3, r3
 8014c0a:	b29b      	uxth	r3, r3
 8014c0c:	b21a      	sxth	r2, r3
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	841a      	strh	r2, [r3, #32]
            break;
 8014c12:	e003      	b.n	8014c1c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EEC1Eh+0xc4>
        default:
            done = true;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	2201      	movs	r2, #1
 8014c18:	721a      	strb	r2, [r3, #8]
            // Nothing to do here
            break;
 8014c1a:	bf00      	nop
        }

        //Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8014c22:	4b0a      	ldr	r3, [pc, #40]	; (8014c4c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EEC1Eh+0xf4>)
 8014c24:	881b      	ldrh	r3, [r3, #0]
 8014c26:	b21a      	sxth	r2, r3
 8014c28:	4b09      	ldr	r3, [pc, #36]	; (8014c50 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EEC1Eh+0xf8>)
 8014c2a:	881b      	ldrh	r3, [r3, #0]
 8014c2c:	b21b      	sxth	r3, r3
 8014c2e:	9300      	str	r3, [sp, #0]
 8014c30:	4613      	mov	r3, r2
 8014c32:	2200      	movs	r2, #0
 8014c34:	2100      	movs	r1, #0
 8014c36:	f7f7 fa71 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	3714      	adds	r7, #20
 8014c40:	46bd      	mov	sp, r7
 8014c42:	bd90      	pop	{r4, r7, pc}
 8014c44:	0802325c 	.word	0x0802325c
 8014c48:	08022664 	.word	0x08022664
 8014c4c:	2000a320 	.word	0x2000a320
 8014c50:	2000a322 	.word	0x2000a322

08014c54 <_ZN8touchgfx17AbstractPartition2atI10LoggerViewEERT_t>:
    T& at(const uint16_t index)
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b082      	sub	sp, #8
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
 8014c5c:	460b      	mov	r3, r1
 8014c5e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	3324      	adds	r3, #36	; 0x24
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	887a      	ldrh	r2, [r7, #2]
 8014c6a:	4611      	mov	r1, r2
 8014c6c:	6878      	ldr	r0, [r7, #4]
 8014c6e:	4798      	blx	r3
 8014c70:	4603      	mov	r3, r0
    }
 8014c72:	4618      	mov	r0, r3
 8014c74:	3708      	adds	r7, #8
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bd80      	pop	{r7, pc}

08014c7a <_ZN8touchgfx17AbstractPartition2atI15LoggerPresenterEERT_t>:
    T& at(const uint16_t index)
 8014c7a:	b580      	push	{r7, lr}
 8014c7c:	b082      	sub	sp, #8
 8014c7e:	af00      	add	r7, sp, #0
 8014c80:	6078      	str	r0, [r7, #4]
 8014c82:	460b      	mov	r3, r1
 8014c84:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	3324      	adds	r3, #36	; 0x24
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	887a      	ldrh	r2, [r7, #2]
 8014c90:	4611      	mov	r1, r2
 8014c92:	6878      	ldr	r0, [r7, #4]
 8014c94:	4798      	blx	r3
 8014c96:	4603      	mov	r3, r0
    }
 8014c98:	4618      	mov	r0, r3
 8014c9a:	3708      	adds	r7, #8
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	bd80      	pop	{r7, pc}

08014ca0 <_ZN8touchgfx4ViewI15LoggerPresenterE4bindERS1_>:
    void bind(T& presenter)
 8014ca0:	b480      	push	{r7}
 8014ca2:	b083      	sub	sp, #12
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]
 8014ca8:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	683a      	ldr	r2, [r7, #0]
 8014cae:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8014cb0:	bf00      	nop
 8014cb2:	370c      	adds	r7, #12
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cba:	4770      	bx	lr

08014cbc <_ZN8touchgfx17AbstractPartition2atI11NetworkViewEERT_t>:
    T& at(const uint16_t index)
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b082      	sub	sp, #8
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
 8014cc4:	460b      	mov	r3, r1
 8014cc6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	3324      	adds	r3, #36	; 0x24
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	887a      	ldrh	r2, [r7, #2]
 8014cd2:	4611      	mov	r1, r2
 8014cd4:	6878      	ldr	r0, [r7, #4]
 8014cd6:	4798      	blx	r3
 8014cd8:	4603      	mov	r3, r0
    }
 8014cda:	4618      	mov	r0, r3
 8014cdc:	3708      	adds	r7, #8
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	bd80      	pop	{r7, pc}

08014ce2 <_ZN8touchgfx17AbstractPartition2atI16NetworkPresenterEERT_t>:
    T& at(const uint16_t index)
 8014ce2:	b580      	push	{r7, lr}
 8014ce4:	b082      	sub	sp, #8
 8014ce6:	af00      	add	r7, sp, #0
 8014ce8:	6078      	str	r0, [r7, #4]
 8014cea:	460b      	mov	r3, r1
 8014cec:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	3324      	adds	r3, #36	; 0x24
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	887a      	ldrh	r2, [r7, #2]
 8014cf8:	4611      	mov	r1, r2
 8014cfa:	6878      	ldr	r0, [r7, #4]
 8014cfc:	4798      	blx	r3
 8014cfe:	4603      	mov	r3, r0
    }
 8014d00:	4618      	mov	r0, r3
 8014d02:	3708      	adds	r7, #8
 8014d04:	46bd      	mov	sp, r7
 8014d06:	bd80      	pop	{r7, pc}

08014d08 <_ZN8touchgfx4ViewI16NetworkPresenterE4bindERS1_>:
    void bind(T& presenter)
 8014d08:	b480      	push	{r7}
 8014d0a:	b083      	sub	sp, #12
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
 8014d10:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	683a      	ldr	r2, [r7, #0]
 8014d16:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8014d18:	bf00      	nop
 8014d1a:	370c      	adds	r7, #12
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d22:	4770      	bx	lr

08014d24 <_ZN8touchgfx17AbstractPartition2atI13IOControlViewEERT_t>:
    T& at(const uint16_t index)
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b082      	sub	sp, #8
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
 8014d2c:	460b      	mov	r3, r1
 8014d2e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	3324      	adds	r3, #36	; 0x24
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	887a      	ldrh	r2, [r7, #2]
 8014d3a:	4611      	mov	r1, r2
 8014d3c:	6878      	ldr	r0, [r7, #4]
 8014d3e:	4798      	blx	r3
 8014d40:	4603      	mov	r3, r0
    }
 8014d42:	4618      	mov	r0, r3
 8014d44:	3708      	adds	r7, #8
 8014d46:	46bd      	mov	sp, r7
 8014d48:	bd80      	pop	{r7, pc}

08014d4a <_ZN8touchgfx17AbstractPartition2atI18IOControlPresenterEERT_t>:
    T& at(const uint16_t index)
 8014d4a:	b580      	push	{r7, lr}
 8014d4c:	b082      	sub	sp, #8
 8014d4e:	af00      	add	r7, sp, #0
 8014d50:	6078      	str	r0, [r7, #4]
 8014d52:	460b      	mov	r3, r1
 8014d54:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	3324      	adds	r3, #36	; 0x24
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	887a      	ldrh	r2, [r7, #2]
 8014d60:	4611      	mov	r1, r2
 8014d62:	6878      	ldr	r0, [r7, #4]
 8014d64:	4798      	blx	r3
 8014d66:	4603      	mov	r3, r0
    }
 8014d68:	4618      	mov	r0, r3
 8014d6a:	3708      	adds	r7, #8
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bd80      	pop	{r7, pc}

08014d70 <_ZN8touchgfx4ViewI18IOControlPresenterE4bindERS1_>:
    void bind(T& presenter)
 8014d70:	b480      	push	{r7}
 8014d72:	b083      	sub	sp, #12
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
 8014d78:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	683a      	ldr	r2, [r7, #0]
 8014d7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8014d80:	bf00      	nop
 8014d82:	370c      	adds	r7, #12
 8014d84:	46bd      	mov	sp, r7
 8014d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8a:	4770      	bx	lr

08014d8c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16tickMoveDrawableERNS_8DrawableE>:
     *
     *        Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b082      	sub	sp, #8
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
 8014d94:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d9a:	683a      	ldr	r2, [r7, #0]
 8014d9c:	429a      	cmp	r2, r3
 8014d9e:	d02a      	beq.n	8014df6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014da6:	2b03      	cmp	r3, #3
 8014da8:	d820      	bhi.n	8014dec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16tickMoveDrawableERNS_8DrawableE+0x60>
 8014daa:	a201      	add	r2, pc, #4	; (adr r2, 8014db0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 8014dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014db0:	08014dd7 	.word	0x08014dd7
 8014db4:	08014dd7 	.word	0x08014dd7
 8014db8:	08014dc1 	.word	0x08014dc1
 8014dbc:	08014dc1 	.word	0x08014dc1
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8014dc0:	683b      	ldr	r3, [r7, #0]
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	3354      	adds	r3, #84	; 0x54
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	687a      	ldr	r2, [r7, #4]
 8014dca:	f9b2 1056 	ldrsh.w	r1, [r2, #86]	; 0x56
 8014dce:	2200      	movs	r2, #0
 8014dd0:	6838      	ldr	r0, [r7, #0]
 8014dd2:	4798      	blx	r3
            break;
 8014dd4:	e010      	b.n	8014df8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 8014dd6:	683b      	ldr	r3, [r7, #0]
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	3354      	adds	r3, #84	; 0x54
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	687a      	ldr	r2, [r7, #4]
 8014de0:	f9b2 2056 	ldrsh.w	r2, [r2, #86]	; 0x56
 8014de4:	2100      	movs	r1, #0
 8014de6:	6838      	ldr	r0, [r7, #0]
 8014de8:	4798      	blx	r3
            break;
 8014dea:	e005      	b.n	8014df8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	2201      	movs	r2, #1
 8014df0:	721a      	strb	r2, [r3, #8]
            break;
 8014df2:	bf00      	nop
 8014df4:	e000      	b.n	8014df8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 8014df6:	bf00      	nop
        }
    }
 8014df8:	3708      	adds	r7, #8
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	bd80      	pop	{r7, pc}
 8014dfe:	bf00      	nop

08014e00 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b084      	sub	sp, #16
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	60f8      	str	r0, [r7, #12]
 8014e08:	60b9      	str	r1, [r7, #8]
 8014e0a:	4639      	mov	r1, r7
 8014e0c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	4618      	mov	r0, r3
 8014e14:	f7f7 fd92 	bl	800c93c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8014e18:	4a08      	ldr	r2, [pc, #32]	; (8014e3c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	68ba      	ldr	r2, [r7, #8]
 8014e22:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	3308      	adds	r3, #8
 8014e28:	463a      	mov	r2, r7
 8014e2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014e2e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	4618      	mov	r0, r3
 8014e36:	3710      	adds	r7, #16
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	bd80      	pop	{r7, pc}
 8014e3c:	08023330 	.word	0x08023330

08014e40 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE>:
     *
     *        Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8014e40:	b580      	push	{r7, lr}
 8014e42:	b082      	sub	sp, #8
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]
 8014e48:	6039      	str	r1, [r7, #0]
    {
        switch (direction)
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	7f1b      	ldrb	r3, [r3, #28]
 8014e4e:	2b03      	cmp	r3, #3
 8014e50:	d820      	bhi.n	8014e94 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE+0x54>
 8014e52:	a201      	add	r2, pc, #4	; (adr r2, 8014e58 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE+0x18>)
 8014e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e58:	08014e7f 	.word	0x08014e7f
 8014e5c:	08014e7f 	.word	0x08014e7f
 8014e60:	08014e69 	.word	0x08014e69
 8014e64:	08014e69 	.word	0x08014e69
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8014e68:	683b      	ldr	r3, [r7, #0]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	3354      	adds	r3, #84	; 0x54
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	687a      	ldr	r2, [r7, #4]
 8014e72:	f9b2 1022 	ldrsh.w	r1, [r2, #34]	; 0x22
 8014e76:	2200      	movs	r2, #0
 8014e78:	6838      	ldr	r0, [r7, #0]
 8014e7a:	4798      	blx	r3
            break;
 8014e7c:	e00e      	b.n	8014e9c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 8014e7e:	683b      	ldr	r3, [r7, #0]
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	3354      	adds	r3, #84	; 0x54
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	687a      	ldr	r2, [r7, #4]
 8014e88:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 8014e8c:	2100      	movs	r1, #0
 8014e8e:	6838      	ldr	r0, [r7, #0]
 8014e90:	4798      	blx	r3
            break;
 8014e92:	e003      	b.n	8014e9c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	2201      	movs	r2, #1
 8014e98:	721a      	strb	r2, [r3, #8]
            break;
 8014e9a:	bf00      	nop
        }
    }
 8014e9c:	bf00      	nop
 8014e9e:	3708      	adds	r7, #8
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}

08014ea4 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b084      	sub	sp, #16
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	60f8      	str	r0, [r7, #12]
 8014eac:	60b9      	str	r1, [r7, #8]
 8014eae:	4639      	mov	r1, r7
 8014eb0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	f7f7 fd40 	bl	800c93c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8014ebc:	4a08      	ldr	r2, [pc, #32]	; (8014ee0 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	68ba      	ldr	r2, [r7, #8]
 8014ec6:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	3308      	adds	r3, #8
 8014ecc:	463a      	mov	r2, r7
 8014ece:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014ed2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	4618      	mov	r0, r3
 8014eda:	3710      	adds	r7, #16
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bd80      	pop	{r7, pc}
 8014ee0:	080232f0 	.word	0x080232f0

08014ee4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE13FullSolidRectC1Ev>:
        FullSolidRect() : Widget()
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b082      	sub	sp, #8
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f7f7 fe18 	bl	800cb24 <_ZN8touchgfx6WidgetC1Ev>
 8014ef4:	4a03      	ldr	r2, [pc, #12]	; (8014f04 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE13FullSolidRectC1Ev+0x20>)
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	601a      	str	r2, [r3, #0]
        {}
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	4618      	mov	r0, r3
 8014efe:	3708      	adds	r7, #8
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bd80      	pop	{r7, pc}
 8014f04:	08023284 	.word	0x08023284

08014f08 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>:
        virtual ~FullSolidRect() {}
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b082      	sub	sp, #8
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
 8014f10:	4a05      	ldr	r2, [pc, #20]	; (8014f28 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev+0x20>)
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	601a      	str	r2, [r3, #0]
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	4618      	mov	r0, r3
 8014f1a:	f7f7 fe15 	bl	800cb48 <_ZN8touchgfx6WidgetD1Ev>
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	4618      	mov	r0, r3
 8014f22:	3708      	adds	r7, #8
 8014f24:	46bd      	mov	sp, r7
 8014f26:	bd80      	pop	{r7, pc}
 8014f28:	08023284 	.word	0x08023284

08014f2c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE13FullSolidRectD0Ev>:
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b082      	sub	sp, #8
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]
 8014f34:	6878      	ldr	r0, [r7, #4]
 8014f36:	f7ff ffe7 	bl	8014f08 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>
 8014f3a:	2128      	movs	r1, #40	; 0x28
 8014f3c:	6878      	ldr	r0, [r7, #4]
 8014f3e:	f00c f91e 	bl	802117e <_ZdlPvj>
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	4618      	mov	r0, r3
 8014f46:	3708      	adds	r7, #8
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	bd80      	pop	{r7, pc}

08014f4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b082      	sub	sp, #8
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
 8014f54:	4a05      	ldr	r2, [pc, #20]	; (8014f6c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	601a      	str	r2, [r3, #0]
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	f7fe fc4b 	bl	80137f8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	4618      	mov	r0, r3
 8014f66:	3708      	adds	r7, #8
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	bd80      	pop	{r7, pc}
 8014f6c:	080233a4 	.word	0x080233a4

08014f70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b082      	sub	sp, #8
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]
 8014f78:	6878      	ldr	r0, [r7, #4]
 8014f7a:	f7ff ffe7 	bl	8014f4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8014f7e:	2110      	movs	r1, #16
 8014f80:	6878      	ldr	r0, [r7, #4]
 8014f82:	f00c f8fc 	bl	802117e <_ZdlPvj>
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	4618      	mov	r0, r3
 8014f8a:	3708      	adds	r7, #8
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	bd80      	pop	{r7, pc}

08014f90 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EED1Ev>:
    virtual ~CoverTransition()
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b082      	sub	sp, #8
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
    }
 8014f98:	4a0a      	ldr	r2, [pc, #40]	; (8014fc4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EED1Ev+0x34>)
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	601a      	str	r2, [r3, #0]
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	3328      	adds	r3, #40	; 0x28
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	f7ff ffb0 	bl	8014f08 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	330c      	adds	r3, #12
 8014fac:	4618      	mov	r0, r3
 8014fae:	f7ff fdb1 	bl	8014b14 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f7fe fbc7 	bl	8013748 <_ZN8touchgfx10TransitionD1Ev>
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	3708      	adds	r7, #8
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	bd80      	pop	{r7, pc}
 8014fc4:	0802325c 	.word	0x0802325c

08014fc8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EED0Ev>:
    virtual ~CoverTransition()
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b082      	sub	sp, #8
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
    }
 8014fd0:	6878      	ldr	r0, [r7, #4]
 8014fd2:	f7ff ffdd 	bl	8014f90 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EED1Ev>
 8014fd6:	2150      	movs	r1, #80	; 0x50
 8014fd8:	6878      	ldr	r0, [r7, #4]
 8014fda:	f00c f8d0 	bl	802117e <_ZdlPvj>
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	3708      	adds	r7, #8
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bd80      	pop	{r7, pc}

08014fe8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8014fe8:	b590      	push	{r4, r7, lr}
 8014fea:	b08b      	sub	sp, #44	; 0x2c
 8014fec:	af02      	add	r7, sp, #8
 8014fee:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f7fe fbc8 	bl	8013788 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	7f9b      	ldrb	r3, [r3, #30]
 8014ffc:	3301      	adds	r3, #1
 8014ffe:	b2da      	uxtb	r2, r3
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	779a      	strb	r2, [r3, #30]
        if (animationCounter <= animationSteps)
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	7f9a      	ldrb	r2, [r3, #30]
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	7f5b      	ldrb	r3, [r3, #29]
 801500c:	429a      	cmp	r2, r3
 801500e:	d82b      	bhi.n	8015068 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x80>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	7f9b      	ldrb	r3, [r3, #30]
 8015014:	b298      	uxth	r0, r3
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	7f5b      	ldrb	r3, [r3, #29]
 8015020:	b29b      	uxth	r3, r3
 8015022:	2100      	movs	r1, #0
 8015024:	f00a f822 	bl	801f06c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8015028:	4603      	mov	r3, r0
 801502a:	461a      	mov	r2, r3
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	845a      	strh	r2, [r3, #34]	; 0x22
            if (calculatedValue % 2)
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8015036:	b29b      	uxth	r3, r3
 8015038:	f003 0301 	and.w	r3, r3, #1
 801503c:	b29b      	uxth	r3, r3
 801503e:	2b00      	cmp	r3, #0
 8015040:	d019      	beq.n	8015076 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x8e>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8015048:	b29b      	uxth	r3, r3
 801504a:	687a      	ldr	r2, [r7, #4]
 801504c:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 8015050:	2a00      	cmp	r2, #0
 8015052:	dd01      	ble.n	8015058 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x70>
 8015054:	2201      	movs	r2, #1
 8015056:	e001      	b.n	801505c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x74>
 8015058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801505c:	4413      	add	r3, r2
 801505e:	b29b      	uxth	r3, r3
 8015060:	b21a      	sxth	r2, r3
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	845a      	strh	r2, [r3, #34]	; 0x22
 8015066:	e006      	b.n	8015076 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x8e>
            done = true;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	2201      	movs	r2, #1
 801506c:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	2200      	movs	r2, #0
 8015072:	779a      	strb	r2, [r3, #30]
            return;
 8015074:	e0c0      	b.n	80151f8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x210>
        calculatedValue -= movedToPos;
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 801507c:	b29a      	uxth	r2, r3
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8015084:	b29b      	uxth	r3, r3
 8015086:	1ad3      	subs	r3, r2, r3
 8015088:	b29b      	uxth	r3, r3
 801508a:	b21a      	sxth	r2, r3
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	845a      	strh	r2, [r3, #34]	; 0x22
        movedToPos += calculatedValue;
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8015096:	b29a      	uxth	r2, r3
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 801509e:	b29b      	uxth	r3, r3
 80150a0:	4413      	add	r3, r2
 80150a2:	b29b      	uxth	r3, r3
 80150a4:	b21a      	sxth	r2, r3
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	849a      	strh	r2, [r3, #36]	; 0x24
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	7f9b      	ldrb	r3, [r3, #30]
 80150ae:	2b01      	cmp	r3, #1
 80150b0:	f040 8097 	bne.w	80151e2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x1fa>
 80150b4:	4b52      	ldr	r3, [pc, #328]	; (8015200 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x218>)
 80150b6:	781b      	ldrb	r3, [r3, #0]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	f000 8092 	beq.w	80151e2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x1fa>
            Rect rect;
 80150be:	f107 0314 	add.w	r3, r7, #20
 80150c2:	4618      	mov	r0, r3
 80150c4:	f7f7 fc79 	bl	800c9ba <_ZN8touchgfx4RectC1Ev>
            switch (direction)
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	7f1b      	ldrb	r3, [r3, #28]
 80150cc:	2b03      	cmp	r3, #3
 80150ce:	d85b      	bhi.n	8015188 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x1a0>
 80150d0:	a201      	add	r2, pc, #4	; (adr r2, 80150d8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0xf0>)
 80150d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150d6:	bf00      	nop
 80150d8:	08015139 	.word	0x08015139
 80150dc:	08015163 	.word	0x08015163
 80150e0:	080150e9 	.word	0x080150e9
 80150e4:	0801510f 	.word	0x0801510f
                rect.x = 0;
 80150e8:	2300      	movs	r3, #0
 80150ea:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 80150ec:	2300      	movs	r3, #0
 80150ee:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH + calculatedValue;
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80150f6:	b29a      	uxth	r2, r3
 80150f8:	4b42      	ldr	r3, [pc, #264]	; (8015204 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x21c>)
 80150fa:	881b      	ldrh	r3, [r3, #0]
 80150fc:	4413      	add	r3, r2
 80150fe:	b29b      	uxth	r3, r3
 8015100:	b21b      	sxth	r3, r3
 8015102:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 8015104:	4b40      	ldr	r3, [pc, #256]	; (8015208 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x220>)
 8015106:	881b      	ldrh	r3, [r3, #0]
 8015108:	b21b      	sxth	r3, r3
 801510a:	837b      	strh	r3, [r7, #26]
                break;
 801510c:	e03d      	b.n	801518a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x1a2>
                rect.x = calculatedValue;
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8015114:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 8015116:	2300      	movs	r3, #0
 8015118:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH - calculatedValue;
 801511a:	4b3a      	ldr	r3, [pc, #232]	; (8015204 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x21c>)
 801511c:	881a      	ldrh	r2, [r3, #0]
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8015124:	b29b      	uxth	r3, r3
 8015126:	1ad3      	subs	r3, r2, r3
 8015128:	b29b      	uxth	r3, r3
 801512a:	b21b      	sxth	r3, r3
 801512c:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 801512e:	4b36      	ldr	r3, [pc, #216]	; (8015208 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x220>)
 8015130:	881b      	ldrh	r3, [r3, #0]
 8015132:	b21b      	sxth	r3, r3
 8015134:	837b      	strh	r3, [r7, #26]
                break;
 8015136:	e028      	b.n	801518a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 8015138:	2300      	movs	r3, #0
 801513a:	82bb      	strh	r3, [r7, #20]
                rect.y = calculatedValue;
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8015142:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 8015144:	4b2f      	ldr	r3, [pc, #188]	; (8015204 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x21c>)
 8015146:	881b      	ldrh	r3, [r3, #0]
 8015148:	b21b      	sxth	r3, r3
 801514a:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT - calculatedValue;
 801514c:	4b2e      	ldr	r3, [pc, #184]	; (8015208 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x220>)
 801514e:	881a      	ldrh	r2, [r3, #0]
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8015156:	b29b      	uxth	r3, r3
 8015158:	1ad3      	subs	r3, r2, r3
 801515a:	b29b      	uxth	r3, r3
 801515c:	b21b      	sxth	r3, r3
 801515e:	837b      	strh	r3, [r7, #26]
                break;
 8015160:	e013      	b.n	801518a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 8015162:	2300      	movs	r3, #0
 8015164:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 8015166:	2300      	movs	r3, #0
 8015168:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 801516a:	4b26      	ldr	r3, [pc, #152]	; (8015204 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x21c>)
 801516c:	881b      	ldrh	r3, [r3, #0]
 801516e:	b21b      	sxth	r3, r3
 8015170:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT + calculatedValue;
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8015178:	b29a      	uxth	r2, r3
 801517a:	4b23      	ldr	r3, [pc, #140]	; (8015208 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x220>)
 801517c:	881b      	ldrh	r3, [r3, #0]
 801517e:	4413      	add	r3, r2
 8015180:	b29b      	uxth	r3, r3
 8015182:	b21b      	sxth	r3, r3
 8015184:	837b      	strh	r3, [r7, #26]
                break;
 8015186:	e000      	b.n	801518a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x1a2>
                break;
 8015188:	bf00      	nop
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 801518a:	f7f7 fe49 	bl	800ce20 <_ZN8touchgfx3HAL11getInstanceEv>
 801518e:	4602      	mov	r2, r0
 8015190:	6813      	ldr	r3, [r2, #0]
 8015192:	3328      	adds	r3, #40	; 0x28
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	4610      	mov	r0, r2
 8015198:	4798      	blx	r3
 801519a:	61f8      	str	r0, [r7, #28]
            Rect source;
 801519c:	f107 030c 	add.w	r3, r7, #12
 80151a0:	4618      	mov	r0, r3
 80151a2:	f7f7 fc0a 	bl	800c9ba <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 80151a6:	2300      	movs	r3, #0
 80151a8:	81bb      	strh	r3, [r7, #12]
            source.y = 0;
 80151aa:	2300      	movs	r3, #0
 80151ac:	81fb      	strh	r3, [r7, #14]
            source.width = HAL::DISPLAY_WIDTH;
 80151ae:	4b15      	ldr	r3, [pc, #84]	; (8015204 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x21c>)
 80151b0:	881b      	ldrh	r3, [r3, #0]
 80151b2:	b21b      	sxth	r3, r3
 80151b4:	823b      	strh	r3, [r7, #16]
            source.height = HAL::DISPLAY_HEIGHT;
 80151b6:	4b14      	ldr	r3, [pc, #80]	; (8015208 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE15handleTickEventEv+0x220>)
 80151b8:	881b      	ldrh	r3, [r3, #0]
 80151ba:	b21b      	sxth	r3, r3
 80151bc:	827b      	strh	r3, [r7, #18]
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 80151be:	f7f7 fe2f 	bl	800ce20 <_ZN8touchgfx3HAL11getInstanceEv>
 80151c2:	f7f7 fe57 	bl	800ce74 <_ZN8touchgfx3HAL3lcdEv>
 80151c6:	6803      	ldr	r3, [r0, #0]
 80151c8:	3310      	adds	r3, #16
 80151ca:	681c      	ldr	r4, [r3, #0]
 80151cc:	f107 0114 	add.w	r1, r7, #20
 80151d0:	f107 020c 	add.w	r2, r7, #12
 80151d4:	2300      	movs	r3, #0
 80151d6:	9301      	str	r3, [sp, #4]
 80151d8:	23ff      	movs	r3, #255	; 0xff
 80151da:	9300      	str	r3, [sp, #0]
 80151dc:	460b      	mov	r3, r1
 80151de:	69f9      	ldr	r1, [r7, #28]
 80151e0:	47a0      	blx	r4
        screenContainer->forEachChild(&handleTickCallback);
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	6858      	ldr	r0, [r3, #4]
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	685b      	ldr	r3, [r3, #4]
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	337c      	adds	r3, #124	; 0x7c
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	687a      	ldr	r2, [r7, #4]
 80151f2:	320c      	adds	r2, #12
 80151f4:	4611      	mov	r1, r2
 80151f6:	4798      	blx	r3
    }
 80151f8:	3724      	adds	r7, #36	; 0x24
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bd90      	pop	{r4, r7, pc}
 80151fe:	bf00      	nop
 8015200:	2000a32a 	.word	0x2000a32a
 8015204:	2000a320 	.word	0x2000a320
 8015208:	2000a322 	.word	0x2000a322

0801520c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE8tearDownEv>:
    virtual void tearDown()
 801520c:	b580      	push	{r7, lr}
 801520e:	b082      	sub	sp, #8
 8015210:	af00      	add	r7, sp, #0
 8015212:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	6858      	ldr	r0, [r3, #4]
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	685b      	ldr	r3, [r3, #4]
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	3368      	adds	r3, #104	; 0x68
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	687a      	ldr	r2, [r7, #4]
 8015224:	3228      	adds	r2, #40	; 0x28
 8015226:	4611      	mov	r1, r2
 8015228:	4798      	blx	r3
    }
 801522a:	bf00      	nop
 801522c:	3708      	adds	r7, #8
 801522e:	46bd      	mov	sp, r7
 8015230:	bd80      	pop	{r7, pc}
	...

08015234 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE4initEv>:
    virtual void init()
 8015234:	b580      	push	{r7, lr}
 8015236:	b088      	sub	sp, #32
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]
        Transition::init();
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	4618      	mov	r0, r3
 8015240:	f7fe fab6 	bl	80137b0 <_ZN8touchgfx10Transition4initEv>
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 8015244:	4a16      	ldr	r2, [pc, #88]	; (80152a0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE4initEv+0x6c>)
 8015246:	f107 0318 	add.w	r3, r7, #24
 801524a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801524e:	e883 0003 	stmia.w	r3, {r0, r1}
 8015252:	f107 0008 	add.w	r0, r7, #8
 8015256:	f107 0318 	add.w	r3, r7, #24
 801525a:	cb0c      	ldmia	r3, {r2, r3}
 801525c:	6879      	ldr	r1, [r7, #4]
 801525e:	f7ff fe21 	bl	8014ea4 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
        screenContainer->forEachChild(&initCallback);
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	685a      	ldr	r2, [r3, #4]
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	685b      	ldr	r3, [r3, #4]
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	337c      	adds	r3, #124	; 0x7c
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	f107 0108 	add.w	r1, r7, #8
 8015274:	4610      	mov	r0, r2
 8015276:	4798      	blx	r3
        screenContainer->add(solid);
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	6858      	ldr	r0, [r3, #4]
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	685b      	ldr	r3, [r3, #4]
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	3364      	adds	r3, #100	; 0x64
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	687a      	ldr	r2, [r7, #4]
 8015288:	3228      	adds	r2, #40	; 0x28
 801528a:	4611      	mov	r1, r2
 801528c:	4798      	blx	r3
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 801528e:	f107 0308 	add.w	r3, r7, #8
 8015292:	4618      	mov	r0, r3
 8015294:	f7ff fc3e 	bl	8014b14 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>
    }
 8015298:	bf00      	nop
 801529a:	3720      	adds	r7, #32
 801529c:	46bd      	mov	sp, r7
 801529e:	bd80      	pop	{r7, pc}
 80152a0:	0802266c 	.word	0x0802266c

080152a4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b082      	sub	sp, #8
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
 80152ac:	6039      	str	r1, [r7, #0]
        switch (direction)
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	7f1b      	ldrb	r3, [r3, #28]
 80152b2:	2b03      	cmp	r3, #3
 80152b4:	d83a      	bhi.n	801532c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE+0x88>
 80152b6:	a201      	add	r2, pc, #4	; (adr r2, 80152bc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE+0x18>)
 80152b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152bc:	080152fd 	.word	0x080152fd
 80152c0:	08015317 	.word	0x08015317
 80152c4:	080152cd 	.word	0x080152cd
 80152c8:	080152e3 	.word	0x080152e3
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 80152cc:	683b      	ldr	r3, [r7, #0]
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	3354      	adds	r3, #84	; 0x54
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	4a18      	ldr	r2, [pc, #96]	; (8015338 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE+0x94>)
 80152d6:	8812      	ldrh	r2, [r2, #0]
 80152d8:	b211      	sxth	r1, r2
 80152da:	2200      	movs	r2, #0
 80152dc:	6838      	ldr	r0, [r7, #0]
 80152de:	4798      	blx	r3
            break;
 80152e0:	e025      	b.n	801532e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 80152e2:	683b      	ldr	r3, [r7, #0]
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	3354      	adds	r3, #84	; 0x54
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	4a13      	ldr	r2, [pc, #76]	; (8015338 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE+0x94>)
 80152ec:	8812      	ldrh	r2, [r2, #0]
 80152ee:	4252      	negs	r2, r2
 80152f0:	b292      	uxth	r2, r2
 80152f2:	b211      	sxth	r1, r2
 80152f4:	2200      	movs	r2, #0
 80152f6:	6838      	ldr	r0, [r7, #0]
 80152f8:	4798      	blx	r3
            break;
 80152fa:	e018      	b.n	801532e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 80152fc:	683b      	ldr	r3, [r7, #0]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	3354      	adds	r3, #84	; 0x54
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	4a0d      	ldr	r2, [pc, #52]	; (801533c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8015306:	8812      	ldrh	r2, [r2, #0]
 8015308:	4252      	negs	r2, r2
 801530a:	b292      	uxth	r2, r2
 801530c:	b212      	sxth	r2, r2
 801530e:	2100      	movs	r1, #0
 8015310:	6838      	ldr	r0, [r7, #0]
 8015312:	4798      	blx	r3
            break;
 8015314:	e00b      	b.n	801532e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 8015316:	683b      	ldr	r3, [r7, #0]
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	3354      	adds	r3, #84	; 0x54
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	4a07      	ldr	r2, [pc, #28]	; (801533c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8015320:	8812      	ldrh	r2, [r2, #0]
 8015322:	b212      	sxth	r2, r2
 8015324:	2100      	movs	r1, #0
 8015326:	6838      	ldr	r0, [r7, #0]
 8015328:	4798      	blx	r3
            break;
 801532a:	e000      	b.n	801532e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE+0x8a>
            break;
 801532c:	bf00      	nop
    }
 801532e:	bf00      	nop
 8015330:	3708      	adds	r7, #8
 8015332:	46bd      	mov	sp, r7
 8015334:	bd80      	pop	{r7, pc}
 8015336:	bf00      	nop
 8015338:	2000a320 	.word	0x2000a320
 801533c:	2000a322 	.word	0x2000a322

08015340 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE1EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const { }
 8015340:	b480      	push	{r7}
 8015342:	b083      	sub	sp, #12
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
 8015348:	6039      	str	r1, [r7, #0]
 801534a:	bf00      	nop
 801534c:	370c      	adds	r7, #12
 801534e:	46bd      	mov	sp, r7
 8015350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015354:	4770      	bx	lr
	...

08015358 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE1EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 8015358:	b580      	push	{r7, lr}
 801535a:	b084      	sub	sp, #16
 801535c:	af02      	add	r7, sp, #8
 801535e:	6078      	str	r0, [r7, #4]
 8015360:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8015362:	4b08      	ldr	r3, [pc, #32]	; (8015384 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE1EE13FullSolidRect12getSolidRectEv+0x2c>)
 8015364:	881b      	ldrh	r3, [r3, #0]
 8015366:	b21a      	sxth	r2, r3
 8015368:	4b07      	ldr	r3, [pc, #28]	; (8015388 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE1EE13FullSolidRect12getSolidRectEv+0x30>)
 801536a:	881b      	ldrh	r3, [r3, #0]
 801536c:	b21b      	sxth	r3, r3
 801536e:	9300      	str	r3, [sp, #0]
 8015370:	4613      	mov	r3, r2
 8015372:	2200      	movs	r2, #0
 8015374:	2100      	movs	r1, #0
 8015376:	6878      	ldr	r0, [r7, #4]
 8015378:	f7f6 fcc4 	bl	800bd04 <_ZN8touchgfx4RectC1Essss>
        }
 801537c:	6878      	ldr	r0, [r7, #4]
 801537e:	3708      	adds	r7, #8
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}
 8015384:	2000a320 	.word	0x2000a320
 8015388:	2000a322 	.word	0x2000a322

0801538c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 801538c:	b580      	push	{r7, lr}
 801538e:	b082      	sub	sp, #8
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
 8015394:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	685b      	ldr	r3, [r3, #4]
 801539a:	687a      	ldr	r2, [r7, #4]
 801539c:	68d2      	ldr	r2, [r2, #12]
 801539e:	1052      	asrs	r2, r2, #1
 80153a0:	1898      	adds	r0, r3, r2
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	68db      	ldr	r3, [r3, #12]
 80153a6:	f003 0301 	and.w	r3, r3, #1
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d102      	bne.n	80153b4 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7executeES5_+0x28>
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	689b      	ldr	r3, [r3, #8]
 80153b2:	e00a      	b.n	80153ca <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7executeES5_+0x3e>
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	685b      	ldr	r3, [r3, #4]
 80153b8:	687a      	ldr	r2, [r7, #4]
 80153ba:	68d2      	ldr	r2, [r2, #12]
 80153bc:	1052      	asrs	r2, r2, #1
 80153be:	4413      	add	r3, r2
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	687a      	ldr	r2, [r7, #4]
 80153c4:	6892      	ldr	r2, [r2, #8]
 80153c6:	4413      	add	r3, r2
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	6839      	ldr	r1, [r7, #0]
 80153cc:	4798      	blx	r3
    }
 80153ce:	bf00      	nop
 80153d0:	3708      	adds	r7, #8
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}

080153d6 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 80153d6:	b480      	push	{r7}
 80153d8:	b083      	sub	sp, #12
 80153da:	af00      	add	r7, sp, #0
 80153dc:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	685b      	ldr	r3, [r3, #4]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d010      	beq.n	8015408 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x32>
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	689b      	ldr	r3, [r3, #8]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d107      	bne.n	80153fe <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x28>
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	68db      	ldr	r3, [r3, #12]
 80153f2:	f003 0301 	and.w	r3, r3, #1
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d101      	bne.n	80153fe <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x28>
 80153fa:	2301      	movs	r3, #1
 80153fc:	e000      	b.n	8015400 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x2a>
 80153fe:	2300      	movs	r3, #0
 8015400:	2b01      	cmp	r3, #1
 8015402:	d001      	beq.n	8015408 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x32>
 8015404:	2301      	movs	r3, #1
 8015406:	e000      	b.n	801540a <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x34>
 8015408:	2300      	movs	r3, #0
    }
 801540a:	4618      	mov	r0, r3
 801540c:	370c      	adds	r7, #12
 801540e:	46bd      	mov	sp, r7
 8015410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015414:	4770      	bx	lr
	...

08015418 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EED1Ev>:
    virtual ~SlideTransition()
 8015418:	b580      	push	{r7, lr}
 801541a:	b082      	sub	sp, #8
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
    }
 8015420:	4a0a      	ldr	r2, [pc, #40]	; (801544c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EED1Ev+0x34>)
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	601a      	str	r2, [r3, #0]
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	3340      	adds	r3, #64	; 0x40
 801542a:	4618      	mov	r0, r3
 801542c:	f7ff faa8 	bl	8014980 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvED1Ev>
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	330c      	adds	r3, #12
 8015434:	4618      	mov	r0, r3
 8015436:	f7f8 fadf 	bl	800d9f8 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	4618      	mov	r0, r3
 801543e:	f7fe f983 	bl	8013748 <_ZN8touchgfx10TransitionD1Ev>
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	4618      	mov	r0, r3
 8015446:	3708      	adds	r7, #8
 8015448:	46bd      	mov	sp, r7
 801544a:	bd80      	pop	{r7, pc}
 801544c:	08023308 	.word	0x08023308

08015450 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EED0Ev>:
    virtual ~SlideTransition()
 8015450:	b580      	push	{r7, lr}
 8015452:	b082      	sub	sp, #8
 8015454:	af00      	add	r7, sp, #0
 8015456:	6078      	str	r0, [r7, #4]
    }
 8015458:	6878      	ldr	r0, [r7, #4]
 801545a:	f7ff ffdd 	bl	8015418 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EED1Ev>
 801545e:	2158      	movs	r1, #88	; 0x58
 8015460:	6878      	ldr	r0, [r7, #4]
 8015462:	f00b fe8c 	bl	802117e <_ZdlPvj>
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	4618      	mov	r0, r3
 801546a:	3708      	adds	r7, #8
 801546c:	46bd      	mov	sp, r7
 801546e:	bd80      	pop	{r7, pc}

08015470 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8015470:	b580      	push	{r7, lr}
 8015472:	b082      	sub	sp, #8
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 8015478:	4b59      	ldr	r3, [pc, #356]	; (80155e0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0x170>)
 801547a:	781b      	ldrb	r3, [r3, #0]
 801547c:	f083 0301 	eor.w	r3, r3, #1
 8015480:	b2db      	uxtb	r3, r3
 8015482:	2b00      	cmp	r3, #0
 8015484:	d003      	beq.n	801548e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0x1e>
            done = true;
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	2201      	movs	r2, #1
 801548a:	721a      	strb	r2, [r3, #8]
            return;
 801548c:	e0a5      	b.n	80155da <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	4618      	mov	r0, r3
 8015492:	f7fe f979 	bl	8013788 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 801549c:	3301      	adds	r3, #1
 801549e:	b2da      	uxtb	r2, r3
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        if (animationCounter <= animationSteps)
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80154b2:	429a      	cmp	r2, r3
 80154b4:	d82f      	bhi.n	8015516 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80154bc:	b298      	uxth	r0, r3
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80154ca:	b29b      	uxth	r3, r3
 80154cc:	2100      	movs	r1, #0
 80154ce:	f009 fdcd 	bl	801f06c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80154d2:	4603      	mov	r3, r0
 80154d4:	461a      	mov	r2, r3
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
            if (calculatedValue % 2)
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 80154e2:	b29b      	uxth	r3, r3
 80154e4:	f003 0301 	and.w	r3, r3, #1
 80154e8:	b29b      	uxth	r3, r3
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d01b      	beq.n	8015526 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 80154f4:	b29b      	uxth	r3, r3
 80154f6:	687a      	ldr	r2, [r7, #4]
 80154f8:	f9b2 2056 	ldrsh.w	r2, [r2, #86]	; 0x56
 80154fc:	2a00      	cmp	r2, #0
 80154fe:	dd01      	ble.n	8015504 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0x94>
 8015500:	2201      	movs	r2, #1
 8015502:	e001      	b.n	8015508 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0x98>
 8015504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015508:	4413      	add	r3, r2
 801550a:	b29b      	uxth	r3, r3
 801550c:	b21a      	sxth	r2, r3
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8015514:	e007      	b.n	8015526 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0xb6>
            done = true;
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	2201      	movs	r2, #1
 801551a:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	2200      	movs	r2, #0
 8015520:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
            return;
 8015524:	e059      	b.n	80155da <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0x16a>
        switch (direction)
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801552c:	2b03      	cmp	r3, #3
 801552e:	d845      	bhi.n	80155bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0x14c>
 8015530:	a201      	add	r2, pc, #4	; (adr r2, 8015538 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0xc8>)
 8015532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015536:	bf00      	nop
 8015538:	08015583 	.word	0x08015583
 801553c:	08015583 	.word	0x08015583
 8015540:	08015549 	.word	0x08015549
 8015544:	08015549 	.word	0x08015549
            calculatedValue -= snapshot.getX();
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	330c      	adds	r3, #12
 801554c:	4618      	mov	r0, r3
 801554e:	f7f6 fe12 	bl	800c176 <_ZNK8touchgfx8Drawable4getXEv>
 8015552:	4603      	mov	r3, r0
 8015554:	4619      	mov	r1, r3
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 801555c:	b29a      	uxth	r2, r3
 801555e:	b28b      	uxth	r3, r1
 8015560:	1ad3      	subs	r3, r2, r3
 8015562:	b29b      	uxth	r3, r3
 8015564:	b21a      	sxth	r2, r3
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
            snapshot.moveRelative(calculatedValue, 0);
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	f103 000c 	add.w	r0, r3, #12
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8015578:	2200      	movs	r2, #0
 801557a:	4619      	mov	r1, r3
 801557c:	f009 f925 	bl	801e7ca <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8015580:	e020      	b.n	80155c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	330c      	adds	r3, #12
 8015586:	4618      	mov	r0, r3
 8015588:	f7f6 fe02 	bl	800c190 <_ZNK8touchgfx8Drawable4getYEv>
 801558c:	4603      	mov	r3, r0
 801558e:	4619      	mov	r1, r3
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8015596:	b29a      	uxth	r2, r3
 8015598:	b28b      	uxth	r3, r1
 801559a:	1ad3      	subs	r3, r2, r3
 801559c:	b29b      	uxth	r3, r3
 801559e:	b21a      	sxth	r2, r3
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
            snapshot.moveRelative(0, calculatedValue);
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	f103 000c 	add.w	r0, r3, #12
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 80155b2:	461a      	mov	r2, r3
 80155b4:	2100      	movs	r1, #0
 80155b6:	f009 f908 	bl	801e7ca <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 80155ba:	e003      	b.n	80155c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE15handleTickEventEv+0x154>
            done = true;
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	2201      	movs	r2, #1
 80155c0:	721a      	strb	r2, [r3, #8]
            break;
 80155c2:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	6858      	ldr	r0, [r3, #4]
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	685b      	ldr	r3, [r3, #4]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	337c      	adds	r3, #124	; 0x7c
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	687a      	ldr	r2, [r7, #4]
 80155d4:	3240      	adds	r2, #64	; 0x40
 80155d6:	4611      	mov	r1, r2
 80155d8:	4798      	blx	r3
    }
 80155da:	3708      	adds	r7, #8
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}
 80155e0:	2000a32b 	.word	0x2000a32b

080155e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE8tearDownEv>:
    virtual void tearDown()
 80155e4:	b580      	push	{r7, lr}
 80155e6:	b082      	sub	sp, #8
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 80155ec:	4b09      	ldr	r3, [pc, #36]	; (8015614 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE8tearDownEv+0x30>)
 80155ee:	781b      	ldrb	r3, [r3, #0]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d00a      	beq.n	801560a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE8tearDownEv+0x26>
            screenContainer->remove(snapshot);
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	6858      	ldr	r0, [r3, #4]
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	685b      	ldr	r3, [r3, #4]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	3368      	adds	r3, #104	; 0x68
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	687a      	ldr	r2, [r7, #4]
 8015604:	320c      	adds	r2, #12
 8015606:	4611      	mov	r1, r2
 8015608:	4798      	blx	r3
    }
 801560a:	bf00      	nop
 801560c:	3708      	adds	r7, #8
 801560e:	46bd      	mov	sp, r7
 8015610:	bd80      	pop	{r7, pc}
 8015612:	bf00      	nop
 8015614:	2000a32b 	.word	0x2000a32b

08015618 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE4initEv>:
    virtual void init()
 8015618:	b580      	push	{r7, lr}
 801561a:	b088      	sub	sp, #32
 801561c:	af00      	add	r7, sp, #0
 801561e:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 8015620:	4b1a      	ldr	r3, [pc, #104]	; (801568c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE4initEv+0x74>)
 8015622:	781b      	ldrb	r3, [r3, #0]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d02d      	beq.n	8015684 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE4initEv+0x6c>
            Transition::init();
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	4618      	mov	r0, r3
 801562c:	f7fe f8c0 	bl	80137b0 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8015630:	4a17      	ldr	r2, [pc, #92]	; (8015690 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE4initEv+0x78>)
 8015632:	f107 0318 	add.w	r3, r7, #24
 8015636:	e892 0003 	ldmia.w	r2, {r0, r1}
 801563a:	e883 0003 	stmia.w	r3, {r0, r1}
 801563e:	f107 0008 	add.w	r0, r7, #8
 8015642:	f107 0318 	add.w	r3, r7, #24
 8015646:	cb0c      	ldmia	r3, {r2, r3}
 8015648:	6879      	ldr	r1, [r7, #4]
 801564a:	f7ff fbd9 	bl	8014e00 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	685a      	ldr	r2, [r3, #4]
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	685b      	ldr	r3, [r3, #4]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	337c      	adds	r3, #124	; 0x7c
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	f107 0108 	add.w	r1, r7, #8
 8015660:	4610      	mov	r0, r2
 8015662:	4798      	blx	r3
            screenContainer->add(snapshot);
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	6858      	ldr	r0, [r3, #4]
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	685b      	ldr	r3, [r3, #4]
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	3364      	adds	r3, #100	; 0x64
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	687a      	ldr	r2, [r7, #4]
 8015674:	320c      	adds	r2, #12
 8015676:	4611      	mov	r1, r2
 8015678:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 801567a:	f107 0308 	add.w	r3, r7, #8
 801567e:	4618      	mov	r0, r3
 8015680:	f7ff f97e 	bl	8014980 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvED1Ev>
    }
 8015684:	bf00      	nop
 8015686:	3720      	adds	r7, #32
 8015688:	46bd      	mov	sp, r7
 801568a:	bd80      	pop	{r7, pc}
 801568c:	2000a32b 	.word	0x2000a32b
 8015690:	08022674 	.word	0x08022674

08015694 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8015694:	b580      	push	{r7, lr}
 8015696:	b082      	sub	sp, #8
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
 801569c:	6039      	str	r1, [r7, #0]
        switch (direction)
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80156a4:	2b03      	cmp	r3, #3
 80156a6:	d83b      	bhi.n	8015720 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE+0x8c>
 80156a8:	a201      	add	r2, pc, #4	; (adr r2, 80156b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 80156aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156ae:	bf00      	nop
 80156b0:	080156f1 	.word	0x080156f1
 80156b4:	0801570b 	.word	0x0801570b
 80156b8:	080156c1 	.word	0x080156c1
 80156bc:	080156d7 	.word	0x080156d7
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 80156c0:	683b      	ldr	r3, [r7, #0]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	3354      	adds	r3, #84	; 0x54
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	4a18      	ldr	r2, [pc, #96]	; (801572c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE+0x98>)
 80156ca:	8812      	ldrh	r2, [r2, #0]
 80156cc:	b211      	sxth	r1, r2
 80156ce:	2200      	movs	r2, #0
 80156d0:	6838      	ldr	r0, [r7, #0]
 80156d2:	4798      	blx	r3
            break;
 80156d4:	e025      	b.n	8015722 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 80156d6:	683b      	ldr	r3, [r7, #0]
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	3354      	adds	r3, #84	; 0x54
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	4a13      	ldr	r2, [pc, #76]	; (801572c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE+0x98>)
 80156e0:	8812      	ldrh	r2, [r2, #0]
 80156e2:	4252      	negs	r2, r2
 80156e4:	b292      	uxth	r2, r2
 80156e6:	b211      	sxth	r1, r2
 80156e8:	2200      	movs	r2, #0
 80156ea:	6838      	ldr	r0, [r7, #0]
 80156ec:	4798      	blx	r3
            break;
 80156ee:	e018      	b.n	8015722 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 80156f0:	683b      	ldr	r3, [r7, #0]
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	3354      	adds	r3, #84	; 0x54
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	4a0d      	ldr	r2, [pc, #52]	; (8015730 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 80156fa:	8812      	ldrh	r2, [r2, #0]
 80156fc:	4252      	negs	r2, r2
 80156fe:	b292      	uxth	r2, r2
 8015700:	b212      	sxth	r2, r2
 8015702:	2100      	movs	r1, #0
 8015704:	6838      	ldr	r0, [r7, #0]
 8015706:	4798      	blx	r3
            break;
 8015708:	e00b      	b.n	8015722 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 801570a:	683b      	ldr	r3, [r7, #0]
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	3354      	adds	r3, #84	; 0x54
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	4a07      	ldr	r2, [pc, #28]	; (8015730 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 8015714:	8812      	ldrh	r2, [r2, #0]
 8015716:	b212      	sxth	r2, r2
 8015718:	2100      	movs	r1, #0
 801571a:	6838      	ldr	r0, [r7, #0]
 801571c:	4798      	blx	r3
            break;
 801571e:	e000      	b.n	8015722 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE0EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 8015720:	bf00      	nop
    }
 8015722:	bf00      	nop
 8015724:	3708      	adds	r7, #8
 8015726:	46bd      	mov	sp, r7
 8015728:	bd80      	pop	{r7, pc}
 801572a:	bf00      	nop
 801572c:	2000a320 	.word	0x2000a320
 8015730:	2000a322 	.word	0x2000a322

08015734 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8015734:	b580      	push	{r7, lr}
 8015736:	b082      	sub	sp, #8
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
 801573c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	685b      	ldr	r3, [r3, #4]
 8015742:	687a      	ldr	r2, [r7, #4]
 8015744:	68d2      	ldr	r2, [r2, #12]
 8015746:	1052      	asrs	r2, r2, #1
 8015748:	1898      	adds	r0, r3, r2
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	68db      	ldr	r3, [r3, #12]
 801574e:	f003 0301 	and.w	r3, r3, #1
 8015752:	2b00      	cmp	r3, #0
 8015754:	d102      	bne.n	801575c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvE7executeES5_+0x28>
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	689b      	ldr	r3, [r3, #8]
 801575a:	e00a      	b.n	8015772 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvE7executeES5_+0x3e>
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	685b      	ldr	r3, [r3, #4]
 8015760:	687a      	ldr	r2, [r7, #4]
 8015762:	68d2      	ldr	r2, [r2, #12]
 8015764:	1052      	asrs	r2, r2, #1
 8015766:	4413      	add	r3, r2
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	687a      	ldr	r2, [r7, #4]
 801576c:	6892      	ldr	r2, [r2, #8]
 801576e:	4413      	add	r3, r2
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	6839      	ldr	r1, [r7, #0]
 8015774:	4798      	blx	r3
    }
 8015776:	bf00      	nop
 8015778:	3708      	adds	r7, #8
 801577a:	46bd      	mov	sp, r7
 801577c:	bd80      	pop	{r7, pc}

0801577e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 801577e:	b480      	push	{r7}
 8015780:	b083      	sub	sp, #12
 8015782:	af00      	add	r7, sp, #0
 8015784:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	685b      	ldr	r3, [r3, #4]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d010      	beq.n	80157b0 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvE7isValidEv+0x32>
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	689b      	ldr	r3, [r3, #8]
 8015792:	2b00      	cmp	r3, #0
 8015794:	d107      	bne.n	80157a6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvE7isValidEv+0x28>
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	68db      	ldr	r3, [r3, #12]
 801579a:	f003 0301 	and.w	r3, r3, #1
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d101      	bne.n	80157a6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvE7isValidEv+0x28>
 80157a2:	2301      	movs	r3, #1
 80157a4:	e000      	b.n	80157a8 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvE7isValidEv+0x2a>
 80157a6:	2300      	movs	r3, #0
 80157a8:	2b01      	cmp	r3, #1
 80157aa:	d001      	beq.n	80157b0 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvE7isValidEv+0x32>
 80157ac:	2301      	movs	r3, #1
 80157ae:	e000      	b.n	80157b2 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE0EEERNS_8DrawableEvvE7isValidEv+0x34>
 80157b0:	2300      	movs	r3, #0
    }
 80157b2:	4618      	mov	r0, r3
 80157b4:	370c      	adds	r7, #12
 80157b6:	46bd      	mov	sp, r7
 80157b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157bc:	4770      	bx	lr

080157be <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 80157be:	b580      	push	{r7, lr}
 80157c0:	b082      	sub	sp, #8
 80157c2:	af00      	add	r7, sp, #0
 80157c4:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	685b      	ldr	r3, [r3, #4]
 80157ca:	687a      	ldr	r2, [r7, #4]
 80157cc:	68d2      	ldr	r2, [r2, #12]
 80157ce:	1052      	asrs	r2, r2, #1
 80157d0:	1899      	adds	r1, r3, r2
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	68db      	ldr	r3, [r3, #12]
 80157d6:	f003 0301 	and.w	r3, r3, #1
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d102      	bne.n	80157e4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	689b      	ldr	r3, [r3, #8]
 80157e2:	e00a      	b.n	80157fa <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	685b      	ldr	r3, [r3, #4]
 80157e8:	687a      	ldr	r2, [r7, #4]
 80157ea:	68d2      	ldr	r2, [r2, #12]
 80157ec:	1052      	asrs	r2, r2, #1
 80157ee:	4413      	add	r3, r2
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	687a      	ldr	r2, [r7, #4]
 80157f4:	6892      	ldr	r2, [r2, #8]
 80157f6:	4413      	add	r3, r2
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	4608      	mov	r0, r1
 80157fc:	4798      	blx	r3
    }
 80157fe:	bf00      	nop
 8015800:	3708      	adds	r7, #8
 8015802:	46bd      	mov	sp, r7
 8015804:	bd80      	pop	{r7, pc}

08015806 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8015806:	b480      	push	{r7}
 8015808:	b083      	sub	sp, #12
 801580a:	af00      	add	r7, sp, #0
 801580c:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	685b      	ldr	r3, [r3, #4]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d010      	beq.n	8015838 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	689b      	ldr	r3, [r3, #8]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d107      	bne.n	801582e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	68db      	ldr	r3, [r3, #12]
 8015822:	f003 0301 	and.w	r3, r3, #1
 8015826:	2b00      	cmp	r3, #0
 8015828:	d101      	bne.n	801582e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801582a:	2301      	movs	r3, #1
 801582c:	e000      	b.n	8015830 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 801582e:	2300      	movs	r3, #0
 8015830:	2b01      	cmp	r3, #1
 8015832:	d001      	beq.n	8015838 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8015834:	2301      	movs	r3, #1
 8015836:	e000      	b.n	801583a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8015838:	2300      	movs	r3, #0
    }
 801583a:	4618      	mov	r0, r3
 801583c:	370c      	adds	r7, #12
 801583e:	46bd      	mov	sp, r7
 8015840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015844:	4770      	bx	lr
	...

08015848 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 8015848:	b580      	push	{r7, lr}
 801584a:	b082      	sub	sp, #8
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
 8015850:	4a06      	ldr	r2, [pc, #24]	; (801586c <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	601a      	str	r2, [r3, #0]
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	3304      	adds	r3, #4
 801585a:	4618      	mov	r0, r3
 801585c:	f7f6 fd72 	bl	800c344 <_ZN8touchgfx9ContainerD1Ev>
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	4618      	mov	r0, r3
 8015864:	3708      	adds	r7, #8
 8015866:	46bd      	mov	sp, r7
 8015868:	bd80      	pop	{r7, pc}
 801586a:	bf00      	nop
 801586c:	080254ec 	.word	0x080254ec

08015870 <_ZN8touchgfx6ScreenD0Ev>:
 8015870:	b580      	push	{r7, lr}
 8015872:	b082      	sub	sp, #8
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
 8015878:	6878      	ldr	r0, [r7, #4]
 801587a:	f7ff ffe5 	bl	8015848 <_ZN8touchgfx6ScreenD1Ev>
 801587e:	213c      	movs	r1, #60	; 0x3c
 8015880:	6878      	ldr	r0, [r7, #4]
 8015882:	f00b fc7c 	bl	802117e <_ZdlPvj>
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	4618      	mov	r0, r3
 801588a:	3708      	adds	r7, #8
 801588c:	46bd      	mov	sp, r7
 801588e:	bd80      	pop	{r7, pc}

08015890 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 8015890:	b480      	push	{r7}
 8015892:	b083      	sub	sp, #12
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
 8015898:	bf00      	nop
 801589a:	370c      	adds	r7, #12
 801589c:	46bd      	mov	sp, r7
 801589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a2:	4770      	bx	lr

080158a4 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 80158a4:	b480      	push	{r7}
 80158a6:	b083      	sub	sp, #12
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
 80158ac:	bf00      	nop
 80158ae:	370c      	adds	r7, #12
 80158b0:	46bd      	mov	sp, r7
 80158b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b6:	4770      	bx	lr

080158b8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 80158b8:	b480      	push	{r7}
 80158ba:	b083      	sub	sp, #12
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
 80158c0:	bf00      	nop
 80158c2:	370c      	adds	r7, #12
 80158c4:	46bd      	mov	sp, r7
 80158c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ca:	4770      	bx	lr

080158cc <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80158cc:	b480      	push	{r7}
 80158ce:	b083      	sub	sp, #12
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
    {
    }
 80158d4:	bf00      	nop
 80158d6:	370c      	adds	r7, #12
 80158d8:	46bd      	mov	sp, r7
 80158da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158de:	4770      	bx	lr

080158e0 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80158e0:	b480      	push	{r7}
 80158e2:	b083      	sub	sp, #12
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
 80158e8:	460b      	mov	r3, r1
 80158ea:	70fb      	strb	r3, [r7, #3]
    {
    }
 80158ec:	bf00      	nop
 80158ee:	370c      	adds	r7, #12
 80158f0:	46bd      	mov	sp, r7
 80158f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f6:	4770      	bx	lr

080158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 80158f8:	b580      	push	{r7, lr}
 80158fa:	b082      	sub	sp, #8
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	6078      	str	r0, [r7, #4]
 8015900:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	3304      	adds	r3, #4
 8015906:	6839      	ldr	r1, [r7, #0]
 8015908:	4618      	mov	r0, r3
 801590a:	f7f6 fd6b 	bl	800c3e4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801590e:	bf00      	nop
 8015910:	3708      	adds	r7, #8
 8015912:	46bd      	mov	sp, r7
 8015914:	bd80      	pop	{r7, pc}
	...

08015918 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
    /**
     * @fn AbstractButtonContainer::AbstractButtonContainer()
     *
     * @brief Default constructor.
     */
    AbstractButtonContainer() : pressed(false), alpha(255), action(0)
 8015918:	b580      	push	{r7, lr}
 801591a:	b082      	sub	sp, #8
 801591c:	af00      	add	r7, sp, #0
 801591e:	6078      	str	r0, [r7, #4]
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	4618      	mov	r0, r3
 8015924:	f7f7 f8e8 	bl	800caf8 <_ZN8touchgfx9ContainerC1Ev>
 8015928:	4a0b      	ldr	r2, [pc, #44]	; (8015958 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	601a      	str	r2, [r3, #0]
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	2200      	movs	r2, #0
 8015932:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	22ff      	movs	r2, #255	; 0xff
 801593a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	2200      	movs	r2, #0
 8015942:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	2101      	movs	r1, #1
 8015948:	4618      	mov	r0, r3
 801594a:	f7f7 f89b 	bl	800ca84 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	4618      	mov	r0, r3
 8015952:	3708      	adds	r7, #8
 8015954:	46bd      	mov	sp, r7
 8015956:	bd80      	pop	{r7, pc}
 8015958:	08023f78 	.word	0x08023f78

0801595c <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
    /**
     * @fn virtual AbstractButtonContainer::~AbstractButtonContainer()
     *
     * @brief Destructor.
     */
    virtual ~AbstractButtonContainer() {}
 801595c:	b580      	push	{r7, lr}
 801595e:	b082      	sub	sp, #8
 8015960:	af00      	add	r7, sp, #0
 8015962:	6078      	str	r0, [r7, #4]
 8015964:	4a05      	ldr	r2, [pc, #20]	; (801597c <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	601a      	str	r2, [r3, #0]
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	4618      	mov	r0, r3
 801596e:	f7f6 fce9 	bl	800c344 <_ZN8touchgfx9ContainerD1Ev>
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	4618      	mov	r0, r3
 8015976:	3708      	adds	r7, #8
 8015978:	46bd      	mov	sp, r7
 801597a:	bd80      	pop	{r7, pc}
 801597c:	08023f78 	.word	0x08023f78

08015980 <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 8015980:	b580      	push	{r7, lr}
 8015982:	b082      	sub	sp, #8
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
 8015988:	6878      	ldr	r0, [r7, #4]
 801598a:	f7ff ffe7 	bl	801595c <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 801598e:	2134      	movs	r1, #52	; 0x34
 8015990:	6878      	ldr	r0, [r7, #4]
 8015992:	f00b fbf4 	bl	802117e <_ZdlPvj>
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	4618      	mov	r0, r3
 801599a:	3708      	adds	r7, #8
 801599c:	46bd      	mov	sp, r7
 801599e:	bd80      	pop	{r7, pc}

080159a0 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @brief Sets the pressed state.
     *
     * @param isPressed True if is pressed, false if not.
     */
    void setPressed(bool isPressed)
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b082      	sub	sp, #8
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
 80159a8:	460b      	mov	r3, r1
 80159aa:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	78fa      	ldrb	r2, [r7, #3]
 80159b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	3388      	adds	r3, #136	; 0x88
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	6878      	ldr	r0, [r7, #4]
 80159be:	4798      	blx	r3
    }
 80159c0:	bf00      	nop
 80159c2:	3708      	adds	r7, #8
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd80      	pop	{r7, pc}

080159c8 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @brief Gets the pressed state.
     *
     * @return True if it succeeds, false if it fails.
     */
    bool getPressed()
 80159c8:	b480      	push	{r7}
 80159ca:	b083      	sub	sp, #12
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 80159d6:	4618      	mov	r0, r3
 80159d8:	370c      	adds	r7, #12
 80159da:	46bd      	mov	sp, r7
 80159dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e0:	4770      	bx	lr

080159e2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
     *
     * @brief Gets the alpha.
     *
     * @return The alpha value.
     */
    uint8_t getAlpha() const
 80159e2:	b480      	push	{r7}
 80159e4:	b083      	sub	sp, #12
 80159e6:	af00      	add	r7, sp, #0
 80159e8:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 80159f0:	4618      	mov	r0, r3
 80159f2:	370c      	adds	r7, #12
 80159f4:	46bd      	mov	sp, r7
 80159f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fa:	4770      	bx	lr

080159fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     *
     * @brief Sets an action callback.
     *
     * @param callback The callback.
     */
    void setAction(GenericCallback< const AbstractButtonContainer& >& callback)
 80159fc:	b480      	push	{r7}
 80159fe:	b083      	sub	sp, #12
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
 8015a04:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	683a      	ldr	r2, [r7, #0]
 8015a0a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8015a0c:	bf00      	nop
 8015a0e:	370c      	adds	r7, #12
 8015a10:	46bd      	mov	sp, r7
 8015a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a16:	4770      	bx	lr

08015a18 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated() {};
 8015a18:	b480      	push	{r7}
 8015a1a:	b083      	sub	sp, #12
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
 8015a20:	bf00      	nop
 8015a22:	370c      	adds	r7, #12
 8015a24:	46bd      	mov	sp, r7
 8015a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a2a:	4770      	bx	lr

08015a2c <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated() {};
 8015a2c:	b480      	push	{r7}
 8015a2e:	b083      	sub	sp, #12
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
 8015a34:	bf00      	nop
 8015a36:	370c      	adds	r7, #12
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a3e:	4770      	bx	lr

08015a40 <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
    /**
     * @fn ClickButtonTrigger::ClickButtonTrigger()
     *
     * @brief Default constructor.
     */
    ClickButtonTrigger() :
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b082      	sub	sp, #8
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
        AbstractButtonContainer() { }
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	f7ff ff64 	bl	8015918 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8015a50:	4a03      	ldr	r2, [pc, #12]	; (8015a60 <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	601a      	str	r2, [r3, #0]
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	4618      	mov	r0, r3
 8015a5a:	3708      	adds	r7, #8
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	bd80      	pop	{r7, pc}
 8015a60:	08023ec8 	.word	0x08023ec8

08015a64 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
    /**
     * @fn virtual ClickButtonTrigger::~ClickButtonTrigger()
     *
     * @brief Destructor.
     */
    virtual ~ClickButtonTrigger() { }
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b082      	sub	sp, #8
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
 8015a6c:	4a05      	ldr	r2, [pc, #20]	; (8015a84 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	601a      	str	r2, [r3, #0]
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	4618      	mov	r0, r3
 8015a76:	f7ff ff71 	bl	801595c <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	3708      	adds	r7, #8
 8015a80:	46bd      	mov	sp, r7
 8015a82:	bd80      	pop	{r7, pc}
 8015a84:	08023ec8 	.word	0x08023ec8

08015a88 <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b082      	sub	sp, #8
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
 8015a90:	6878      	ldr	r0, [r7, #4]
 8015a92:	f7ff ffe7 	bl	8015a64 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 8015a96:	2134      	movs	r1, #52	; 0x34
 8015a98:	6878      	ldr	r0, [r7, #4]
 8015a9a:	f00b fb70 	bl	802117e <_ZdlPvj>
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	3708      	adds	r7, #8
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	bd80      	pop	{r7, pc}

08015aa8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *        callback is called when receiving a REALEASED event in
     *        PRESSED state.
     *
     * @param event The event.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b084      	sub	sp, #16
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	6078      	str	r0, [r7, #4]
 8015ab0:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f7ff ff87 	bl	80159c8 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8015aba:	4603      	mov	r3, r0
 8015abc:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8015abe:	6838      	ldr	r0, [r7, #0]
 8015ac0:	f7f7 f968 	bl	800cd94 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8015ac4:	4603      	mov	r3, r0
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	bf0c      	ite	eq
 8015aca:	2301      	moveq	r3, #1
 8015acc:	2300      	movne	r3, #0
 8015ace:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8015ad0:	7bbb      	ldrb	r3, [r7, #14]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d005      	beq.n	8015ae2 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 8015ad6:	7bfb      	ldrb	r3, [r7, #15]
 8015ad8:	f083 0301 	eor.w	r3, r3, #1
 8015adc:	b2db      	uxtb	r3, r3
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d108      	bne.n	8015af4 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 8015ae2:	7bbb      	ldrb	r3, [r7, #14]
 8015ae4:	f083 0301 	eor.w	r3, r3, #1
 8015ae8:	b2db      	uxtb	r3, r3
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d00f      	beq.n	8015b0e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 8015aee:	7bfb      	ldrb	r3, [r7, #15]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d00c      	beq.n	8015b0e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	7bba      	ldrb	r2, [r7, #14]
 8015af8:	4611      	mov	r1, r2
 8015afa:	4618      	mov	r0, r3
 8015afc:	f7ff ff50 	bl	80159a0 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8015b00:	687a      	ldr	r2, [r7, #4]
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	3314      	adds	r3, #20
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	4610      	mov	r0, r2
 8015b0c:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 8015b0e:	7bfb      	ldrb	r3, [r7, #15]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d00b      	beq.n	8015b2c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8015b14:	6838      	ldr	r0, [r7, #0]
 8015b16:	f7f7 f93d 	bl	800cd94 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	2b01      	cmp	r3, #1
 8015b1e:	d105      	bne.n	8015b2c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d001      	beq.n	8015b2c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8015b28:	2301      	movs	r3, #1
 8015b2a:	e000      	b.n	8015b2e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x86>
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d015      	beq.n	8015b5e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
        {
            if (action->isValid())
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	330c      	adds	r3, #12
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	4610      	mov	r0, r2
 8015b42:	4798      	blx	r3
 8015b44:	4603      	mov	r3, r0
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d009      	beq.n	8015b5e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
            {
                action->execute(*this);
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	3308      	adds	r3, #8
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	6879      	ldr	r1, [r7, #4]
 8015b5a:	4610      	mov	r0, r2
 8015b5c:	4798      	blx	r3
            }
        }
    }
 8015b5e:	bf00      	nop
 8015b60:	3710      	adds	r7, #16
 8015b62:	46bd      	mov	sp, r7
 8015b64:	bd80      	pop	{r7, pc}
	...

08015b68 <_ZN8touchgfx19RepeatButtonTriggerC1Ev>:
    /**
     * @fn RepeatButtonTrigger::RepeatButtonTrigger()
     *
     * @brief Default constructor.
     */
    RepeatButtonTrigger() :
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b082      	sub	sp, #8
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]
        AbstractButtonContainer(), ticksDelay(30), ticksInterval(15), ticks(0), ticksBeforeContinuous(0) { }
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	4618      	mov	r0, r3
 8015b74:	f7ff fed0 	bl	8015918 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8015b78:	4a09      	ldr	r2, [pc, #36]	; (8015ba0 <_ZN8touchgfx19RepeatButtonTriggerC1Ev+0x38>)
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	601a      	str	r2, [r3, #0]
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	221e      	movs	r2, #30
 8015b82:	869a      	strh	r2, [r3, #52]	; 0x34
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	220f      	movs	r2, #15
 8015b88:	86da      	strh	r2, [r3, #54]	; 0x36
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	2200      	movs	r2, #0
 8015b8e:	871a      	strh	r2, [r3, #56]	; 0x38
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	2200      	movs	r2, #0
 8015b94:	875a      	strh	r2, [r3, #58]	; 0x3a
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	4618      	mov	r0, r3
 8015b9a:	3708      	adds	r7, #8
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	bd80      	pop	{r7, pc}
 8015ba0:	08023e30 	.word	0x08023e30

08015ba4 <_ZN8touchgfx19RepeatButtonTriggerD1Ev>:
    /**
     * @fn virtual RepeatButtonTrigger::~RepeatButtonTrigger()
     *
     * @brief Destructor.
     */
    virtual ~RepeatButtonTrigger() { }
 8015ba4:	b580      	push	{r7, lr}
 8015ba6:	b082      	sub	sp, #8
 8015ba8:	af00      	add	r7, sp, #0
 8015baa:	6078      	str	r0, [r7, #4]
 8015bac:	4a05      	ldr	r2, [pc, #20]	; (8015bc4 <_ZN8touchgfx19RepeatButtonTriggerD1Ev+0x20>)
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	601a      	str	r2, [r3, #0]
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f7ff fed1 	bl	801595c <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	3708      	adds	r7, #8
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	bd80      	pop	{r7, pc}
 8015bc4:	08023e30 	.word	0x08023e30

08015bc8 <_ZN8touchgfx19RepeatButtonTriggerD0Ev>:
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b082      	sub	sp, #8
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	6078      	str	r0, [r7, #4]
 8015bd0:	6878      	ldr	r0, [r7, #4]
 8015bd2:	f7ff ffe7 	bl	8015ba4 <_ZN8touchgfx19RepeatButtonTriggerD1Ev>
 8015bd6:	213c      	movs	r1, #60	; 0x3c
 8015bd8:	6878      	ldr	r0, [r7, #4]
 8015bda:	f00b fad0 	bl	802117e <_ZdlPvj>
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	4618      	mov	r0, r3
 8015be2:	3708      	adds	r7, #8
 8015be4:	46bd      	mov	sp, r7
 8015be6:	bd80      	pop	{r7, pc}

08015be8 <_ZN8touchgfx19RepeatButtonTrigger8setDelayEi>:
     *
     * @brief Sets a delay.
     *
     * @param delay The delay.
     */
    void setDelay(int delay)
 8015be8:	b480      	push	{r7}
 8015bea:	b083      	sub	sp, #12
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	6078      	str	r0, [r7, #4]
 8015bf0:	6039      	str	r1, [r7, #0]
    {
        ticksDelay = delay;
 8015bf2:	683b      	ldr	r3, [r7, #0]
 8015bf4:	b21a      	sxth	r2, r3
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8015bfa:	bf00      	nop
 8015bfc:	370c      	adds	r7, #12
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c04:	4770      	bx	lr

08015c06 <_ZN8touchgfx19RepeatButtonTrigger11setIntervalEi>:
     *
     * @brief Sets an interval.
     *
     * @param interval The interval.
     */
    void setInterval(int interval)
 8015c06:	b480      	push	{r7}
 8015c08:	b083      	sub	sp, #12
 8015c0a:	af00      	add	r7, sp, #0
 8015c0c:	6078      	str	r0, [r7, #4]
 8015c0e:	6039      	str	r1, [r7, #0]
    {
        ticksInterval = interval;
 8015c10:	683b      	ldr	r3, [r7, #0]
 8015c12:	b21a      	sxth	r2, r3
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
 8015c18:	bf00      	nop
 8015c1a:	370c      	adds	r7, #12
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c22:	4770      	bx	lr

08015c24 <_ZN8touchgfx19RepeatButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @brief Handles the click event described by event.
     *
     * @param event The event.
     */
    void handleClickEvent(const touchgfx::ClickEvent& event)
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b084      	sub	sp, #16
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	6078      	str	r0, [r7, #4]
 8015c2c:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	4618      	mov	r0, r3
 8015c32:	f7ff fec9 	bl	80159c8 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8015c36:	4603      	mov	r3, r0
 8015c38:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8015c3a:	6838      	ldr	r0, [r7, #0]
 8015c3c:	f7f7 f8aa 	bl	800cd94 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8015c40:	4603      	mov	r3, r0
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	bf0c      	ite	eq
 8015c46:	2301      	moveq	r3, #1
 8015c48:	2300      	movne	r3, #0
 8015c4a:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8015c4c:	7bbb      	ldrb	r3, [r7, #14]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d005      	beq.n	8015c5e <_ZN8touchgfx19RepeatButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 8015c52:	7bfb      	ldrb	r3, [r7, #15]
 8015c54:	f083 0301 	eor.w	r3, r3, #1
 8015c58:	b2db      	uxtb	r3, r3
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d108      	bne.n	8015c70 <_ZN8touchgfx19RepeatButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 8015c5e:	7bbb      	ldrb	r3, [r7, #14]
 8015c60:	f083 0301 	eor.w	r3, r3, #1
 8015c64:	b2db      	uxtb	r3, r3
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d00f      	beq.n	8015c8a <_ZN8touchgfx19RepeatButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 8015c6a:	7bfb      	ldrb	r3, [r7, #15]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d00c      	beq.n	8015c8a <_ZN8touchgfx19RepeatButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	7bba      	ldrb	r2, [r7, #14]
 8015c74:	4611      	mov	r1, r2
 8015c76:	4618      	mov	r0, r3
 8015c78:	f7ff fe92 	bl	80159a0 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8015c7c:	687a      	ldr	r2, [r7, #4]
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	3314      	adds	r3, #20
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	4610      	mov	r0, r2
 8015c88:	4798      	blx	r3
        }

        if (event.getType() == touchgfx::ClickEvent::PRESSED)
 8015c8a:	6838      	ldr	r0, [r7, #0]
 8015c8c:	f7f7 f882 	bl	800cd94 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8015c90:	4603      	mov	r3, r0
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	bf0c      	ite	eq
 8015c96:	2301      	moveq	r3, #1
 8015c98:	2300      	movne	r3, #0
 8015c9a:	b2db      	uxtb	r3, r3
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d02f      	beq.n	8015d00 <_ZN8touchgfx19RepeatButtonTrigger16handleClickEventERKNS_10ClickEventE+0xdc>
        {
            if (action && action->isValid())
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d00d      	beq.n	8015cc4 <_ZN8touchgfx19RepeatButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	330c      	adds	r3, #12
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	4610      	mov	r0, r2
 8015cb8:	4798      	blx	r3
 8015cba:	4603      	mov	r3, r0
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d001      	beq.n	8015cc4 <_ZN8touchgfx19RepeatButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
 8015cc0:	2301      	movs	r3, #1
 8015cc2:	e000      	b.n	8015cc6 <_ZN8touchgfx19RepeatButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa2>
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d009      	beq.n	8015cde <_ZN8touchgfx19RepeatButtonTrigger16handleClickEventERKNS_10ClickEventE+0xba>
            {
                action->execute(*this);
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	3308      	adds	r3, #8
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	6879      	ldr	r1, [r7, #4]
 8015cda:	4610      	mov	r0, r2
 8015cdc:	4798      	blx	r3
            }
            ticks = 0;
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	2200      	movs	r2, #0
 8015ce2:	871a      	strh	r2, [r3, #56]	; 0x38
            ticksBeforeContinuous = ticksDelay;
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	875a      	strh	r2, [r3, #58]	; 0x3a
            touchgfx::Application::getInstance()->registerTimerWidget(this);
 8015cee:	f008 f94d 	bl	801df8c <_ZN8touchgfx11Application11getInstanceEv>
 8015cf2:	4602      	mov	r2, r0
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	4619      	mov	r1, r3
 8015cf8:	4610      	mov	r0, r2
 8015cfa:	f008 f94d 	bl	801df98 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        }
        else
        {
            touchgfx::Application::getInstance()->unregisterTimerWidget(this);
        }
    }
 8015cfe:	e007      	b.n	8015d10 <_ZN8touchgfx19RepeatButtonTrigger16handleClickEventERKNS_10ClickEventE+0xec>
            touchgfx::Application::getInstance()->unregisterTimerWidget(this);
 8015d00:	f008 f944 	bl	801df8c <_ZN8touchgfx11Application11getInstanceEv>
 8015d04:	4602      	mov	r2, r0
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	4619      	mov	r1, r3
 8015d0a:	4610      	mov	r0, r2
 8015d0c:	f008 f974 	bl	801dff8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
    }
 8015d10:	bf00      	nop
 8015d12:	3710      	adds	r7, #16
 8015d14:	46bd      	mov	sp, r7
 8015d16:	bd80      	pop	{r7, pc}

08015d18 <_ZN8touchgfx19RepeatButtonTrigger15handleTickEventEv>:
    /**
     * @fn void RepeatButtonTrigger::handleTickEvent()
     *
     * @brief Handles the tick event.
     */
    void handleTickEvent()
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b082      	sub	sp, #8
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
    {
        AbstractButtonContainer::handleTickEvent();
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	4618      	mov	r0, r3
 8015d24:	f7f6 fac6 	bl	800c2b4 <_ZN8touchgfx8Drawable15handleTickEventEv>

        if (pressed)
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d038      	beq.n	8015da4 <_ZN8touchgfx19RepeatButtonTrigger15handleTickEventEv+0x8c>
        {
            if (ticks == ticksBeforeContinuous)
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8015d3e:	429a      	cmp	r2, r3
 8015d40:	d127      	bne.n	8015d92 <_ZN8touchgfx19RepeatButtonTrigger15handleTickEventEv+0x7a>
            {
                if (action && action->isValid())
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d00d      	beq.n	8015d66 <_ZN8touchgfx19RepeatButtonTrigger15handleTickEventEv+0x4e>
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	330c      	adds	r3, #12
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	4610      	mov	r0, r2
 8015d5a:	4798      	blx	r3
 8015d5c:	4603      	mov	r3, r0
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d001      	beq.n	8015d66 <_ZN8touchgfx19RepeatButtonTrigger15handleTickEventEv+0x4e>
 8015d62:	2301      	movs	r3, #1
 8015d64:	e000      	b.n	8015d68 <_ZN8touchgfx19RepeatButtonTrigger15handleTickEventEv+0x50>
 8015d66:	2300      	movs	r3, #0
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d009      	beq.n	8015d80 <_ZN8touchgfx19RepeatButtonTrigger15handleTickEventEv+0x68>
                {
                    action->execute(*this);
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	3308      	adds	r3, #8
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	6879      	ldr	r1, [r7, #4]
 8015d7c:	4610      	mov	r0, r2
 8015d7e:	4798      	blx	r3
                }

                ticks = 0;
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	2200      	movs	r2, #0
 8015d84:	871a      	strh	r2, [r3, #56]	; 0x38
                ticksBeforeContinuous = ticksInterval;
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	875a      	strh	r2, [r3, #58]	; 0x3a
            else
            {
                ticks++;
            }
        }
    }
 8015d90:	e008      	b.n	8015da4 <_ZN8touchgfx19RepeatButtonTrigger15handleTickEventEv+0x8c>
                ticks++;
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8015d98:	b29b      	uxth	r3, r3
 8015d9a:	3301      	adds	r3, #1
 8015d9c:	b29b      	uxth	r3, r3
 8015d9e:	b21a      	sxth	r2, r3
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 8015da4:	bf00      	nop
 8015da6:	3708      	adds	r7, #8
 8015da8:	46bd      	mov	sp, r7
 8015daa:	bd80      	pop	{r7, pc}

08015dac <_ZN8touchgfx13BoxWithBorderC1Ev>:
    BoxWithBorder() : Widget(), alpha(255), color(0), borderColor(0), borderSize(0)
 8015dac:	b580      	push	{r7, lr}
 8015dae:	b082      	sub	sp, #8
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	4618      	mov	r0, r3
 8015db8:	f7f6 feb4 	bl	800cb24 <_ZN8touchgfx6WidgetC1Ev>
 8015dbc:	4a0d      	ldr	r2, [pc, #52]	; (8015df4 <_ZN8touchgfx13BoxWithBorderC1Ev+0x48>)
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	601a      	str	r2, [r3, #0]
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	22ff      	movs	r2, #255	; 0xff
 8015dc6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	3328      	adds	r3, #40	; 0x28
 8015dce:	2100      	movs	r1, #0
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f7f6 fde3 	bl	800c99c <_ZN8touchgfx9colortypeC1Em>
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	332c      	adds	r3, #44	; 0x2c
 8015dda:	2100      	movs	r1, #0
 8015ddc:	4618      	mov	r0, r3
 8015dde:	f7f6 fddd 	bl	800c99c <_ZN8touchgfx9colortypeC1Em>
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	2200      	movs	r2, #0
 8015de6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	4618      	mov	r0, r3
 8015dee:	3708      	adds	r7, #8
 8015df0:	46bd      	mov	sp, r7
 8015df2:	bd80      	pop	{r7, pc}
 8015df4:	0802303c 	.word	0x0802303c

08015df8 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>:
    void setColor(colortype color)
 8015df8:	b480      	push	{r7}
 8015dfa:	b083      	sub	sp, #12
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
 8015e00:	6039      	str	r1, [r7, #0]
        this->color = color;
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	683a      	ldr	r2, [r7, #0]
 8015e06:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8015e08:	bf00      	nop
 8015e0a:	370c      	adds	r7, #12
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e12:	4770      	bx	lr

08015e14 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
    void setBorderColor(colortype color)
 8015e14:	b480      	push	{r7}
 8015e16:	b083      	sub	sp, #12
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	6078      	str	r0, [r7, #4]
 8015e1c:	6039      	str	r1, [r7, #0]
        this->borderColor = color;
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	683a      	ldr	r2, [r7, #0]
 8015e22:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8015e24:	bf00      	nop
 8015e26:	370c      	adds	r7, #12
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2e:	4770      	bx	lr

08015e30 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>:
    void setBorderSize(uint8_t size)
 8015e30:	b480      	push	{r7}
 8015e32:	b083      	sub	sp, #12
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
 8015e38:	460b      	mov	r3, r1
 8015e3a:	70fb      	strb	r3, [r7, #3]
        borderSize = size;
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	78fa      	ldrb	r2, [r7, #3]
 8015e40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 8015e44:	bf00      	nop
 8015e46:	370c      	adds	r7, #12
 8015e48:	46bd      	mov	sp, r7
 8015e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e4e:	4770      	bx	lr

08015e50 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>:
    void setAlpha(uint8_t alpha)
 8015e50:	b480      	push	{r7}
 8015e52:	b083      	sub	sp, #12
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	6078      	str	r0, [r7, #4]
 8015e58:	460b      	mov	r3, r1
 8015e5a:	70fb      	strb	r3, [r7, #3]
        this->alpha = alpha;
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	78fa      	ldrb	r2, [r7, #3]
 8015e60:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 8015e64:	bf00      	nop
 8015e66:	370c      	adds	r7, #12
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e6e:	4770      	bx	lr

08015e70 <_ZN8touchgfx8TextArea14setLinespacingEt>:
    inline void setLinespacing(uint16_t space)
 8015e70:	b480      	push	{r7}
 8015e72:	b083      	sub	sp, #12
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	6078      	str	r0, [r7, #4]
 8015e78:	460b      	mov	r3, r1
 8015e7a:	807b      	strh	r3, [r7, #2]
        linespace = space;
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	887a      	ldrh	r2, [r7, #2]
 8015e80:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8015e82:	bf00      	nop
 8015e84:	370c      	adds	r7, #12
 8015e86:	46bd      	mov	sp, r7
 8015e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e8c:	4770      	bx	lr
	...

08015e90 <_ZN8touchgfx4ViewI18IOControlPresenterED1Ev>:
class View : public Screen
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b082      	sub	sp, #8
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	6078      	str	r0, [r7, #4]
 8015e98:	4a05      	ldr	r2, [pc, #20]	; (8015eb0 <_ZN8touchgfx4ViewI18IOControlPresenterED1Ev+0x20>)
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	601a      	str	r2, [r3, #0]
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	f7ff fcd1 	bl	8015848 <_ZN8touchgfx6ScreenD1Ev>
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	3708      	adds	r7, #8
 8015eac:	46bd      	mov	sp, r7
 8015eae:	bd80      	pop	{r7, pc}
 8015eb0:	08023dfc 	.word	0x08023dfc

08015eb4 <_ZN8touchgfx4ViewI18IOControlPresenterED0Ev>:
 8015eb4:	b580      	push	{r7, lr}
 8015eb6:	b082      	sub	sp, #8
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]
 8015ebc:	6878      	ldr	r0, [r7, #4]
 8015ebe:	f7ff ffe7 	bl	8015e90 <_ZN8touchgfx4ViewI18IOControlPresenterED1Ev>
 8015ec2:	2140      	movs	r1, #64	; 0x40
 8015ec4:	6878      	ldr	r0, [r7, #4]
 8015ec6:	f00b f95a 	bl	802117e <_ZdlPvj>
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	4618      	mov	r0, r3
 8015ece:	3708      	adds	r7, #8
 8015ed0:	46bd      	mov	sp, r7
 8015ed2:	bd80      	pop	{r7, pc}

08015ed4 <_ZN17IOControlViewBaseD1Ev>:

class IOControlViewBase : public touchgfx::View<IOControlPresenter>
{
public:
    IOControlViewBase();
    virtual ~IOControlViewBase() {}
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	b082      	sub	sp, #8
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	6078      	str	r0, [r7, #4]
 8015edc:	4a1f      	ldr	r2, [pc, #124]	; (8015f5c <_ZN17IOControlViewBaseD1Ev+0x88>)
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	601a      	str	r2, [r3, #0]
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8015ee8:	4618      	mov	r0, r3
 8015eea:	f001 f87b 	bl	8016fe4 <_ZN8touchgfx8CallbackI17IOControlViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	f7f7 fab3 	bl	800d460 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8015f00:	4618      	mov	r0, r3
 8015f02:	f7f6 fee3 	bl	800cccc <_ZN8touchgfx5ImageD1Ev>
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	f000 fbcd 	bl	80166ac <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEED1Ev>
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8015f18:	4618      	mov	r0, r3
 8015f1a:	f000 fb9f 	bl	801665c <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8015f24:	4618      	mov	r0, r3
 8015f26:	f000 fbc1 	bl	80166ac <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEED1Ev>
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015f30:	4618      	mov	r0, r3
 8015f32:	f000 fb93 	bl	801665c <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	336c      	adds	r3, #108	; 0x6c
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	f000 fb66 	bl	801660c <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	3340      	adds	r3, #64	; 0x40
 8015f44:	4618      	mov	r0, r3
 8015f46:	f7f6 fec1 	bl	800cccc <_ZN8touchgfx5ImageD1Ev>
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	f7ff ff9f 	bl	8015e90 <_ZN8touchgfx4ViewI18IOControlPresenterED1Ev>
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	4618      	mov	r0, r3
 8015f56:	3708      	adds	r7, #8
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	bd80      	pop	{r7, pc}
 8015f5c:	08023aa0 	.word	0x08023aa0

08015f60 <_ZN17IOControlViewBaseD0Ev>:
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b082      	sub	sp, #8
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	6078      	str	r0, [r7, #4]
 8015f68:	6878      	ldr	r0, [r7, #4]
 8015f6a:	f7ff ffb3 	bl	8015ed4 <_ZN17IOControlViewBaseD1Ev>
 8015f6e:	f240 411c 	movw	r1, #1052	; 0x41c
 8015f72:	6878      	ldr	r0, [r7, #4]
 8015f74:	f00b f903 	bl	802117e <_ZdlPvj>
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	3708      	adds	r7, #8
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	bd80      	pop	{r7, pc}

08015f82 <_ZN17IOControlViewBase16ledButtonPressedEv>:
    virtual void setupScreen();

    /*
     * Custom Action Handlers
     */
    virtual void ledButtonPressed()
 8015f82:	b480      	push	{r7}
 8015f84:	b083      	sub	sp, #12
 8015f86:	af00      	add	r7, sp, #0
 8015f88:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in IOControlView
    }
 8015f8a:	bf00      	nop
 8015f8c:	370c      	adds	r7, #12
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f94:	4770      	bx	lr

08015f96 <_ZN17IOControlViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8015f96:	b580      	push	{r7, lr}
 8015f98:	b082      	sub	sp, #8
 8015f9a:	af00      	add	r7, sp, #0
 8015f9c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(Application::getInstance());
 8015f9e:	f007 fff5 	bl	801df8c <_ZN8touchgfx11Application11getInstanceEv>
 8015fa2:	4603      	mov	r3, r0
    }
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	3708      	adds	r7, #8
 8015fa8:	46bd      	mov	sp, r7
 8015faa:	bd80      	pop	{r7, pc}

08015fac <_ZN17IOControlViewBaseC1Ev>:
#include <gui_generated/iocontrol_screen/IOControlViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

IOControlViewBase::IOControlViewBase() :
 8015fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fb0:	b09a      	sub	sp, #104	; 0x68
 8015fb2:	af02      	add	r7, sp, #8
 8015fb4:	6078      	str	r0, [r7, #4]
    flexButtonCallback(this, &IOControlViewBase::flexButtonCallbackHandler)
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	4618      	mov	r0, r3
 8015fba:	f000 fb9f 	bl	80166fc <_ZN8touchgfx4ViewI18IOControlPresenterEC1Ev>
 8015fbe:	4ae3      	ldr	r2, [pc, #908]	; (801634c <_ZN17IOControlViewBaseC1Ev+0x3a0>)
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	601a      	str	r2, [r3, #0]
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8015fca:	f107 0308 	add.w	r3, r7, #8
 8015fce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f7f6 fd08 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8015fd8:	f107 0308 	add.w	r3, r7, #8
 8015fdc:	4619      	mov	r1, r3
 8015fde:	4620      	mov	r0, r4
 8015fe0:	f7f6 fe52 	bl	800cc88 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	336c      	adds	r3, #108	; 0x6c
 8015fe8:	4618      	mov	r0, r3
 8015fea:	f000 fb9d 	bl	8016728 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	f000 fbcf 	bl	8016798 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8016000:	4618      	mov	r0, r3
 8016002:	f000 fbf1 	bl	80167e8 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEEC1Ev>
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	f503 7314 	add.w	r3, r3, #592	; 0x250
 801600c:	4618      	mov	r0, r3
 801600e:	f000 fbc3 	bl	8016798 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8016018:	4618      	mov	r0, r3
 801601a:	f000 fbe5 	bl	80167e8 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEEC1Ev>
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	f503 7468 	add.w	r4, r3, #928	; 0x3a0
 8016024:	f107 030c 	add.w	r3, r7, #12
 8016028:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801602c:	4618      	mov	r0, r3
 801602e:	f7f6 fcdb 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8016032:	f107 030c 	add.w	r3, r7, #12
 8016036:	4619      	mov	r1, r3
 8016038:	4620      	mov	r0, r4
 801603a:	f7f6 fe25 	bl	800cc88 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 8016044:	4618      	mov	r0, r3
 8016046:	f7f7 f929 	bl	800d29c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 8016050:	4bbf      	ldr	r3, [pc, #764]	; (8016350 <_ZN17IOControlViewBaseC1Ev+0x3a4>)
 8016052:	613b      	str	r3, [r7, #16]
 8016054:	2300      	movs	r3, #0
 8016056:	617b      	str	r3, [r7, #20]
 8016058:	f107 0310 	add.w	r3, r7, #16
 801605c:	cb0c      	ldmia	r3, {r2, r3}
 801605e:	6879      	ldr	r1, [r7, #4]
 8016060:	f000 fc0a 	bl	8016878 <_ZN8touchgfx8CallbackI17IOControlViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{
    backgroundImage.setXY(0, 0);
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	3340      	adds	r3, #64	; 0x40
 8016068:	2200      	movs	r2, #0
 801606a:	2100      	movs	r1, #0
 801606c:	4618      	mov	r0, r3
 801606e:	f7f6 f8ba 	bl	800c1e6 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setBitmap(Bitmap(BITMAP_BG_ID));
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8016078:	f107 0318 	add.w	r3, r7, #24
 801607c:	2100      	movs	r1, #0
 801607e:	4618      	mov	r0, r3
 8016080:	f7f6 fcb2 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8016084:	f107 0318 	add.w	r3, r7, #24
 8016088:	4619      	mov	r1, r3
 801608a:	4620      	mov	r0, r4
 801608c:	f7f7 fbef 	bl	800d86e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    home_button.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8016096:	f107 031c 	add.w	r3, r7, #28
 801609a:	2103      	movs	r1, #3
 801609c:	4618      	mov	r0, r3
 801609e:	f7f6 fca3 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80160a2:	f107 0320 	add.w	r3, r7, #32
 80160a6:	2104      	movs	r1, #4
 80160a8:	4618      	mov	r0, r3
 80160aa:	f7f6 fc9d 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80160ae:	f107 0220 	add.w	r2, r7, #32
 80160b2:	f107 031c 	add.w	r3, r7, #28
 80160b6:	4619      	mov	r1, r3
 80160b8:	4620      	mov	r0, r4
 80160ba:	f000 fbfd 	bl	80168b8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
    home_button.setBitmapXY(0, 0);
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	336c      	adds	r3, #108	; 0x6c
 80160c2:	2200      	movs	r2, #0
 80160c4:	2100      	movs	r1, #0
 80160c6:	4618      	mov	r0, r3
 80160c8:	f000 fc28 	bl	801691c <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE11setBitmapXYEtt>
    home_button.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID), Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID));
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80160d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80160d6:	2106      	movs	r1, #6
 80160d8:	4618      	mov	r0, r3
 80160da:	f7f6 fc85 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80160de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80160e2:	2106      	movs	r1, #6
 80160e4:	4618      	mov	r0, r3
 80160e6:	f7f6 fc7f 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80160ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80160ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80160f2:	4619      	mov	r1, r3
 80160f4:	4620      	mov	r0, r4
 80160f6:	f000 fc26 	bl	8016946 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    home_button.setIconXY(15, 15);
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	336c      	adds	r3, #108	; 0x6c
 80160fe:	220f      	movs	r2, #15
 8016100:	210f      	movs	r1, #15
 8016102:	4618      	mov	r0, r3
 8016104:	f000 fc69 	bl	80169da <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE9setIconXYEss>
    home_button.setPosition(10, 10, 60, 60);
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 801610e:	233c      	movs	r3, #60	; 0x3c
 8016110:	9300      	str	r3, [sp, #0]
 8016112:	233c      	movs	r3, #60	; 0x3c
 8016114:	220a      	movs	r2, #10
 8016116:	210a      	movs	r1, #10
 8016118:	f7f6 f800 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    home_button.setAction(flexButtonCallback);
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8016128:	4619      	mov	r1, r3
 801612a:	4610      	mov	r0, r2
 801612c:	f7ff fc66 	bl	80159fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    ledButton.setBitmaps(Bitmap(BITMAP_SMALL_BTN_ID), Bitmap(BITMAP_SMALL_BTN_PRESSED_ID));
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8016136:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801613a:	210f      	movs	r1, #15
 801613c:	4618      	mov	r0, r3
 801613e:	f7f6 fc53 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8016142:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016146:	2111      	movs	r1, #17
 8016148:	4618      	mov	r0, r3
 801614a:	f7f6 fc4d 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 801614e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016152:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016156:	4619      	mov	r1, r3
 8016158:	4620      	mov	r0, r4
 801615a:	f000 fbad 	bl	80168b8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
    ledButton.setBitmapXY(0, 0);
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8016164:	2200      	movs	r2, #0
 8016166:	2100      	movs	r1, #0
 8016168:	4618      	mov	r0, r3
 801616a:	f000 fbd7 	bl	801691c <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE11setBitmapXYEtt>
    ledButton.setText(TypedText(T_SINGLEUSEID13));
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8016174:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016178:	2104      	movs	r1, #4
 801617a:	4618      	mov	r0, r3
 801617c:	f7f6 feca 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 8016180:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8016182:	4620      	mov	r0, r4
 8016184:	f000 fc41 	bl	8016a0a <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
    ledButton.setTextPosition(0, 19, 100, 56);
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	f503 7080 	add.w	r0, r3, #256	; 0x100
 801618e:	2338      	movs	r3, #56	; 0x38
 8016190:	9300      	str	r3, [sp, #0]
 8016192:	2364      	movs	r3, #100	; 0x64
 8016194:	2213      	movs	r2, #19
 8016196:	2100      	movs	r1, #0
 8016198:	f000 fc5e 	bl	8016a58 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    ledButton.setTextColors(touchgfx::Color::getColorFrom24BitRGB(70, 70, 70), touchgfx::Color::getColorFrom24BitRGB(231, 154, 9));
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80161a2:	2246      	movs	r2, #70	; 0x46
 80161a4:	2146      	movs	r1, #70	; 0x46
 80161a6:	2046      	movs	r0, #70	; 0x46
 80161a8:	f009 fb82 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80161ac:	4605      	mov	r5, r0
 80161ae:	2209      	movs	r2, #9
 80161b0:	219a      	movs	r1, #154	; 0x9a
 80161b2:	20e7      	movs	r0, #231	; 0xe7
 80161b4:	f009 fb7c 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80161b8:	4603      	mov	r3, r0
 80161ba:	461a      	mov	r2, r3
 80161bc:	4629      	mov	r1, r5
 80161be:	4620      	mov	r0, r4
 80161c0:	f000 fc6a 	bl	8016a98 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    ledButton.setPosition(331, 108, 100, 56);
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	f503 7080 	add.w	r0, r3, #256	; 0x100
 80161ca:	2338      	movs	r3, #56	; 0x38
 80161cc:	9300      	str	r3, [sp, #0]
 80161ce:	2364      	movs	r3, #100	; 0x64
 80161d0:	226c      	movs	r2, #108	; 0x6c
 80161d2:	f240 114b 	movw	r1, #331	; 0x14b
 80161d6:	f7f5 ffa1 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    ledButton.setAction(flexButtonCallback);
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80161e6:	4619      	mov	r1, r3
 80161e8:	4610      	mov	r0, r2
 80161ea:	f7ff fc07 	bl	80159fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    touchButton.setDelay(6);
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80161f4:	2106      	movs	r1, #6
 80161f6:	4618      	mov	r0, r3
 80161f8:	f7ff fcf6 	bl	8015be8 <_ZN8touchgfx19RepeatButtonTrigger8setDelayEi>
    touchButton.setInterval(6);
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8016202:	2106      	movs	r1, #6
 8016204:	4618      	mov	r0, r3
 8016206:	f7ff fcfe 	bl	8015c06 <_ZN8touchgfx19RepeatButtonTrigger11setIntervalEi>
    touchButton.setBoxWithBorderPosition(0, 0, 100, 45);
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 8016210:	232d      	movs	r3, #45	; 0x2d
 8016212:	9300      	str	r3, [sp, #0]
 8016214:	2364      	movs	r3, #100	; 0x64
 8016216:	2200      	movs	r2, #0
 8016218:	2100      	movs	r1, #0
 801621a:	f000 fc55 	bl	8016ac8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE24setBoxWithBorderPositionEssss>
    touchButton.setBorderSize(5);
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8016224:	2105      	movs	r1, #5
 8016226:	4618      	mov	r0, r3
 8016228:	f000 fc6e 	bl	8016b08 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE13setBorderSizeEh>
    touchButton.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(222, 222, 222), touchgfx::Color::getColorFrom24BitRGB(40, 58, 64), touchgfx::Color::getColorFrom24BitRGB(54, 62, 65), touchgfx::Color::getColorFrom24BitRGB(95, 103, 109));
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8016232:	22de      	movs	r2, #222	; 0xde
 8016234:	21de      	movs	r1, #222	; 0xde
 8016236:	20de      	movs	r0, #222	; 0xde
 8016238:	f009 fb3a 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801623c:	4605      	mov	r5, r0
 801623e:	2240      	movs	r2, #64	; 0x40
 8016240:	213a      	movs	r1, #58	; 0x3a
 8016242:	2028      	movs	r0, #40	; 0x28
 8016244:	f009 fb34 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016248:	4606      	mov	r6, r0
 801624a:	2241      	movs	r2, #65	; 0x41
 801624c:	213e      	movs	r1, #62	; 0x3e
 801624e:	2036      	movs	r0, #54	; 0x36
 8016250:	f009 fb2e 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016254:	4680      	mov	r8, r0
 8016256:	226d      	movs	r2, #109	; 0x6d
 8016258:	2167      	movs	r1, #103	; 0x67
 801625a:	205f      	movs	r0, #95	; 0x5f
 801625c:	f009 fb28 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016260:	4603      	mov	r3, r0
 8016262:	9300      	str	r3, [sp, #0]
 8016264:	4643      	mov	r3, r8
 8016266:	4632      	mov	r2, r6
 8016268:	4629      	mov	r1, r5
 801626a:	4620      	mov	r0, r4
 801626c:	f000 fc5d 	bl	8016b2a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    touchButton.setIconBitmaps(Bitmap(BITMAP_BLACK_ARROW_UP_ID), Bitmap(BITMAP_ORANGE_ARROW_UP_ID));
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8016276:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801627a:	2102      	movs	r1, #2
 801627c:	4618      	mov	r0, r3
 801627e:	f7f6 fbb3 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8016282:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016286:	210e      	movs	r1, #14
 8016288:	4618      	mov	r0, r3
 801628a:	f7f6 fbad 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 801628e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8016292:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016296:	4619      	mov	r1, r3
 8016298:	4620      	mov	r0, r4
 801629a:	f000 fc63 	bl	8016b64 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    touchButton.setIconXY(34, 14);
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80162a4:	220e      	movs	r2, #14
 80162a6:	2122      	movs	r1, #34	; 0x22
 80162a8:	4618      	mov	r0, r3
 80162aa:	f000 fca5 	bl	8016bf8 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEE9setIconXYEss>
    touchButton.setPosition(190, 10, 100, 45);
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 80162b4:	232d      	movs	r3, #45	; 0x2d
 80162b6:	9300      	str	r3, [sp, #0]
 80162b8:	2364      	movs	r3, #100	; 0x64
 80162ba:	220a      	movs	r2, #10
 80162bc:	21be      	movs	r1, #190	; 0xbe
 80162be:	f7f5 ff2d 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>

    zeroButton.setBitmaps(Bitmap(BITMAP_SMALL_BTN_ID), Bitmap(BITMAP_SMALL_BTN_PRESSED_ID));
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	f503 7414 	add.w	r4, r3, #592	; 0x250
 80162c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80162cc:	210f      	movs	r1, #15
 80162ce:	4618      	mov	r0, r3
 80162d0:	f7f6 fb8a 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80162d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80162d8:	2111      	movs	r1, #17
 80162da:	4618      	mov	r0, r3
 80162dc:	f7f6 fb84 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80162e0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80162e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80162e8:	4619      	mov	r1, r3
 80162ea:	4620      	mov	r0, r4
 80162ec:	f000 fae4 	bl	80168b8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
    zeroButton.setBitmapXY(0, 0);
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80162f6:	2200      	movs	r2, #0
 80162f8:	2100      	movs	r1, #0
 80162fa:	4618      	mov	r0, r3
 80162fc:	f000 fb0e 	bl	801691c <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE11setBitmapXYEtt>
    zeroButton.setText(TypedText(T_SINGLEUSEID22));
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	f503 7414 	add.w	r4, r3, #592	; 0x250
 8016306:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801630a:	210c      	movs	r1, #12
 801630c:	4618      	mov	r0, r3
 801630e:	f7f6 fe01 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 8016312:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8016316:	4620      	mov	r0, r4
 8016318:	f000 fb77 	bl	8016a0a <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
    zeroButton.setTextPosition(0, 19, 100, 56);
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	f503 7014 	add.w	r0, r3, #592	; 0x250
 8016322:	2338      	movs	r3, #56	; 0x38
 8016324:	9300      	str	r3, [sp, #0]
 8016326:	2364      	movs	r3, #100	; 0x64
 8016328:	2213      	movs	r2, #19
 801632a:	2100      	movs	r1, #0
 801632c:	f000 fb94 	bl	8016a58 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    zeroButton.setTextColors(touchgfx::Color::getColorFrom24BitRGB(70, 70, 70), touchgfx::Color::getColorFrom24BitRGB(231, 154, 9));
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	f503 7414 	add.w	r4, r3, #592	; 0x250
 8016336:	2246      	movs	r2, #70	; 0x46
 8016338:	2146      	movs	r1, #70	; 0x46
 801633a:	2046      	movs	r0, #70	; 0x46
 801633c:	f009 fab8 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016340:	4605      	mov	r5, r0
 8016342:	2209      	movs	r2, #9
 8016344:	219a      	movs	r1, #154	; 0x9a
 8016346:	20e7      	movs	r0, #231	; 0xe7
 8016348:	e004      	b.n	8016354 <_ZN17IOControlViewBaseC1Ev+0x3a8>
 801634a:	bf00      	nop
 801634c:	08023aa0 	.word	0x08023aa0
 8016350:	080165b1 	.word	0x080165b1
 8016354:	f009 faac 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016358:	4603      	mov	r3, r0
 801635a:	461a      	mov	r2, r3
 801635c:	4629      	mov	r1, r5
 801635e:	4620      	mov	r0, r4
 8016360:	f000 fb9a 	bl	8016a98 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    zeroButton.setPosition(50, 108, 100, 56);
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	f503 7014 	add.w	r0, r3, #592	; 0x250
 801636a:	2338      	movs	r3, #56	; 0x38
 801636c:	9300      	str	r3, [sp, #0]
 801636e:	2364      	movs	r3, #100	; 0x64
 8016370:	226c      	movs	r2, #108	; 0x6c
 8016372:	2132      	movs	r1, #50	; 0x32
 8016374:	f7f5 fed2 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>

    repeatButton.setDelay(6);
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 801637e:	2106      	movs	r1, #6
 8016380:	4618      	mov	r0, r3
 8016382:	f7ff fc31 	bl	8015be8 <_ZN8touchgfx19RepeatButtonTrigger8setDelayEi>
    repeatButton.setInterval(6);
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 801638c:	2106      	movs	r1, #6
 801638e:	4618      	mov	r0, r3
 8016390:	f7ff fc39 	bl	8015c06 <_ZN8touchgfx19RepeatButtonTrigger11setIntervalEi>
    repeatButton.setBoxWithBorderPosition(0, 0, 100, 45);
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	f503 703c 	add.w	r0, r3, #752	; 0x2f0
 801639a:	232d      	movs	r3, #45	; 0x2d
 801639c:	9300      	str	r3, [sp, #0]
 801639e:	2364      	movs	r3, #100	; 0x64
 80163a0:	2200      	movs	r2, #0
 80163a2:	2100      	movs	r1, #0
 80163a4:	f000 fb90 	bl	8016ac8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE24setBoxWithBorderPositionEssss>
    repeatButton.setBorderSize(5);
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 80163ae:	2105      	movs	r1, #5
 80163b0:	4618      	mov	r0, r3
 80163b2:	f000 fba9 	bl	8016b08 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE13setBorderSizeEh>
    repeatButton.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(222, 222, 222), touchgfx::Color::getColorFrom24BitRGB(48, 58, 64), touchgfx::Color::getColorFrom24BitRGB(54, 62, 65), touchgfx::Color::getColorFrom24BitRGB(128, 136, 143));
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	f503 743c 	add.w	r4, r3, #752	; 0x2f0
 80163bc:	22de      	movs	r2, #222	; 0xde
 80163be:	21de      	movs	r1, #222	; 0xde
 80163c0:	20de      	movs	r0, #222	; 0xde
 80163c2:	f009 fa75 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80163c6:	4605      	mov	r5, r0
 80163c8:	2240      	movs	r2, #64	; 0x40
 80163ca:	213a      	movs	r1, #58	; 0x3a
 80163cc:	2030      	movs	r0, #48	; 0x30
 80163ce:	f009 fa6f 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80163d2:	4606      	mov	r6, r0
 80163d4:	2241      	movs	r2, #65	; 0x41
 80163d6:	213e      	movs	r1, #62	; 0x3e
 80163d8:	2036      	movs	r0, #54	; 0x36
 80163da:	f009 fa69 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80163de:	4680      	mov	r8, r0
 80163e0:	228f      	movs	r2, #143	; 0x8f
 80163e2:	2188      	movs	r1, #136	; 0x88
 80163e4:	2080      	movs	r0, #128	; 0x80
 80163e6:	f009 fa63 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80163ea:	4603      	mov	r3, r0
 80163ec:	9300      	str	r3, [sp, #0]
 80163ee:	4643      	mov	r3, r8
 80163f0:	4632      	mov	r2, r6
 80163f2:	4629      	mov	r1, r5
 80163f4:	4620      	mov	r0, r4
 80163f6:	f000 fb98 	bl	8016b2a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    repeatButton.setIconBitmaps(Bitmap(BITMAP_BLACK_ARROW_ID), Bitmap(BITMAP_ORANGE_ARROW_ID));
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	f503 743c 	add.w	r4, r3, #752	; 0x2f0
 8016400:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016404:	2101      	movs	r1, #1
 8016406:	4618      	mov	r0, r3
 8016408:	f7f6 faee 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 801640c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016410:	210d      	movs	r1, #13
 8016412:	4618      	mov	r0, r3
 8016414:	f7f6 fae8 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8016418:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801641c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016420:	4619      	mov	r1, r3
 8016422:	4620      	mov	r0, r4
 8016424:	f000 fb9e 	bl	8016b64 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    repeatButton.setIconXY(34, 14);
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 801642e:	220e      	movs	r2, #14
 8016430:	2122      	movs	r1, #34	; 0x22
 8016432:	4618      	mov	r0, r3
 8016434:	f000 fbe0 	bl	8016bf8 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEE9setIconXYEss>
    repeatButton.setPosition(190, 219, 100, 45);
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	f503 703c 	add.w	r0, r3, #752	; 0x2f0
 801643e:	232d      	movs	r3, #45	; 0x2d
 8016440:	9300      	str	r3, [sp, #0]
 8016442:	2364      	movs	r3, #100	; 0x64
 8016444:	22db      	movs	r2, #219	; 0xdb
 8016446:	21be      	movs	r1, #190	; 0xbe
 8016448:	f7f5 fe68 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>

    counterBackgroundImage.setXY(164, 59);
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8016452:	223b      	movs	r2, #59	; 0x3b
 8016454:	21a4      	movs	r1, #164	; 0xa4
 8016456:	4618      	mov	r0, r3
 8016458:	f7f5 fec5 	bl	800c1e6 <_ZN8touchgfx8Drawable5setXYEss>
    counterBackgroundImage.setBitmap(Bitmap(BITMAP_COUNTER_BOX_ID));
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	f503 7468 	add.w	r4, r3, #928	; 0x3a0
 8016462:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016466:	210c      	movs	r1, #12
 8016468:	4618      	mov	r0, r3
 801646a:	f7f6 fabd 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 801646e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016472:	4619      	mov	r1, r3
 8016474:	4620      	mov	r0, r4
 8016476:	f7f7 f9fa 	bl	800d86e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    countTxt.setPosition(164, 91, 152, 90);
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 8016480:	235a      	movs	r3, #90	; 0x5a
 8016482:	9300      	str	r3, [sp, #0]
 8016484:	2398      	movs	r3, #152	; 0x98
 8016486:	225b      	movs	r2, #91	; 0x5b
 8016488:	21a4      	movs	r1, #164	; 0xa4
 801648a:	f7f5 fe47 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    countTxt.setColor(touchgfx::Color::getColorFrom24BitRGB(222, 222, 222));
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	f503 7473 	add.w	r4, r3, #972	; 0x3cc
 8016494:	22de      	movs	r2, #222	; 0xde
 8016496:	21de      	movs	r1, #222	; 0xde
 8016498:	20de      	movs	r0, #222	; 0xde
 801649a:	f009 fa09 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801649e:	4603      	mov	r3, r0
 80164a0:	4619      	mov	r1, r3
 80164a2:	4620      	mov	r0, r4
 80164a4:	f7f6 fe29 	bl	800d0fa <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    countTxt.setLinespacing(0);
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 80164ae:	2100      	movs	r1, #0
 80164b0:	4618      	mov	r0, r3
 80164b2:	f7ff fcdd 	bl	8015e70 <_ZN8touchgfx8TextArea14setLinespacingEt>
    Unicode::snprintf(countTxtBuffer, COUNTTXT_SIZE, "%s", TypedText(T_SINGLEUSEID23).getText());
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	f203 4404 	addw	r4, r3, #1028	; 0x404
 80164bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80164c0:	210d      	movs	r1, #13
 80164c2:	4618      	mov	r0, r3
 80164c4:	f7f6 fd26 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 80164c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80164cc:	4618      	mov	r0, r3
 80164ce:	f7f6 fd45 	bl	800cf5c <_ZNK8touchgfx9TypedText7getTextEv>
 80164d2:	4603      	mov	r3, r0
 80164d4:	4a30      	ldr	r2, [pc, #192]	; (8016598 <_ZN17IOControlViewBaseC1Ev+0x5ec>)
 80164d6:	2103      	movs	r1, #3
 80164d8:	4620      	mov	r0, r4
 80164da:	f009 f9db 	bl	801f894 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    countTxt.setWildcard(countTxtBuffer);
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	f503 7273 	add.w	r2, r3, #972	; 0x3cc
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80164ea:	4619      	mov	r1, r3
 80164ec:	4610      	mov	r0, r2
 80164ee:	f7f6 ff6f 	bl	800d3d0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    countTxt.setTypedText(TypedText(T_NUMBERTEXT));
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	f503 7473 	add.w	r4, r3, #972	; 0x3cc
 80164f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80164fc:	2100      	movs	r1, #0
 80164fe:	4618      	mov	r0, r3
 8016500:	f7f6 fd08 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 8016504:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8016508:	4620      	mov	r0, r4
 801650a:	f7f7 fbd9 	bl	800dcc0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundImage);
 801650e:	687a      	ldr	r2, [r7, #4]
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	3340      	adds	r3, #64	; 0x40
 8016514:	4619      	mov	r1, r3
 8016516:	4610      	mov	r0, r2
 8016518:	f7ff f9ee 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(home_button);
 801651c:	687a      	ldr	r2, [r7, #4]
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	336c      	adds	r3, #108	; 0x6c
 8016522:	4619      	mov	r1, r3
 8016524:	4610      	mov	r0, r2
 8016526:	f7ff f9e7 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ledButton);
 801652a:	687a      	ldr	r2, [r7, #4]
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8016532:	4619      	mov	r1, r3
 8016534:	4610      	mov	r0, r2
 8016536:	f7ff f9df 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(touchButton);
 801653a:	687a      	ldr	r2, [r7, #4]
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8016542:	4619      	mov	r1, r3
 8016544:	4610      	mov	r0, r2
 8016546:	f7ff f9d7 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(zeroButton);
 801654a:	687a      	ldr	r2, [r7, #4]
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8016552:	4619      	mov	r1, r3
 8016554:	4610      	mov	r0, r2
 8016556:	f7ff f9cf 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(repeatButton);
 801655a:	687a      	ldr	r2, [r7, #4]
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8016562:	4619      	mov	r1, r3
 8016564:	4610      	mov	r0, r2
 8016566:	f7ff f9c7 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(counterBackgroundImage);
 801656a:	687a      	ldr	r2, [r7, #4]
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8016572:	4619      	mov	r1, r3
 8016574:	4610      	mov	r0, r2
 8016576:	f7ff f9bf 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(countTxt);
 801657a:	687a      	ldr	r2, [r7, #4]
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 8016582:	4619      	mov	r1, r3
 8016584:	4610      	mov	r0, r2
 8016586:	f7ff f9b7 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	4618      	mov	r0, r3
 801658e:	3760      	adds	r7, #96	; 0x60
 8016590:	46bd      	mov	sp, r7
 8016592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016596:	bf00      	nop
 8016598:	08022764 	.word	0x08022764

0801659c <_ZN17IOControlViewBase11setupScreenEv>:

void IOControlViewBase::setupScreen()
{
 801659c:	b480      	push	{r7}
 801659e:	b083      	sub	sp, #12
 80165a0:	af00      	add	r7, sp, #0
 80165a2:	6078      	str	r0, [r7, #4]

}
 80165a4:	bf00      	nop
 80165a6:	370c      	adds	r7, #12
 80165a8:	46bd      	mov	sp, r7
 80165aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ae:	4770      	bx	lr

080165b0 <_ZN17IOControlViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void IOControlViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b082      	sub	sp, #8
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	6078      	str	r0, [r7, #4]
 80165b8:	6039      	str	r1, [r7, #0]
    if (&src == &home_button)
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	336c      	adds	r3, #108	; 0x6c
 80165be:	683a      	ldr	r2, [r7, #0]
 80165c0:	429a      	cmp	r2, r3
 80165c2:	d107      	bne.n	80165d4 <_ZN17IOControlViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x24>
    {
        //Interaction1
        //When home_button clicked change screen to Main
        //Go to Main with screen transition towards South
        application().gotoMainScreenCoverTransitionSouth();
 80165c4:	6878      	ldr	r0, [r7, #4]
 80165c6:	f7ff fce6 	bl	8015f96 <_ZN17IOControlViewBase11applicationEv>
 80165ca:	4603      	mov	r3, r0
 80165cc:	4618      	mov	r0, r3
 80165ce:	f7fd fbb9 	bl	8013d44 <_ZN23FrontendApplicationBase34gotoMainScreenCoverTransitionSouthEv>
    }
    else if (&src == &repeatButton)
    {

    }
}
 80165d2:	e017      	b.n	8016604 <_ZN17IOControlViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x54>
    else if (&src == &ledButton)
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80165da:	683a      	ldr	r2, [r7, #0]
 80165dc:	429a      	cmp	r2, r3
 80165de:	d106      	bne.n	80165ee <_ZN17IOControlViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x3e>
        ledButtonPressed();
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	332c      	adds	r3, #44	; 0x2c
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	6878      	ldr	r0, [r7, #4]
 80165ea:	4798      	blx	r3
}
 80165ec:	e00a      	b.n	8016604 <_ZN17IOControlViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x54>
    else if (&src == &touchButton)
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80165f4:	683a      	ldr	r2, [r7, #0]
 80165f6:	429a      	cmp	r2, r3
 80165f8:	d004      	beq.n	8016604 <_ZN17IOControlViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x54>
    else if (&src == &zeroButton)
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8016600:	683a      	ldr	r2, [r7, #0]
 8016602:	429a      	cmp	r2, r3
}
 8016604:	bf00      	nop
 8016606:	3708      	adds	r7, #8
 8016608:	46bd      	mov	sp, r7
 801660a:	bd80      	pop	{r7, pc}

0801660c <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>:
    /**
     * @fn virtual IconButtonStyle::~IconButtonStyle()
     *
     * @brief Destructor.
     */
    virtual ~IconButtonStyle() { }
 801660c:	b580      	push	{r7, lr}
 801660e:	b082      	sub	sp, #8
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
 8016614:	4a08      	ldr	r2, [pc, #32]	; (8016638 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev+0x2c>)
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	601a      	str	r2, [r3, #0]
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	3368      	adds	r3, #104	; 0x68
 801661e:	4618      	mov	r0, r3
 8016620:	f7f6 fb54 	bl	800cccc <_ZN8touchgfx5ImageD1Ev>
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	4618      	mov	r0, r3
 8016628:	f000 fafe 	bl	8016c28 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEED1Ev>
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	4618      	mov	r0, r3
 8016630:	3708      	adds	r7, #8
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}
 8016636:	bf00      	nop
 8016638:	08023cc0 	.word	0x08023cc0

0801663c <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED0Ev>:
 801663c:	b580      	push	{r7, lr}
 801663e:	b082      	sub	sp, #8
 8016640:	af00      	add	r7, sp, #0
 8016642:	6078      	str	r0, [r7, #4]
 8016644:	6878      	ldr	r0, [r7, #4]
 8016646:	f7ff ffe1 	bl	801660c <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 801664a:	2194      	movs	r1, #148	; 0x94
 801664c:	6878      	ldr	r0, [r7, #4]
 801664e:	f00a fd96 	bl	802117e <_ZdlPvj>
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	4618      	mov	r0, r3
 8016656:	3708      	adds	r7, #8
 8016658:	46bd      	mov	sp, r7
 801665a:	bd80      	pop	{r7, pc}

0801665c <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>:
    /**
     * @fn virtual TextButtonStyle::~TextButtonStyle()
     *
     * @brief Destructor.
     */
    virtual ~TextButtonStyle() { }
 801665c:	b580      	push	{r7, lr}
 801665e:	b082      	sub	sp, #8
 8016660:	af00      	add	r7, sp, #0
 8016662:	6078      	str	r0, [r7, #4]
 8016664:	4a08      	ldr	r2, [pc, #32]	; (8016688 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev+0x2c>)
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	601a      	str	r2, [r3, #0]
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	3364      	adds	r3, #100	; 0x64
 801666e:	4618      	mov	r0, r3
 8016670:	f7f6 fdbe 	bl	800d1f0 <_ZN8touchgfx8TextAreaD1Ev>
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	4618      	mov	r0, r3
 8016678:	f000 fad6 	bl	8016c28 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEED1Ev>
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	4618      	mov	r0, r3
 8016680:	3708      	adds	r7, #8
 8016682:	46bd      	mov	sp, r7
 8016684:	bd80      	pop	{r7, pc}
 8016686:	bf00      	nop
 8016688:	08023c24 	.word	0x08023c24

0801668c <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED0Ev>:
 801668c:	b580      	push	{r7, lr}
 801668e:	b082      	sub	sp, #8
 8016690:	af00      	add	r7, sp, #0
 8016692:	6078      	str	r0, [r7, #4]
 8016694:	6878      	ldr	r0, [r7, #4]
 8016696:	f7ff ffe1 	bl	801665c <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 801669a:	21a0      	movs	r1, #160	; 0xa0
 801669c:	6878      	ldr	r0, [r7, #4]
 801669e:	f00a fd6e 	bl	802117e <_ZdlPvj>
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	4618      	mov	r0, r3
 80166a6:	3708      	adds	r7, #8
 80166a8:	46bd      	mov	sp, r7
 80166aa:	bd80      	pop	{r7, pc}

080166ac <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEED1Ev>:
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b082      	sub	sp, #8
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	6078      	str	r0, [r7, #4]
 80166b4:	4a08      	ldr	r2, [pc, #32]	; (80166d8 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEED1Ev+0x2c>)
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	601a      	str	r2, [r3, #0]
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	3384      	adds	r3, #132	; 0x84
 80166be:	4618      	mov	r0, r3
 80166c0:	f7f6 fb04 	bl	800cccc <_ZN8touchgfx5ImageD1Ev>
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	4618      	mov	r0, r3
 80166c8:	f000 fad6 	bl	8016c78 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEED1Ev>
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	4618      	mov	r0, r3
 80166d0:	3708      	adds	r7, #8
 80166d2:	46bd      	mov	sp, r7
 80166d4:	bd80      	pop	{r7, pc}
 80166d6:	bf00      	nop
 80166d8:	08023af0 	.word	0x08023af0

080166dc <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEED0Ev>:
 80166dc:	b580      	push	{r7, lr}
 80166de:	b082      	sub	sp, #8
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	6078      	str	r0, [r7, #4]
 80166e4:	6878      	ldr	r0, [r7, #4]
 80166e6:	f7ff ffe1 	bl	80166ac <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEED1Ev>
 80166ea:	21b0      	movs	r1, #176	; 0xb0
 80166ec:	6878      	ldr	r0, [r7, #4]
 80166ee:	f00a fd46 	bl	802117e <_ZdlPvj>
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	4618      	mov	r0, r3
 80166f6:	3708      	adds	r7, #8
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd80      	pop	{r7, pc}

080166fc <_ZN8touchgfx4ViewI18IOControlPresenterEC1Ev>:
    View() : presenter(0)
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b082      	sub	sp, #8
 8016700:	af00      	add	r7, sp, #0
 8016702:	6078      	str	r0, [r7, #4]
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	4618      	mov	r0, r3
 8016708:	f008 fb18 	bl	801ed3c <_ZN8touchgfx6ScreenC1Ev>
 801670c:	4a05      	ldr	r2, [pc, #20]	; (8016724 <_ZN8touchgfx4ViewI18IOControlPresenterEC1Ev+0x28>)
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	601a      	str	r2, [r3, #0]
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	2200      	movs	r2, #0
 8016716:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	4618      	mov	r0, r3
 801671c:	3708      	adds	r7, #8
 801671e:	46bd      	mov	sp, r7
 8016720:	bd80      	pop	{r7, pc}
 8016722:	bf00      	nop
 8016724:	08023dfc 	.word	0x08023dfc

08016728 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>:
    IconButtonStyle() : T()
 8016728:	b590      	push	{r4, r7, lr}
 801672a:	b085      	sub	sp, #20
 801672c:	af00      	add	r7, sp, #0
 801672e:	6078      	str	r0, [r7, #4]
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	4618      	mov	r0, r3
 8016734:	f000 fac8 	bl	8016cc8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 8016738:	4a16      	ldr	r2, [pc, #88]	; (8016794 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev+0x6c>)
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	601a      	str	r2, [r3, #0]
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	3364      	adds	r3, #100	; 0x64
 8016742:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016746:	4618      	mov	r0, r3
 8016748:	f7f6 f94e 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	3366      	adds	r3, #102	; 0x66
 8016750:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016754:	4618      	mov	r0, r3
 8016756:	f7f6 f947 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8016760:	f107 030c 	add.w	r3, r7, #12
 8016764:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016768:	4618      	mov	r0, r3
 801676a:	f7f6 f93d 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 801676e:	f107 030c 	add.w	r3, r7, #12
 8016772:	4619      	mov	r1, r3
 8016774:	4620      	mov	r0, r4
 8016776:	f7f6 fa87 	bl	800cc88 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        T::add(iconImage);
 801677a:	687a      	ldr	r2, [r7, #4]
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	3368      	adds	r3, #104	; 0x68
 8016780:	4619      	mov	r1, r3
 8016782:	4610      	mov	r0, r2
 8016784:	f7f5 fe2e 	bl	800c3e4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	4618      	mov	r0, r3
 801678c:	3714      	adds	r7, #20
 801678e:	46bd      	mov	sp, r7
 8016790:	bd90      	pop	{r4, r7, pc}
 8016792:	bf00      	nop
 8016794:	08023cc0 	.word	0x08023cc0

08016798 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>:
    TextButtonStyle() : T()
 8016798:	b580      	push	{r7, lr}
 801679a:	b082      	sub	sp, #8
 801679c:	af00      	add	r7, sp, #0
 801679e:	6078      	str	r0, [r7, #4]
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	4618      	mov	r0, r3
 80167a4:	f000 fa90 	bl	8016cc8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 80167a8:	4a0e      	ldr	r2, [pc, #56]	; (80167e4 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev+0x4c>)
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	601a      	str	r2, [r3, #0]
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	3364      	adds	r3, #100	; 0x64
 80167b2:	4618      	mov	r0, r3
 80167b4:	f7f6 fc5e 	bl	800d074 <_ZN8touchgfx8TextAreaC1Ev>
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	3398      	adds	r3, #152	; 0x98
 80167bc:	4618      	mov	r0, r3
 80167be:	f7f6 fb4b 	bl	800ce58 <_ZN8touchgfx9colortypeC1Ev>
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	339c      	adds	r3, #156	; 0x9c
 80167c6:	4618      	mov	r0, r3
 80167c8:	f7f6 fb46 	bl	800ce58 <_ZN8touchgfx9colortypeC1Ev>
        T::add(text);
 80167cc:	687a      	ldr	r2, [r7, #4]
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	3364      	adds	r3, #100	; 0x64
 80167d2:	4619      	mov	r1, r3
 80167d4:	4610      	mov	r0, r2
 80167d6:	f7f5 fe05 	bl	800c3e4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	4618      	mov	r0, r3
 80167de:	3708      	adds	r7, #8
 80167e0:	46bd      	mov	sp, r7
 80167e2:	bd80      	pop	{r7, pc}
 80167e4:	08023c24 	.word	0x08023c24

080167e8 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEEC1Ev>:
    IconButtonStyle() : T()
 80167e8:	b590      	push	{r4, r7, lr}
 80167ea:	b085      	sub	sp, #20
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	6078      	str	r0, [r7, #4]
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	4618      	mov	r0, r3
 80167f4:	f000 faa6 	bl	8016d44 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEC1Ev>
 80167f8:	4a16      	ldr	r2, [pc, #88]	; (8016854 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEEC1Ev+0x6c>)
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	601a      	str	r2, [r3, #0]
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	3380      	adds	r3, #128	; 0x80
 8016802:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016806:	4618      	mov	r0, r3
 8016808:	f7f6 f8ee 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	3382      	adds	r3, #130	; 0x82
 8016810:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016814:	4618      	mov	r0, r3
 8016816:	f7f6 f8e7 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8016820:	f107 030c 	add.w	r3, r7, #12
 8016824:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016828:	4618      	mov	r0, r3
 801682a:	f7f6 f8dd 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 801682e:	f107 030c 	add.w	r3, r7, #12
 8016832:	4619      	mov	r1, r3
 8016834:	4620      	mov	r0, r4
 8016836:	f7f6 fa27 	bl	800cc88 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        T::add(iconImage);
 801683a:	687a      	ldr	r2, [r7, #4]
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	3384      	adds	r3, #132	; 0x84
 8016840:	4619      	mov	r1, r3
 8016842:	4610      	mov	r0, r2
 8016844:	f7f5 fdce 	bl	800c3e4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	4618      	mov	r0, r3
 801684c:	3714      	adds	r7, #20
 801684e:	46bd      	mov	sp, r7
 8016850:	bd90      	pop	{r4, r7, pc}
 8016852:	bf00      	nop
 8016854:	08023af0 	.word	0x08023af0

08016858 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8016858:	b480      	push	{r7}
 801685a:	b083      	sub	sp, #12
 801685c:	af00      	add	r7, sp, #0
 801685e:	6078      	str	r0, [r7, #4]
 8016860:	4a04      	ldr	r2, [pc, #16]	; (8016874 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev+0x1c>)
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	601a      	str	r2, [r3, #0]
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	4618      	mov	r0, r3
 801686a:	370c      	adds	r7, #12
 801686c:	46bd      	mov	sp, r7
 801686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016872:	4770      	bx	lr
 8016874:	08023f60 	.word	0x08023f60

08016878 <_ZN8touchgfx8CallbackI17IOControlViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8016878:	b580      	push	{r7, lr}
 801687a:	b084      	sub	sp, #16
 801687c:	af00      	add	r7, sp, #0
 801687e:	60f8      	str	r0, [r7, #12]
 8016880:	60b9      	str	r1, [r7, #8]
 8016882:	4639      	mov	r1, r7
 8016884:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	4618      	mov	r0, r3
 801688c:	f7ff ffe4 	bl	8016858 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 8016890:	4a08      	ldr	r2, [pc, #32]	; (80168b4 <_ZN8touchgfx8CallbackI17IOControlViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	68ba      	ldr	r2, [r7, #8]
 801689a:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	3308      	adds	r3, #8
 80168a0:	463a      	mov	r2, r7
 80168a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80168a6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	4618      	mov	r0, r3
 80168ae:	3710      	adds	r7, #16
 80168b0:	46bd      	mov	sp, r7
 80168b2:	bd80      	pop	{r7, pc}
 80168b4:	08023ad8 	.word	0x08023ad8

080168b8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>:
     * @brief Sets the bitmaps.
     *
     * @param bmpReleased The bitmap released.
     * @param bmpPressed  The bitmap pressed.
     */
    virtual void setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
 80168b8:	b590      	push	{r4, r7, lr}
 80168ba:	b085      	sub	sp, #20
 80168bc:	af00      	add	r7, sp, #0
 80168be:	60f8      	str	r0, [r7, #12]
 80168c0:	60b9      	str	r1, [r7, #8]
 80168c2:	607a      	str	r2, [r7, #4]
    {
        up = bmpReleased;
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	68ba      	ldr	r2, [r7, #8]
 80168c8:	8812      	ldrh	r2, [r2, #0]
 80168ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        down = bmpPressed;
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	687a      	ldr	r2, [r7, #4]
 80168d2:	8812      	ldrh	r2, [r2, #0]
 80168d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        AbstractButtonContainer::setWidth(down.getWidth());
 80168d8:	68fc      	ldr	r4, [r7, #12]
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	3362      	adds	r3, #98	; 0x62
 80168de:	4618      	mov	r0, r3
 80168e0:	f009 f8e8 	bl	801fab4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80168e4:	4603      	mov	r3, r0
 80168e6:	b21b      	sxth	r3, r3
 80168e8:	4619      	mov	r1, r3
 80168ea:	4620      	mov	r0, r4
 80168ec:	f7f5 fc99 	bl	800c222 <_ZN8touchgfx8Drawable8setWidthEs>
        AbstractButtonContainer::setHeight(down.getHeight());
 80168f0:	68fc      	ldr	r4, [r7, #12]
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	3362      	adds	r3, #98	; 0x62
 80168f6:	4618      	mov	r0, r3
 80168f8:	f009 f914 	bl	801fb24 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80168fc:	4603      	mov	r3, r0
 80168fe:	b21b      	sxth	r3, r3
 8016900:	4619      	mov	r1, r3
 8016902:	4620      	mov	r0, r4
 8016904:	f7f5 fc9c 	bl	800c240 <_ZN8touchgfx8Drawable9setHeightEs>

        handlePressedUpdated();
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	3388      	adds	r3, #136	; 0x88
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	68f8      	ldr	r0, [r7, #12]
 8016912:	4798      	blx	r3
    }
 8016914:	bf00      	nop
 8016916:	3714      	adds	r7, #20
 8016918:	46bd      	mov	sp, r7
 801691a:	bd90      	pop	{r4, r7, pc}

0801691c <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE11setBitmapXYEtt>:
     * @brief Sets bitmap xy.
     *
     * @param x An uint16_t to process.
     * @param y An uint16_t to process.
     */
    void setBitmapXY(uint16_t x, uint16_t y)
 801691c:	b580      	push	{r7, lr}
 801691e:	b082      	sub	sp, #8
 8016920:	af00      	add	r7, sp, #0
 8016922:	6078      	str	r0, [r7, #4]
 8016924:	460b      	mov	r3, r1
 8016926:	807b      	strh	r3, [r7, #2]
 8016928:	4613      	mov	r3, r2
 801692a:	803b      	strh	r3, [r7, #0]
    {
        buttonImage.setXY(x, y);
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	3334      	adds	r3, #52	; 0x34
 8016930:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8016934:	f9b7 2000 	ldrsh.w	r2, [r7]
 8016938:	4618      	mov	r0, r3
 801693a:	f7f5 fc54 	bl	800c1e6 <_ZN8touchgfx8Drawable5setXYEss>
    }
 801693e:	bf00      	nop
 8016940:	3708      	adds	r7, #8
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}

08016946 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>:
     * @brief Sets icon bitmaps.
     *
     * @param newIconReleased The new icon released.
     * @param newIconPressed  The new icon pressed.
     */
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8016946:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016948:	b085      	sub	sp, #20
 801694a:	af00      	add	r7, sp, #0
 801694c:	60f8      	str	r0, [r7, #12]
 801694e:	60b9      	str	r1, [r7, #8]
 8016950:	607a      	str	r2, [r7, #4]
    {
        iconReleased = newIconReleased;
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	68ba      	ldr	r2, [r7, #8]
 8016956:	8812      	ldrh	r2, [r2, #0]
 8016958:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
        iconPressed = newIconPressed;
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	687a      	ldr	r2, [r7, #4]
 8016960:	8812      	ldrh	r2, [r2, #0]
 8016962:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	f103 0568 	add.w	r5, r3, #104	; 0x68
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	4618      	mov	r0, r3
 8016970:	f7f5 ffc9 	bl	800c906 <_ZNK8touchgfx8Drawable8getWidthEv>
 8016974:	4603      	mov	r3, r0
 8016976:	2b00      	cmp	r3, #0
 8016978:	da00      	bge.n	801697c <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_+0x36>
 801697a:	3301      	adds	r3, #1
 801697c:	105b      	asrs	r3, r3, #1
 801697e:	b21b      	sxth	r3, r3
 8016980:	b29c      	uxth	r4, r3
 8016982:	6878      	ldr	r0, [r7, #4]
 8016984:	f009 f896 	bl	801fab4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016988:	4603      	mov	r3, r0
 801698a:	085b      	lsrs	r3, r3, #1
 801698c:	b29b      	uxth	r3, r3
 801698e:	1ae3      	subs	r3, r4, r3
 8016990:	b29b      	uxth	r3, r3
 8016992:	b21e      	sxth	r6, r3
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	4618      	mov	r0, r3
 8016998:	f7f5 ffc2 	bl	800c920 <_ZNK8touchgfx8Drawable9getHeightEv>
 801699c:	4603      	mov	r3, r0
 801699e:	2b00      	cmp	r3, #0
 80169a0:	da00      	bge.n	80169a4 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_+0x5e>
 80169a2:	3301      	adds	r3, #1
 80169a4:	105b      	asrs	r3, r3, #1
 80169a6:	b21b      	sxth	r3, r3
 80169a8:	b29c      	uxth	r4, r3
 80169aa:	6878      	ldr	r0, [r7, #4]
 80169ac:	f009 f8ba 	bl	801fb24 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80169b0:	4603      	mov	r3, r0
 80169b2:	085b      	lsrs	r3, r3, #1
 80169b4:	b29b      	uxth	r3, r3
 80169b6:	1ae3      	subs	r3, r4, r3
 80169b8:	b29b      	uxth	r3, r3
 80169ba:	b21b      	sxth	r3, r3
 80169bc:	461a      	mov	r2, r3
 80169be:	4631      	mov	r1, r6
 80169c0:	4628      	mov	r0, r5
 80169c2:	f7f5 fc10 	bl	800c1e6 <_ZN8touchgfx8Drawable5setXYEss>

        handlePressedUpdated();
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	3388      	adds	r3, #136	; 0x88
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	68f8      	ldr	r0, [r7, #12]
 80169d0:	4798      	blx	r3
    }
 80169d2:	bf00      	nop
 80169d4:	3714      	adds	r7, #20
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080169da <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE9setIconXYEss>:
     * @brief Sets icon xy.
     *
     * @param x The x coordinate.
     * @param y The y coordinate.
     */
    void setIconXY(int16_t x, int16_t y)
 80169da:	b580      	push	{r7, lr}
 80169dc:	b082      	sub	sp, #8
 80169de:	af00      	add	r7, sp, #0
 80169e0:	6078      	str	r0, [r7, #4]
 80169e2:	460b      	mov	r3, r1
 80169e4:	807b      	strh	r3, [r7, #2]
 80169e6:	4613      	mov	r3, r2
 80169e8:	803b      	strh	r3, [r7, #0]
    {
        setIconX(x);
 80169ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80169ee:	4619      	mov	r1, r3
 80169f0:	6878      	ldr	r0, [r7, #4]
 80169f2:	f000 fa3f 	bl	8016e74 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE8setIconXEs>
        setIconY(y);
 80169f6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80169fa:	4619      	mov	r1, r3
 80169fc:	6878      	ldr	r0, [r7, #4]
 80169fe:	f000 fa4b 	bl	8016e98 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE8setIconYEs>
    }
 8016a02:	bf00      	nop
 8016a04:	3708      	adds	r7, #8
 8016a06:	46bd      	mov	sp, r7
 8016a08:	bd80      	pop	{r7, pc}

08016a0a <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>:
     *
     * @brief Sets a text.
     *
     * @param t A TypedText to process.
     */
    void setText(TypedText t)
 8016a0a:	b590      	push	{r4, r7, lr}
 8016a0c:	b083      	sub	sp, #12
 8016a0e:	af00      	add	r7, sp, #0
 8016a10:	6078      	str	r0, [r7, #4]
 8016a12:	8039      	strh	r1, [r7, #0]
    {
        text.setTypedText(t);
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	3364      	adds	r3, #100	; 0x64
 8016a18:	8839      	ldrh	r1, [r7, #0]
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	f7f7 f950 	bl	800dcc0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
        text.setWidth(T::getWidth());
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	4618      	mov	r0, r3
 8016a2a:	f7f5 ff6c 	bl	800c906 <_ZNK8touchgfx8Drawable8getWidthEv>
 8016a2e:	4603      	mov	r3, r0
 8016a30:	4619      	mov	r1, r3
 8016a32:	4620      	mov	r0, r4
 8016a34:	f7f5 fbf5 	bl	800c222 <_ZN8touchgfx8Drawable8setWidthEs>
        text.setHeight(T::getHeight());
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	4618      	mov	r0, r3
 8016a42:	f7f5 ff6d 	bl	800c920 <_ZNK8touchgfx8Drawable9getHeightEv>
 8016a46:	4603      	mov	r3, r0
 8016a48:	4619      	mov	r1, r3
 8016a4a:	4620      	mov	r0, r4
 8016a4c:	f7f5 fbf8 	bl	800c240 <_ZN8touchgfx8Drawable9setHeightEs>
    }
 8016a50:	bf00      	nop
 8016a52:	370c      	adds	r7, #12
 8016a54:	46bd      	mov	sp, r7
 8016a56:	bd90      	pop	{r4, r7, pc}

08016a58 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>:
     * @param x The x coordinate.
     * @param y The y coordinate.
     * @param width The width of the text.
     * @param height The height of the text.
     */
    void setTextPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8016a58:	b590      	push	{r4, r7, lr}
 8016a5a:	b087      	sub	sp, #28
 8016a5c:	af02      	add	r7, sp, #8
 8016a5e:	60f8      	str	r0, [r7, #12]
 8016a60:	4608      	mov	r0, r1
 8016a62:	4611      	mov	r1, r2
 8016a64:	461a      	mov	r2, r3
 8016a66:	4603      	mov	r3, r0
 8016a68:	817b      	strh	r3, [r7, #10]
 8016a6a:	460b      	mov	r3, r1
 8016a6c:	813b      	strh	r3, [r7, #8]
 8016a6e:	4613      	mov	r3, r2
 8016a70:	80fb      	strh	r3, [r7, #6]
    {
        text.setPosition(x, y, width, height);
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8016a78:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8016a7c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8016a80:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8016a84:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016a88:	9300      	str	r3, [sp, #0]
 8016a8a:	4623      	mov	r3, r4
 8016a8c:	f7f5 fb46 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8016a90:	bf00      	nop
 8016a92:	3714      	adds	r7, #20
 8016a94:	46bd      	mov	sp, r7
 8016a96:	bd90      	pop	{r4, r7, pc}

08016a98 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>:
     * @brief Sets text colors.
     *
     * @param newColorReleased The new color released.
     * @param newColorPressed  The new color pressed.
     */
    void setTextColors(colortype newColorReleased, colortype newColorPressed)
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b084      	sub	sp, #16
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	60f8      	str	r0, [r7, #12]
 8016aa0:	60b9      	str	r1, [r7, #8]
 8016aa2:	607a      	str	r2, [r7, #4]
    {
        colorReleased = newColorReleased;
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	68ba      	ldr	r2, [r7, #8]
 8016aa8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        colorPressed = newColorPressed;
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	687a      	ldr	r2, [r7, #4]
 8016ab0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        handlePressedUpdated();
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	3388      	adds	r3, #136	; 0x88
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	68f8      	ldr	r0, [r7, #12]
 8016abe:	4798      	blx	r3
    }
 8016ac0:	bf00      	nop
 8016ac2:	3710      	adds	r7, #16
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	bd80      	pop	{r7, pc}

08016ac8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param x      The x coordinate of this BoxWithBorderButtonStyle.
     * @param y      The y coordinate of this BoxWithBorderButtonStyle.
     * @param width  The width of this BoxWithBorderButtonStyle.
     * @param height The height of this BoxWithBorderButtonStyle.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8016ac8:	b590      	push	{r4, r7, lr}
 8016aca:	b087      	sub	sp, #28
 8016acc:	af02      	add	r7, sp, #8
 8016ace:	60f8      	str	r0, [r7, #12]
 8016ad0:	4608      	mov	r0, r1
 8016ad2:	4611      	mov	r1, r2
 8016ad4:	461a      	mov	r2, r3
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	817b      	strh	r3, [r7, #10]
 8016ada:	460b      	mov	r3, r1
 8016adc:	813b      	strh	r3, [r7, #8]
 8016ade:	4613      	mov	r3, r2
 8016ae0:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8016ae8:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8016aec:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8016af0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8016af4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016af8:	9300      	str	r3, [sp, #0]
 8016afa:	4623      	mov	r3, r4
 8016afc:	f7f5 fb0e 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8016b00:	bf00      	nop
 8016b02:	3714      	adds	r7, #20
 8016b04:	46bd      	mov	sp, r7
 8016b06:	bd90      	pop	{r4, r7, pc}

08016b08 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE13setBorderSizeEh>:
     *
     * @brief Sets border size.
     *
     * @param size The size.
     */
    void setBorderSize(uint8_t size)
 8016b08:	b580      	push	{r7, lr}
 8016b0a:	b082      	sub	sp, #8
 8016b0c:	af00      	add	r7, sp, #0
 8016b0e:	6078      	str	r0, [r7, #4]
 8016b10:	460b      	mov	r3, r1
 8016b12:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	333c      	adds	r3, #60	; 0x3c
 8016b18:	78fa      	ldrb	r2, [r7, #3]
 8016b1a:	4611      	mov	r1, r2
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	f7ff f987 	bl	8015e30 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>
    }
 8016b22:	bf00      	nop
 8016b24:	3708      	adds	r7, #8
 8016b26:	46bd      	mov	sp, r7
 8016b28:	bd80      	pop	{r7, pc}

08016b2a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 8016b2a:	b580      	push	{r7, lr}
 8016b2c:	b084      	sub	sp, #16
 8016b2e:	af00      	add	r7, sp, #0
 8016b30:	60f8      	str	r0, [r7, #12]
 8016b32:	60b9      	str	r1, [r7, #8]
 8016b34:	607a      	str	r2, [r7, #4]
 8016b36:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	68ba      	ldr	r2, [r7, #8]
 8016b3c:	671a      	str	r2, [r3, #112]	; 0x70
        down = colorPressed;
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	687a      	ldr	r2, [r7, #4]
 8016b42:	675a      	str	r2, [r3, #116]	; 0x74
        borderUp = borderColorReleased;
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	683a      	ldr	r2, [r7, #0]
 8016b48:	679a      	str	r2, [r3, #120]	; 0x78
        borderDown = borderColorPressed;
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	69ba      	ldr	r2, [r7, #24]
 8016b4e:	67da      	str	r2, [r3, #124]	; 0x7c
        handlePressedUpdated();
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	3388      	adds	r3, #136	; 0x88
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	68f8      	ldr	r0, [r7, #12]
 8016b5a:	4798      	blx	r3
    }
 8016b5c:	bf00      	nop
 8016b5e:	3710      	adds	r7, #16
 8016b60:	46bd      	mov	sp, r7
 8016b62:	bd80      	pop	{r7, pc}

08016b64 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>:
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8016b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b66:	b085      	sub	sp, #20
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	60f8      	str	r0, [r7, #12]
 8016b6c:	60b9      	str	r1, [r7, #8]
 8016b6e:	607a      	str	r2, [r7, #4]
        iconReleased = newIconReleased;
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	68ba      	ldr	r2, [r7, #8]
 8016b74:	8812      	ldrh	r2, [r2, #0]
 8016b76:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
        iconPressed = newIconPressed;
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	687a      	ldr	r2, [r7, #4]
 8016b7e:	8812      	ldrh	r2, [r2, #0]
 8016b80:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	f103 0584 	add.w	r5, r3, #132	; 0x84
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	f7f5 feba 	bl	800c906 <_ZNK8touchgfx8Drawable8getWidthEv>
 8016b92:	4603      	mov	r3, r0
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	da00      	bge.n	8016b9a <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_+0x36>
 8016b98:	3301      	adds	r3, #1
 8016b9a:	105b      	asrs	r3, r3, #1
 8016b9c:	b21b      	sxth	r3, r3
 8016b9e:	b29c      	uxth	r4, r3
 8016ba0:	6878      	ldr	r0, [r7, #4]
 8016ba2:	f008 ff87 	bl	801fab4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	085b      	lsrs	r3, r3, #1
 8016baa:	b29b      	uxth	r3, r3
 8016bac:	1ae3      	subs	r3, r4, r3
 8016bae:	b29b      	uxth	r3, r3
 8016bb0:	b21e      	sxth	r6, r3
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	f7f5 feb3 	bl	800c920 <_ZNK8touchgfx8Drawable9getHeightEv>
 8016bba:	4603      	mov	r3, r0
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	da00      	bge.n	8016bc2 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_+0x5e>
 8016bc0:	3301      	adds	r3, #1
 8016bc2:	105b      	asrs	r3, r3, #1
 8016bc4:	b21b      	sxth	r3, r3
 8016bc6:	b29c      	uxth	r4, r3
 8016bc8:	6878      	ldr	r0, [r7, #4]
 8016bca:	f008 ffab 	bl	801fb24 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016bce:	4603      	mov	r3, r0
 8016bd0:	085b      	lsrs	r3, r3, #1
 8016bd2:	b29b      	uxth	r3, r3
 8016bd4:	1ae3      	subs	r3, r4, r3
 8016bd6:	b29b      	uxth	r3, r3
 8016bd8:	b21b      	sxth	r3, r3
 8016bda:	461a      	mov	r2, r3
 8016bdc:	4631      	mov	r1, r6
 8016bde:	4628      	mov	r0, r5
 8016be0:	f7f5 fb01 	bl	800c1e6 <_ZN8touchgfx8Drawable5setXYEss>
        handlePressedUpdated();
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	3388      	adds	r3, #136	; 0x88
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	68f8      	ldr	r0, [r7, #12]
 8016bee:	4798      	blx	r3
    }
 8016bf0:	bf00      	nop
 8016bf2:	3714      	adds	r7, #20
 8016bf4:	46bd      	mov	sp, r7
 8016bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016bf8 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEE9setIconXYEss>:
    void setIconXY(int16_t x, int16_t y)
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b082      	sub	sp, #8
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	6078      	str	r0, [r7, #4]
 8016c00:	460b      	mov	r3, r1
 8016c02:	807b      	strh	r3, [r7, #2]
 8016c04:	4613      	mov	r3, r2
 8016c06:	803b      	strh	r3, [r7, #0]
        setIconX(x);
 8016c08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016c0c:	4619      	mov	r1, r3
 8016c0e:	6878      	ldr	r0, [r7, #4]
 8016c10:	f000 f9c4 	bl	8016f9c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEE8setIconXEs>
        setIconY(y);
 8016c14:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016c18:	4619      	mov	r1, r3
 8016c1a:	6878      	ldr	r0, [r7, #4]
 8016c1c:	f000 f9d0 	bl	8016fc0 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEE8setIconYEs>
    }
 8016c20:	bf00      	nop
 8016c22:	3708      	adds	r7, #8
 8016c24:	46bd      	mov	sp, r7
 8016c26:	bd80      	pop	{r7, pc}

08016c28 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEED1Ev>:
    virtual ~ImageButtonStyle() { }
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	b082      	sub	sp, #8
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	6078      	str	r0, [r7, #4]
 8016c30:	4a08      	ldr	r2, [pc, #32]	; (8016c54 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	601a      	str	r2, [r3, #0]
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	3334      	adds	r3, #52	; 0x34
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	f7f6 f846 	bl	800cccc <_ZN8touchgfx5ImageD1Ev>
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	4618      	mov	r0, r3
 8016c44:	f7fe ff0e 	bl	8015a64 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	3708      	adds	r7, #8
 8016c4e:	46bd      	mov	sp, r7
 8016c50:	bd80      	pop	{r7, pc}
 8016c52:	bf00      	nop
 8016c54:	08023d60 	.word	0x08023d60

08016c58 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 8016c58:	b580      	push	{r7, lr}
 8016c5a:	b082      	sub	sp, #8
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	6078      	str	r0, [r7, #4]
 8016c60:	6878      	ldr	r0, [r7, #4]
 8016c62:	f7ff ffe1 	bl	8016c28 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEED1Ev>
 8016c66:	2164      	movs	r1, #100	; 0x64
 8016c68:	6878      	ldr	r0, [r7, #4]
 8016c6a:	f00a fa88 	bl	802117e <_ZdlPvj>
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	4618      	mov	r0, r3
 8016c72:	3708      	adds	r7, #8
 8016c74:	46bd      	mov	sp, r7
 8016c76:	bd80      	pop	{r7, pc}

08016c78 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEED1Ev>:
    virtual ~BoxWithBorderButtonStyle() { }
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b082      	sub	sp, #8
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	6078      	str	r0, [r7, #4]
 8016c80:	4a08      	ldr	r2, [pc, #32]	; (8016ca4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEED1Ev+0x2c>)
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	601a      	str	r2, [r3, #0]
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	333c      	adds	r3, #60	; 0x3c
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	f7f6 fc6c 	bl	800d568 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	4618      	mov	r0, r3
 8016c94:	f7fe ff86 	bl	8015ba4 <_ZN8touchgfx19RepeatButtonTriggerD1Ev>
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	3708      	adds	r7, #8
 8016c9e:	46bd      	mov	sp, r7
 8016ca0:	bd80      	pop	{r7, pc}
 8016ca2:	bf00      	nop
 8016ca4:	08023b8c 	.word	0x08023b8c

08016ca8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEED0Ev>:
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	b082      	sub	sp, #8
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	6078      	str	r0, [r7, #4]
 8016cb0:	6878      	ldr	r0, [r7, #4]
 8016cb2:	f7ff ffe1 	bl	8016c78 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEED1Ev>
 8016cb6:	2180      	movs	r1, #128	; 0x80
 8016cb8:	6878      	ldr	r0, [r7, #4]
 8016cba:	f00a fa60 	bl	802117e <_ZdlPvj>
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	3708      	adds	r7, #8
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	bd80      	pop	{r7, pc}

08016cc8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
    ImageButtonStyle() : T(), up(), down()
 8016cc8:	b590      	push	{r4, r7, lr}
 8016cca:	b085      	sub	sp, #20
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	f7fe feb4 	bl	8015a40 <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 8016cd8:	4a19      	ldr	r2, [pc, #100]	; (8016d40 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x78>)
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	601a      	str	r2, [r3, #0]
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8016ce4:	f107 030c 	add.w	r3, r7, #12
 8016ce8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016cec:	4618      	mov	r0, r3
 8016cee:	f7f5 fe7b 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8016cf2:	f107 030c 	add.w	r3, r7, #12
 8016cf6:	4619      	mov	r1, r3
 8016cf8:	4620      	mov	r0, r4
 8016cfa:	f7f5 ffc5 	bl	800cc88 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	3360      	adds	r3, #96	; 0x60
 8016d02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016d06:	4618      	mov	r0, r3
 8016d08:	f7f5 fe6e 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	3362      	adds	r3, #98	; 0x62
 8016d10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016d14:	4618      	mov	r0, r3
 8016d16:	f7f5 fe67 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
        buttonImage.setXY(0, 0);
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	3334      	adds	r3, #52	; 0x34
 8016d1e:	2200      	movs	r2, #0
 8016d20:	2100      	movs	r1, #0
 8016d22:	4618      	mov	r0, r3
 8016d24:	f7f5 fa5f 	bl	800c1e6 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(buttonImage);
 8016d28:	687a      	ldr	r2, [r7, #4]
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	3334      	adds	r3, #52	; 0x34
 8016d2e:	4619      	mov	r1, r3
 8016d30:	4610      	mov	r0, r2
 8016d32:	f7f5 fb57 	bl	800c3e4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	4618      	mov	r0, r3
 8016d3a:	3714      	adds	r7, #20
 8016d3c:	46bd      	mov	sp, r7
 8016d3e:	bd90      	pop	{r4, r7, pc}
 8016d40:	08023d60 	.word	0x08023d60

08016d44 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle() : T(), up(), down()
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b082      	sub	sp, #8
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	6078      	str	r0, [r7, #4]
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	4618      	mov	r0, r3
 8016d50:	f7fe ff0a 	bl	8015b68 <_ZN8touchgfx19RepeatButtonTriggerC1Ev>
 8016d54:	4a17      	ldr	r2, [pc, #92]	; (8016db4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEC1Ev+0x70>)
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	601a      	str	r2, [r3, #0]
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	333c      	adds	r3, #60	; 0x3c
 8016d5e:	4618      	mov	r0, r3
 8016d60:	f7ff f824 	bl	8015dac <_ZN8touchgfx13BoxWithBorderC1Ev>
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	3370      	adds	r3, #112	; 0x70
 8016d68:	4618      	mov	r0, r3
 8016d6a:	f7f6 f875 	bl	800ce58 <_ZN8touchgfx9colortypeC1Ev>
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	3374      	adds	r3, #116	; 0x74
 8016d72:	4618      	mov	r0, r3
 8016d74:	f7f6 f870 	bl	800ce58 <_ZN8touchgfx9colortypeC1Ev>
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	3378      	adds	r3, #120	; 0x78
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	f7f6 f86b 	bl	800ce58 <_ZN8touchgfx9colortypeC1Ev>
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	337c      	adds	r3, #124	; 0x7c
 8016d86:	4618      	mov	r0, r3
 8016d88:	f7f6 f866 	bl	800ce58 <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	333c      	adds	r3, #60	; 0x3c
 8016d90:	2200      	movs	r2, #0
 8016d92:	2100      	movs	r1, #0
 8016d94:	4618      	mov	r0, r3
 8016d96:	f7f5 fa26 	bl	800c1e6 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 8016d9a:	687a      	ldr	r2, [r7, #4]
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	333c      	adds	r3, #60	; 0x3c
 8016da0:	4619      	mov	r1, r3
 8016da2:	4610      	mov	r0, r2
 8016da4:	f7f5 fb1e 	bl	800c3e4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	4618      	mov	r0, r3
 8016dac:	3708      	adds	r7, #8
 8016dae:	46bd      	mov	sp, r7
 8016db0:	bd80      	pop	{r7, pc}
 8016db2:	bf00      	nop
 8016db4:	08023b8c 	.word	0x08023b8c

08016db8 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>:
    virtual ~GenericCallback()
 8016db8:	b480      	push	{r7}
 8016dba:	b083      	sub	sp, #12
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	6078      	str	r0, [r7, #4]
    }
 8016dc0:	4a04      	ldr	r2, [pc, #16]	; (8016dd4 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev+0x1c>)
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	601a      	str	r2, [r3, #0]
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	4618      	mov	r0, r3
 8016dca:	370c      	adds	r7, #12
 8016dcc:	46bd      	mov	sp, r7
 8016dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd2:	4770      	bx	lr
 8016dd4:	08023f60 	.word	0x08023f60

08016dd8 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED0Ev>:
    virtual ~GenericCallback()
 8016dd8:	b580      	push	{r7, lr}
 8016dda:	b082      	sub	sp, #8
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	6078      	str	r0, [r7, #4]
    }
 8016de0:	6878      	ldr	r0, [r7, #4]
 8016de2:	f7ff ffe9 	bl	8016db8 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8016de6:	2104      	movs	r1, #4
 8016de8:	6878      	ldr	r0, [r7, #4]
 8016dea:	f00a f9c8 	bl	802117e <_ZdlPvj>
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	4618      	mov	r0, r3
 8016df2:	3708      	adds	r7, #8
 8016df4:	46bd      	mov	sp, r7
 8016df6:	bd80      	pop	{r7, pc}

08016df8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    /**
     * @fn virtual void ImageButtonStyle::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated()
 8016df8:	b590      	push	{r4, r7, lr}
 8016dfa:	b083      	sub	sp, #12
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	6078      	str	r0, [r7, #4]
    {
        buttonImage.setBitmap(T::getPressed() ? down : up);
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	4618      	mov	r0, r3
 8016e0a:	f7fe fddd 	bl	80159c8 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8016e0e:	4603      	mov	r3, r0
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d002      	beq.n	8016e1a <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	3362      	adds	r3, #98	; 0x62
 8016e18:	e001      	b.n	8016e1e <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	3360      	adds	r3, #96	; 0x60
 8016e1e:	4619      	mov	r1, r3
 8016e20:	4620      	mov	r0, r4
 8016e22:	f7f6 fd24 	bl	800d86e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        T::handlePressedUpdated();
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	4618      	mov	r0, r3
 8016e2a:	f7fe fdf5 	bl	8015a18 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 8016e2e:	bf00      	nop
 8016e30:	370c      	adds	r7, #12
 8016e32:	46bd      	mov	sp, r7
 8016e34:	bd90      	pop	{r4, r7, pc}

08016e36 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv>:
    /**
     * @fn virtual void IconButtonStyle::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated()
 8016e36:	b590      	push	{r4, r7, lr}
 8016e38:	b083      	sub	sp, #12
 8016e3a:	af00      	add	r7, sp, #0
 8016e3c:	6078      	str	r0, [r7, #4]
    {
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	4618      	mov	r0, r3
 8016e48:	f7fe fdbe 	bl	80159c8 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8016e4c:	4603      	mov	r3, r0
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d002      	beq.n	8016e58 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x22>
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	3366      	adds	r3, #102	; 0x66
 8016e56:	e001      	b.n	8016e5c <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x26>
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	3364      	adds	r3, #100	; 0x64
 8016e5c:	4619      	mov	r1, r3
 8016e5e:	4620      	mov	r0, r4
 8016e60:	f7f6 fd05 	bl	800d86e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        T::handlePressedUpdated();
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	4618      	mov	r0, r3
 8016e68:	f7ff ffc6 	bl	8016df8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    }
 8016e6c:	bf00      	nop
 8016e6e:	370c      	adds	r7, #12
 8016e70:	46bd      	mov	sp, r7
 8016e72:	bd90      	pop	{r4, r7, pc}

08016e74 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE8setIconXEs>:
    void setIconX(int16_t x)
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b082      	sub	sp, #8
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	6078      	str	r0, [r7, #4]
 8016e7c:	460b      	mov	r3, r1
 8016e7e:	807b      	strh	r3, [r7, #2]
        iconImage.setX(x);
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	3368      	adds	r3, #104	; 0x68
 8016e84:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016e88:	4611      	mov	r1, r2
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	f7f5 f98d 	bl	800c1aa <_ZN8touchgfx8Drawable4setXEs>
    }
 8016e90:	bf00      	nop
 8016e92:	3708      	adds	r7, #8
 8016e94:	46bd      	mov	sp, r7
 8016e96:	bd80      	pop	{r7, pc}

08016e98 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE8setIconYEs>:
    void setIconY(int16_t y)
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b082      	sub	sp, #8
 8016e9c:	af00      	add	r7, sp, #0
 8016e9e:	6078      	str	r0, [r7, #4]
 8016ea0:	460b      	mov	r3, r1
 8016ea2:	807b      	strh	r3, [r7, #2]
        iconImage.setY(y);
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	3368      	adds	r3, #104	; 0x68
 8016ea8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016eac:	4611      	mov	r1, r2
 8016eae:	4618      	mov	r0, r3
 8016eb0:	f7f5 f98a 	bl	800c1c8 <_ZN8touchgfx8Drawable4setYEs>
    }
 8016eb4:	bf00      	nop
 8016eb6:	3708      	adds	r7, #8
 8016eb8:	46bd      	mov	sp, r7
 8016eba:	bd80      	pop	{r7, pc}

08016ebc <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv>:
    /**
     * @fn virtual void TextButtonStyle::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated()
 8016ebc:	b590      	push	{r4, r7, lr}
 8016ebe:	b083      	sub	sp, #12
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	6078      	str	r0, [r7, #4]
    {
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	4618      	mov	r0, r3
 8016ece:	f7fe fd7b 	bl	80159c8 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d002      	beq.n	8016ede <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x22>
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	339c      	adds	r3, #156	; 0x9c
 8016edc:	e001      	b.n	8016ee2 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x26>
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	3398      	adds	r3, #152	; 0x98
 8016ee2:	6819      	ldr	r1, [r3, #0]
 8016ee4:	4620      	mov	r0, r4
 8016ee6:	f7f6 f908 	bl	800d0fa <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
        T::handlePressedUpdated();
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	4618      	mov	r0, r3
 8016eee:	f7ff ff83 	bl	8016df8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    }
 8016ef2:	bf00      	nop
 8016ef4:	370c      	adds	r7, #12
 8016ef6:	46bd      	mov	sp, r7
 8016ef8:	bd90      	pop	{r4, r7, pc}

08016efa <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE20handlePressedUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated()
 8016efa:	b590      	push	{r4, r7, lr}
 8016efc:	b083      	sub	sp, #12
 8016efe:	af00      	add	r7, sp, #0
 8016f00:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	f7fe fd5c 	bl	80159c8 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8016f10:	4603      	mov	r3, r0
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d002      	beq.n	8016f1c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	3374      	adds	r3, #116	; 0x74
 8016f1a:	e001      	b.n	8016f20 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE20handlePressedUpdatedEv+0x26>
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	3370      	adds	r3, #112	; 0x70
 8016f20:	6819      	ldr	r1, [r3, #0]
 8016f22:	4620      	mov	r0, r4
 8016f24:	f7fe ff68 	bl	8015df8 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	4618      	mov	r0, r3
 8016f32:	f7fe fd49 	bl	80159c8 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8016f36:	4603      	mov	r3, r0
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d002      	beq.n	8016f42 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE20handlePressedUpdatedEv+0x48>
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	337c      	adds	r3, #124	; 0x7c
 8016f40:	e001      	b.n	8016f46 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	3378      	adds	r3, #120	; 0x78
 8016f46:	6819      	ldr	r1, [r3, #0]
 8016f48:	4620      	mov	r0, r4
 8016f4a:	f7fe ff63 	bl	8015e14 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	4618      	mov	r0, r3
 8016f52:	f7fe fd61 	bl	8015a18 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 8016f56:	bf00      	nop
 8016f58:	370c      	adds	r7, #12
 8016f5a:	46bd      	mov	sp, r7
 8016f5c:	bd90      	pop	{r4, r7, pc}

08016f5e <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 8016f5e:	b590      	push	{r4, r7, lr}
 8016f60:	b083      	sub	sp, #12
 8016f62:	af00      	add	r7, sp, #0
 8016f64:	6078      	str	r0, [r7, #4]
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	4618      	mov	r0, r3
 8016f70:	f7fe fd2a 	bl	80159c8 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8016f74:	4603      	mov	r3, r0
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d002      	beq.n	8016f80 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEE20handlePressedUpdatedEv+0x22>
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	3382      	adds	r3, #130	; 0x82
 8016f7e:	e001      	b.n	8016f84 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEE20handlePressedUpdatedEv+0x26>
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	3380      	adds	r3, #128	; 0x80
 8016f84:	4619      	mov	r1, r3
 8016f86:	4620      	mov	r0, r4
 8016f88:	f7f6 fc71 	bl	800d86e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        T::handlePressedUpdated();
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	4618      	mov	r0, r3
 8016f90:	f7ff ffb3 	bl	8016efa <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE20handlePressedUpdatedEv>
    }
 8016f94:	bf00      	nop
 8016f96:	370c      	adds	r7, #12
 8016f98:	46bd      	mov	sp, r7
 8016f9a:	bd90      	pop	{r4, r7, pc}

08016f9c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEE8setIconXEs>:
    void setIconX(int16_t x)
 8016f9c:	b580      	push	{r7, lr}
 8016f9e:	b082      	sub	sp, #8
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	6078      	str	r0, [r7, #4]
 8016fa4:	460b      	mov	r3, r1
 8016fa6:	807b      	strh	r3, [r7, #2]
        iconImage.setX(x);
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	3384      	adds	r3, #132	; 0x84
 8016fac:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016fb0:	4611      	mov	r1, r2
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	f7f5 f8f9 	bl	800c1aa <_ZN8touchgfx8Drawable4setXEs>
    }
 8016fb8:	bf00      	nop
 8016fba:	3708      	adds	r7, #8
 8016fbc:	46bd      	mov	sp, r7
 8016fbe:	bd80      	pop	{r7, pc}

08016fc0 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEE8setIconYEs>:
    void setIconY(int16_t y)
 8016fc0:	b580      	push	{r7, lr}
 8016fc2:	b082      	sub	sp, #8
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	6078      	str	r0, [r7, #4]
 8016fc8:	460b      	mov	r3, r1
 8016fca:	807b      	strh	r3, [r7, #2]
        iconImage.setY(y);
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	3384      	adds	r3, #132	; 0x84
 8016fd0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016fd4:	4611      	mov	r1, r2
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	f7f5 f8f6 	bl	800c1c8 <_ZN8touchgfx8Drawable4setYEs>
    }
 8016fdc:	bf00      	nop
 8016fde:	3708      	adds	r7, #8
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	bd80      	pop	{r7, pc}

08016fe4 <_ZN8touchgfx8CallbackI17IOControlViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b082      	sub	sp, #8
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	6078      	str	r0, [r7, #4]
 8016fec:	4a05      	ldr	r2, [pc, #20]	; (8017004 <_ZN8touchgfx8CallbackI17IOControlViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	601a      	str	r2, [r3, #0]
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	f7ff fedf 	bl	8016db8 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	3708      	adds	r7, #8
 8017000:	46bd      	mov	sp, r7
 8017002:	bd80      	pop	{r7, pc}
 8017004:	08023ad8 	.word	0x08023ad8

08017008 <_ZN8touchgfx8CallbackI17IOControlViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8017008:	b580      	push	{r7, lr}
 801700a:	b082      	sub	sp, #8
 801700c:	af00      	add	r7, sp, #0
 801700e:	6078      	str	r0, [r7, #4]
 8017010:	6878      	ldr	r0, [r7, #4]
 8017012:	f7ff ffe7 	bl	8016fe4 <_ZN8touchgfx8CallbackI17IOControlViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8017016:	2110      	movs	r1, #16
 8017018:	6878      	ldr	r0, [r7, #4]
 801701a:	f00a f8b0 	bl	802117e <_ZdlPvj>
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	4618      	mov	r0, r3
 8017022:	3708      	adds	r7, #8
 8017024:	46bd      	mov	sp, r7
 8017026:	bd80      	pop	{r7, pc}

08017028 <_ZN8touchgfx8CallbackI17IOControlViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8017028:	b580      	push	{r7, lr}
 801702a:	b082      	sub	sp, #8
 801702c:	af00      	add	r7, sp, #0
 801702e:	6078      	str	r0, [r7, #4]
 8017030:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	685b      	ldr	r3, [r3, #4]
 8017036:	687a      	ldr	r2, [r7, #4]
 8017038:	68d2      	ldr	r2, [r2, #12]
 801703a:	1052      	asrs	r2, r2, #1
 801703c:	1898      	adds	r0, r3, r2
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	68db      	ldr	r3, [r3, #12]
 8017042:	f003 0301 	and.w	r3, r3, #1
 8017046:	2b00      	cmp	r3, #0
 8017048:	d102      	bne.n	8017050 <_ZN8touchgfx8CallbackI17IOControlViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	689b      	ldr	r3, [r3, #8]
 801704e:	e00a      	b.n	8017066 <_ZN8touchgfx8CallbackI17IOControlViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	685b      	ldr	r3, [r3, #4]
 8017054:	687a      	ldr	r2, [r7, #4]
 8017056:	68d2      	ldr	r2, [r2, #12]
 8017058:	1052      	asrs	r2, r2, #1
 801705a:	4413      	add	r3, r2
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	687a      	ldr	r2, [r7, #4]
 8017060:	6892      	ldr	r2, [r2, #8]
 8017062:	4413      	add	r3, r2
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	6839      	ldr	r1, [r7, #0]
 8017068:	4798      	blx	r3
    }
 801706a:	bf00      	nop
 801706c:	3708      	adds	r7, #8
 801706e:	46bd      	mov	sp, r7
 8017070:	bd80      	pop	{r7, pc}

08017072 <_ZNK8touchgfx8CallbackI17IOControlViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8017072:	b480      	push	{r7}
 8017074:	b083      	sub	sp, #12
 8017076:	af00      	add	r7, sp, #0
 8017078:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	685b      	ldr	r3, [r3, #4]
 801707e:	2b00      	cmp	r3, #0
 8017080:	d010      	beq.n	80170a4 <_ZNK8touchgfx8CallbackI17IOControlViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	689b      	ldr	r3, [r3, #8]
 8017086:	2b00      	cmp	r3, #0
 8017088:	d107      	bne.n	801709a <_ZNK8touchgfx8CallbackI17IOControlViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	68db      	ldr	r3, [r3, #12]
 801708e:	f003 0301 	and.w	r3, r3, #1
 8017092:	2b00      	cmp	r3, #0
 8017094:	d101      	bne.n	801709a <_ZNK8touchgfx8CallbackI17IOControlViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8017096:	2301      	movs	r3, #1
 8017098:	e000      	b.n	801709c <_ZNK8touchgfx8CallbackI17IOControlViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 801709a:	2300      	movs	r3, #0
 801709c:	2b01      	cmp	r3, #1
 801709e:	d001      	beq.n	80170a4 <_ZNK8touchgfx8CallbackI17IOControlViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 80170a0:	2301      	movs	r3, #1
 80170a2:	e000      	b.n	80170a6 <_ZNK8touchgfx8CallbackI17IOControlViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 80170a4:	2300      	movs	r3, #0
    }
 80170a6:	4618      	mov	r0, r3
 80170a8:	370c      	adds	r7, #12
 80170aa:	46bd      	mov	sp, r7
 80170ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b0:	4770      	bx	lr

080170b2 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEE18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void IconButtonStyle::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated()
 80170b2:	b590      	push	{r4, r7, lr}
 80170b4:	b083      	sub	sp, #12
 80170b6:	af00      	add	r7, sp, #0
 80170b8:	6078      	str	r0, [r7, #4]
    {
        iconImage.setAlpha(T::getAlpha());
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	f103 0484 	add.w	r4, r3, #132	; 0x84
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	4618      	mov	r0, r3
 80170c4:	f7fe fc8d 	bl	80159e2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 80170c8:	4603      	mov	r3, r0
 80170ca:	4619      	mov	r1, r3
 80170cc:	4620      	mov	r0, r4
 80170ce:	f7f5 feb3 	bl	800ce38 <_ZN8touchgfx5Image8setAlphaEh>
        T::handleAlphaUpdated();
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	4618      	mov	r0, r3
 80170d6:	f000 f804 	bl	80170e2 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE18handleAlphaUpdatedEv>
    }
 80170da:	bf00      	nop
 80170dc:	370c      	adds	r7, #12
 80170de:	46bd      	mov	sp, r7
 80170e0:	bd90      	pop	{r4, r7, pc}

080170e2 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated()
 80170e2:	b590      	push	{r4, r7, lr}
 80170e4:	b083      	sub	sp, #12
 80170e6:	af00      	add	r7, sp, #0
 80170e8:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	4618      	mov	r0, r3
 80170f4:	f7fe fc75 	bl	80159e2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 80170f8:	4603      	mov	r3, r0
 80170fa:	4619      	mov	r1, r3
 80170fc:	4620      	mov	r0, r4
 80170fe:	f7fe fea7 	bl	8015e50 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>
        T::handleAlphaUpdated();
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	4618      	mov	r0, r3
 8017106:	f7fe fc91 	bl	8015a2c <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 801710a:	bf00      	nop
 801710c:	370c      	adds	r7, #12
 801710e:	46bd      	mov	sp, r7
 8017110:	bd90      	pop	{r4, r7, pc}

08017112 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void TextButtonStyle::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated()
 8017112:	b590      	push	{r4, r7, lr}
 8017114:	b083      	sub	sp, #12
 8017116:	af00      	add	r7, sp, #0
 8017118:	6078      	str	r0, [r7, #4]
    {
        text.setAlpha(T::getAlpha());
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	4618      	mov	r0, r3
 8017124:	f7fe fc5d 	bl	80159e2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8017128:	4603      	mov	r3, r0
 801712a:	4619      	mov	r1, r3
 801712c:	4620      	mov	r0, r4
 801712e:	f7f5 fff2 	bl	800d116 <_ZN8touchgfx8TextArea8setAlphaEh>
        T::handleAlphaUpdated();
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	4618      	mov	r0, r3
 8017136:	f000 f81c 	bl	8017172 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>
    }
 801713a:	bf00      	nop
 801713c:	370c      	adds	r7, #12
 801713e:	46bd      	mov	sp, r7
 8017140:	bd90      	pop	{r4, r7, pc}

08017142 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE18handleAlphaUpdatedEv>:
    virtual void handleAlphaUpdated()
 8017142:	b590      	push	{r4, r7, lr}
 8017144:	b083      	sub	sp, #12
 8017146:	af00      	add	r7, sp, #0
 8017148:	6078      	str	r0, [r7, #4]
        iconImage.setAlpha(T::getAlpha());
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	4618      	mov	r0, r3
 8017154:	f7fe fc45 	bl	80159e2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8017158:	4603      	mov	r3, r0
 801715a:	4619      	mov	r1, r3
 801715c:	4620      	mov	r0, r4
 801715e:	f7f5 fe6b 	bl	800ce38 <_ZN8touchgfx5Image8setAlphaEh>
        T::handleAlphaUpdated();
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	4618      	mov	r0, r3
 8017166:	f000 f804 	bl	8017172 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>
    }
 801716a:	bf00      	nop
 801716c:	370c      	adds	r7, #12
 801716e:	46bd      	mov	sp, r7
 8017170:	bd90      	pop	{r4, r7, pc}

08017172 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void ImageButtonStyle::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated()
 8017172:	b590      	push	{r4, r7, lr}
 8017174:	b083      	sub	sp, #12
 8017176:	af00      	add	r7, sp, #0
 8017178:	6078      	str	r0, [r7, #4]
    {
        buttonImage.setAlpha(T::getAlpha());
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	4618      	mov	r0, r3
 8017184:	f7fe fc2d 	bl	80159e2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8017188:	4603      	mov	r3, r0
 801718a:	4619      	mov	r1, r3
 801718c:	4620      	mov	r0, r4
 801718e:	f7f5 fe53 	bl	800ce38 <_ZN8touchgfx5Image8setAlphaEh>
        T::handleAlphaUpdated();
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	4618      	mov	r0, r3
 8017196:	f7fe fc49 	bl	8015a2c <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 801719a:	bf00      	nop
 801719c:	370c      	adds	r7, #12
 801719e:	46bd      	mov	sp, r7
 80171a0:	bd90      	pop	{r4, r7, pc}
	...

080171a4 <_ZN8touchgfx4ViewI15LoggerPresenterED1Ev>:
class View : public Screen
 80171a4:	b580      	push	{r7, lr}
 80171a6:	b082      	sub	sp, #8
 80171a8:	af00      	add	r7, sp, #0
 80171aa:	6078      	str	r0, [r7, #4]
 80171ac:	4a05      	ldr	r2, [pc, #20]	; (80171c4 <_ZN8touchgfx4ViewI15LoggerPresenterED1Ev+0x20>)
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	601a      	str	r2, [r3, #0]
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	4618      	mov	r0, r3
 80171b6:	f7fe fb47 	bl	8015848 <_ZN8touchgfx6ScreenD1Ev>
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	4618      	mov	r0, r3
 80171be:	3708      	adds	r7, #8
 80171c0:	46bd      	mov	sp, r7
 80171c2:	bd80      	pop	{r7, pc}
 80171c4:	0802406c 	.word	0x0802406c

080171c8 <_ZN8touchgfx4ViewI15LoggerPresenterED0Ev>:
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b082      	sub	sp, #8
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	6078      	str	r0, [r7, #4]
 80171d0:	6878      	ldr	r0, [r7, #4]
 80171d2:	f7ff ffe7 	bl	80171a4 <_ZN8touchgfx4ViewI15LoggerPresenterED1Ev>
 80171d6:	2140      	movs	r1, #64	; 0x40
 80171d8:	6878      	ldr	r0, [r7, #4]
 80171da:	f009 ffd0 	bl	802117e <_ZdlPvj>
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	4618      	mov	r0, r3
 80171e2:	3708      	adds	r7, #8
 80171e4:	46bd      	mov	sp, r7
 80171e6:	bd80      	pop	{r7, pc}

080171e8 <_ZN14LoggerViewBaseD1Ev>:

class LoggerViewBase : public touchgfx::View<LoggerPresenter>
{
public:
    LoggerViewBase();
    virtual ~LoggerViewBase() {}
 80171e8:	b580      	push	{r7, lr}
 80171ea:	b082      	sub	sp, #8
 80171ec:	af00      	add	r7, sp, #0
 80171ee:	6078      	str	r0, [r7, #4]
 80171f0:	4a1f      	ldr	r2, [pc, #124]	; (8017270 <_ZN14LoggerViewBaseD1Ev+0x88>)
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	601a      	str	r2, [r3, #0]
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 80171fc:	4618      	mov	r0, r3
 80171fe:	f000 fbef 	bl	80179e0 <_ZN8touchgfx8CallbackI14LoggerViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8017208:	4618      	mov	r0, r3
 801720a:	f7ff fa27 	bl	801665c <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8017214:	4618      	mov	r0, r3
 8017216:	f7f6 f923 	bl	800d460 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8017220:	4618      	mov	r0, r3
 8017222:	f7f5 fd53 	bl	800cccc <_ZN8touchgfx5ImageD1Ev>
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	f503 7310 	add.w	r3, r3, #576	; 0x240
 801722c:	4618      	mov	r0, r3
 801722e:	f7ff fa15 	bl	801665c <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8017238:	4618      	mov	r0, r3
 801723a:	f7ff fa0f 	bl	801665c <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8017244:	4618      	mov	r0, r3
 8017246:	f7ff fa09 	bl	801665c <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	336c      	adds	r3, #108	; 0x6c
 801724e:	4618      	mov	r0, r3
 8017250:	f7ff f9dc 	bl	801660c <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	3340      	adds	r3, #64	; 0x40
 8017258:	4618      	mov	r0, r3
 801725a:	f7f5 fd37 	bl	800cccc <_ZN8touchgfx5ImageD1Ev>
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	4618      	mov	r0, r3
 8017262:	f7ff ff9f 	bl	80171a4 <_ZN8touchgfx4ViewI15LoggerPresenterED1Ev>
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	4618      	mov	r0, r3
 801726a:	3708      	adds	r7, #8
 801726c:	46bd      	mov	sp, r7
 801726e:	bd80      	pop	{r7, pc}
 8017270:	08024010 	.word	0x08024010

08017274 <_ZN14LoggerViewBaseD0Ev>:
 8017274:	b580      	push	{r7, lr}
 8017276:	b082      	sub	sp, #8
 8017278:	af00      	add	r7, sp, #0
 801727a:	6078      	str	r0, [r7, #4]
 801727c:	6878      	ldr	r0, [r7, #4]
 801727e:	f7ff ffb3 	bl	80171e8 <_ZN14LoggerViewBaseD1Ev>
 8017282:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8017286:	6878      	ldr	r0, [r7, #4]
 8017288:	f009 ff79 	bl	802117e <_ZdlPvj>
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	4618      	mov	r0, r3
 8017290:	3708      	adds	r7, #8
 8017292:	46bd      	mov	sp, r7
 8017294:	bd80      	pop	{r7, pc}

08017296 <_ZN14LoggerViewBase16logButtonPressedEv>:
    virtual void setupScreen();

    /*
     * Custom Action Handlers
     */
    virtual void logButtonPressed()
 8017296:	b480      	push	{r7}
 8017298:	b083      	sub	sp, #12
 801729a:	af00      	add	r7, sp, #0
 801729c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in LoggerView
    }
 801729e:	bf00      	nop
 80172a0:	370c      	adds	r7, #12
 80172a2:	46bd      	mov	sp, r7
 80172a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a8:	4770      	bx	lr

080172aa <_ZN14LoggerViewBase17dumpButtonPressedEv>:

    virtual void dumpButtonPressed()
 80172aa:	b480      	push	{r7}
 80172ac:	b083      	sub	sp, #12
 80172ae:	af00      	add	r7, sp, #0
 80172b0:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in LoggerView
    }
 80172b2:	bf00      	nop
 80172b4:	370c      	adds	r7, #12
 80172b6:	46bd      	mov	sp, r7
 80172b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172bc:	4770      	bx	lr

080172be <_ZN14LoggerViewBase18clearButtonPressedEv>:

    virtual void clearButtonPressed()
 80172be:	b480      	push	{r7}
 80172c0:	b083      	sub	sp, #12
 80172c2:	af00      	add	r7, sp, #0
 80172c4:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in LoggerView
    }
 80172c6:	bf00      	nop
 80172c8:	370c      	adds	r7, #12
 80172ca:	46bd      	mov	sp, r7
 80172cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172d0:	4770      	bx	lr

080172d2 <_ZN14LoggerViewBase17sentButtonPressedEv>:

    virtual void sentButtonPressed()
 80172d2:	b480      	push	{r7}
 80172d4:	b083      	sub	sp, #12
 80172d6:	af00      	add	r7, sp, #0
 80172d8:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in LoggerView
    }
 80172da:	bf00      	nop
 80172dc:	370c      	adds	r7, #12
 80172de:	46bd      	mov	sp, r7
 80172e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172e4:	4770      	bx	lr

080172e6 <_ZN14LoggerViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 80172e6:	b580      	push	{r7, lr}
 80172e8:	b082      	sub	sp, #8
 80172ea:	af00      	add	r7, sp, #0
 80172ec:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(Application::getInstance());
 80172ee:	f006 fe4d 	bl	801df8c <_ZN8touchgfx11Application11getInstanceEv>
 80172f2:	4603      	mov	r3, r0
    }
 80172f4:	4618      	mov	r0, r3
 80172f6:	3708      	adds	r7, #8
 80172f8:	46bd      	mov	sp, r7
 80172fa:	bd80      	pop	{r7, pc}

080172fc <_ZN14LoggerViewBaseC1Ev>:
#include <gui_generated/logger_screen/LoggerViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

LoggerViewBase::LoggerViewBase() :
 80172fc:	b5b0      	push	{r4, r5, r7, lr}
 80172fe:	b09c      	sub	sp, #112	; 0x70
 8017300:	af02      	add	r7, sp, #8
 8017302:	6078      	str	r0, [r7, #4]
    flexButtonCallback(this, &LoggerViewBase::flexButtonCallbackHandler)
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	4618      	mov	r0, r3
 8017308:	f000 fb34 	bl	8017974 <_ZN8touchgfx4ViewI15LoggerPresenterEC1Ev>
 801730c:	4ae2      	ldr	r2, [pc, #904]	; (8017698 <_ZN14LoggerViewBaseC1Ev+0x39c>)
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	601a      	str	r2, [r3, #0]
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8017318:	f107 0308 	add.w	r3, r7, #8
 801731c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017320:	4618      	mov	r0, r3
 8017322:	f7f5 fb61 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8017326:	f107 0308 	add.w	r3, r7, #8
 801732a:	4619      	mov	r1, r3
 801732c:	4620      	mov	r0, r4
 801732e:	f7f5 fcab 	bl	800cc88 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	336c      	adds	r3, #108	; 0x6c
 8017336:	4618      	mov	r0, r3
 8017338:	f7ff f9f6 	bl	8016728 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8017342:	4618      	mov	r0, r3
 8017344:	f7ff fa28 	bl	8016798 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 801734e:	4618      	mov	r0, r3
 8017350:	f7ff fa22 	bl	8016798 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	f503 7310 	add.w	r3, r3, #576	; 0x240
 801735a:	4618      	mov	r0, r3
 801735c:	f7ff fa1c 	bl	8016798 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	f503 7438 	add.w	r4, r3, #736	; 0x2e0
 8017366:	f107 030c 	add.w	r3, r7, #12
 801736a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801736e:	4618      	mov	r0, r3
 8017370:	f7f5 fb3a 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8017374:	f107 030c 	add.w	r3, r7, #12
 8017378:	4619      	mov	r1, r3
 801737a:	4620      	mov	r0, r4
 801737c:	f7f5 fc84 	bl	800cc88 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8017386:	4618      	mov	r0, r3
 8017388:	f7f5 ff88 	bl	800d29c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8017392:	4618      	mov	r0, r3
 8017394:	f7ff fa00 	bl	8016798 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	f503 707b 	add.w	r0, r3, #1004	; 0x3ec
 801739e:	4bbf      	ldr	r3, [pc, #764]	; (801769c <_ZN14LoggerViewBaseC1Ev+0x3a0>)
 80173a0:	613b      	str	r3, [r7, #16]
 80173a2:	2300      	movs	r3, #0
 80173a4:	617b      	str	r3, [r7, #20]
 80173a6:	f107 0310 	add.w	r3, r7, #16
 80173aa:	cb0c      	ldmia	r3, {r2, r3}
 80173ac:	6879      	ldr	r1, [r7, #4]
 80173ae:	f000 faf7 	bl	80179a0 <_ZN8touchgfx8CallbackI14LoggerViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{
    backgroundImage.setXY(0, 0);
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	3340      	adds	r3, #64	; 0x40
 80173b6:	2200      	movs	r2, #0
 80173b8:	2100      	movs	r1, #0
 80173ba:	4618      	mov	r0, r3
 80173bc:	f7f4 ff13 	bl	800c1e6 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setBitmap(Bitmap(BITMAP_BG_ID));
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80173c6:	f107 0318 	add.w	r3, r7, #24
 80173ca:	2100      	movs	r1, #0
 80173cc:	4618      	mov	r0, r3
 80173ce:	f7f5 fb0b 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80173d2:	f107 0318 	add.w	r3, r7, #24
 80173d6:	4619      	mov	r1, r3
 80173d8:	4620      	mov	r0, r4
 80173da:	f7f6 fa48 	bl	800d86e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    flexButton1_1.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80173e4:	f107 031c 	add.w	r3, r7, #28
 80173e8:	2103      	movs	r1, #3
 80173ea:	4618      	mov	r0, r3
 80173ec:	f7f5 fafc 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80173f0:	f107 0320 	add.w	r3, r7, #32
 80173f4:	2104      	movs	r1, #4
 80173f6:	4618      	mov	r0, r3
 80173f8:	f7f5 faf6 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80173fc:	f107 0220 	add.w	r2, r7, #32
 8017400:	f107 031c 	add.w	r3, r7, #28
 8017404:	4619      	mov	r1, r3
 8017406:	4620      	mov	r0, r4
 8017408:	f7ff fa56 	bl	80168b8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
    flexButton1_1.setBitmapXY(0, 0);
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	336c      	adds	r3, #108	; 0x6c
 8017410:	2200      	movs	r2, #0
 8017412:	2100      	movs	r1, #0
 8017414:	4618      	mov	r0, r3
 8017416:	f7ff fa81 	bl	801691c <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE11setBitmapXYEtt>
    flexButton1_1.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID), Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID));
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8017420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017424:	2106      	movs	r1, #6
 8017426:	4618      	mov	r0, r3
 8017428:	f7f5 fade 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 801742c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017430:	2106      	movs	r1, #6
 8017432:	4618      	mov	r0, r3
 8017434:	f7f5 fad8 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8017438:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801743c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017440:	4619      	mov	r1, r3
 8017442:	4620      	mov	r0, r4
 8017444:	f7ff fa7f 	bl	8016946 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    flexButton1_1.setIconXY(15, 15);
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	336c      	adds	r3, #108	; 0x6c
 801744c:	220f      	movs	r2, #15
 801744e:	210f      	movs	r1, #15
 8017450:	4618      	mov	r0, r3
 8017452:	f7ff fac2 	bl	80169da <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE9setIconXYEss>
    flexButton1_1.setPosition(10, 10, 60, 60);
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 801745c:	233c      	movs	r3, #60	; 0x3c
 801745e:	9300      	str	r3, [sp, #0]
 8017460:	233c      	movs	r3, #60	; 0x3c
 8017462:	220a      	movs	r2, #10
 8017464:	210a      	movs	r1, #10
 8017466:	f7f4 fe59 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    flexButton1_1.setAction(flexButtonCallback);
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8017476:	4619      	mov	r1, r3
 8017478:	4610      	mov	r0, r2
 801747a:	f7fe fabf 	bl	80159fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    logButton.setBitmaps(Bitmap(BITMAP_SMALL_BTN_ID), Bitmap(BITMAP_SMALL_BTN_PRESSED_ID));
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8017484:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017488:	210f      	movs	r1, #15
 801748a:	4618      	mov	r0, r3
 801748c:	f7f5 faac 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8017490:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017494:	2111      	movs	r1, #17
 8017496:	4618      	mov	r0, r3
 8017498:	f7f5 faa6 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 801749c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80174a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80174a4:	4619      	mov	r1, r3
 80174a6:	4620      	mov	r0, r4
 80174a8:	f7ff fa06 	bl	80168b8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
    logButton.setBitmapXY(0, 0);
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80174b2:	2200      	movs	r2, #0
 80174b4:	2100      	movs	r1, #0
 80174b6:	4618      	mov	r0, r3
 80174b8:	f7ff fa30 	bl	801691c <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE11setBitmapXYEtt>
    logButton.setText(TypedText(T_SINGLEUSEID14));
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80174c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80174c6:	2105      	movs	r1, #5
 80174c8:	4618      	mov	r0, r3
 80174ca:	f7f5 fd23 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 80174ce:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80174d0:	4620      	mov	r0, r4
 80174d2:	f7ff fa9a 	bl	8016a0a <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
    logButton.setTextPosition(0, 19, 100, 56);
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	f503 7080 	add.w	r0, r3, #256	; 0x100
 80174dc:	2338      	movs	r3, #56	; 0x38
 80174de:	9300      	str	r3, [sp, #0]
 80174e0:	2364      	movs	r3, #100	; 0x64
 80174e2:	2213      	movs	r2, #19
 80174e4:	2100      	movs	r1, #0
 80174e6:	f7ff fab7 	bl	8016a58 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    logButton.setTextColors(touchgfx::Color::getColorFrom24BitRGB(70, 70, 70), touchgfx::Color::getColorFrom24BitRGB(231, 154, 9));
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80174f0:	2246      	movs	r2, #70	; 0x46
 80174f2:	2146      	movs	r1, #70	; 0x46
 80174f4:	2046      	movs	r0, #70	; 0x46
 80174f6:	f008 f9db 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80174fa:	4605      	mov	r5, r0
 80174fc:	2209      	movs	r2, #9
 80174fe:	219a      	movs	r1, #154	; 0x9a
 8017500:	20e7      	movs	r0, #231	; 0xe7
 8017502:	f008 f9d5 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8017506:	4603      	mov	r3, r0
 8017508:	461a      	mov	r2, r3
 801750a:	4629      	mov	r1, r5
 801750c:	4620      	mov	r0, r4
 801750e:	f7ff fac3 	bl	8016a98 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    logButton.setPosition(135, 200, 100, 56);
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8017518:	2338      	movs	r3, #56	; 0x38
 801751a:	9300      	str	r3, [sp, #0]
 801751c:	2364      	movs	r3, #100	; 0x64
 801751e:	22c8      	movs	r2, #200	; 0xc8
 8017520:	2187      	movs	r1, #135	; 0x87
 8017522:	f7f4 fdfb 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    logButton.setAction(flexButtonCallback);
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8017532:	4619      	mov	r1, r3
 8017534:	4610      	mov	r0, r2
 8017536:	f7fe fa61 	bl	80159fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    dumpButton.setBitmaps(Bitmap(BITMAP_SMALL_BTN_ID), Bitmap(BITMAP_SMALL_BTN_PRESSED_ID));
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8017540:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017544:	210f      	movs	r1, #15
 8017546:	4618      	mov	r0, r3
 8017548:	f7f5 fa4e 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 801754c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017550:	2111      	movs	r1, #17
 8017552:	4618      	mov	r0, r3
 8017554:	f7f5 fa48 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8017558:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801755c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017560:	4619      	mov	r1, r3
 8017562:	4620      	mov	r0, r4
 8017564:	f7ff f9a8 	bl	80168b8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
    dumpButton.setBitmapXY(0, 0);
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 801756e:	2200      	movs	r2, #0
 8017570:	2100      	movs	r1, #0
 8017572:	4618      	mov	r0, r3
 8017574:	f7ff f9d2 	bl	801691c <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE11setBitmapXYEtt>
    dumpButton.setText(TypedText(T_SINGLEUSEID15));
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 801757e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017582:	2106      	movs	r1, #6
 8017584:	4618      	mov	r0, r3
 8017586:	f7f5 fcc5 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 801758a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 801758e:	4620      	mov	r0, r4
 8017590:	f7ff fa3b 	bl	8016a0a <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
    dumpButton.setTextPosition(0, 19, 100, 56);
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 801759a:	2338      	movs	r3, #56	; 0x38
 801759c:	9300      	str	r3, [sp, #0]
 801759e:	2364      	movs	r3, #100	; 0x64
 80175a0:	2213      	movs	r2, #19
 80175a2:	2100      	movs	r1, #0
 80175a4:	f7ff fa58 	bl	8016a58 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    dumpButton.setTextColors(touchgfx::Color::getColorFrom24BitRGB(70, 70, 70), touchgfx::Color::getColorFrom24BitRGB(231, 154, 9));
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 80175ae:	2246      	movs	r2, #70	; 0x46
 80175b0:	2146      	movs	r1, #70	; 0x46
 80175b2:	2046      	movs	r0, #70	; 0x46
 80175b4:	f008 f97c 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80175b8:	4605      	mov	r5, r0
 80175ba:	2209      	movs	r2, #9
 80175bc:	219a      	movs	r1, #154	; 0x9a
 80175be:	20e7      	movs	r0, #231	; 0xe7
 80175c0:	f008 f976 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80175c4:	4603      	mov	r3, r0
 80175c6:	461a      	mov	r2, r3
 80175c8:	4629      	mov	r1, r5
 80175ca:	4620      	mov	r0, r4
 80175cc:	f7ff fa64 	bl	8016a98 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    dumpButton.setPosition(245, 200, 100, 56);
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 80175d6:	2338      	movs	r3, #56	; 0x38
 80175d8:	9300      	str	r3, [sp, #0]
 80175da:	2364      	movs	r3, #100	; 0x64
 80175dc:	22c8      	movs	r2, #200	; 0xc8
 80175de:	21f5      	movs	r1, #245	; 0xf5
 80175e0:	f7f4 fd9c 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    dumpButton.setAction(flexButtonCallback);
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 80175f0:	4619      	mov	r1, r3
 80175f2:	4610      	mov	r0, r2
 80175f4:	f7fe fa02 	bl	80159fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    clearLogButton.setBitmaps(Bitmap(BITMAP_SMALL_BTN_ID), Bitmap(BITMAP_SMALL_BTN_PRESSED_ID));
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	f503 7410 	add.w	r4, r3, #576	; 0x240
 80175fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017602:	210f      	movs	r1, #15
 8017604:	4618      	mov	r0, r3
 8017606:	f7f5 f9ef 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 801760a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801760e:	2111      	movs	r1, #17
 8017610:	4618      	mov	r0, r3
 8017612:	f7f5 f9e9 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8017616:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801761a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801761e:	4619      	mov	r1, r3
 8017620:	4620      	mov	r0, r4
 8017622:	f7ff f949 	bl	80168b8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
    clearLogButton.setBitmapXY(0, 0);
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	f503 7310 	add.w	r3, r3, #576	; 0x240
 801762c:	2200      	movs	r2, #0
 801762e:	2100      	movs	r1, #0
 8017630:	4618      	mov	r0, r3
 8017632:	f7ff f973 	bl	801691c <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE11setBitmapXYEtt>
    clearLogButton.setText(TypedText(T_SINGLEUSEID16));
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	f503 7410 	add.w	r4, r3, #576	; 0x240
 801763c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017640:	2107      	movs	r1, #7
 8017642:	4618      	mov	r0, r3
 8017644:	f7f5 fc66 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 8017648:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 801764c:	4620      	mov	r0, r4
 801764e:	f7ff f9dc 	bl	8016a0a <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
    clearLogButton.setTextPosition(0, 19, 100, 56);
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	f503 7010 	add.w	r0, r3, #576	; 0x240
 8017658:	2338      	movs	r3, #56	; 0x38
 801765a:	9300      	str	r3, [sp, #0]
 801765c:	2364      	movs	r3, #100	; 0x64
 801765e:	2213      	movs	r2, #19
 8017660:	2100      	movs	r1, #0
 8017662:	f7ff f9f9 	bl	8016a58 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    clearLogButton.setTextColors(touchgfx::Color::getColorFrom24BitRGB(70, 70, 70), touchgfx::Color::getColorFrom24BitRGB(231, 154, 9));
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	f503 7410 	add.w	r4, r3, #576	; 0x240
 801766c:	2246      	movs	r2, #70	; 0x46
 801766e:	2146      	movs	r1, #70	; 0x46
 8017670:	2046      	movs	r0, #70	; 0x46
 8017672:	f008 f91d 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8017676:	4605      	mov	r5, r0
 8017678:	2209      	movs	r2, #9
 801767a:	219a      	movs	r1, #154	; 0x9a
 801767c:	20e7      	movs	r0, #231	; 0xe7
 801767e:	f008 f917 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8017682:	4603      	mov	r3, r0
 8017684:	461a      	mov	r2, r3
 8017686:	4629      	mov	r1, r5
 8017688:	4620      	mov	r0, r4
 801768a:	f7ff fa05 	bl	8016a98 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    clearLogButton.setPosition(355, 200, 100, 56);
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	f503 7010 	add.w	r0, r3, #576	; 0x240
 8017694:	2338      	movs	r3, #56	; 0x38
 8017696:	e003      	b.n	80176a0 <_ZN14LoggerViewBaseC1Ev+0x3a4>
 8017698:	08024010 	.word	0x08024010
 801769c:	080178e1 	.word	0x080178e1
 80176a0:	9300      	str	r3, [sp, #0]
 80176a2:	2364      	movs	r3, #100	; 0x64
 80176a4:	22c8      	movs	r2, #200	; 0xc8
 80176a6:	f240 1163 	movw	r1, #355	; 0x163
 80176aa:	f7f4 fd37 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    clearLogButton.setAction(flexButtonCallback);
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	f503 7210 	add.w	r2, r3, #576	; 0x240
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 80176ba:	4619      	mov	r1, r3
 80176bc:	4610      	mov	r0, r2
 80176be:	f7fe f99d 	bl	80159fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    counterBackgroundImage.setXY(164, 23);
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 80176c8:	2217      	movs	r2, #23
 80176ca:	21a4      	movs	r1, #164	; 0xa4
 80176cc:	4618      	mov	r0, r3
 80176ce:	f7f4 fd8a 	bl	800c1e6 <_ZN8touchgfx8Drawable5setXYEss>
    counterBackgroundImage.setBitmap(Bitmap(BITMAP_COUNTER_BOX_ID));
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	f503 7438 	add.w	r4, r3, #736	; 0x2e0
 80176d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80176dc:	210c      	movs	r1, #12
 80176de:	4618      	mov	r0, r3
 80176e0:	f7f5 f982 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80176e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80176e8:	4619      	mov	r1, r3
 80176ea:	4620      	mov	r0, r4
 80176ec:	f7f6 f8bf 	bl	800d86e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    countTxt.setPosition(164, 55, 152, 90);
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 80176f6:	235a      	movs	r3, #90	; 0x5a
 80176f8:	9300      	str	r3, [sp, #0]
 80176fa:	2398      	movs	r3, #152	; 0x98
 80176fc:	2237      	movs	r2, #55	; 0x37
 80176fe:	21a4      	movs	r1, #164	; 0xa4
 8017700:	f7f4 fd0c 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    countTxt.setColor(touchgfx::Color::getColorFrom24BitRGB(222, 222, 222));
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	f503 7443 	add.w	r4, r3, #780	; 0x30c
 801770a:	22de      	movs	r2, #222	; 0xde
 801770c:	21de      	movs	r1, #222	; 0xde
 801770e:	20de      	movs	r0, #222	; 0xde
 8017710:	f008 f8ce 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8017714:	4603      	mov	r3, r0
 8017716:	4619      	mov	r1, r3
 8017718:	4620      	mov	r0, r4
 801771a:	f7f5 fcee 	bl	800d0fa <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    countTxt.setLinespacing(0);
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8017724:	2100      	movs	r1, #0
 8017726:	4618      	mov	r0, r3
 8017728:	f7fe fba2 	bl	8015e70 <_ZN8touchgfx8TextArea14setLinespacingEt>
    Unicode::snprintf(countTxtBuffer, COUNTTXT_SIZE, "%s", TypedText(T_SINGLEUSEID17).getText());
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	f503 7479 	add.w	r4, r3, #996	; 0x3e4
 8017732:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8017736:	2108      	movs	r1, #8
 8017738:	4618      	mov	r0, r3
 801773a:	f7f5 fbeb 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 801773e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8017742:	4618      	mov	r0, r3
 8017744:	f7f5 fc0a 	bl	800cf5c <_ZNK8touchgfx9TypedText7getTextEv>
 8017748:	4603      	mov	r3, r0
 801774a:	4a5f      	ldr	r2, [pc, #380]	; (80178c8 <_ZN14LoggerViewBaseC1Ev+0x5cc>)
 801774c:	2103      	movs	r1, #3
 801774e:	4620      	mov	r0, r4
 8017750:	f008 f8a0 	bl	801f894 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    countTxt.setWildcard(countTxtBuffer);
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	f503 7243 	add.w	r2, r3, #780	; 0x30c
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8017760:	4619      	mov	r1, r3
 8017762:	4610      	mov	r0, r2
 8017764:	f7f5 fe34 	bl	800d3d0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    countTxt.setTypedText(TypedText(T_NUMBERTEXT));
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	f503 7443 	add.w	r4, r3, #780	; 0x30c
 801776e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8017772:	2100      	movs	r1, #0
 8017774:	4618      	mov	r0, r3
 8017776:	f7f5 fbcd 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 801777a:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 801777e:	4620      	mov	r0, r4
 8017780:	f7f6 fa9e 	bl	800dcc0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    sentButton.setBitmaps(Bitmap(BITMAP_SMALL_BTN_ID), Bitmap(BITMAP_SMALL_BTN_PRESSED_ID));
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	f503 7451 	add.w	r4, r3, #836	; 0x344
 801778a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801778e:	210f      	movs	r1, #15
 8017790:	4618      	mov	r0, r3
 8017792:	f7f5 f929 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8017796:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801779a:	2111      	movs	r1, #17
 801779c:	4618      	mov	r0, r3
 801779e:	f7f5 f923 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80177a2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80177a6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80177aa:	4619      	mov	r1, r3
 80177ac:	4620      	mov	r0, r4
 80177ae:	f7ff f883 	bl	80168b8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
    sentButton.setBitmapXY(0, 0);
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80177b8:	2200      	movs	r2, #0
 80177ba:	2100      	movs	r1, #0
 80177bc:	4618      	mov	r0, r3
 80177be:	f7ff f8ad 	bl	801691c <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE11setBitmapXYEtt>
    sentButton.setText(TypedText(T_SINGLEUSEID18));
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	f503 7451 	add.w	r4, r3, #836	; 0x344
 80177c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80177cc:	2109      	movs	r1, #9
 80177ce:	4618      	mov	r0, r3
 80177d0:	f7f5 fba0 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 80177d4:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80177d8:	4620      	mov	r0, r4
 80177da:	f7ff f916 	bl	8016a0a <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
    sentButton.setTextPosition(0, 19, 100, 56);
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	f503 7051 	add.w	r0, r3, #836	; 0x344
 80177e4:	2338      	movs	r3, #56	; 0x38
 80177e6:	9300      	str	r3, [sp, #0]
 80177e8:	2364      	movs	r3, #100	; 0x64
 80177ea:	2213      	movs	r2, #19
 80177ec:	2100      	movs	r1, #0
 80177ee:	f7ff f933 	bl	8016a58 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    sentButton.setTextColors(touchgfx::Color::getColorFrom24BitRGB(70, 70, 70), touchgfx::Color::getColorFrom24BitRGB(231, 154, 9));
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	f503 7451 	add.w	r4, r3, #836	; 0x344
 80177f8:	2246      	movs	r2, #70	; 0x46
 80177fa:	2146      	movs	r1, #70	; 0x46
 80177fc:	2046      	movs	r0, #70	; 0x46
 80177fe:	f008 f857 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8017802:	4605      	mov	r5, r0
 8017804:	2209      	movs	r2, #9
 8017806:	219a      	movs	r1, #154	; 0x9a
 8017808:	20e7      	movs	r0, #231	; 0xe7
 801780a:	f008 f851 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801780e:	4603      	mov	r3, r0
 8017810:	461a      	mov	r2, r3
 8017812:	4629      	mov	r1, r5
 8017814:	4620      	mov	r0, r4
 8017816:	f7ff f93f 	bl	8016a98 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    sentButton.setPosition(25, 200, 100, 56);
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8017820:	2338      	movs	r3, #56	; 0x38
 8017822:	9300      	str	r3, [sp, #0]
 8017824:	2364      	movs	r3, #100	; 0x64
 8017826:	22c8      	movs	r2, #200	; 0xc8
 8017828:	2119      	movs	r1, #25
 801782a:	f7f4 fc77 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    sentButton.setAction(flexButtonCallback);
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	f503 7251 	add.w	r2, r3, #836	; 0x344
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 801783a:	4619      	mov	r1, r3
 801783c:	4610      	mov	r0, r2
 801783e:	f7fe f8dd 	bl	80159fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(backgroundImage);
 8017842:	687a      	ldr	r2, [r7, #4]
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	3340      	adds	r3, #64	; 0x40
 8017848:	4619      	mov	r1, r3
 801784a:	4610      	mov	r0, r2
 801784c:	f7fe f854 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(flexButton1_1);
 8017850:	687a      	ldr	r2, [r7, #4]
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	336c      	adds	r3, #108	; 0x6c
 8017856:	4619      	mov	r1, r3
 8017858:	4610      	mov	r0, r2
 801785a:	f7fe f84d 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(logButton);
 801785e:	687a      	ldr	r2, [r7, #4]
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8017866:	4619      	mov	r1, r3
 8017868:	4610      	mov	r0, r2
 801786a:	f7fe f845 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(dumpButton);
 801786e:	687a      	ldr	r2, [r7, #4]
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8017876:	4619      	mov	r1, r3
 8017878:	4610      	mov	r0, r2
 801787a:	f7fe f83d 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(clearLogButton);
 801787e:	687a      	ldr	r2, [r7, #4]
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8017886:	4619      	mov	r1, r3
 8017888:	4610      	mov	r0, r2
 801788a:	f7fe f835 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(counterBackgroundImage);
 801788e:	687a      	ldr	r2, [r7, #4]
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8017896:	4619      	mov	r1, r3
 8017898:	4610      	mov	r0, r2
 801789a:	f7fe f82d 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(countTxt);
 801789e:	687a      	ldr	r2, [r7, #4]
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80178a6:	4619      	mov	r1, r3
 80178a8:	4610      	mov	r0, r2
 80178aa:	f7fe f825 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(sentButton);
 80178ae:	687a      	ldr	r2, [r7, #4]
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80178b6:	4619      	mov	r1, r3
 80178b8:	4610      	mov	r0, r2
 80178ba:	f7fe f81d 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	4618      	mov	r0, r3
 80178c2:	3768      	adds	r7, #104	; 0x68
 80178c4:	46bd      	mov	sp, r7
 80178c6:	bdb0      	pop	{r4, r5, r7, pc}
 80178c8:	08022850 	.word	0x08022850

080178cc <_ZN14LoggerViewBase11setupScreenEv>:

void LoggerViewBase::setupScreen()
{
 80178cc:	b480      	push	{r7}
 80178ce:	b083      	sub	sp, #12
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	6078      	str	r0, [r7, #4]

}
 80178d4:	bf00      	nop
 80178d6:	370c      	adds	r7, #12
 80178d8:	46bd      	mov	sp, r7
 80178da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178de:	4770      	bx	lr

080178e0 <_ZN14LoggerViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void LoggerViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 80178e0:	b580      	push	{r7, lr}
 80178e2:	b082      	sub	sp, #8
 80178e4:	af00      	add	r7, sp, #0
 80178e6:	6078      	str	r0, [r7, #4]
 80178e8:	6039      	str	r1, [r7, #0]
    if (&src == &flexButton1_1)
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	336c      	adds	r3, #108	; 0x6c
 80178ee:	683a      	ldr	r2, [r7, #0]
 80178f0:	429a      	cmp	r2, r3
 80178f2:	d107      	bne.n	8017904 <_ZN14LoggerViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x24>
    {
        //Interaction1
        //When flexButton1_1 clicked change screen to Main
        //Go to Main with screen transition towards North
        application().gotoMainScreenSlideTransitionNorth();
 80178f4:	6878      	ldr	r0, [r7, #4]
 80178f6:	f7ff fcf6 	bl	80172e6 <_ZN14LoggerViewBase11applicationEv>
 80178fa:	4603      	mov	r3, r0
 80178fc:	4618      	mov	r0, r3
 80178fe:	f7fc f9db 	bl	8013cb8 <_ZN23FrontendApplicationBase34gotoMainScreenSlideTransitionNorthEv>
        //sentBtnInteraction
        //When sentButton clicked call virtual function
        //Call sentButtonPressed
        sentButtonPressed();
    }
}
 8017902:	e032      	b.n	801796a <_ZN14LoggerViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x8a>
    else if (&src == &logButton)
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801790a:	683a      	ldr	r2, [r7, #0]
 801790c:	429a      	cmp	r2, r3
 801790e:	d106      	bne.n	801791e <_ZN14LoggerViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x3e>
        logButtonPressed();
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	332c      	adds	r3, #44	; 0x2c
 8017916:	681b      	ldr	r3, [r3, #0]
 8017918:	6878      	ldr	r0, [r7, #4]
 801791a:	4798      	blx	r3
}
 801791c:	e025      	b.n	801796a <_ZN14LoggerViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x8a>
    else if (&src == &dumpButton)
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8017924:	683a      	ldr	r2, [r7, #0]
 8017926:	429a      	cmp	r2, r3
 8017928:	d106      	bne.n	8017938 <_ZN14LoggerViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x58>
        dumpButtonPressed();
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	3330      	adds	r3, #48	; 0x30
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	6878      	ldr	r0, [r7, #4]
 8017934:	4798      	blx	r3
}
 8017936:	e018      	b.n	801796a <_ZN14LoggerViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x8a>
    else if (&src == &clearLogButton)
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 801793e:	683a      	ldr	r2, [r7, #0]
 8017940:	429a      	cmp	r2, r3
 8017942:	d106      	bne.n	8017952 <_ZN14LoggerViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x72>
        clearButtonPressed();
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	3334      	adds	r3, #52	; 0x34
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	6878      	ldr	r0, [r7, #4]
 801794e:	4798      	blx	r3
}
 8017950:	e00b      	b.n	801796a <_ZN14LoggerViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x8a>
    else if (&src == &sentButton)
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8017958:	683a      	ldr	r2, [r7, #0]
 801795a:	429a      	cmp	r2, r3
 801795c:	d105      	bne.n	801796a <_ZN14LoggerViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x8a>
        sentButtonPressed();
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	3338      	adds	r3, #56	; 0x38
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	6878      	ldr	r0, [r7, #4]
 8017968:	4798      	blx	r3
}
 801796a:	bf00      	nop
 801796c:	3708      	adds	r7, #8
 801796e:	46bd      	mov	sp, r7
 8017970:	bd80      	pop	{r7, pc}
	...

08017974 <_ZN8touchgfx4ViewI15LoggerPresenterEC1Ev>:
    View() : presenter(0)
 8017974:	b580      	push	{r7, lr}
 8017976:	b082      	sub	sp, #8
 8017978:	af00      	add	r7, sp, #0
 801797a:	6078      	str	r0, [r7, #4]
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	4618      	mov	r0, r3
 8017980:	f007 f9dc 	bl	801ed3c <_ZN8touchgfx6ScreenC1Ev>
 8017984:	4a05      	ldr	r2, [pc, #20]	; (801799c <_ZN8touchgfx4ViewI15LoggerPresenterEC1Ev+0x28>)
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	601a      	str	r2, [r3, #0]
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	2200      	movs	r2, #0
 801798e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	4618      	mov	r0, r3
 8017994:	3708      	adds	r7, #8
 8017996:	46bd      	mov	sp, r7
 8017998:	bd80      	pop	{r7, pc}
 801799a:	bf00      	nop
 801799c:	0802406c 	.word	0x0802406c

080179a0 <_ZN8touchgfx8CallbackI14LoggerViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80179a0:	b580      	push	{r7, lr}
 80179a2:	b084      	sub	sp, #16
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	60f8      	str	r0, [r7, #12]
 80179a8:	60b9      	str	r1, [r7, #8]
 80179aa:	4639      	mov	r1, r7
 80179ac:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	4618      	mov	r0, r3
 80179b4:	f7fe ff50 	bl	8016858 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 80179b8:	4a08      	ldr	r2, [pc, #32]	; (80179dc <_ZN8touchgfx8CallbackI14LoggerViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	68ba      	ldr	r2, [r7, #8]
 80179c2:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	3308      	adds	r3, #8
 80179c8:	463a      	mov	r2, r7
 80179ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80179ce:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80179d2:	68fb      	ldr	r3, [r7, #12]
 80179d4:	4618      	mov	r0, r3
 80179d6:	3710      	adds	r7, #16
 80179d8:	46bd      	mov	sp, r7
 80179da:	bd80      	pop	{r7, pc}
 80179dc:	08024054 	.word	0x08024054

080179e0 <_ZN8touchgfx8CallbackI14LoggerViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80179e0:	b580      	push	{r7, lr}
 80179e2:	b082      	sub	sp, #8
 80179e4:	af00      	add	r7, sp, #0
 80179e6:	6078      	str	r0, [r7, #4]
 80179e8:	4a05      	ldr	r2, [pc, #20]	; (8017a00 <_ZN8touchgfx8CallbackI14LoggerViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	601a      	str	r2, [r3, #0]
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	4618      	mov	r0, r3
 80179f2:	f7ff f9e1 	bl	8016db8 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	4618      	mov	r0, r3
 80179fa:	3708      	adds	r7, #8
 80179fc:	46bd      	mov	sp, r7
 80179fe:	bd80      	pop	{r7, pc}
 8017a00:	08024054 	.word	0x08024054

08017a04 <_ZN8touchgfx8CallbackI14LoggerViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b082      	sub	sp, #8
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	6078      	str	r0, [r7, #4]
 8017a0c:	6878      	ldr	r0, [r7, #4]
 8017a0e:	f7ff ffe7 	bl	80179e0 <_ZN8touchgfx8CallbackI14LoggerViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8017a12:	2110      	movs	r1, #16
 8017a14:	6878      	ldr	r0, [r7, #4]
 8017a16:	f009 fbb2 	bl	802117e <_ZdlPvj>
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	3708      	adds	r7, #8
 8017a20:	46bd      	mov	sp, r7
 8017a22:	bd80      	pop	{r7, pc}

08017a24 <_ZN8touchgfx8CallbackI14LoggerViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8017a24:	b580      	push	{r7, lr}
 8017a26:	b082      	sub	sp, #8
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
 8017a2c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	685b      	ldr	r3, [r3, #4]
 8017a32:	687a      	ldr	r2, [r7, #4]
 8017a34:	68d2      	ldr	r2, [r2, #12]
 8017a36:	1052      	asrs	r2, r2, #1
 8017a38:	1898      	adds	r0, r3, r2
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	68db      	ldr	r3, [r3, #12]
 8017a3e:	f003 0301 	and.w	r3, r3, #1
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d102      	bne.n	8017a4c <_ZN8touchgfx8CallbackI14LoggerViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	689b      	ldr	r3, [r3, #8]
 8017a4a:	e00a      	b.n	8017a62 <_ZN8touchgfx8CallbackI14LoggerViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	685b      	ldr	r3, [r3, #4]
 8017a50:	687a      	ldr	r2, [r7, #4]
 8017a52:	68d2      	ldr	r2, [r2, #12]
 8017a54:	1052      	asrs	r2, r2, #1
 8017a56:	4413      	add	r3, r2
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	687a      	ldr	r2, [r7, #4]
 8017a5c:	6892      	ldr	r2, [r2, #8]
 8017a5e:	4413      	add	r3, r2
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	6839      	ldr	r1, [r7, #0]
 8017a64:	4798      	blx	r3
    }
 8017a66:	bf00      	nop
 8017a68:	3708      	adds	r7, #8
 8017a6a:	46bd      	mov	sp, r7
 8017a6c:	bd80      	pop	{r7, pc}

08017a6e <_ZNK8touchgfx8CallbackI14LoggerViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8017a6e:	b480      	push	{r7}
 8017a70:	b083      	sub	sp, #12
 8017a72:	af00      	add	r7, sp, #0
 8017a74:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	685b      	ldr	r3, [r3, #4]
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d010      	beq.n	8017aa0 <_ZNK8touchgfx8CallbackI14LoggerViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	689b      	ldr	r3, [r3, #8]
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d107      	bne.n	8017a96 <_ZNK8touchgfx8CallbackI14LoggerViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	68db      	ldr	r3, [r3, #12]
 8017a8a:	f003 0301 	and.w	r3, r3, #1
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d101      	bne.n	8017a96 <_ZNK8touchgfx8CallbackI14LoggerViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8017a92:	2301      	movs	r3, #1
 8017a94:	e000      	b.n	8017a98 <_ZNK8touchgfx8CallbackI14LoggerViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 8017a96:	2300      	movs	r3, #0
 8017a98:	2b01      	cmp	r3, #1
 8017a9a:	d001      	beq.n	8017aa0 <_ZNK8touchgfx8CallbackI14LoggerViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8017a9c:	2301      	movs	r3, #1
 8017a9e:	e000      	b.n	8017aa2 <_ZNK8touchgfx8CallbackI14LoggerViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 8017aa0:	2300      	movs	r3, #0
    }
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	370c      	adds	r7, #12
 8017aa6:	46bd      	mov	sp, r7
 8017aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aac:	4770      	bx	lr
	...

08017ab0 <_ZN8touchgfx19ToggleButtonTriggerC1Ev>:
    /**
     * @fn ToggleButtonTrigger::ToggleButtonTrigger()
     *
     * @brief Default constructor.
     */
    ToggleButtonTrigger() :
 8017ab0:	b580      	push	{r7, lr}
 8017ab2:	b082      	sub	sp, #8
 8017ab4:	af00      	add	r7, sp, #0
 8017ab6:	6078      	str	r0, [r7, #4]
        AbstractButtonContainer(), toggleCanceled(false) { }
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	4618      	mov	r0, r3
 8017abc:	f7fd ff2c 	bl	8015918 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8017ac0:	4a05      	ldr	r2, [pc, #20]	; (8017ad8 <_ZN8touchgfx19ToggleButtonTriggerC1Ev+0x28>)
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	601a      	str	r2, [r3, #0]
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	2200      	movs	r2, #0
 8017aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	4618      	mov	r0, r3
 8017ad2:	3708      	adds	r7, #8
 8017ad4:	46bd      	mov	sp, r7
 8017ad6:	bd80      	pop	{r7, pc}
 8017ad8:	08024268 	.word	0x08024268

08017adc <_ZN8touchgfx19ToggleButtonTriggerD1Ev>:
    /**
     * @fn virtual ToggleButtonTrigger::~ToggleButtonTrigger()
     *
     * @brief Destructor.
     */
    virtual ~ToggleButtonTrigger() { }
 8017adc:	b580      	push	{r7, lr}
 8017ade:	b082      	sub	sp, #8
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	6078      	str	r0, [r7, #4]
 8017ae4:	4a05      	ldr	r2, [pc, #20]	; (8017afc <_ZN8touchgfx19ToggleButtonTriggerD1Ev+0x20>)
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	601a      	str	r2, [r3, #0]
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	4618      	mov	r0, r3
 8017aee:	f7fd ff35 	bl	801595c <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	4618      	mov	r0, r3
 8017af6:	3708      	adds	r7, #8
 8017af8:	46bd      	mov	sp, r7
 8017afa:	bd80      	pop	{r7, pc}
 8017afc:	08024268 	.word	0x08024268

08017b00 <_ZN8touchgfx19ToggleButtonTriggerD0Ev>:
 8017b00:	b580      	push	{r7, lr}
 8017b02:	b082      	sub	sp, #8
 8017b04:	af00      	add	r7, sp, #0
 8017b06:	6078      	str	r0, [r7, #4]
 8017b08:	6878      	ldr	r0, [r7, #4]
 8017b0a:	f7ff ffe7 	bl	8017adc <_ZN8touchgfx19ToggleButtonTriggerD1Ev>
 8017b0e:	2138      	movs	r1, #56	; 0x38
 8017b10:	6878      	ldr	r0, [r7, #4]
 8017b12:	f009 fb34 	bl	802117e <_ZdlPvj>
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	4618      	mov	r0, r3
 8017b1a:	3708      	adds	r7, #8
 8017b1c:	46bd      	mov	sp, r7
 8017b1e:	bd80      	pop	{r7, pc}

08017b20 <_ZN8touchgfx19ToggleButtonTrigger17setToggleCanceledEb>:
     *
     * @brief Sets toggle canceled.
     *
     * @param isToggleCanceled True if is toggle canceled, false if not.
     */
    void setToggleCanceled(bool isToggleCanceled)
 8017b20:	b480      	push	{r7}
 8017b22:	b083      	sub	sp, #12
 8017b24:	af00      	add	r7, sp, #0
 8017b26:	6078      	str	r0, [r7, #4]
 8017b28:	460b      	mov	r3, r1
 8017b2a:	70fb      	strb	r3, [r7, #3]
    {
        toggleCanceled = isToggleCanceled;
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	78fa      	ldrb	r2, [r7, #3]
 8017b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8017b34:	bf00      	nop
 8017b36:	370c      	adds	r7, #12
 8017b38:	46bd      	mov	sp, r7
 8017b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b3e:	4770      	bx	lr

08017b40 <_ZN8touchgfx19ToggleButtonTrigger17getToggleCanceledEv>:
     *
     * @brief Gets toggle canceled.
     *
     * @return True if it succeeds, false if it fails.
     */
    bool getToggleCanceled()
 8017b40:	b480      	push	{r7}
 8017b42:	b083      	sub	sp, #12
 8017b44:	af00      	add	r7, sp, #0
 8017b46:	6078      	str	r0, [r7, #4]
    {
        return toggleCanceled;
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    }
 8017b4e:	4618      	mov	r0, r3
 8017b50:	370c      	adds	r7, #12
 8017b52:	46bd      	mov	sp, r7
 8017b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b58:	4770      	bx	lr

08017b5a <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @brief Handles the click event described by event.
     *
     * @param event The event.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8017b5a:	b580      	push	{r7, lr}
 8017b5c:	b084      	sub	sp, #16
 8017b5e:	af00      	add	r7, sp, #0
 8017b60:	6078      	str	r0, [r7, #4]
 8017b62:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	4618      	mov	r0, r3
 8017b68:	f7fd ff2e 	bl	80159c8 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8017b6c:	4603      	mov	r3, r0
 8017b6e:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = !getPressed();
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	4618      	mov	r0, r3
 8017b74:	f7fd ff28 	bl	80159c8 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8017b78:	4603      	mov	r3, r0
 8017b7a:	f083 0301 	eor.w	r3, r3, #1
 8017b7e:	73bb      	strb	r3, [r7, #14]
        bool toggleCanceled = getToggleCanceled();
 8017b80:	6878      	ldr	r0, [r7, #4]
 8017b82:	f7ff ffdd 	bl	8017b40 <_ZN8touchgfx19ToggleButtonTrigger17getToggleCanceledEv>
 8017b86:	4603      	mov	r3, r0
 8017b88:	737b      	strb	r3, [r7, #13]
        setToggleCanceled(event.getType() == ClickEvent::CANCEL);
 8017b8a:	6838      	ldr	r0, [r7, #0]
 8017b8c:	f7f5 f902 	bl	800cd94 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8017b90:	4603      	mov	r3, r0
 8017b92:	2b02      	cmp	r3, #2
 8017b94:	bf0c      	ite	eq
 8017b96:	2301      	moveq	r3, #1
 8017b98:	2300      	movne	r3, #0
 8017b9a:	b2db      	uxtb	r3, r3
 8017b9c:	4619      	mov	r1, r3
 8017b9e:	6878      	ldr	r0, [r7, #4]
 8017ba0:	f7ff ffbe 	bl	8017b20 <_ZN8touchgfx19ToggleButtonTrigger17setToggleCanceledEb>

        if (((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed)) && (event.getType() != ClickEvent::RELEASED) && !toggleCanceled)
 8017ba4:	7bbb      	ldrb	r3, [r7, #14]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d005      	beq.n	8017bb6 <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0x5c>
 8017baa:	7bfb      	ldrb	r3, [r7, #15]
 8017bac:	f083 0301 	eor.w	r3, r3, #1
 8017bb0:	b2db      	uxtb	r3, r3
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d108      	bne.n	8017bc8 <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0x6e>
 8017bb6:	7bbb      	ldrb	r3, [r7, #14]
 8017bb8:	f083 0301 	eor.w	r3, r3, #1
 8017bbc:	b2db      	uxtb	r3, r3
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d010      	beq.n	8017be4 <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0x8a>
 8017bc2:	7bfb      	ldrb	r3, [r7, #15]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d00d      	beq.n	8017be4 <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0x8a>
 8017bc8:	6838      	ldr	r0, [r7, #0]
 8017bca:	f7f5 f8e3 	bl	800cd94 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8017bce:	4603      	mov	r3, r0
 8017bd0:	2b01      	cmp	r3, #1
 8017bd2:	d007      	beq.n	8017be4 <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0x8a>
 8017bd4:	7b7b      	ldrb	r3, [r7, #13]
 8017bd6:	f083 0301 	eor.w	r3, r3, #1
 8017bda:	b2db      	uxtb	r3, r3
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d001      	beq.n	8017be4 <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0x8a>
 8017be0:	2301      	movs	r3, #1
 8017be2:	e000      	b.n	8017be6 <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0x8c>
 8017be4:	2300      	movs	r3, #0
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d00c      	beq.n	8017c04 <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0xaa>
        {
            setPressed(newPressedValue);
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	7bba      	ldrb	r2, [r7, #14]
 8017bee:	4611      	mov	r1, r2
 8017bf0:	4618      	mov	r0, r3
 8017bf2:	f7fd fed5 	bl	80159a0 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8017bf6:	687a      	ldr	r2, [r7, #4]
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	3314      	adds	r3, #20
 8017bfe:	681b      	ldr	r3, [r3, #0]
 8017c00:	4610      	mov	r0, r2
 8017c02:	4798      	blx	r3
        }

        if (!toggleCanceled && (event.getType() == ClickEvent::RELEASED) && action)
 8017c04:	7b7b      	ldrb	r3, [r7, #13]
 8017c06:	f083 0301 	eor.w	r3, r3, #1
 8017c0a:	b2db      	uxtb	r3, r3
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d00b      	beq.n	8017c28 <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0xce>
 8017c10:	6838      	ldr	r0, [r7, #0]
 8017c12:	f7f5 f8bf 	bl	800cd94 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8017c16:	4603      	mov	r3, r0
 8017c18:	2b01      	cmp	r3, #1
 8017c1a:	d105      	bne.n	8017c28 <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0xce>
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d001      	beq.n	8017c28 <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0xce>
 8017c24:	2301      	movs	r3, #1
 8017c26:	e000      	b.n	8017c2a <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0xd0>
 8017c28:	2300      	movs	r3, #0
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d015      	beq.n	8017c5a <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0x100>
        {
            if (action->isValid())
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	330c      	adds	r3, #12
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	4610      	mov	r0, r2
 8017c3e:	4798      	blx	r3
 8017c40:	4603      	mov	r3, r0
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d009      	beq.n	8017c5a <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0x100>
            {
                action->execute(*this);
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	3308      	adds	r3, #8
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	6879      	ldr	r1, [r7, #4]
 8017c56:	4610      	mov	r0, r2
 8017c58:	4798      	blx	r3
            }
        }
    }
 8017c5a:	bf00      	nop
 8017c5c:	3710      	adds	r7, #16
 8017c5e:	46bd      	mov	sp, r7
 8017c60:	bd80      	pop	{r7, pc}
	...

08017c64 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8017c64:	b580      	push	{r7, lr}
 8017c66:	b082      	sub	sp, #8
 8017c68:	af00      	add	r7, sp, #0
 8017c6a:	6078      	str	r0, [r7, #4]
 8017c6c:	4a05      	ldr	r2, [pc, #20]	; (8017c84 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	601a      	str	r2, [r3, #0]
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	4618      	mov	r0, r3
 8017c76:	f7fd fde7 	bl	8015848 <_ZN8touchgfx6ScreenD1Ev>
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	4618      	mov	r0, r3
 8017c7e:	3708      	adds	r7, #8
 8017c80:	46bd      	mov	sp, r7
 8017c82:	bd80      	pop	{r7, pc}
 8017c84:	08024234 	.word	0x08024234

08017c88 <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8017c88:	b580      	push	{r7, lr}
 8017c8a:	b082      	sub	sp, #8
 8017c8c:	af00      	add	r7, sp, #0
 8017c8e:	6078      	str	r0, [r7, #4]
 8017c90:	6878      	ldr	r0, [r7, #4]
 8017c92:	f7ff ffe7 	bl	8017c64 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8017c96:	2140      	movs	r1, #64	; 0x40
 8017c98:	6878      	ldr	r0, [r7, #4]
 8017c9a:	f009 fa70 	bl	802117e <_ZdlPvj>
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	4618      	mov	r0, r3
 8017ca2:	3708      	adds	r7, #8
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	bd80      	pop	{r7, pc}

08017ca8 <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	b082      	sub	sp, #8
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	6078      	str	r0, [r7, #4]
 8017cb0:	4a28      	ldr	r2, [pc, #160]	; (8017d54 <_ZN12MainViewBaseD1Ev+0xac>)
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	601a      	str	r2, [r3, #0]
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	f000 fed1 	bl	8018a64 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 8017cc8:	4618      	mov	r0, r3
 8017cca:	f7fe fc9f 	bl	801660c <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	f7fe fc99 	bl	801660c <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	f7fe fc93 	bl	801660c <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017cec:	4618      	mov	r0, r3
 8017cee:	f7f5 fbb7 	bl	800d460 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	f7f4 ffe7 	bl	800cccc <_ZN8touchgfx5ImageD1Ev>
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8017d04:	4618      	mov	r0, r3
 8017d06:	f7fe fcd1 	bl	80166ac <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEED1Ev>
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8017d10:	4618      	mov	r0, r3
 8017d12:	f7fe fca3 	bl	801665c <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	f7fe fcc5 	bl	80166ac <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEED1Ev>
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	339c      	adds	r3, #156	; 0x9c
 8017d26:	4618      	mov	r0, r3
 8017d28:	f000 fccc 	bl	80186c4 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19ToggleButtonTriggerEEEED1Ev>
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	3370      	adds	r3, #112	; 0x70
 8017d30:	4618      	mov	r0, r3
 8017d32:	f7f4 ffcb 	bl	800cccc <_ZN8touchgfx5ImageD1Ev>
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	3340      	adds	r3, #64	; 0x40
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	f7f4 ff74 	bl	800cc28 <_ZN8touchgfx3BoxD1Ev>
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	4618      	mov	r0, r3
 8017d44:	f7ff ff8e 	bl	8017c64 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	4618      	mov	r0, r3
 8017d4c:	3708      	adds	r7, #8
 8017d4e:	46bd      	mov	sp, r7
 8017d50:	bd80      	pop	{r7, pc}
 8017d52:	bf00      	nop
 8017d54:	080240a0 	.word	0x080240a0

08017d58 <_ZN12MainViewBaseD0Ev>:
 8017d58:	b580      	push	{r7, lr}
 8017d5a:	b082      	sub	sp, #8
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	6078      	str	r0, [r7, #4]
 8017d60:	6878      	ldr	r0, [r7, #4]
 8017d62:	f7ff ffa1 	bl	8017ca8 <_ZN12MainViewBaseD1Ev>
 8017d66:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8017d6a:	6878      	ldr	r0, [r7, #4]
 8017d6c:	f009 fa07 	bl	802117e <_ZdlPvj>
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	4618      	mov	r0, r3
 8017d74:	3708      	adds	r7, #8
 8017d76:	46bd      	mov	sp, r7
 8017d78:	bd80      	pop	{r7, pc}

08017d7a <_ZN12MainViewBase19toggleButtonPressedEv>:
    virtual void setupScreen();

    /*
     * Custom Action Handlers
     */
    virtual void toggleButtonPressed()
 8017d7a:	b480      	push	{r7}
 8017d7c:	b083      	sub	sp, #12
 8017d7e:	af00      	add	r7, sp, #0
 8017d80:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in MainView
    }
 8017d82:	bf00      	nop
 8017d84:	370c      	adds	r7, #12
 8017d86:	46bd      	mov	sp, r7
 8017d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d8c:	4770      	bx	lr

08017d8e <_ZN12MainViewBase18touchButtonPressedEv>:

    virtual void touchButtonPressed()
 8017d8e:	b480      	push	{r7}
 8017d90:	b083      	sub	sp, #12
 8017d92:	af00      	add	r7, sp, #0
 8017d94:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in MainView
    }
 8017d96:	bf00      	nop
 8017d98:	370c      	adds	r7, #12
 8017d9a:	46bd      	mov	sp, r7
 8017d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da0:	4770      	bx	lr

08017da2 <_ZN12MainViewBase17zeroButtonPressedEv>:

    virtual void zeroButtonPressed()
 8017da2:	b480      	push	{r7}
 8017da4:	b083      	sub	sp, #12
 8017da6:	af00      	add	r7, sp, #0
 8017da8:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in MainView
    }
 8017daa:	bf00      	nop
 8017dac:	370c      	adds	r7, #12
 8017dae:	46bd      	mov	sp, r7
 8017db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017db4:	4770      	bx	lr

08017db6 <_ZN12MainViewBase19repeatButtonPressedEv>:

    virtual void repeatButtonPressed()
 8017db6:	b480      	push	{r7}
 8017db8:	b083      	sub	sp, #12
 8017dba:	af00      	add	r7, sp, #0
 8017dbc:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in MainView
    }
 8017dbe:	bf00      	nop
 8017dc0:	370c      	adds	r7, #12
 8017dc2:	46bd      	mov	sp, r7
 8017dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dc8:	4770      	bx	lr

08017dca <_ZN12MainViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8017dca:	b580      	push	{r7, lr}
 8017dcc:	b082      	sub	sp, #8
 8017dce:	af00      	add	r7, sp, #0
 8017dd0:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(Application::getInstance());
 8017dd2:	f006 f8db 	bl	801df8c <_ZN8touchgfx11Application11getInstanceEv>
 8017dd6:	4603      	mov	r3, r0
    }
 8017dd8:	4618      	mov	r0, r3
 8017dda:	3708      	adds	r7, #8
 8017ddc:	46bd      	mov	sp, r7
 8017dde:	bd80      	pop	{r7, pc}

08017de0 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

MainViewBase::MainViewBase() :
 8017de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017de4:	b0a2      	sub	sp, #136	; 0x88
 8017de6:	af02      	add	r7, sp, #8
 8017de8:	6078      	str	r0, [r7, #4]
    flexButtonCallback(this, &MainViewBase::flexButtonCallbackHandler)
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	4618      	mov	r0, r3
 8017dee:	f000 fc91 	bl	8018714 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8017df2:	4ae0      	ldr	r2, [pc, #896]	; (8018174 <_ZN12MainViewBaseC1Ev+0x394>)
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	601a      	str	r2, [r3, #0]
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	3340      	adds	r3, #64	; 0x40
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	f7f4 fef3 	bl	800cbe8 <_ZN8touchgfx3BoxC1Ev>
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8017e08:	f107 0308 	add.w	r3, r7, #8
 8017e0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017e10:	4618      	mov	r0, r3
 8017e12:	f7f4 fde9 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8017e16:	f107 0308 	add.w	r3, r7, #8
 8017e1a:	4619      	mov	r1, r3
 8017e1c:	4620      	mov	r0, r4
 8017e1e:	f7f4 ff33 	bl	800cc88 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	339c      	adds	r3, #156	; 0x9c
 8017e26:	4618      	mov	r0, r3
 8017e28:	f000 fc8a 	bl	8018740 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19ToggleButtonTriggerEEEEC1Ev>
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8017e32:	4618      	mov	r0, r3
 8017e34:	f7fe fcd8 	bl	80167e8 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEEC1Ev>
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8017e3e:	4618      	mov	r0, r3
 8017e40:	f7fe fcaa 	bl	8016798 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	f7fe fccc 	bl	80167e8 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEEC1Ev>
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	f503 7450 	add.w	r4, r3, #832	; 0x340
 8017e56:	f107 030c 	add.w	r3, r7, #12
 8017e5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017e5e:	4618      	mov	r0, r3
 8017e60:	f7f4 fdc2 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8017e64:	f107 030c 	add.w	r3, r7, #12
 8017e68:	4619      	mov	r1, r3
 8017e6a:	4620      	mov	r0, r4
 8017e6c:	f7f4 ff0c 	bl	800cc88 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017e76:	4618      	mov	r0, r3
 8017e78:	f7f5 fa10 	bl	800d29c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8017e82:	4618      	mov	r0, r3
 8017e84:	f7fe fc50 	bl	8016728 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8017e8e:	4618      	mov	r0, r3
 8017e90:	f7fe fc4a 	bl	8016728 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	f7fe fc44 	bl	8016728 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	f503 60ad 	add.w	r0, r3, #1384	; 0x568
 8017ea6:	4bb4      	ldr	r3, [pc, #720]	; (8018178 <_ZN12MainViewBaseC1Ev+0x398>)
 8017ea8:	613b      	str	r3, [r7, #16]
 8017eaa:	2300      	movs	r3, #0
 8017eac:	617b      	str	r3, [r7, #20]
 8017eae:	f107 0310 	add.w	r3, r7, #16
 8017eb2:	cb0c      	ldmia	r3, {r2, r3}
 8017eb4:	6879      	ldr	r1, [r7, #4]
 8017eb6:	f000 fc6b 	bl	8018790 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{
    backgroundBox.setPosition(0, 0, 800, 480);
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8017ec0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8017ec4:	9300      	str	r3, [sp, #0]
 8017ec6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8017eca:	2200      	movs	r2, #0
 8017ecc:	2100      	movs	r1, #0
 8017ece:	f7f4 f925 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setVisible(false);
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	3340      	adds	r3, #64	; 0x40
 8017ed6:	2100      	movs	r1, #0
 8017ed8:	4618      	mov	r0, r3
 8017eda:	f7f4 fdc3 	bl	800ca64 <_ZN8touchgfx8Drawable10setVisibleEb>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8017ee4:	2200      	movs	r2, #0
 8017ee6:	2100      	movs	r1, #0
 8017ee8:	2000      	movs	r0, #0
 8017eea:	f007 fce1 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8017eee:	4603      	mov	r3, r0
 8017ef0:	4619      	mov	r1, r3
 8017ef2:	4620      	mov	r0, r4
 8017ef4:	f7f4 feba 	bl	800cc6c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    backgroundImage.setXY(0, 0);
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	3370      	adds	r3, #112	; 0x70
 8017efc:	2200      	movs	r2, #0
 8017efe:	2100      	movs	r1, #0
 8017f00:	4618      	mov	r0, r3
 8017f02:	f7f4 f970 	bl	800c1e6 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setBitmap(Bitmap(BITMAP_BG_ID));
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8017f0c:	f107 0318 	add.w	r3, r7, #24
 8017f10:	2100      	movs	r1, #0
 8017f12:	4618      	mov	r0, r3
 8017f14:	f7f4 fd68 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8017f18:	f107 0318 	add.w	r3, r7, #24
 8017f1c:	4619      	mov	r1, r3
 8017f1e:	4620      	mov	r0, r4
 8017f20:	f7f5 fca5 	bl	800d86e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    toggleButton.setBitmaps(Bitmap(BITMAP_SMALL_BTN_ID), Bitmap(BITMAP_SMALL_BTN_PRESSED_ID));
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8017f2a:	f107 031c 	add.w	r3, r7, #28
 8017f2e:	210f      	movs	r1, #15
 8017f30:	4618      	mov	r0, r3
 8017f32:	f7f4 fd59 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8017f36:	f107 0320 	add.w	r3, r7, #32
 8017f3a:	2111      	movs	r1, #17
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	f7f4 fd53 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8017f42:	f107 0220 	add.w	r2, r7, #32
 8017f46:	f107 031c 	add.w	r3, r7, #28
 8017f4a:	4619      	mov	r1, r3
 8017f4c:	4620      	mov	r0, r4
 8017f4e:	f000 fc3f 	bl	80187d0 <_ZN8touchgfx16ImageButtonStyleINS_19ToggleButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
    toggleButton.setBitmapXY(0, 0);
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	339c      	adds	r3, #156	; 0x9c
 8017f56:	2200      	movs	r2, #0
 8017f58:	2100      	movs	r1, #0
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	f000 fc6a 	bl	8018834 <_ZN8touchgfx16ImageButtonStyleINS_19ToggleButtonTriggerEE11setBitmapXYEtt>
    toggleButton.setText(TypedText(T_TOGGLEBUTTONWHITE));
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8017f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017f6a:	2102      	movs	r1, #2
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	f7f4 ffd1 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 8017f72:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8017f74:	4620      	mov	r0, r4
 8017f76:	f000 fc72 	bl	801885e <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19ToggleButtonTriggerEEEE7setTextENS_9TypedTextE>
    toggleButton.setTextPosition(0, 19, 100, 56);
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 8017f80:	2338      	movs	r3, #56	; 0x38
 8017f82:	9300      	str	r3, [sp, #0]
 8017f84:	2364      	movs	r3, #100	; 0x64
 8017f86:	2213      	movs	r2, #19
 8017f88:	2100      	movs	r1, #0
 8017f8a:	f000 fc8f 	bl	80188ac <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19ToggleButtonTriggerEEEE15setTextPositionEssss>
    toggleButton.setTextColors(touchgfx::Color::getColorFrom24BitRGB(82, 82, 82), touchgfx::Color::getColorFrom24BitRGB(231, 154, 9));
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8017f94:	2252      	movs	r2, #82	; 0x52
 8017f96:	2152      	movs	r1, #82	; 0x52
 8017f98:	2052      	movs	r0, #82	; 0x52
 8017f9a:	f007 fc89 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8017f9e:	4605      	mov	r5, r0
 8017fa0:	2209      	movs	r2, #9
 8017fa2:	219a      	movs	r1, #154	; 0x9a
 8017fa4:	20e7      	movs	r0, #231	; 0xe7
 8017fa6:	f007 fc83 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8017faa:	4603      	mov	r3, r0
 8017fac:	461a      	mov	r2, r3
 8017fae:	4629      	mov	r1, r5
 8017fb0:	4620      	mov	r0, r4
 8017fb2:	f000 fc9b 	bl	80188ec <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19ToggleButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    toggleButton.setPosition(348, 34, 100, 56);
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 8017fbc:	2338      	movs	r3, #56	; 0x38
 8017fbe:	9300      	str	r3, [sp, #0]
 8017fc0:	2364      	movs	r3, #100	; 0x64
 8017fc2:	2222      	movs	r2, #34	; 0x22
 8017fc4:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8017fc8:	f7f4 f8a8 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    toggleButton.setAction(flexButtonCallback);
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8017fd8:	4619      	mov	r1, r3
 8017fda:	4610      	mov	r0, r2
 8017fdc:	f7fd fd0e 	bl	80159fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    touchButton.setDelay(6);
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8017fe6:	2106      	movs	r1, #6
 8017fe8:	4618      	mov	r0, r3
 8017fea:	f7fd fdfd 	bl	8015be8 <_ZN8touchgfx19RepeatButtonTrigger8setDelayEi>
    touchButton.setInterval(6);
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8017ff4:	2106      	movs	r1, #6
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f7fd fe05 	bl	8015c06 <_ZN8touchgfx19RepeatButtonTrigger11setIntervalEi>
    touchButton.setBoxWithBorderPosition(0, 0, 100, 45);
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8018002:	232d      	movs	r3, #45	; 0x2d
 8018004:	9300      	str	r3, [sp, #0]
 8018006:	2364      	movs	r3, #100	; 0x64
 8018008:	2200      	movs	r2, #0
 801800a:	2100      	movs	r1, #0
 801800c:	f7fe fd5c 	bl	8016ac8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE24setBoxWithBorderPositionEssss>
    touchButton.setBorderSize(5);
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8018016:	2105      	movs	r1, #5
 8018018:	4618      	mov	r0, r3
 801801a:	f7fe fd75 	bl	8016b08 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE13setBorderSizeEh>
    touchButton.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(222, 222, 222), touchgfx::Color::getColorFrom24BitRGB(40, 58, 64), touchgfx::Color::getColorFrom24BitRGB(54, 62, 65), touchgfx::Color::getColorFrom24BitRGB(95, 103, 109));
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8018024:	22de      	movs	r2, #222	; 0xde
 8018026:	21de      	movs	r1, #222	; 0xde
 8018028:	20de      	movs	r0, #222	; 0xde
 801802a:	f007 fc41 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801802e:	4605      	mov	r5, r0
 8018030:	2240      	movs	r2, #64	; 0x40
 8018032:	213a      	movs	r1, #58	; 0x3a
 8018034:	2028      	movs	r0, #40	; 0x28
 8018036:	f007 fc3b 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801803a:	4606      	mov	r6, r0
 801803c:	2241      	movs	r2, #65	; 0x41
 801803e:	213e      	movs	r1, #62	; 0x3e
 8018040:	2036      	movs	r0, #54	; 0x36
 8018042:	f007 fc35 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8018046:	4680      	mov	r8, r0
 8018048:	226d      	movs	r2, #109	; 0x6d
 801804a:	2167      	movs	r1, #103	; 0x67
 801804c:	205f      	movs	r0, #95	; 0x5f
 801804e:	f007 fc2f 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8018052:	4603      	mov	r3, r0
 8018054:	9300      	str	r3, [sp, #0]
 8018056:	4643      	mov	r3, r8
 8018058:	4632      	mov	r2, r6
 801805a:	4629      	mov	r1, r5
 801805c:	4620      	mov	r0, r4
 801805e:	f7fe fd64 	bl	8016b2a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    touchButton.setIconBitmaps(Bitmap(BITMAP_BLACK_ARROW_UP_ID), Bitmap(BITMAP_ORANGE_ARROW_UP_ID));
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8018068:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801806c:	2102      	movs	r1, #2
 801806e:	4618      	mov	r0, r3
 8018070:	f7f4 fcba 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8018074:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018078:	210e      	movs	r1, #14
 801807a:	4618      	mov	r0, r3
 801807c:	f7f4 fcb4 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8018080:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8018084:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018088:	4619      	mov	r1, r3
 801808a:	4620      	mov	r0, r4
 801808c:	f7fe fd6a 	bl	8016b64 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    touchButton.setIconXY(34, 14);
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8018096:	220e      	movs	r2, #14
 8018098:	2122      	movs	r1, #34	; 0x22
 801809a:	4618      	mov	r0, r3
 801809c:	f7fe fdac 	bl	8016bf8 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEE9setIconXYEss>
    touchButton.setPosition(32, 45, 100, 45);
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 80180a6:	232d      	movs	r3, #45	; 0x2d
 80180a8:	9300      	str	r3, [sp, #0]
 80180aa:	2364      	movs	r3, #100	; 0x64
 80180ac:	222d      	movs	r2, #45	; 0x2d
 80180ae:	2120      	movs	r1, #32
 80180b0:	f7f4 f834 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    touchButton.setAction(flexButtonCallback);
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 80180c0:	4619      	mov	r1, r3
 80180c2:	4610      	mov	r0, r2
 80180c4:	f7fd fc9a 	bl	80159fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    zeroButton.setBitmaps(Bitmap(BITMAP_SMALL_BTN_ID), Bitmap(BITMAP_SMALL_BTN_PRESSED_ID));
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	f503 74f8 	add.w	r4, r3, #496	; 0x1f0
 80180ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80180d2:	210f      	movs	r1, #15
 80180d4:	4618      	mov	r0, r3
 80180d6:	f7f4 fc87 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80180da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80180de:	2111      	movs	r1, #17
 80180e0:	4618      	mov	r0, r3
 80180e2:	f7f4 fc81 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80180e6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80180ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80180ee:	4619      	mov	r1, r3
 80180f0:	4620      	mov	r0, r4
 80180f2:	f7fe fbe1 	bl	80168b8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
    zeroButton.setBitmapXY(0, 0);
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 80180fc:	2200      	movs	r2, #0
 80180fe:	2100      	movs	r1, #0
 8018100:	4618      	mov	r0, r3
 8018102:	f7fe fc0b 	bl	801691c <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE11setBitmapXYEtt>
    zeroButton.setText(TypedText(T_SINGLEUSEID3));
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	f503 74f8 	add.w	r4, r3, #496	; 0x1f0
 801810c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018110:	2101      	movs	r1, #1
 8018112:	4618      	mov	r0, r3
 8018114:	f7f4 fefe 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 8018118:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 801811a:	4620      	mov	r0, r4
 801811c:	f7fe fc75 	bl	8016a0a <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
    zeroButton.setTextPosition(-2, 12, 100, 56);
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	f503 70f8 	add.w	r0, r3, #496	; 0x1f0
 8018126:	2338      	movs	r3, #56	; 0x38
 8018128:	9300      	str	r3, [sp, #0]
 801812a:	2364      	movs	r3, #100	; 0x64
 801812c:	220c      	movs	r2, #12
 801812e:	f06f 0101 	mvn.w	r1, #1
 8018132:	f7fe fc91 	bl	8016a58 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    zeroButton.setTextColors(touchgfx::Color::getColorFrom24BitRGB(70, 70, 70), touchgfx::Color::getColorFrom24BitRGB(231, 154, 9));
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	f503 74f8 	add.w	r4, r3, #496	; 0x1f0
 801813c:	2246      	movs	r2, #70	; 0x46
 801813e:	2146      	movs	r1, #70	; 0x46
 8018140:	2046      	movs	r0, #70	; 0x46
 8018142:	f007 fbb5 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8018146:	4605      	mov	r5, r0
 8018148:	2209      	movs	r2, #9
 801814a:	219a      	movs	r1, #154	; 0x9a
 801814c:	20e7      	movs	r0, #231	; 0xe7
 801814e:	f007 fbaf 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8018152:	4603      	mov	r3, r0
 8018154:	461a      	mov	r2, r3
 8018156:	4629      	mov	r1, r5
 8018158:	4620      	mov	r0, r4
 801815a:	f7fe fc9d 	bl	8016a98 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    zeroButton.setPosition(32, 90, 100, 56);
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	f503 70f8 	add.w	r0, r3, #496	; 0x1f0
 8018164:	2338      	movs	r3, #56	; 0x38
 8018166:	9300      	str	r3, [sp, #0]
 8018168:	2364      	movs	r3, #100	; 0x64
 801816a:	225a      	movs	r2, #90	; 0x5a
 801816c:	2120      	movs	r1, #32
 801816e:	f7f3 ffd5 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
 8018172:	e003      	b.n	801817c <_ZN12MainViewBaseC1Ev+0x39c>
 8018174:	080240a0 	.word	0x080240a0
 8018178:	080185f9 	.word	0x080185f9
    zeroButton.setAction(flexButtonCallback);
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8018188:	4619      	mov	r1, r3
 801818a:	4610      	mov	r0, r2
 801818c:	f7fd fc36 	bl	80159fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    repeatButton.setDelay(6);
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8018196:	2106      	movs	r1, #6
 8018198:	4618      	mov	r0, r3
 801819a:	f7fd fd25 	bl	8015be8 <_ZN8touchgfx19RepeatButtonTrigger8setDelayEi>
    repeatButton.setInterval(6);
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80181a4:	2106      	movs	r1, #6
 80181a6:	4618      	mov	r0, r3
 80181a8:	f7fd fd2d 	bl	8015c06 <_ZN8touchgfx19RepeatButtonTrigger11setIntervalEi>
    repeatButton.setBoxWithBorderPosition(0, 0, 100, 45);
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	f503 7024 	add.w	r0, r3, #656	; 0x290
 80181b2:	232d      	movs	r3, #45	; 0x2d
 80181b4:	9300      	str	r3, [sp, #0]
 80181b6:	2364      	movs	r3, #100	; 0x64
 80181b8:	2200      	movs	r2, #0
 80181ba:	2100      	movs	r1, #0
 80181bc:	f7fe fc84 	bl	8016ac8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE24setBoxWithBorderPositionEssss>
    repeatButton.setBorderSize(5);
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80181c6:	2105      	movs	r1, #5
 80181c8:	4618      	mov	r0, r3
 80181ca:	f7fe fc9d 	bl	8016b08 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE13setBorderSizeEh>
    repeatButton.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(222, 222, 222), touchgfx::Color::getColorFrom24BitRGB(48, 58, 64), touchgfx::Color::getColorFrom24BitRGB(54, 62, 65), touchgfx::Color::getColorFrom24BitRGB(128, 136, 143));
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	f503 7424 	add.w	r4, r3, #656	; 0x290
 80181d4:	22de      	movs	r2, #222	; 0xde
 80181d6:	21de      	movs	r1, #222	; 0xde
 80181d8:	20de      	movs	r0, #222	; 0xde
 80181da:	f007 fb69 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80181de:	4605      	mov	r5, r0
 80181e0:	2240      	movs	r2, #64	; 0x40
 80181e2:	213a      	movs	r1, #58	; 0x3a
 80181e4:	2030      	movs	r0, #48	; 0x30
 80181e6:	f007 fb63 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80181ea:	4606      	mov	r6, r0
 80181ec:	2241      	movs	r2, #65	; 0x41
 80181ee:	213e      	movs	r1, #62	; 0x3e
 80181f0:	2036      	movs	r0, #54	; 0x36
 80181f2:	f007 fb5d 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80181f6:	4680      	mov	r8, r0
 80181f8:	228f      	movs	r2, #143	; 0x8f
 80181fa:	2188      	movs	r1, #136	; 0x88
 80181fc:	2080      	movs	r0, #128	; 0x80
 80181fe:	f007 fb57 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8018202:	4603      	mov	r3, r0
 8018204:	9300      	str	r3, [sp, #0]
 8018206:	4643      	mov	r3, r8
 8018208:	4632      	mov	r2, r6
 801820a:	4629      	mov	r1, r5
 801820c:	4620      	mov	r0, r4
 801820e:	f7fe fc8c 	bl	8016b2a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    repeatButton.setIconBitmaps(Bitmap(BITMAP_BLACK_ARROW_ID), Bitmap(BITMAP_ORANGE_ARROW_ID));
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	f503 7424 	add.w	r4, r3, #656	; 0x290
 8018218:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801821c:	2101      	movs	r1, #1
 801821e:	4618      	mov	r0, r3
 8018220:	f7f4 fbe2 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8018224:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018228:	210d      	movs	r1, #13
 801822a:	4618      	mov	r0, r3
 801822c:	f7f4 fbdc 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8018230:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018234:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018238:	4619      	mov	r1, r3
 801823a:	4620      	mov	r0, r4
 801823c:	f7fe fc92 	bl	8016b64 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    repeatButton.setIconXY(34, 14);
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8018246:	220e      	movs	r2, #14
 8018248:	2122      	movs	r1, #34	; 0x22
 801824a:	4618      	mov	r0, r3
 801824c:	f7fe fcd4 	bl	8016bf8 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_19RepeatButtonTriggerEEEE9setIconXYEss>
    repeatButton.setPosition(32, 146, 100, 45);
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	f503 7024 	add.w	r0, r3, #656	; 0x290
 8018256:	232d      	movs	r3, #45	; 0x2d
 8018258:	9300      	str	r3, [sp, #0]
 801825a:	2364      	movs	r3, #100	; 0x64
 801825c:	2292      	movs	r2, #146	; 0x92
 801825e:	2120      	movs	r1, #32
 8018260:	f7f3 ff5c 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    repeatButton.setAction(flexButtonCallback);
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	f503 7224 	add.w	r2, r3, #656	; 0x290
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8018270:	4619      	mov	r1, r3
 8018272:	4610      	mov	r0, r2
 8018274:	f7fd fbc2 	bl	80159fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    counterBackgroundImage.setXY(164, 42);
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	f503 7350 	add.w	r3, r3, #832	; 0x340
 801827e:	222a      	movs	r2, #42	; 0x2a
 8018280:	21a4      	movs	r1, #164	; 0xa4
 8018282:	4618      	mov	r0, r3
 8018284:	f7f3 ffaf 	bl	800c1e6 <_ZN8touchgfx8Drawable5setXYEss>
    counterBackgroundImage.setBitmap(Bitmap(BITMAP_COUNTER_BOX_ID));
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	f503 7450 	add.w	r4, r3, #832	; 0x340
 801828e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018292:	210c      	movs	r1, #12
 8018294:	4618      	mov	r0, r3
 8018296:	f7f4 fba7 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 801829a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801829e:	4619      	mov	r1, r3
 80182a0:	4620      	mov	r0, r4
 80182a2:	f7f5 fae4 	bl	800d86e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    countTxt.setPosition(164, 74, 152, 90);
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 80182ac:	235a      	movs	r3, #90	; 0x5a
 80182ae:	9300      	str	r3, [sp, #0]
 80182b0:	2398      	movs	r3, #152	; 0x98
 80182b2:	224a      	movs	r2, #74	; 0x4a
 80182b4:	21a4      	movs	r1, #164	; 0xa4
 80182b6:	f7f3 ff31 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    countTxt.setColor(touchgfx::Color::getColorFrom24BitRGB(222, 222, 222));
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	f503 745b 	add.w	r4, r3, #876	; 0x36c
 80182c0:	22de      	movs	r2, #222	; 0xde
 80182c2:	21de      	movs	r1, #222	; 0xde
 80182c4:	20de      	movs	r0, #222	; 0xde
 80182c6:	f007 faf3 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80182ca:	4603      	mov	r3, r0
 80182cc:	4619      	mov	r1, r3
 80182ce:	4620      	mov	r0, r4
 80182d0:	f7f4 ff13 	bl	800d0fa <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    countTxt.setLinespacing(0);
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80182da:	2100      	movs	r1, #0
 80182dc:	4618      	mov	r0, r3
 80182de:	f7fd fdc7 	bl	8015e70 <_ZN8touchgfx8TextArea14setLinespacingEt>
    Unicode::snprintf(countTxtBuffer, COUNTTXT_SIZE, "%s", TypedText(T_SINGLEUSEID24).getText());
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	f503 64ac 	add.w	r4, r3, #1376	; 0x560
 80182e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80182ec:	210f      	movs	r1, #15
 80182ee:	4618      	mov	r0, r3
 80182f0:	f7f4 fe10 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 80182f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80182f8:	4618      	mov	r0, r3
 80182fa:	f7f4 fe2f 	bl	800cf5c <_ZNK8touchgfx9TypedText7getTextEv>
 80182fe:	4603      	mov	r3, r0
 8018300:	4ab7      	ldr	r2, [pc, #732]	; (80185e0 <_ZN12MainViewBaseC1Ev+0x800>)
 8018302:	2103      	movs	r1, #3
 8018304:	4620      	mov	r0, r4
 8018306:	f007 fac5 	bl	801f894 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    countTxt.setWildcard(countTxtBuffer);
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	f503 725b 	add.w	r2, r3, #876	; 0x36c
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 8018316:	4619      	mov	r1, r3
 8018318:	4610      	mov	r0, r2
 801831a:	f7f5 f859 	bl	800d3d0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    countTxt.setTypedText(TypedText(T_NUMBERTEXT));
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	f503 745b 	add.w	r4, r3, #876	; 0x36c
 8018324:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018328:	2100      	movs	r1, #0
 801832a:	4618      	mov	r0, r3
 801832c:	f7f4 fdf2 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 8018330:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8018334:	4620      	mov	r0, r4
 8018336:	f7f5 fcc3 	bl	800dcc0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    screenBtnLogger.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	f503 7469 	add.w	r4, r3, #932	; 0x3a4
 8018340:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018344:	2103      	movs	r1, #3
 8018346:	4618      	mov	r0, r3
 8018348:	f7f4 fb4e 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 801834c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018350:	2104      	movs	r1, #4
 8018352:	4618      	mov	r0, r3
 8018354:	f7f4 fb48 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8018358:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801835c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018360:	4619      	mov	r1, r3
 8018362:	4620      	mov	r0, r4
 8018364:	f7fe faa8 	bl	80168b8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
    screenBtnLogger.setBitmapXY(0, 0);
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 801836e:	2200      	movs	r2, #0
 8018370:	2100      	movs	r1, #0
 8018372:	4618      	mov	r0, r3
 8018374:	f7fe fad2 	bl	801691c <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE11setBitmapXYEtt>
    screenBtnLogger.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_SETTINGS_32_ID), Bitmap(BITMAP_BLUE_ICONS_SETTINGS_32_ID));
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	f503 7469 	add.w	r4, r3, #932	; 0x3a4
 801837e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018382:	2108      	movs	r1, #8
 8018384:	4618      	mov	r0, r3
 8018386:	f7f4 fb2f 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 801838a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801838e:	2108      	movs	r1, #8
 8018390:	4618      	mov	r0, r3
 8018392:	f7f4 fb29 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8018396:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801839a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801839e:	4619      	mov	r1, r3
 80183a0:	4620      	mov	r0, r4
 80183a2:	f7fe fad0 	bl	8016946 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    screenBtnLogger.setIconXY(15, 15);
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80183ac:	220f      	movs	r2, #15
 80183ae:	210f      	movs	r1, #15
 80183b0:	4618      	mov	r0, r3
 80183b2:	f7fe fb12 	bl	80169da <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE9setIconXYEss>
    screenBtnLogger.setPosition(150, 198, 60, 60);
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	f503 7069 	add.w	r0, r3, #932	; 0x3a4
 80183bc:	233c      	movs	r3, #60	; 0x3c
 80183be:	9300      	str	r3, [sp, #0]
 80183c0:	233c      	movs	r3, #60	; 0x3c
 80183c2:	22c6      	movs	r2, #198	; 0xc6
 80183c4:	2196      	movs	r1, #150	; 0x96
 80183c6:	f7f3 fea9 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    screenBtnLogger.setAction(flexButtonCallback);
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 80183d6:	4619      	mov	r1, r3
 80183d8:	4610      	mov	r0, r2
 80183da:	f7fd fb0f 	bl	80159fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    screenBtnNetwork.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	f503 6487 	add.w	r4, r3, #1080	; 0x438
 80183e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80183e8:	2103      	movs	r1, #3
 80183ea:	4618      	mov	r0, r3
 80183ec:	f7f4 fafc 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80183f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80183f4:	2104      	movs	r1, #4
 80183f6:	4618      	mov	r0, r3
 80183f8:	f7f4 faf6 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80183fc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8018400:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8018404:	4619      	mov	r1, r3
 8018406:	4620      	mov	r0, r4
 8018408:	f7fe fa56 	bl	80168b8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
    screenBtnNetwork.setBitmapXY(0, 0);
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8018412:	2200      	movs	r2, #0
 8018414:	2100      	movs	r1, #0
 8018416:	4618      	mov	r0, r3
 8018418:	f7fe fa80 	bl	801691c <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE11setBitmapXYEtt>
    screenBtnNetwork.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_TOOLS_32_ID), Bitmap(BITMAP_BLUE_ICONS_TOOLS_32_ID));
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	f503 6487 	add.w	r4, r3, #1080	; 0x438
 8018422:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018426:	2109      	movs	r1, #9
 8018428:	4618      	mov	r0, r3
 801842a:	f7f4 fadd 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 801842e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8018432:	2109      	movs	r1, #9
 8018434:	4618      	mov	r0, r3
 8018436:	f7f4 fad7 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 801843a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801843e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018442:	4619      	mov	r1, r3
 8018444:	4620      	mov	r0, r4
 8018446:	f7fe fa7e 	bl	8016946 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    screenBtnNetwork.setIconXY(15, 16);
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8018450:	2210      	movs	r2, #16
 8018452:	210f      	movs	r1, #15
 8018454:	4618      	mov	r0, r3
 8018456:	f7fe fac0 	bl	80169da <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE9setIconXYEss>
    screenBtnNetwork.setPosition(210, 198, 60, 60);
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	f503 6087 	add.w	r0, r3, #1080	; 0x438
 8018460:	233c      	movs	r3, #60	; 0x3c
 8018462:	9300      	str	r3, [sp, #0]
 8018464:	233c      	movs	r3, #60	; 0x3c
 8018466:	22c6      	movs	r2, #198	; 0xc6
 8018468:	21d2      	movs	r1, #210	; 0xd2
 801846a:	f7f3 fe57 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    screenBtnNetwork.setAction(flexButtonCallback);
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	f503 6287 	add.w	r2, r3, #1080	; 0x438
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 801847a:	4619      	mov	r1, r3
 801847c:	4610      	mov	r0, r2
 801847e:	f7fd fabd 	bl	80159fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    screenBtnIOCont.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	f203 44cc 	addw	r4, r3, #1228	; 0x4cc
 8018488:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801848c:	2103      	movs	r1, #3
 801848e:	4618      	mov	r0, r3
 8018490:	f7f4 faaa 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8018494:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8018498:	2104      	movs	r1, #4
 801849a:	4618      	mov	r0, r3
 801849c:	f7f4 faa4 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80184a0:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80184a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80184a8:	4619      	mov	r1, r3
 80184aa:	4620      	mov	r0, r4
 80184ac:	f7fe fa04 	bl	80168b8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
    screenBtnIOCont.setBitmapXY(0, 0);
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 80184b6:	2200      	movs	r2, #0
 80184b8:	2100      	movs	r1, #0
 80184ba:	4618      	mov	r0, r3
 80184bc:	f7fe fa2e 	bl	801691c <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE11setBitmapXYEtt>
    screenBtnIOCont.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_DOCUMENT_32_ID), Bitmap(BITMAP_BLUE_ICONS_DOCUMENT_32_ID));
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	f203 44cc 	addw	r4, r3, #1228	; 0x4cc
 80184c6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80184ca:	2105      	movs	r1, #5
 80184cc:	4618      	mov	r0, r3
 80184ce:	f7f4 fa8b 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80184d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80184d6:	2105      	movs	r1, #5
 80184d8:	4618      	mov	r0, r3
 80184da:	f7f4 fa85 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80184de:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80184e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80184e6:	4619      	mov	r1, r3
 80184e8:	4620      	mov	r0, r4
 80184ea:	f7fe fa2c 	bl	8016946 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    screenBtnIOCont.setIconXY(17, 15);
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 80184f4:	220f      	movs	r2, #15
 80184f6:	2111      	movs	r1, #17
 80184f8:	4618      	mov	r0, r3
 80184fa:	f7fe fa6e 	bl	80169da <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE9setIconXYEss>
    screenBtnIOCont.setPosition(270, 198, 60, 60);
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	f203 40cc 	addw	r0, r3, #1228	; 0x4cc
 8018504:	233c      	movs	r3, #60	; 0x3c
 8018506:	9300      	str	r3, [sp, #0]
 8018508:	233c      	movs	r3, #60	; 0x3c
 801850a:	22c6      	movs	r2, #198	; 0xc6
 801850c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8018510:	f7f3 fe04 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    screenBtnIOCont.setAction(flexButtonCallback);
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	f203 42cc 	addw	r2, r3, #1228	; 0x4cc
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8018520:	4619      	mov	r1, r3
 8018522:	4610      	mov	r0, r2
 8018524:	f7fd fa6a 	bl	80159fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(backgroundBox);
 8018528:	687a      	ldr	r2, [r7, #4]
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	3340      	adds	r3, #64	; 0x40
 801852e:	4619      	mov	r1, r3
 8018530:	4610      	mov	r0, r2
 8018532:	f7fd f9e1 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 8018536:	687a      	ldr	r2, [r7, #4]
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	3370      	adds	r3, #112	; 0x70
 801853c:	4619      	mov	r1, r3
 801853e:	4610      	mov	r0, r2
 8018540:	f7fd f9da 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton);
 8018544:	687a      	ldr	r2, [r7, #4]
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	339c      	adds	r3, #156	; 0x9c
 801854a:	4619      	mov	r1, r3
 801854c:	4610      	mov	r0, r2
 801854e:	f7fd f9d3 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(touchButton);
 8018552:	687a      	ldr	r2, [r7, #4]
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801855a:	4619      	mov	r1, r3
 801855c:	4610      	mov	r0, r2
 801855e:	f7fd f9cb 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(zeroButton);
 8018562:	687a      	ldr	r2, [r7, #4]
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 801856a:	4619      	mov	r1, r3
 801856c:	4610      	mov	r0, r2
 801856e:	f7fd f9c3 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(repeatButton);
 8018572:	687a      	ldr	r2, [r7, #4]
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	f503 7324 	add.w	r3, r3, #656	; 0x290
 801857a:	4619      	mov	r1, r3
 801857c:	4610      	mov	r0, r2
 801857e:	f7fd f9bb 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(counterBackgroundImage);
 8018582:	687a      	ldr	r2, [r7, #4]
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	f503 7350 	add.w	r3, r3, #832	; 0x340
 801858a:	4619      	mov	r1, r3
 801858c:	4610      	mov	r0, r2
 801858e:	f7fd f9b3 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(countTxt);
 8018592:	687a      	ldr	r2, [r7, #4]
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801859a:	4619      	mov	r1, r3
 801859c:	4610      	mov	r0, r2
 801859e:	f7fd f9ab 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(screenBtnLogger);
 80185a2:	687a      	ldr	r2, [r7, #4]
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80185aa:	4619      	mov	r1, r3
 80185ac:	4610      	mov	r0, r2
 80185ae:	f7fd f9a3 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(screenBtnNetwork);
 80185b2:	687a      	ldr	r2, [r7, #4]
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80185ba:	4619      	mov	r1, r3
 80185bc:	4610      	mov	r0, r2
 80185be:	f7fd f99b 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(screenBtnIOCont);
 80185c2:	687a      	ldr	r2, [r7, #4]
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 80185ca:	4619      	mov	r1, r3
 80185cc:	4610      	mov	r0, r2
 80185ce:	f7fd f993 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	4618      	mov	r0, r3
 80185d6:	3780      	adds	r7, #128	; 0x80
 80185d8:	46bd      	mov	sp, r7
 80185da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185de:	bf00      	nop
 80185e0:	0802293c 	.word	0x0802293c

080185e4 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 80185e4:	b480      	push	{r7}
 80185e6:	b083      	sub	sp, #12
 80185e8:	af00      	add	r7, sp, #0
 80185ea:	6078      	str	r0, [r7, #4]

}
 80185ec:	bf00      	nop
 80185ee:	370c      	adds	r7, #12
 80185f0:	46bd      	mov	sp, r7
 80185f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185f6:	4770      	bx	lr

080185f8 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void MainViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b082      	sub	sp, #8
 80185fc:	af00      	add	r7, sp, #0
 80185fe:	6078      	str	r0, [r7, #4]
 8018600:	6039      	str	r1, [r7, #0]
    if (&src == &toggleButton)
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	339c      	adds	r3, #156	; 0x9c
 8018606:	683a      	ldr	r2, [r7, #0]
 8018608:	429a      	cmp	r2, r3
 801860a:	d106      	bne.n	801861a <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x22>
    {
        //toggleButtonInteraction
        //When toggleButton clicked call virtual function
        //Call toggleButtonPressed
        toggleButtonPressed();
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	332c      	adds	r3, #44	; 0x2c
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	6878      	ldr	r0, [r7, #4]
 8018616:	4798      	blx	r3
        //screenIOControlInteraction
        //When screenBtnIOCont clicked change screen to IOControl
        //Go to IOControl with no screen transition
        application().gotoIOControlScreenNoTransition();
    }
}
 8018618:	e04f      	b.n	80186ba <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xc2>
    else if (&src == &touchButton)
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8018620:	683a      	ldr	r2, [r7, #0]
 8018622:	429a      	cmp	r2, r3
 8018624:	d106      	bne.n	8018634 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x3c>
        touchButtonPressed();
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	3330      	adds	r3, #48	; 0x30
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	6878      	ldr	r0, [r7, #4]
 8018630:	4798      	blx	r3
}
 8018632:	e042      	b.n	80186ba <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xc2>
    else if (&src == &zeroButton)
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 801863a:	683a      	ldr	r2, [r7, #0]
 801863c:	429a      	cmp	r2, r3
 801863e:	d106      	bne.n	801864e <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x56>
        zeroButtonPressed();
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	3334      	adds	r3, #52	; 0x34
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	6878      	ldr	r0, [r7, #4]
 801864a:	4798      	blx	r3
}
 801864c:	e035      	b.n	80186ba <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xc2>
    else if (&src == &repeatButton)
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8018654:	683a      	ldr	r2, [r7, #0]
 8018656:	429a      	cmp	r2, r3
 8018658:	d106      	bne.n	8018668 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x70>
        repeatButtonPressed();
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	3338      	adds	r3, #56	; 0x38
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	6878      	ldr	r0, [r7, #4]
 8018664:	4798      	blx	r3
}
 8018666:	e028      	b.n	80186ba <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xc2>
    else if (&src == &screenBtnLogger)
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 801866e:	683a      	ldr	r2, [r7, #0]
 8018670:	429a      	cmp	r2, r3
 8018672:	d107      	bne.n	8018684 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x8c>
        application().gotoLoggerScreenNoTransition();
 8018674:	6878      	ldr	r0, [r7, #4]
 8018676:	f7ff fba8 	bl	8017dca <_ZN12MainViewBase11applicationEv>
 801867a:	4603      	mov	r3, r0
 801867c:	4618      	mov	r0, r3
 801867e:	f7fb fba7 	bl	8013dd0 <_ZN23FrontendApplicationBase28gotoLoggerScreenNoTransitionEv>
}
 8018682:	e01a      	b.n	80186ba <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xc2>
    else if (&src == &screenBtnNetwork)
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 801868a:	683a      	ldr	r2, [r7, #0]
 801868c:	429a      	cmp	r2, r3
 801868e:	d107      	bne.n	80186a0 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xa8>
        application().gotoNetworkScreenNoTransition();
 8018690:	6878      	ldr	r0, [r7, #4]
 8018692:	f7ff fb9a 	bl	8017dca <_ZN12MainViewBase11applicationEv>
 8018696:	4603      	mov	r3, r0
 8018698:	4618      	mov	r0, r3
 801869a:	f7fb fbdf 	bl	8013e5c <_ZN23FrontendApplicationBase29gotoNetworkScreenNoTransitionEv>
}
 801869e:	e00c      	b.n	80186ba <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xc2>
    else if (&src == &screenBtnIOCont)
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 80186a6:	683a      	ldr	r2, [r7, #0]
 80186a8:	429a      	cmp	r2, r3
 80186aa:	d106      	bne.n	80186ba <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xc2>
        application().gotoIOControlScreenNoTransition();
 80186ac:	6878      	ldr	r0, [r7, #4]
 80186ae:	f7ff fb8c 	bl	8017dca <_ZN12MainViewBase11applicationEv>
 80186b2:	4603      	mov	r3, r0
 80186b4:	4618      	mov	r0, r3
 80186b6:	f7fb fc17 	bl	8013ee8 <_ZN23FrontendApplicationBase31gotoIOControlScreenNoTransitionEv>
}
 80186ba:	bf00      	nop
 80186bc:	3708      	adds	r7, #8
 80186be:	46bd      	mov	sp, r7
 80186c0:	bd80      	pop	{r7, pc}
	...

080186c4 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19ToggleButtonTriggerEEEED1Ev>:
    virtual ~TextButtonStyle() { }
 80186c4:	b580      	push	{r7, lr}
 80186c6:	b082      	sub	sp, #8
 80186c8:	af00      	add	r7, sp, #0
 80186ca:	6078      	str	r0, [r7, #4]
 80186cc:	4a08      	ldr	r2, [pc, #32]	; (80186f0 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19ToggleButtonTriggerEEEED1Ev+0x2c>)
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	601a      	str	r2, [r3, #0]
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	3368      	adds	r3, #104	; 0x68
 80186d6:	4618      	mov	r0, r3
 80186d8:	f7f4 fd8a 	bl	800d1f0 <_ZN8touchgfx8TextAreaD1Ev>
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	4618      	mov	r0, r3
 80186e0:	f000 f91c 	bl	801891c <_ZN8touchgfx16ImageButtonStyleINS_19ToggleButtonTriggerEED1Ev>
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	4618      	mov	r0, r3
 80186e8:	3708      	adds	r7, #8
 80186ea:	46bd      	mov	sp, r7
 80186ec:	bd80      	pop	{r7, pc}
 80186ee:	bf00      	nop
 80186f0:	080240fc 	.word	0x080240fc

080186f4 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19ToggleButtonTriggerEEEED0Ev>:
 80186f4:	b580      	push	{r7, lr}
 80186f6:	b082      	sub	sp, #8
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	6078      	str	r0, [r7, #4]
 80186fc:	6878      	ldr	r0, [r7, #4]
 80186fe:	f7ff ffe1 	bl	80186c4 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19ToggleButtonTriggerEEEED1Ev>
 8018702:	21a4      	movs	r1, #164	; 0xa4
 8018704:	6878      	ldr	r0, [r7, #4]
 8018706:	f008 fd3a 	bl	802117e <_ZdlPvj>
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	4618      	mov	r0, r3
 801870e:	3708      	adds	r7, #8
 8018710:	46bd      	mov	sp, r7
 8018712:	bd80      	pop	{r7, pc}

08018714 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 8018714:	b580      	push	{r7, lr}
 8018716:	b082      	sub	sp, #8
 8018718:	af00      	add	r7, sp, #0
 801871a:	6078      	str	r0, [r7, #4]
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	4618      	mov	r0, r3
 8018720:	f006 fb0c 	bl	801ed3c <_ZN8touchgfx6ScreenC1Ev>
 8018724:	4a05      	ldr	r2, [pc, #20]	; (801873c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	601a      	str	r2, [r3, #0]
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	2200      	movs	r2, #0
 801872e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	4618      	mov	r0, r3
 8018734:	3708      	adds	r7, #8
 8018736:	46bd      	mov	sp, r7
 8018738:	bd80      	pop	{r7, pc}
 801873a:	bf00      	nop
 801873c:	08024234 	.word	0x08024234

08018740 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19ToggleButtonTriggerEEEEC1Ev>:
    TextButtonStyle() : T()
 8018740:	b580      	push	{r7, lr}
 8018742:	b082      	sub	sp, #8
 8018744:	af00      	add	r7, sp, #0
 8018746:	6078      	str	r0, [r7, #4]
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	4618      	mov	r0, r3
 801874c:	f000 f90e 	bl	801896c <_ZN8touchgfx16ImageButtonStyleINS_19ToggleButtonTriggerEEC1Ev>
 8018750:	4a0e      	ldr	r2, [pc, #56]	; (801878c <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19ToggleButtonTriggerEEEEC1Ev+0x4c>)
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	601a      	str	r2, [r3, #0]
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	3368      	adds	r3, #104	; 0x68
 801875a:	4618      	mov	r0, r3
 801875c:	f7f4 fc8a 	bl	800d074 <_ZN8touchgfx8TextAreaC1Ev>
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	339c      	adds	r3, #156	; 0x9c
 8018764:	4618      	mov	r0, r3
 8018766:	f7f4 fb77 	bl	800ce58 <_ZN8touchgfx9colortypeC1Ev>
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	33a0      	adds	r3, #160	; 0xa0
 801876e:	4618      	mov	r0, r3
 8018770:	f7f4 fb72 	bl	800ce58 <_ZN8touchgfx9colortypeC1Ev>
        T::add(text);
 8018774:	687a      	ldr	r2, [r7, #4]
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	3368      	adds	r3, #104	; 0x68
 801877a:	4619      	mov	r1, r3
 801877c:	4610      	mov	r0, r2
 801877e:	f7f3 fe31 	bl	800c3e4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	4618      	mov	r0, r3
 8018786:	3708      	adds	r7, #8
 8018788:	46bd      	mov	sp, r7
 801878a:	bd80      	pop	{r7, pc}
 801878c:	080240fc 	.word	0x080240fc

08018790 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8018790:	b580      	push	{r7, lr}
 8018792:	b084      	sub	sp, #16
 8018794:	af00      	add	r7, sp, #0
 8018796:	60f8      	str	r0, [r7, #12]
 8018798:	60b9      	str	r1, [r7, #8]
 801879a:	4639      	mov	r1, r7
 801879c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	4618      	mov	r0, r3
 80187a4:	f7fe f858 	bl	8016858 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 80187a8:	4a08      	ldr	r2, [pc, #32]	; (80187cc <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	68ba      	ldr	r2, [r7, #8]
 80187b2:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	3308      	adds	r3, #8
 80187b8:	463a      	mov	r2, r7
 80187ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80187be:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	4618      	mov	r0, r3
 80187c6:	3710      	adds	r7, #16
 80187c8:	46bd      	mov	sp, r7
 80187ca:	bd80      	pop	{r7, pc}
 80187cc:	080240e4 	.word	0x080240e4

080187d0 <_ZN8touchgfx16ImageButtonStyleINS_19ToggleButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>:
    virtual void setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
 80187d0:	b590      	push	{r4, r7, lr}
 80187d2:	b085      	sub	sp, #20
 80187d4:	af00      	add	r7, sp, #0
 80187d6:	60f8      	str	r0, [r7, #12]
 80187d8:	60b9      	str	r1, [r7, #8]
 80187da:	607a      	str	r2, [r7, #4]
        up = bmpReleased;
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	68ba      	ldr	r2, [r7, #8]
 80187e0:	8812      	ldrh	r2, [r2, #0]
 80187e2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
        down = bmpPressed;
 80187e6:	68fb      	ldr	r3, [r7, #12]
 80187e8:	687a      	ldr	r2, [r7, #4]
 80187ea:	8812      	ldrh	r2, [r2, #0]
 80187ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        AbstractButtonContainer::setWidth(down.getWidth());
 80187f0:	68fc      	ldr	r4, [r7, #12]
 80187f2:	68fb      	ldr	r3, [r7, #12]
 80187f4:	3366      	adds	r3, #102	; 0x66
 80187f6:	4618      	mov	r0, r3
 80187f8:	f007 f95c 	bl	801fab4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80187fc:	4603      	mov	r3, r0
 80187fe:	b21b      	sxth	r3, r3
 8018800:	4619      	mov	r1, r3
 8018802:	4620      	mov	r0, r4
 8018804:	f7f3 fd0d 	bl	800c222 <_ZN8touchgfx8Drawable8setWidthEs>
        AbstractButtonContainer::setHeight(down.getHeight());
 8018808:	68fc      	ldr	r4, [r7, #12]
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	3366      	adds	r3, #102	; 0x66
 801880e:	4618      	mov	r0, r3
 8018810:	f007 f988 	bl	801fb24 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018814:	4603      	mov	r3, r0
 8018816:	b21b      	sxth	r3, r3
 8018818:	4619      	mov	r1, r3
 801881a:	4620      	mov	r0, r4
 801881c:	f7f3 fd10 	bl	800c240 <_ZN8touchgfx8Drawable9setHeightEs>
        handlePressedUpdated();
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	3388      	adds	r3, #136	; 0x88
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	68f8      	ldr	r0, [r7, #12]
 801882a:	4798      	blx	r3
    }
 801882c:	bf00      	nop
 801882e:	3714      	adds	r7, #20
 8018830:	46bd      	mov	sp, r7
 8018832:	bd90      	pop	{r4, r7, pc}

08018834 <_ZN8touchgfx16ImageButtonStyleINS_19ToggleButtonTriggerEE11setBitmapXYEtt>:
    void setBitmapXY(uint16_t x, uint16_t y)
 8018834:	b580      	push	{r7, lr}
 8018836:	b082      	sub	sp, #8
 8018838:	af00      	add	r7, sp, #0
 801883a:	6078      	str	r0, [r7, #4]
 801883c:	460b      	mov	r3, r1
 801883e:	807b      	strh	r3, [r7, #2]
 8018840:	4613      	mov	r3, r2
 8018842:	803b      	strh	r3, [r7, #0]
        buttonImage.setXY(x, y);
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	3338      	adds	r3, #56	; 0x38
 8018848:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801884c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8018850:	4618      	mov	r0, r3
 8018852:	f7f3 fcc8 	bl	800c1e6 <_ZN8touchgfx8Drawable5setXYEss>
    }
 8018856:	bf00      	nop
 8018858:	3708      	adds	r7, #8
 801885a:	46bd      	mov	sp, r7
 801885c:	bd80      	pop	{r7, pc}

0801885e <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19ToggleButtonTriggerEEEE7setTextENS_9TypedTextE>:
    void setText(TypedText t)
 801885e:	b590      	push	{r4, r7, lr}
 8018860:	b083      	sub	sp, #12
 8018862:	af00      	add	r7, sp, #0
 8018864:	6078      	str	r0, [r7, #4]
 8018866:	8039      	strh	r1, [r7, #0]
        text.setTypedText(t);
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	3368      	adds	r3, #104	; 0x68
 801886c:	8839      	ldrh	r1, [r7, #0]
 801886e:	4618      	mov	r0, r3
 8018870:	f7f5 fa26 	bl	800dcc0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
        text.setWidth(T::getWidth());
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	f103 0468 	add.w	r4, r3, #104	; 0x68
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	4618      	mov	r0, r3
 801887e:	f7f4 f842 	bl	800c906 <_ZNK8touchgfx8Drawable8getWidthEv>
 8018882:	4603      	mov	r3, r0
 8018884:	4619      	mov	r1, r3
 8018886:	4620      	mov	r0, r4
 8018888:	f7f3 fccb 	bl	800c222 <_ZN8touchgfx8Drawable8setWidthEs>
        text.setHeight(T::getHeight());
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	4618      	mov	r0, r3
 8018896:	f7f4 f843 	bl	800c920 <_ZNK8touchgfx8Drawable9getHeightEv>
 801889a:	4603      	mov	r3, r0
 801889c:	4619      	mov	r1, r3
 801889e:	4620      	mov	r0, r4
 80188a0:	f7f3 fcce 	bl	800c240 <_ZN8touchgfx8Drawable9setHeightEs>
    }
 80188a4:	bf00      	nop
 80188a6:	370c      	adds	r7, #12
 80188a8:	46bd      	mov	sp, r7
 80188aa:	bd90      	pop	{r4, r7, pc}

080188ac <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19ToggleButtonTriggerEEEE15setTextPositionEssss>:
    void setTextPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80188ac:	b590      	push	{r4, r7, lr}
 80188ae:	b087      	sub	sp, #28
 80188b0:	af02      	add	r7, sp, #8
 80188b2:	60f8      	str	r0, [r7, #12]
 80188b4:	4608      	mov	r0, r1
 80188b6:	4611      	mov	r1, r2
 80188b8:	461a      	mov	r2, r3
 80188ba:	4603      	mov	r3, r0
 80188bc:	817b      	strh	r3, [r7, #10]
 80188be:	460b      	mov	r3, r1
 80188c0:	813b      	strh	r3, [r7, #8]
 80188c2:	4613      	mov	r3, r2
 80188c4:	80fb      	strh	r3, [r7, #6]
        text.setPosition(x, y, width, height);
 80188c6:	68fb      	ldr	r3, [r7, #12]
 80188c8:	f103 0068 	add.w	r0, r3, #104	; 0x68
 80188cc:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80188d0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80188d4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80188d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80188dc:	9300      	str	r3, [sp, #0]
 80188de:	4623      	mov	r3, r4
 80188e0:	f7f3 fc1c 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 80188e4:	bf00      	nop
 80188e6:	3714      	adds	r7, #20
 80188e8:	46bd      	mov	sp, r7
 80188ea:	bd90      	pop	{r4, r7, pc}

080188ec <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19ToggleButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>:
    void setTextColors(colortype newColorReleased, colortype newColorPressed)
 80188ec:	b580      	push	{r7, lr}
 80188ee:	b084      	sub	sp, #16
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	60f8      	str	r0, [r7, #12]
 80188f4:	60b9      	str	r1, [r7, #8]
 80188f6:	607a      	str	r2, [r7, #4]
        colorReleased = newColorReleased;
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	68ba      	ldr	r2, [r7, #8]
 80188fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        colorPressed = newColorPressed;
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	687a      	ldr	r2, [r7, #4]
 8018904:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        handlePressedUpdated();
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	3388      	adds	r3, #136	; 0x88
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	68f8      	ldr	r0, [r7, #12]
 8018912:	4798      	blx	r3
    }
 8018914:	bf00      	nop
 8018916:	3710      	adds	r7, #16
 8018918:	46bd      	mov	sp, r7
 801891a:	bd80      	pop	{r7, pc}

0801891c <_ZN8touchgfx16ImageButtonStyleINS_19ToggleButtonTriggerEED1Ev>:
    virtual ~ImageButtonStyle() { }
 801891c:	b580      	push	{r7, lr}
 801891e:	b082      	sub	sp, #8
 8018920:	af00      	add	r7, sp, #0
 8018922:	6078      	str	r0, [r7, #4]
 8018924:	4a08      	ldr	r2, [pc, #32]	; (8018948 <_ZN8touchgfx16ImageButtonStyleINS_19ToggleButtonTriggerEED1Ev+0x2c>)
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	601a      	str	r2, [r3, #0]
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	3338      	adds	r3, #56	; 0x38
 801892e:	4618      	mov	r0, r3
 8018930:	f7f4 f9cc 	bl	800cccc <_ZN8touchgfx5ImageD1Ev>
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	4618      	mov	r0, r3
 8018938:	f7ff f8d0 	bl	8017adc <_ZN8touchgfx19ToggleButtonTriggerD1Ev>
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	4618      	mov	r0, r3
 8018940:	3708      	adds	r7, #8
 8018942:	46bd      	mov	sp, r7
 8018944:	bd80      	pop	{r7, pc}
 8018946:	bf00      	nop
 8018948:	08024198 	.word	0x08024198

0801894c <_ZN8touchgfx16ImageButtonStyleINS_19ToggleButtonTriggerEED0Ev>:
 801894c:	b580      	push	{r7, lr}
 801894e:	b082      	sub	sp, #8
 8018950:	af00      	add	r7, sp, #0
 8018952:	6078      	str	r0, [r7, #4]
 8018954:	6878      	ldr	r0, [r7, #4]
 8018956:	f7ff ffe1 	bl	801891c <_ZN8touchgfx16ImageButtonStyleINS_19ToggleButtonTriggerEED1Ev>
 801895a:	2168      	movs	r1, #104	; 0x68
 801895c:	6878      	ldr	r0, [r7, #4]
 801895e:	f008 fc0e 	bl	802117e <_ZdlPvj>
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	4618      	mov	r0, r3
 8018966:	3708      	adds	r7, #8
 8018968:	46bd      	mov	sp, r7
 801896a:	bd80      	pop	{r7, pc}

0801896c <_ZN8touchgfx16ImageButtonStyleINS_19ToggleButtonTriggerEEC1Ev>:
    ImageButtonStyle() : T(), up(), down()
 801896c:	b590      	push	{r4, r7, lr}
 801896e:	b085      	sub	sp, #20
 8018970:	af00      	add	r7, sp, #0
 8018972:	6078      	str	r0, [r7, #4]
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	4618      	mov	r0, r3
 8018978:	f7ff f89a 	bl	8017ab0 <_ZN8touchgfx19ToggleButtonTriggerC1Ev>
 801897c:	4a19      	ldr	r2, [pc, #100]	; (80189e4 <_ZN8touchgfx16ImageButtonStyleINS_19ToggleButtonTriggerEEC1Ev+0x78>)
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	601a      	str	r2, [r3, #0]
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8018988:	f107 030c 	add.w	r3, r7, #12
 801898c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018990:	4618      	mov	r0, r3
 8018992:	f7f4 f829 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8018996:	f107 030c 	add.w	r3, r7, #12
 801899a:	4619      	mov	r1, r3
 801899c:	4620      	mov	r0, r4
 801899e:	f7f4 f973 	bl	800cc88 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	3364      	adds	r3, #100	; 0x64
 80189a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80189aa:	4618      	mov	r0, r3
 80189ac:	f7f4 f81c 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	3366      	adds	r3, #102	; 0x66
 80189b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80189b8:	4618      	mov	r0, r3
 80189ba:	f7f4 f815 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
        buttonImage.setXY(0, 0);
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	3338      	adds	r3, #56	; 0x38
 80189c2:	2200      	movs	r2, #0
 80189c4:	2100      	movs	r1, #0
 80189c6:	4618      	mov	r0, r3
 80189c8:	f7f3 fc0d 	bl	800c1e6 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(buttonImage);
 80189cc:	687a      	ldr	r2, [r7, #4]
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	3338      	adds	r3, #56	; 0x38
 80189d2:	4619      	mov	r1, r3
 80189d4:	4610      	mov	r0, r2
 80189d6:	f7f3 fd05 	bl	800c3e4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	4618      	mov	r0, r3
 80189de:	3714      	adds	r7, #20
 80189e0:	46bd      	mov	sp, r7
 80189e2:	bd90      	pop	{r4, r7, pc}
 80189e4:	08024198 	.word	0x08024198

080189e8 <_ZN8touchgfx16ImageButtonStyleINS_19ToggleButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 80189e8:	b590      	push	{r4, r7, lr}
 80189ea:	b083      	sub	sp, #12
 80189ec:	af00      	add	r7, sp, #0
 80189ee:	6078      	str	r0, [r7, #4]
        buttonImage.setBitmap(T::getPressed() ? down : up);
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	4618      	mov	r0, r3
 80189fa:	f7fc ffe5 	bl	80159c8 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 80189fe:	4603      	mov	r3, r0
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d002      	beq.n	8018a0a <_ZN8touchgfx16ImageButtonStyleINS_19ToggleButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	3366      	adds	r3, #102	; 0x66
 8018a08:	e001      	b.n	8018a0e <_ZN8touchgfx16ImageButtonStyleINS_19ToggleButtonTriggerEE20handlePressedUpdatedEv+0x26>
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	3364      	adds	r3, #100	; 0x64
 8018a0e:	4619      	mov	r1, r3
 8018a10:	4620      	mov	r0, r4
 8018a12:	f7f4 ff2c 	bl	800d86e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        T::handlePressedUpdated();
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	4618      	mov	r0, r3
 8018a1a:	f7fc fffd 	bl	8015a18 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 8018a1e:	bf00      	nop
 8018a20:	370c      	adds	r7, #12
 8018a22:	46bd      	mov	sp, r7
 8018a24:	bd90      	pop	{r4, r7, pc}

08018a26 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19ToggleButtonTriggerEEEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 8018a26:	b590      	push	{r4, r7, lr}
 8018a28:	b083      	sub	sp, #12
 8018a2a:	af00      	add	r7, sp, #0
 8018a2c:	6078      	str	r0, [r7, #4]
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	4618      	mov	r0, r3
 8018a38:	f7fc ffc6 	bl	80159c8 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8018a3c:	4603      	mov	r3, r0
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d002      	beq.n	8018a48 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19ToggleButtonTriggerEEEE20handlePressedUpdatedEv+0x22>
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	33a0      	adds	r3, #160	; 0xa0
 8018a46:	e001      	b.n	8018a4c <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19ToggleButtonTriggerEEEE20handlePressedUpdatedEv+0x26>
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	339c      	adds	r3, #156	; 0x9c
 8018a4c:	6819      	ldr	r1, [r3, #0]
 8018a4e:	4620      	mov	r0, r4
 8018a50:	f7f4 fb53 	bl	800d0fa <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
        T::handlePressedUpdated();
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	4618      	mov	r0, r3
 8018a58:	f7ff ffc6 	bl	80189e8 <_ZN8touchgfx16ImageButtonStyleINS_19ToggleButtonTriggerEE20handlePressedUpdatedEv>
    }
 8018a5c:	bf00      	nop
 8018a5e:	370c      	adds	r7, #12
 8018a60:	46bd      	mov	sp, r7
 8018a62:	bd90      	pop	{r4, r7, pc}

08018a64 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8018a64:	b580      	push	{r7, lr}
 8018a66:	b082      	sub	sp, #8
 8018a68:	af00      	add	r7, sp, #0
 8018a6a:	6078      	str	r0, [r7, #4]
 8018a6c:	4a05      	ldr	r2, [pc, #20]	; (8018a84 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	601a      	str	r2, [r3, #0]
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	4618      	mov	r0, r3
 8018a76:	f7fe f99f 	bl	8016db8 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	4618      	mov	r0, r3
 8018a7e:	3708      	adds	r7, #8
 8018a80:	46bd      	mov	sp, r7
 8018a82:	bd80      	pop	{r7, pc}
 8018a84:	080240e4 	.word	0x080240e4

08018a88 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	b082      	sub	sp, #8
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]
 8018a90:	6878      	ldr	r0, [r7, #4]
 8018a92:	f7ff ffe7 	bl	8018a64 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8018a96:	2110      	movs	r1, #16
 8018a98:	6878      	ldr	r0, [r7, #4]
 8018a9a:	f008 fb70 	bl	802117e <_ZdlPvj>
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	3708      	adds	r7, #8
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	bd80      	pop	{r7, pc}

08018aa8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b082      	sub	sp, #8
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
 8018ab0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	685b      	ldr	r3, [r3, #4]
 8018ab6:	687a      	ldr	r2, [r7, #4]
 8018ab8:	68d2      	ldr	r2, [r2, #12]
 8018aba:	1052      	asrs	r2, r2, #1
 8018abc:	1898      	adds	r0, r3, r2
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	68db      	ldr	r3, [r3, #12]
 8018ac2:	f003 0301 	and.w	r3, r3, #1
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d102      	bne.n	8018ad0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	689b      	ldr	r3, [r3, #8]
 8018ace:	e00a      	b.n	8018ae6 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	685b      	ldr	r3, [r3, #4]
 8018ad4:	687a      	ldr	r2, [r7, #4]
 8018ad6:	68d2      	ldr	r2, [r2, #12]
 8018ad8:	1052      	asrs	r2, r2, #1
 8018ada:	4413      	add	r3, r2
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	687a      	ldr	r2, [r7, #4]
 8018ae0:	6892      	ldr	r2, [r2, #8]
 8018ae2:	4413      	add	r3, r2
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	6839      	ldr	r1, [r7, #0]
 8018ae8:	4798      	blx	r3
    }
 8018aea:	bf00      	nop
 8018aec:	3708      	adds	r7, #8
 8018aee:	46bd      	mov	sp, r7
 8018af0:	bd80      	pop	{r7, pc}

08018af2 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8018af2:	b480      	push	{r7}
 8018af4:	b083      	sub	sp, #12
 8018af6:	af00      	add	r7, sp, #0
 8018af8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	685b      	ldr	r3, [r3, #4]
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d010      	beq.n	8018b24 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	689b      	ldr	r3, [r3, #8]
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d107      	bne.n	8018b1a <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	68db      	ldr	r3, [r3, #12]
 8018b0e:	f003 0301 	and.w	r3, r3, #1
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d101      	bne.n	8018b1a <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8018b16:	2301      	movs	r3, #1
 8018b18:	e000      	b.n	8018b1c <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 8018b1a:	2300      	movs	r3, #0
 8018b1c:	2b01      	cmp	r3, #1
 8018b1e:	d001      	beq.n	8018b24 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8018b20:	2301      	movs	r3, #1
 8018b22:	e000      	b.n	8018b26 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 8018b24:	2300      	movs	r3, #0
    }
 8018b26:	4618      	mov	r0, r3
 8018b28:	370c      	adds	r7, #12
 8018b2a:	46bd      	mov	sp, r7
 8018b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b30:	4770      	bx	lr

08018b32 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19ToggleButtonTriggerEEEE18handleAlphaUpdatedEv>:
    virtual void handleAlphaUpdated()
 8018b32:	b590      	push	{r4, r7, lr}
 8018b34:	b083      	sub	sp, #12
 8018b36:	af00      	add	r7, sp, #0
 8018b38:	6078      	str	r0, [r7, #4]
        text.setAlpha(T::getAlpha());
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	4618      	mov	r0, r3
 8018b44:	f7fc ff4d 	bl	80159e2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8018b48:	4603      	mov	r3, r0
 8018b4a:	4619      	mov	r1, r3
 8018b4c:	4620      	mov	r0, r4
 8018b4e:	f7f4 fae2 	bl	800d116 <_ZN8touchgfx8TextArea8setAlphaEh>
        T::handleAlphaUpdated();
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	4618      	mov	r0, r3
 8018b56:	f000 f804 	bl	8018b62 <_ZN8touchgfx16ImageButtonStyleINS_19ToggleButtonTriggerEE18handleAlphaUpdatedEv>
    }
 8018b5a:	bf00      	nop
 8018b5c:	370c      	adds	r7, #12
 8018b5e:	46bd      	mov	sp, r7
 8018b60:	bd90      	pop	{r4, r7, pc}

08018b62 <_ZN8touchgfx16ImageButtonStyleINS_19ToggleButtonTriggerEE18handleAlphaUpdatedEv>:
    virtual void handleAlphaUpdated()
 8018b62:	b590      	push	{r4, r7, lr}
 8018b64:	b083      	sub	sp, #12
 8018b66:	af00      	add	r7, sp, #0
 8018b68:	6078      	str	r0, [r7, #4]
        buttonImage.setAlpha(T::getAlpha());
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	4618      	mov	r0, r3
 8018b74:	f7fc ff35 	bl	80159e2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8018b78:	4603      	mov	r3, r0
 8018b7a:	4619      	mov	r1, r3
 8018b7c:	4620      	mov	r0, r4
 8018b7e:	f7f4 f95b 	bl	800ce38 <_ZN8touchgfx5Image8setAlphaEh>
        T::handleAlphaUpdated();
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	4618      	mov	r0, r3
 8018b86:	f7fc ff51 	bl	8015a2c <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 8018b8a:	bf00      	nop
 8018b8c:	370c      	adds	r7, #12
 8018b8e:	46bd      	mov	sp, r7
 8018b90:	bd90      	pop	{r4, r7, pc}
	...

08018b94 <_ZN8touchgfx4ViewI16NetworkPresenterED1Ev>:
class View : public Screen
 8018b94:	b580      	push	{r7, lr}
 8018b96:	b082      	sub	sp, #8
 8018b98:	af00      	add	r7, sp, #0
 8018b9a:	6078      	str	r0, [r7, #4]
 8018b9c:	4a05      	ldr	r2, [pc, #20]	; (8018bb4 <_ZN8touchgfx4ViewI16NetworkPresenterED1Ev+0x20>)
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	601a      	str	r2, [r3, #0]
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	4618      	mov	r0, r3
 8018ba6:	f7fc fe4f 	bl	8015848 <_ZN8touchgfx6ScreenD1Ev>
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	4618      	mov	r0, r3
 8018bae:	3708      	adds	r7, #8
 8018bb0:	46bd      	mov	sp, r7
 8018bb2:	bd80      	pop	{r7, pc}
 8018bb4:	08024350 	.word	0x08024350

08018bb8 <_ZN8touchgfx4ViewI16NetworkPresenterED0Ev>:
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b082      	sub	sp, #8
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	6078      	str	r0, [r7, #4]
 8018bc0:	6878      	ldr	r0, [r7, #4]
 8018bc2:	f7ff ffe7 	bl	8018b94 <_ZN8touchgfx4ViewI16NetworkPresenterED1Ev>
 8018bc6:	2140      	movs	r1, #64	; 0x40
 8018bc8:	6878      	ldr	r0, [r7, #4]
 8018bca:	f008 fad8 	bl	802117e <_ZdlPvj>
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	4618      	mov	r0, r3
 8018bd2:	3708      	adds	r7, #8
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	bd80      	pop	{r7, pc}

08018bd8 <_ZN15NetworkViewBaseD1Ev>:

class NetworkViewBase : public touchgfx::View<NetworkPresenter>
{
public:
    NetworkViewBase();
    virtual ~NetworkViewBase() {}
 8018bd8:	b580      	push	{r7, lr}
 8018bda:	b082      	sub	sp, #8
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	6078      	str	r0, [r7, #4]
 8018be0:	4a1f      	ldr	r2, [pc, #124]	; (8018c60 <_ZN15NetworkViewBaseD1Ev+0x88>)
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	601a      	str	r2, [r3, #0]
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8018bec:	4618      	mov	r0, r3
 8018bee:	f000 fb55 	bl	801929c <_ZN8touchgfx8CallbackI15NetworkViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8018bf8:	4618      	mov	r0, r3
 8018bfa:	f7fd fd07 	bl	801660c <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8018c04:	4618      	mov	r0, r3
 8018c06:	f7f4 fc2b 	bl	800d460 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8018c10:	4618      	mov	r0, r3
 8018c12:	f7f4 fc25 	bl	800d460 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8018c1c:	4618      	mov	r0, r3
 8018c1e:	f7f4 fae7 	bl	800d1f0 <_ZN8touchgfx8TextAreaD1Ev>
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8018c28:	4618      	mov	r0, r3
 8018c2a:	f7f4 f84f 	bl	800cccc <_ZN8touchgfx5ImageD1Ev>
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018c34:	4618      	mov	r0, r3
 8018c36:	f7fd fd11 	bl	801665c <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	336c      	adds	r3, #108	; 0x6c
 8018c3e:	4618      	mov	r0, r3
 8018c40:	f7fd fce4 	bl	801660c <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	3340      	adds	r3, #64	; 0x40
 8018c48:	4618      	mov	r0, r3
 8018c4a:	f7f4 f83f 	bl	800cccc <_ZN8touchgfx5ImageD1Ev>
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	4618      	mov	r0, r3
 8018c52:	f7ff ff9f 	bl	8018b94 <_ZN8touchgfx4ViewI16NetworkPresenterED1Ev>
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	4618      	mov	r0, r3
 8018c5a:	3708      	adds	r7, #8
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bd80      	pop	{r7, pc}
 8018c60:	08024300 	.word	0x08024300

08018c64 <_ZN15NetworkViewBaseD0Ev>:
 8018c64:	b580      	push	{r7, lr}
 8018c66:	b082      	sub	sp, #8
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	6078      	str	r0, [r7, #4]
 8018c6c:	6878      	ldr	r0, [r7, #4]
 8018c6e:	f7ff ffb3 	bl	8018bd8 <_ZN15NetworkViewBaseD1Ev>
 8018c72:	f44f 714f 	mov.w	r1, #828	; 0x33c
 8018c76:	6878      	ldr	r0, [r7, #4]
 8018c78:	f008 fa81 	bl	802117e <_ZdlPvj>
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	4618      	mov	r0, r3
 8018c80:	3708      	adds	r7, #8
 8018c82:	46bd      	mov	sp, r7
 8018c84:	bd80      	pop	{r7, pc}

08018c86 <_ZN15NetworkViewBase16tcpButtonPressedEv>:
    virtual void setupScreen();

    /*
     * Custom Action Handlers
     */
    virtual void tcpButtonPressed()
 8018c86:	b480      	push	{r7}
 8018c88:	b083      	sub	sp, #12
 8018c8a:	af00      	add	r7, sp, #0
 8018c8c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in NetworkView
    }
 8018c8e:	bf00      	nop
 8018c90:	370c      	adds	r7, #12
 8018c92:	46bd      	mov	sp, r7
 8018c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c98:	4770      	bx	lr

08018c9a <_ZN15NetworkViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8018c9a:	b580      	push	{r7, lr}
 8018c9c:	b082      	sub	sp, #8
 8018c9e:	af00      	add	r7, sp, #0
 8018ca0:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(Application::getInstance());
 8018ca2:	f005 f973 	bl	801df8c <_ZN8touchgfx11Application11getInstanceEv>
 8018ca6:	4603      	mov	r3, r0
    }
 8018ca8:	4618      	mov	r0, r3
 8018caa:	3708      	adds	r7, #8
 8018cac:	46bd      	mov	sp, r7
 8018cae:	bd80      	pop	{r7, pc}

08018cb0 <_ZN15NetworkViewBaseC1Ev>:
#include <gui_generated/network_screen/NetworkViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

NetworkViewBase::NetworkViewBase() :
 8018cb0:	b5b0      	push	{r4, r5, r7, lr}
 8018cb2:	b09a      	sub	sp, #104	; 0x68
 8018cb4:	af02      	add	r7, sp, #8
 8018cb6:	6078      	str	r0, [r7, #4]
    flexButtonCallback(this, &NetworkViewBase::flexButtonCallbackHandler)
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	4618      	mov	r0, r3
 8018cbc:	f000 fab8 	bl	8019230 <_ZN8touchgfx4ViewI16NetworkPresenterEC1Ev>
 8018cc0:	4ae1      	ldr	r2, [pc, #900]	; (8019048 <_ZN15NetworkViewBaseC1Ev+0x398>)
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	601a      	str	r2, [r3, #0]
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8018ccc:	f107 030c 	add.w	r3, r7, #12
 8018cd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018cd4:	4618      	mov	r0, r3
 8018cd6:	f7f3 fe87 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8018cda:	f107 030c 	add.w	r3, r7, #12
 8018cde:	4619      	mov	r1, r3
 8018ce0:	4620      	mov	r0, r4
 8018ce2:	f7f3 ffd1 	bl	800cc88 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	336c      	adds	r3, #108	; 0x6c
 8018cea:	4618      	mov	r0, r3
 8018cec:	f7fd fd1c 	bl	8016728 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	f7fd fd4e 	bl	8016798 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8018d02:	f107 0310 	add.w	r3, r7, #16
 8018d06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018d0a:	4618      	mov	r0, r3
 8018d0c:	f7f3 fe6c 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8018d10:	f107 0310 	add.w	r3, r7, #16
 8018d14:	4619      	mov	r1, r3
 8018d16:	4620      	mov	r0, r4
 8018d18:	f7f3 ffb6 	bl	800cc88 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8018d22:	4618      	mov	r0, r3
 8018d24:	f7f4 f9a6 	bl	800d074 <_ZN8touchgfx8TextAreaC1Ev>
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8018d2e:	4618      	mov	r0, r3
 8018d30:	f7f4 fab4 	bl	800d29c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8018d3a:	4618      	mov	r0, r3
 8018d3c:	f7f4 faae 	bl	800d29c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8018d46:	4618      	mov	r0, r3
 8018d48:	f7fd fcee 	bl	8016728 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8018d52:	4bbe      	ldr	r3, [pc, #760]	; (801904c <_ZN15NetworkViewBaseC1Ev+0x39c>)
 8018d54:	617b      	str	r3, [r7, #20]
 8018d56:	2300      	movs	r3, #0
 8018d58:	61bb      	str	r3, [r7, #24]
 8018d5a:	f107 0314 	add.w	r3, r7, #20
 8018d5e:	cb0c      	ldmia	r3, {r2, r3}
 8018d60:	6879      	ldr	r1, [r7, #4]
 8018d62:	f000 fa7b 	bl	801925c <_ZN8touchgfx8CallbackI15NetworkViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{
    backgroundImage.setXY(0, 0);
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	3340      	adds	r3, #64	; 0x40
 8018d6a:	2200      	movs	r2, #0
 8018d6c:	2100      	movs	r1, #0
 8018d6e:	4618      	mov	r0, r3
 8018d70:	f7f3 fa39 	bl	800c1e6 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setBitmap(Bitmap(BITMAP_BG_ID));
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8018d7a:	f107 031c 	add.w	r3, r7, #28
 8018d7e:	2100      	movs	r1, #0
 8018d80:	4618      	mov	r0, r3
 8018d82:	f7f3 fe31 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8018d86:	f107 031c 	add.w	r3, r7, #28
 8018d8a:	4619      	mov	r1, r3
 8018d8c:	4620      	mov	r0, r4
 8018d8e:	f7f4 fd6e 	bl	800d86e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    flexButton1.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8018d98:	f107 0320 	add.w	r3, r7, #32
 8018d9c:	2103      	movs	r1, #3
 8018d9e:	4618      	mov	r0, r3
 8018da0:	f7f3 fe22 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8018da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018da8:	2104      	movs	r1, #4
 8018daa:	4618      	mov	r0, r3
 8018dac:	f7f3 fe1c 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8018db0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8018db4:	f107 0320 	add.w	r3, r7, #32
 8018db8:	4619      	mov	r1, r3
 8018dba:	4620      	mov	r0, r4
 8018dbc:	f7fd fd7c 	bl	80168b8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
    flexButton1.setBitmapXY(0, 0);
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	336c      	adds	r3, #108	; 0x6c
 8018dc4:	2200      	movs	r2, #0
 8018dc6:	2100      	movs	r1, #0
 8018dc8:	4618      	mov	r0, r3
 8018dca:	f7fd fda7 	bl	801691c <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE11setBitmapXYEtt>
    flexButton1.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID), Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID));
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8018dd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018dd8:	2106      	movs	r1, #6
 8018dda:	4618      	mov	r0, r3
 8018ddc:	f7f3 fe04 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8018de0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018de4:	2106      	movs	r1, #6
 8018de6:	4618      	mov	r0, r3
 8018de8:	f7f3 fdfe 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8018dec:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8018df0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018df4:	4619      	mov	r1, r3
 8018df6:	4620      	mov	r0, r4
 8018df8:	f7fd fda5 	bl	8016946 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    flexButton1.setIconXY(15, 15);
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	336c      	adds	r3, #108	; 0x6c
 8018e00:	220f      	movs	r2, #15
 8018e02:	210f      	movs	r1, #15
 8018e04:	4618      	mov	r0, r3
 8018e06:	f7fd fde8 	bl	80169da <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE9setIconXYEss>
    flexButton1.setPosition(10, 10, 60, 60);
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8018e10:	233c      	movs	r3, #60	; 0x3c
 8018e12:	9300      	str	r3, [sp, #0]
 8018e14:	233c      	movs	r3, #60	; 0x3c
 8018e16:	220a      	movs	r2, #10
 8018e18:	210a      	movs	r1, #10
 8018e1a:	f7f3 f97f 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    flexButton1.setAction(flexButtonCallback);
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8018e2a:	4619      	mov	r1, r3
 8018e2c:	4610      	mov	r0, r2
 8018e2e:	f7fc fde5 	bl	80159fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    tcpButton.setBitmaps(Bitmap(BITMAP_SMALL_BTN_ID), Bitmap(BITMAP_SMALL_BTN_PRESSED_ID));
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8018e38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018e3c:	210f      	movs	r1, #15
 8018e3e:	4618      	mov	r0, r3
 8018e40:	f7f3 fdd2 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8018e44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018e48:	2111      	movs	r1, #17
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	f7f3 fdcc 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8018e50:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8018e54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018e58:	4619      	mov	r1, r3
 8018e5a:	4620      	mov	r0, r4
 8018e5c:	f7fd fd2c 	bl	80168b8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
    tcpButton.setBitmapXY(0, 0);
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018e66:	2200      	movs	r2, #0
 8018e68:	2100      	movs	r1, #0
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	f7fd fd56 	bl	801691c <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE11setBitmapXYEtt>
    tcpButton.setText(TypedText(T_SINGLEUSEID19));
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8018e76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018e7a:	210a      	movs	r1, #10
 8018e7c:	4618      	mov	r0, r3
 8018e7e:	f7f4 f849 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 8018e82:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8018e84:	4620      	mov	r0, r4
 8018e86:	f7fd fdc0 	bl	8016a0a <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
    tcpButton.setTextPosition(0, 19, 100, 56);
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8018e90:	2338      	movs	r3, #56	; 0x38
 8018e92:	9300      	str	r3, [sp, #0]
 8018e94:	2364      	movs	r3, #100	; 0x64
 8018e96:	2213      	movs	r2, #19
 8018e98:	2100      	movs	r1, #0
 8018e9a:	f7fd fddd 	bl	8016a58 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    tcpButton.setTextColors(touchgfx::Color::getColorFrom24BitRGB(70, 70, 70), touchgfx::Color::getColorFrom24BitRGB(231, 154, 9));
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8018ea4:	2246      	movs	r2, #70	; 0x46
 8018ea6:	2146      	movs	r1, #70	; 0x46
 8018ea8:	2046      	movs	r0, #70	; 0x46
 8018eaa:	f006 fd01 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8018eae:	4605      	mov	r5, r0
 8018eb0:	2209      	movs	r2, #9
 8018eb2:	219a      	movs	r1, #154	; 0x9a
 8018eb4:	20e7      	movs	r0, #231	; 0xe7
 8018eb6:	f006 fcfb 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8018eba:	4603      	mov	r3, r0
 8018ebc:	461a      	mov	r2, r3
 8018ebe:	4629      	mov	r1, r5
 8018ec0:	4620      	mov	r0, r4
 8018ec2:	f7fd fde9 	bl	8016a98 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    tcpButton.setPosition(154, 184, 100, 56);
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8018ecc:	2338      	movs	r3, #56	; 0x38
 8018ece:	9300      	str	r3, [sp, #0]
 8018ed0:	2364      	movs	r3, #100	; 0x64
 8018ed2:	22b8      	movs	r2, #184	; 0xb8
 8018ed4:	219a      	movs	r1, #154	; 0x9a
 8018ed6:	f7f3 f921 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    tcpButton.setAction(flexButtonCallback);
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8018ee6:	4619      	mov	r1, r3
 8018ee8:	4610      	mov	r0, r2
 8018eea:	f7fc fd87 	bl	80159fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    image1.setXY(155, 108);
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8018ef4:	226c      	movs	r2, #108	; 0x6c
 8018ef6:	219b      	movs	r1, #155	; 0x9b
 8018ef8:	4618      	mov	r0, r3
 8018efa:	f7f3 f974 	bl	800c1e6 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(Bitmap(BITMAP_BTN_LONG_ID));
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8018f04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018f08:	210a      	movs	r1, #10
 8018f0a:	4618      	mov	r0, r3
 8018f0c:	f7f3 fd6c 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 8018f10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018f14:	4619      	mov	r1, r3
 8018f16:	4620      	mov	r0, r4
 8018f18:	f7f4 fca9 	bl	800d86e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1.setXY(80, 127);
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8018f22:	227f      	movs	r2, #127	; 0x7f
 8018f24:	2150      	movs	r1, #80	; 0x50
 8018f26:	4618      	mov	r0, r3
 8018f28:	f7f3 f95d 	bl	800c1e6 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 8018f32:	22ff      	movs	r2, #255	; 0xff
 8018f34:	21ff      	movs	r1, #255	; 0xff
 8018f36:	20ff      	movs	r0, #255	; 0xff
 8018f38:	f006 fcba 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8018f3c:	4603      	mov	r3, r0
 8018f3e:	4619      	mov	r1, r3
 8018f40:	4620      	mov	r0, r4
 8018f42:	f7f4 f8da 	bl	800d0fa <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8018f4c:	2100      	movs	r1, #0
 8018f4e:	4618      	mov	r0, r3
 8018f50:	f7fc ff8e 	bl	8015e70 <_ZN8touchgfx8TextArea14setLinespacingEt>
    textArea1.setTypedText(TypedText(T_SINGLEUSEID20));
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 8018f5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018f5e:	210b      	movs	r1, #11
 8018f60:	4618      	mov	r0, r3
 8018f62:	f7f3 ffd7 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 8018f66:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8018f6a:	4620      	mov	r0, r4
 8018f6c:	f7f4 fea8 	bl	800dcc0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ipAddrText.setPosition(169, 127, 170, 18);
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	f503 7000 	add.w	r0, r3, #512	; 0x200
 8018f76:	2312      	movs	r3, #18
 8018f78:	9300      	str	r3, [sp, #0]
 8018f7a:	23aa      	movs	r3, #170	; 0xaa
 8018f7c:	227f      	movs	r2, #127	; 0x7f
 8018f7e:	21a9      	movs	r1, #169	; 0xa9
 8018f80:	f7f3 f8cc 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    ipAddrText.setColor(touchgfx::Color::getColorFrom24BitRGB(69, 69, 69));
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	f503 7400 	add.w	r4, r3, #512	; 0x200
 8018f8a:	2245      	movs	r2, #69	; 0x45
 8018f8c:	2145      	movs	r1, #69	; 0x45
 8018f8e:	2045      	movs	r0, #69	; 0x45
 8018f90:	f006 fc8e 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8018f94:	4603      	mov	r3, r0
 8018f96:	4619      	mov	r1, r3
 8018f98:	4620      	mov	r0, r4
 8018f9a:	f7f4 f8ae 	bl	800d0fa <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ipAddrText.setLinespacing(0);
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8018fa4:	2100      	movs	r1, #0
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	f7fc ff62 	bl	8015e70 <_ZN8touchgfx8TextArea14setLinespacingEt>
    Unicode::snprintf(ipAddrTextBuffer, IPADDRTEXT_SIZE, "%s", TypedText(T_SINGLEUSEID25).getText());
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	f503 7441 	add.w	r4, r3, #772	; 0x304
 8018fb2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018fb6:	2110      	movs	r1, #16
 8018fb8:	4618      	mov	r0, r3
 8018fba:	f7f3 ffab 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 8018fbe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	f7f3 ffca 	bl	800cf5c <_ZNK8touchgfx9TypedText7getTextEv>
 8018fc8:	4603      	mov	r3, r0
 8018fca:	4a21      	ldr	r2, [pc, #132]	; (8019050 <_ZN15NetworkViewBaseC1Ev+0x3a0>)
 8018fcc:	2110      	movs	r1, #16
 8018fce:	4620      	mov	r0, r4
 8018fd0:	f006 fc60 	bl	801f894 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    ipAddrText.setWildcard(ipAddrTextBuffer);
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8018fe0:	4619      	mov	r1, r3
 8018fe2:	4610      	mov	r0, r2
 8018fe4:	f7f4 f9f4 	bl	800d3d0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ipAddrText.setTypedText(TypedText(T_IPADDRTEXT));
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	f503 7400 	add.w	r4, r3, #512	; 0x200
 8018fee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018ff2:	210e      	movs	r1, #14
 8018ff4:	4618      	mov	r0, r3
 8018ff6:	f7f3 ff8d 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 8018ffa:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8018ffe:	4620      	mov	r0, r4
 8019000:	f7f4 fe5e 	bl	800dcc0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    countTxt.setXY(179, 175);
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	f503 730e 	add.w	r3, r3, #568	; 0x238
 801900a:	22af      	movs	r2, #175	; 0xaf
 801900c:	21b3      	movs	r1, #179	; 0xb3
 801900e:	4618      	mov	r0, r3
 8019010:	f7f3 f8e9 	bl	800c1e6 <_ZN8touchgfx8Drawable5setXYEss>
    countTxt.setColor(touchgfx::Color::getColorFrom24BitRGB(222, 222, 222));
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	f503 740e 	add.w	r4, r3, #568	; 0x238
 801901a:	22de      	movs	r2, #222	; 0xde
 801901c:	21de      	movs	r1, #222	; 0xde
 801901e:	20de      	movs	r0, #222	; 0xde
 8019020:	f006 fc46 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8019024:	4603      	mov	r3, r0
 8019026:	4619      	mov	r1, r3
 8019028:	4620      	mov	r0, r4
 801902a:	f7f4 f866 	bl	800d0fa <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    countTxt.setLinespacing(0);
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8019034:	2100      	movs	r1, #0
 8019036:	4618      	mov	r0, r3
 8019038:	f7fc ff1a 	bl	8015e70 <_ZN8touchgfx8TextArea14setLinespacingEt>
    countTxtBuffer[0] = 0;
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	2200      	movs	r2, #0
 8019040:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324
 8019044:	e006      	b.n	8019054 <_ZN15NetworkViewBaseC1Ev+0x3a4>
 8019046:	bf00      	nop
 8019048:	08024300 	.word	0x08024300
 801904c:	080191d1 	.word	0x080191d1
 8019050:	08022a28 	.word	0x08022a28
    countTxt.setWildcard(countTxtBuffer);
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	f503 720e 	add.w	r2, r3, #568	; 0x238
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8019060:	4619      	mov	r1, r3
 8019062:	4610      	mov	r0, r2
 8019064:	f7f4 f9b4 	bl	800d3d0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    countTxt.resizeToCurrentText();
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 801906e:	4618      	mov	r0, r3
 8019070:	f7f4 fe48 	bl	800dd04 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    countTxt.setTypedText(TypedText(T_IPADDRTEXT));
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	f503 740e 	add.w	r4, r3, #568	; 0x238
 801907a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801907e:	210e      	movs	r1, #14
 8019080:	4618      	mov	r0, r3
 8019082:	f7f3 ff47 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 8019086:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 801908a:	4620      	mov	r0, r4
 801908c:	f7f4 fe18 	bl	800dcc0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    refreshButton.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	f503 741c 	add.w	r4, r3, #624	; 0x270
 8019096:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801909a:	2103      	movs	r1, #3
 801909c:	4618      	mov	r0, r3
 801909e:	f7f3 fca3 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80190a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80190a6:	2104      	movs	r1, #4
 80190a8:	4618      	mov	r0, r3
 80190aa:	f7f3 fc9d 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80190ae:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80190b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80190b6:	4619      	mov	r1, r3
 80190b8:	4620      	mov	r0, r4
 80190ba:	f7fd fbfd 	bl	80168b8 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
    refreshButton.setBitmapXY(0, 0);
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80190c4:	2200      	movs	r2, #0
 80190c6:	2100      	movs	r1, #0
 80190c8:	4618      	mov	r0, r3
 80190ca:	f7fd fc27 	bl	801691c <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE11setBitmapXYEtt>
    refreshButton.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_REFRESH_32_ID), Bitmap(BITMAP_BLUE_ICONS_REFRESH_32_ID));
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	f503 741c 	add.w	r4, r3, #624	; 0x270
 80190d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80190d8:	2107      	movs	r1, #7
 80190da:	4618      	mov	r0, r3
 80190dc:	f7f3 fc84 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80190e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80190e4:	2107      	movs	r1, #7
 80190e6:	4618      	mov	r0, r3
 80190e8:	f7f3 fc7e 	bl	800c9e8 <_ZN8touchgfx6BitmapC1Et>
 80190ec:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80190f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80190f4:	4619      	mov	r1, r3
 80190f6:	4620      	mov	r0, r4
 80190f8:	f7fd fc25 	bl	8016946 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    refreshButton.setIconXY(15, 15);
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8019102:	220f      	movs	r2, #15
 8019104:	210f      	movs	r1, #15
 8019106:	4618      	mov	r0, r3
 8019108:	f7fd fc67 	bl	80169da <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE9setIconXYEss>
    refreshButton.setPosition(404, 10, 60, 60);
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	f503 701c 	add.w	r0, r3, #624	; 0x270
 8019112:	233c      	movs	r3, #60	; 0x3c
 8019114:	9300      	str	r3, [sp, #0]
 8019116:	233c      	movs	r3, #60	; 0x3c
 8019118:	220a      	movs	r2, #10
 801911a:	f44f 71ca 	mov.w	r1, #404	; 0x194
 801911e:	f7f2 fffd 	bl	800c11c <_ZN8touchgfx8Drawable11setPositionEssss>
    refreshButton.setAction(flexButtonCallback);
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	f503 721c 	add.w	r2, r3, #624	; 0x270
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 801912e:	4619      	mov	r1, r3
 8019130:	4610      	mov	r0, r2
 8019132:	f7fc fc63 	bl	80159fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(backgroundImage);
 8019136:	687a      	ldr	r2, [r7, #4]
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	3340      	adds	r3, #64	; 0x40
 801913c:	4619      	mov	r1, r3
 801913e:	4610      	mov	r0, r2
 8019140:	f7fc fbda 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(flexButton1);
 8019144:	687a      	ldr	r2, [r7, #4]
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	336c      	adds	r3, #108	; 0x6c
 801914a:	4619      	mov	r1, r3
 801914c:	4610      	mov	r0, r2
 801914e:	f7fc fbd3 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tcpButton);
 8019152:	687a      	ldr	r2, [r7, #4]
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801915a:	4619      	mov	r1, r3
 801915c:	4610      	mov	r0, r2
 801915e:	f7fc fbcb 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 8019162:	687a      	ldr	r2, [r7, #4]
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 801916a:	4619      	mov	r1, r3
 801916c:	4610      	mov	r0, r2
 801916e:	f7fc fbc3 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8019172:	687a      	ldr	r2, [r7, #4]
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 801917a:	4619      	mov	r1, r3
 801917c:	4610      	mov	r0, r2
 801917e:	f7fc fbbb 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ipAddrText);
 8019182:	687a      	ldr	r2, [r7, #4]
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801918a:	4619      	mov	r1, r3
 801918c:	4610      	mov	r0, r2
 801918e:	f7fc fbb3 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(countTxt);
 8019192:	687a      	ldr	r2, [r7, #4]
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	f503 730e 	add.w	r3, r3, #568	; 0x238
 801919a:	4619      	mov	r1, r3
 801919c:	4610      	mov	r0, r2
 801919e:	f7fc fbab 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(refreshButton);
 80191a2:	687a      	ldr	r2, [r7, #4]
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80191aa:	4619      	mov	r1, r3
 80191ac:	4610      	mov	r0, r2
 80191ae:	f7fc fba3 	bl	80158f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	4618      	mov	r0, r3
 80191b6:	3760      	adds	r7, #96	; 0x60
 80191b8:	46bd      	mov	sp, r7
 80191ba:	bdb0      	pop	{r4, r5, r7, pc}

080191bc <_ZN15NetworkViewBase11setupScreenEv>:

void NetworkViewBase::setupScreen()
{
 80191bc:	b480      	push	{r7}
 80191be:	b083      	sub	sp, #12
 80191c0:	af00      	add	r7, sp, #0
 80191c2:	6078      	str	r0, [r7, #4]

}
 80191c4:	bf00      	nop
 80191c6:	370c      	adds	r7, #12
 80191c8:	46bd      	mov	sp, r7
 80191ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ce:	4770      	bx	lr

080191d0 <_ZN15NetworkViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void NetworkViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 80191d0:	b580      	push	{r7, lr}
 80191d2:	b082      	sub	sp, #8
 80191d4:	af00      	add	r7, sp, #0
 80191d6:	6078      	str	r0, [r7, #4]
 80191d8:	6039      	str	r1, [r7, #0]
    if (&src == &flexButton1)
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	336c      	adds	r3, #108	; 0x6c
 80191de:	683a      	ldr	r2, [r7, #0]
 80191e0:	429a      	cmp	r2, r3
 80191e2:	d107      	bne.n	80191f4 <_ZN15NetworkViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x24>
    {
        //goHome
        //When flexButton1 clicked change screen to Main
        //Go to Main with no screen transition
        application().gotoMainScreenNoTransition();
 80191e4:	6878      	ldr	r0, [r7, #4]
 80191e6:	f7ff fd58 	bl	8018c9a <_ZN15NetworkViewBase11applicationEv>
 80191ea:	4603      	mov	r3, r0
 80191ec:	4618      	mov	r0, r3
 80191ee:	f7fa fd1d 	bl	8013c2c <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
        //refresh
        //When refreshButton clicked change screen to Network
        //Go to Network with no screen transition
        application().gotoNetworkScreenNoTransition();
    }
}
 80191f2:	e019      	b.n	8019228 <_ZN15NetworkViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x58>
    else if (&src == &tcpButton)
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80191fa:	683a      	ldr	r2, [r7, #0]
 80191fc:	429a      	cmp	r2, r3
 80191fe:	d106      	bne.n	801920e <_ZN15NetworkViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x3e>
        tcpButtonPressed();
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	332c      	adds	r3, #44	; 0x2c
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	6878      	ldr	r0, [r7, #4]
 801920a:	4798      	blx	r3
}
 801920c:	e00c      	b.n	8019228 <_ZN15NetworkViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x58>
    else if (&src == &refreshButton)
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8019214:	683a      	ldr	r2, [r7, #0]
 8019216:	429a      	cmp	r2, r3
 8019218:	d106      	bne.n	8019228 <_ZN15NetworkViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x58>
        application().gotoNetworkScreenNoTransition();
 801921a:	6878      	ldr	r0, [r7, #4]
 801921c:	f7ff fd3d 	bl	8018c9a <_ZN15NetworkViewBase11applicationEv>
 8019220:	4603      	mov	r3, r0
 8019222:	4618      	mov	r0, r3
 8019224:	f7fa fe1a 	bl	8013e5c <_ZN23FrontendApplicationBase29gotoNetworkScreenNoTransitionEv>
}
 8019228:	bf00      	nop
 801922a:	3708      	adds	r7, #8
 801922c:	46bd      	mov	sp, r7
 801922e:	bd80      	pop	{r7, pc}

08019230 <_ZN8touchgfx4ViewI16NetworkPresenterEC1Ev>:
    View() : presenter(0)
 8019230:	b580      	push	{r7, lr}
 8019232:	b082      	sub	sp, #8
 8019234:	af00      	add	r7, sp, #0
 8019236:	6078      	str	r0, [r7, #4]
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	4618      	mov	r0, r3
 801923c:	f005 fd7e 	bl	801ed3c <_ZN8touchgfx6ScreenC1Ev>
 8019240:	4a05      	ldr	r2, [pc, #20]	; (8019258 <_ZN8touchgfx4ViewI16NetworkPresenterEC1Ev+0x28>)
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	601a      	str	r2, [r3, #0]
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	2200      	movs	r2, #0
 801924a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	4618      	mov	r0, r3
 8019250:	3708      	adds	r7, #8
 8019252:	46bd      	mov	sp, r7
 8019254:	bd80      	pop	{r7, pc}
 8019256:	bf00      	nop
 8019258:	08024350 	.word	0x08024350

0801925c <_ZN8touchgfx8CallbackI15NetworkViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801925c:	b580      	push	{r7, lr}
 801925e:	b084      	sub	sp, #16
 8019260:	af00      	add	r7, sp, #0
 8019262:	60f8      	str	r0, [r7, #12]
 8019264:	60b9      	str	r1, [r7, #8]
 8019266:	4639      	mov	r1, r7
 8019268:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801926c:	68fb      	ldr	r3, [r7, #12]
 801926e:	4618      	mov	r0, r3
 8019270:	f7fd faf2 	bl	8016858 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 8019274:	4a08      	ldr	r2, [pc, #32]	; (8019298 <_ZN8touchgfx8CallbackI15NetworkViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	68ba      	ldr	r2, [r7, #8]
 801927e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8019280:	68fb      	ldr	r3, [r7, #12]
 8019282:	3308      	adds	r3, #8
 8019284:	463a      	mov	r2, r7
 8019286:	e892 0003 	ldmia.w	r2, {r0, r1}
 801928a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801928e:	68fb      	ldr	r3, [r7, #12]
 8019290:	4618      	mov	r0, r3
 8019292:	3710      	adds	r7, #16
 8019294:	46bd      	mov	sp, r7
 8019296:	bd80      	pop	{r7, pc}
 8019298:	08024338 	.word	0x08024338

0801929c <_ZN8touchgfx8CallbackI15NetworkViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801929c:	b580      	push	{r7, lr}
 801929e:	b082      	sub	sp, #8
 80192a0:	af00      	add	r7, sp, #0
 80192a2:	6078      	str	r0, [r7, #4]
 80192a4:	4a05      	ldr	r2, [pc, #20]	; (80192bc <_ZN8touchgfx8CallbackI15NetworkViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	601a      	str	r2, [r3, #0]
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	4618      	mov	r0, r3
 80192ae:	f7fd fd83 	bl	8016db8 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	4618      	mov	r0, r3
 80192b6:	3708      	adds	r7, #8
 80192b8:	46bd      	mov	sp, r7
 80192ba:	bd80      	pop	{r7, pc}
 80192bc:	08024338 	.word	0x08024338

080192c0 <_ZN8touchgfx8CallbackI15NetworkViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 80192c0:	b580      	push	{r7, lr}
 80192c2:	b082      	sub	sp, #8
 80192c4:	af00      	add	r7, sp, #0
 80192c6:	6078      	str	r0, [r7, #4]
 80192c8:	6878      	ldr	r0, [r7, #4]
 80192ca:	f7ff ffe7 	bl	801929c <_ZN8touchgfx8CallbackI15NetworkViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 80192ce:	2110      	movs	r1, #16
 80192d0:	6878      	ldr	r0, [r7, #4]
 80192d2:	f007 ff54 	bl	802117e <_ZdlPvj>
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	4618      	mov	r0, r3
 80192da:	3708      	adds	r7, #8
 80192dc:	46bd      	mov	sp, r7
 80192de:	bd80      	pop	{r7, pc}

080192e0 <_ZN8touchgfx8CallbackI15NetworkViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80192e0:	b580      	push	{r7, lr}
 80192e2:	b082      	sub	sp, #8
 80192e4:	af00      	add	r7, sp, #0
 80192e6:	6078      	str	r0, [r7, #4]
 80192e8:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	685b      	ldr	r3, [r3, #4]
 80192ee:	687a      	ldr	r2, [r7, #4]
 80192f0:	68d2      	ldr	r2, [r2, #12]
 80192f2:	1052      	asrs	r2, r2, #1
 80192f4:	1898      	adds	r0, r3, r2
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	68db      	ldr	r3, [r3, #12]
 80192fa:	f003 0301 	and.w	r3, r3, #1
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d102      	bne.n	8019308 <_ZN8touchgfx8CallbackI15NetworkViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	689b      	ldr	r3, [r3, #8]
 8019306:	e00a      	b.n	801931e <_ZN8touchgfx8CallbackI15NetworkViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	685b      	ldr	r3, [r3, #4]
 801930c:	687a      	ldr	r2, [r7, #4]
 801930e:	68d2      	ldr	r2, [r2, #12]
 8019310:	1052      	asrs	r2, r2, #1
 8019312:	4413      	add	r3, r2
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	687a      	ldr	r2, [r7, #4]
 8019318:	6892      	ldr	r2, [r2, #8]
 801931a:	4413      	add	r3, r2
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	6839      	ldr	r1, [r7, #0]
 8019320:	4798      	blx	r3
    }
 8019322:	bf00      	nop
 8019324:	3708      	adds	r7, #8
 8019326:	46bd      	mov	sp, r7
 8019328:	bd80      	pop	{r7, pc}

0801932a <_ZNK8touchgfx8CallbackI15NetworkViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 801932a:	b480      	push	{r7}
 801932c:	b083      	sub	sp, #12
 801932e:	af00      	add	r7, sp, #0
 8019330:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	685b      	ldr	r3, [r3, #4]
 8019336:	2b00      	cmp	r3, #0
 8019338:	d010      	beq.n	801935c <_ZNK8touchgfx8CallbackI15NetworkViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	689b      	ldr	r3, [r3, #8]
 801933e:	2b00      	cmp	r3, #0
 8019340:	d107      	bne.n	8019352 <_ZNK8touchgfx8CallbackI15NetworkViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	68db      	ldr	r3, [r3, #12]
 8019346:	f003 0301 	and.w	r3, r3, #1
 801934a:	2b00      	cmp	r3, #0
 801934c:	d101      	bne.n	8019352 <_ZNK8touchgfx8CallbackI15NetworkViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 801934e:	2301      	movs	r3, #1
 8019350:	e000      	b.n	8019354 <_ZNK8touchgfx8CallbackI15NetworkViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 8019352:	2300      	movs	r3, #0
 8019354:	2b01      	cmp	r3, #1
 8019356:	d001      	beq.n	801935c <_ZNK8touchgfx8CallbackI15NetworkViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8019358:	2301      	movs	r3, #1
 801935a:	e000      	b.n	801935e <_ZNK8touchgfx8CallbackI15NetworkViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 801935c:	2300      	movs	r3, #0
    }
 801935e:	4618      	mov	r0, r3
 8019360:	370c      	adds	r7, #12
 8019362:	46bd      	mov	sp, r7
 8019364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019368:	4770      	bx	lr
	...

0801936c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 801936c:	b480      	push	{r7}
 801936e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8019370:	4b02      	ldr	r3, [pc, #8]	; (801937c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8019372:	4618      	mov	r0, r3
 8019374:	46bd      	mov	sp, r7
 8019376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801937a:	4770      	bx	lr
 801937c:	0802437c 	.word	0x0802437c

08019380 <_ZN14BitmapDatabase15getInstanceSizeEv>:
uint16_t getInstanceSize()
{
 8019380:	b480      	push	{r7}
 8019382:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8019384:	2312      	movs	r3, #18
}
 8019386:	4618      	mov	r0, r3
 8019388:	46bd      	mov	sp, r7
 801938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801938e:	4770      	bx	lr

08019390 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8019390:	b480      	push	{r7}
 8019392:	b085      	sub	sp, #20
 8019394:	af00      	add	r7, sp, #0
 8019396:	60f8      	str	r0, [r7, #12]
 8019398:	60b9      	str	r1, [r7, #8]
 801939a:	4613      	mov	r3, r2
 801939c:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 801939e:	4a07      	ldr	r2, [pc, #28]	; (80193bc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	6013      	str	r3, [r2, #0]
        fonts = f;
 80193a4:	4a06      	ldr	r2, [pc, #24]	; (80193c0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80193a6:	68bb      	ldr	r3, [r7, #8]
 80193a8:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80193aa:	4a06      	ldr	r2, [pc, #24]	; (80193c4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80193ac:	88fb      	ldrh	r3, [r7, #6]
 80193ae:	8013      	strh	r3, [r2, #0]
    }
 80193b0:	bf00      	nop
 80193b2:	3714      	adds	r7, #20
 80193b4:	46bd      	mov	sp, r7
 80193b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ba:	4770      	bx	lr
 80193bc:	2000a38c 	.word	0x2000a38c
 80193c0:	2000a394 	.word	0x2000a394
 80193c4:	2000a390 	.word	0x2000a390

080193c8 <_ZN8touchgfx5Texts11setLanguageEt>:

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
const touchgfx::Unicode::UnicodeChar* const* touchgfx::Texts::currentLanguagePtr = languagesArray[currentLanguage];

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80193c8:	b5b0      	push	{r4, r5, r7, lr}
 80193ca:	b082      	sub	sp, #8
 80193cc:	af00      	add	r7, sp, #0
 80193ce:	4603      	mov	r3, r0
 80193d0:	80fb      	strh	r3, [r7, #6]
    currentLanguage = id;
 80193d2:	4a0d      	ldr	r2, [pc, #52]	; (8019408 <_ZN8touchgfx5Texts11setLanguageEt+0x40>)
 80193d4:	88fb      	ldrh	r3, [r7, #6]
 80193d6:	8013      	strh	r3, [r2, #0]
    currentLanguagePtr = languagesArray[currentLanguage];
 80193d8:	4a0c      	ldr	r2, [pc, #48]	; (801940c <_ZN8touchgfx5Texts11setLanguageEt+0x44>)
 80193da:	4b0d      	ldr	r3, [pc, #52]	; (8019410 <_ZN8touchgfx5Texts11setLanguageEt+0x48>)
 80193dc:	601a      	str	r2, [r3, #0]

    touchgfx::TypedText::registerTypedTextDatabase(TypedTextDatabase::getInstance(currentLanguage),
 80193de:	4b0a      	ldr	r3, [pc, #40]	; (8019408 <_ZN8touchgfx5Texts11setLanguageEt+0x40>)
 80193e0:	881b      	ldrh	r3, [r3, #0]
 80193e2:	4618      	mov	r0, r3
 80193e4:	f000 f838 	bl	8019458 <_ZN17TypedTextDatabase11getInstanceEt>
 80193e8:	4604      	mov	r4, r0
 80193ea:	f000 f84b 	bl	8019484 <_ZN17TypedTextDatabase8getFontsEv>
 80193ee:	4605      	mov	r5, r0
 80193f0:	f000 f840 	bl	8019474 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80193f4:	4603      	mov	r3, r0
 80193f6:	461a      	mov	r2, r3
 80193f8:	4629      	mov	r1, r5
 80193fa:	4620      	mov	r0, r4
 80193fc:	f7ff ffc8 	bl	8019390 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
                                                   TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
}
 8019400:	bf00      	nop
 8019402:	3708      	adds	r7, #8
 8019404:	46bd      	mov	sp, r7
 8019406:	bdb0      	pop	{r4, r5, r7, pc}
 8019408:	20008f08 	.word	0x20008f08
 801940c:	080cd9ac 	.word	0x080cd9ac
 8019410:	20008f0c 	.word	0x20008f0c

08019414 <_Z41__static_initialization_and_destruction_0ii>:
 8019414:	b480      	push	{r7}
 8019416:	b083      	sub	sp, #12
 8019418:	af00      	add	r7, sp, #0
 801941a:	6078      	str	r0, [r7, #4]
 801941c:	6039      	str	r1, [r7, #0]
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	2b01      	cmp	r3, #1
 8019422:	d107      	bne.n	8019434 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8019424:	683b      	ldr	r3, [r7, #0]
 8019426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801942a:	4293      	cmp	r3, r2
 801942c:	d102      	bne.n	8019434 <_Z41__static_initialization_and_destruction_0ii+0x20>
const touchgfx::Unicode::UnicodeChar* const* touchgfx::Texts::currentLanguagePtr = languagesArray[currentLanguage];
 801942e:	4a04      	ldr	r2, [pc, #16]	; (8019440 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8019430:	4b04      	ldr	r3, [pc, #16]	; (8019444 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8019432:	601a      	str	r2, [r3, #0]
}
 8019434:	bf00      	nop
 8019436:	370c      	adds	r7, #12
 8019438:	46bd      	mov	sp, r7
 801943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801943e:	4770      	bx	lr
 8019440:	080cd9ac 	.word	0x080cd9ac
 8019444:	20008f0c 	.word	0x20008f0c

08019448 <_GLOBAL__sub_I__ZN8touchgfx4Font22getStringWidthFunctionE>:
 8019448:	b580      	push	{r7, lr}
 801944a:	af00      	add	r7, sp, #0
 801944c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019450:	2001      	movs	r0, #1
 8019452:	f7ff ffdf 	bl	8019414 <_Z41__static_initialization_and_destruction_0ii>
 8019456:	bd80      	pop	{r7, pc}

08019458 <_ZN17TypedTextDatabase11getInstanceEt>:
};

namespace TypedTextDatabase
{
const touchgfx::TypedText::TypedTextData* getInstance(touchgfx::LanguageId id)
{
 8019458:	b480      	push	{r7}
 801945a:	b083      	sub	sp, #12
 801945c:	af00      	add	r7, sp, #0
 801945e:	4603      	mov	r3, r0
 8019460:	80fb      	strh	r3, [r7, #6]
    return typedTextDatabaseArray[id];
 8019462:	4b03      	ldr	r3, [pc, #12]	; (8019470 <_ZN17TypedTextDatabase11getInstanceEt+0x18>)
}
 8019464:	4618      	mov	r0, r3
 8019466:	370c      	adds	r7, #12
 8019468:	46bd      	mov	sp, r7
 801946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801946e:	4770      	bx	lr
 8019470:	080cd9f0 	.word	0x080cd9f0

08019474 <_ZN17TypedTextDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8019474:	b480      	push	{r7}
 8019476:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8019478:	2311      	movs	r3, #17
}
 801947a:	4618      	mov	r0, r3
 801947c:	46bd      	mov	sp, r7
 801947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019482:	4770      	bx	lr

08019484 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font* const* getFonts()
{
 8019484:	b480      	push	{r7}
 8019486:	af00      	add	r7, sp, #0
    return _fonts;
 8019488:	4b02      	ldr	r3, [pc, #8]	; (8019494 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801948a:	4618      	mov	r0, r3
 801948c:	46bd      	mov	sp, r7
 801948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019492:	4770      	bx	lr
 8019494:	20008f10 	.word	0x20008f10

08019498 <_Z41__static_initialization_and_destruction_0ii>:
}
 8019498:	b580      	push	{r7, lr}
 801949a:	b082      	sub	sp, #8
 801949c:	af00      	add	r7, sp, #0
 801949e:	6078      	str	r0, [r7, #4]
 80194a0:	6039      	str	r1, [r7, #0]
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	2b01      	cmp	r3, #1
 80194a6:	d118      	bne.n	80194da <_Z41__static_initialization_and_destruction_0ii+0x42>
 80194a8:	683b      	ldr	r3, [r7, #0]
 80194aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80194ae:	4293      	cmp	r3, r2
 80194b0:	d113      	bne.n	80194da <_Z41__static_initialization_and_destruction_0ii+0x42>
    &(getFont_Asap_Regular_80_4bpp()),
 80194b2:	f7fa f82f 	bl	8013514 <_Z28getFont_Asap_Regular_80_4bppv>
 80194b6:	4602      	mov	r2, r0
};
 80194b8:	4b0a      	ldr	r3, [pc, #40]	; (80194e4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80194ba:	601a      	str	r2, [r3, #0]
    &(getFont_Asap_Regular_27_4bpp()),
 80194bc:	f7f9 ffec 	bl	8013498 <_Z28getFont_Asap_Regular_27_4bppv>
 80194c0:	4602      	mov	r2, r0
};
 80194c2:	4b08      	ldr	r3, [pc, #32]	; (80194e4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80194c4:	605a      	str	r2, [r3, #4]
    &(getFont_Asap_Regular_15_4bpp()),
 80194c6:	f7f9 ffa9 	bl	801341c <_Z28getFont_Asap_Regular_15_4bppv>
 80194ca:	4602      	mov	r2, r0
};
 80194cc:	4b05      	ldr	r3, [pc, #20]	; (80194e4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80194ce:	609a      	str	r2, [r3, #8]
    &(getFont_arial_15_4bpp())
 80194d0:	f7fa f85e 	bl	8013590 <_Z21getFont_arial_15_4bppv>
 80194d4:	4602      	mov	r2, r0
};
 80194d6:	4b03      	ldr	r3, [pc, #12]	; (80194e4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80194d8:	60da      	str	r2, [r3, #12]
}
 80194da:	bf00      	nop
 80194dc:	3708      	adds	r7, #8
 80194de:	46bd      	mov	sp, r7
 80194e0:	bd80      	pop	{r7, pc}
 80194e2:	bf00      	nop
 80194e4:	20008f10 	.word	0x20008f10

080194e8 <_GLOBAL__sub_I__ZN17TypedTextDatabase11getInstanceEt>:
 80194e8:	b580      	push	{r7, lr}
 80194ea:	af00      	add	r7, sp, #0
 80194ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80194f0:	2001      	movs	r0, #1
 80194f2:	f7ff ffd1 	bl	8019498 <_Z41__static_initialization_and_destruction_0ii>
 80194f6:	bd80      	pop	{r7, pc}

080194f8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80194f8:	b580      	push	{r7, lr}
 80194fa:	b082      	sub	sp, #8
 80194fc:	af00      	add	r7, sp, #0
 80194fe:	6078      	str	r0, [r7, #4]
 8019500:	4a05      	ldr	r2, [pc, #20]	; (8019518 <_ZN19FrontendApplicationD1Ev+0x20>)
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	601a      	str	r2, [r3, #0]
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	4618      	mov	r0, r3
 801950a:	f7fa fac7 	bl	8013a9c <_ZN23FrontendApplicationBaseD1Ev>
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	4618      	mov	r0, r3
 8019512:	3708      	adds	r7, #8
 8019514:	46bd      	mov	sp, r7
 8019516:	bd80      	pop	{r7, pc}
 8019518:	080244ec 	.word	0x080244ec

0801951c <_ZN19FrontendApplicationD0Ev>:
 801951c:	b580      	push	{r7, lr}
 801951e:	b082      	sub	sp, #8
 8019520:	af00      	add	r7, sp, #0
 8019522:	6078      	str	r0, [r7, #4]
 8019524:	6878      	ldr	r0, [r7, #4]
 8019526:	f7ff ffe7 	bl	80194f8 <_ZN19FrontendApplicationD1Ev>
 801952a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801952e:	6878      	ldr	r0, [r7, #4]
 8019530:	f007 fe25 	bl	802117e <_ZdlPvj>
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	4618      	mov	r0, r3
 8019538:	3708      	adds	r7, #8
 801953a:	46bd      	mov	sp, r7
 801953c:	bd80      	pop	{r7, pc}

0801953e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801953e:	b580      	push	{r7, lr}
 8019540:	b082      	sub	sp, #8
 8019542:	af00      	add	r7, sp, #0
 8019544:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801954c:	4618      	mov	r0, r3
 801954e:	f000 fd95 	bl	801a07c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	4618      	mov	r0, r3
 8019556:	f004 fc4f 	bl	801ddf8 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801955a:	bf00      	nop
 801955c:	3708      	adds	r7, #8
 801955e:	46bd      	mov	sp, r7
 8019560:	bd80      	pop	{r7, pc}
	...

08019564 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8019564:	b580      	push	{r7, lr}
 8019566:	b084      	sub	sp, #16
 8019568:	af00      	add	r7, sp, #0
 801956a:	60f8      	str	r0, [r7, #12]
 801956c:	60b9      	str	r1, [r7, #8]
 801956e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	687a      	ldr	r2, [r7, #4]
 8019574:	68b9      	ldr	r1, [r7, #8]
 8019576:	4618      	mov	r0, r3
 8019578:	f7fa fb0a 	bl	8013b90 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801957c:	4a03      	ldr	r2, [pc, #12]	; (801958c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801957e:	68fb      	ldr	r3, [r7, #12]
 8019580:	601a      	str	r2, [r3, #0]
{
}
 8019582:	68fb      	ldr	r3, [r7, #12]
 8019584:	4618      	mov	r0, r3
 8019586:	3710      	adds	r7, #16
 8019588:	46bd      	mov	sp, r7
 801958a:	bd80      	pop	{r7, pc}
 801958c:	080244ec 	.word	0x080244ec

08019590 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8019590:	b480      	push	{r7}
 8019592:	b083      	sub	sp, #12
 8019594:	af00      	add	r7, sp, #0
 8019596:	6078      	str	r0, [r7, #4]
    {
    }
 8019598:	bf00      	nop
 801959a:	370c      	adds	r7, #12
 801959c:	46bd      	mov	sp, r7
 801959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195a2:	4770      	bx	lr

080195a4 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80195a4:	b480      	push	{r7}
 80195a6:	b083      	sub	sp, #12
 80195a8:	af00      	add	r7, sp, #0
 80195aa:	6078      	str	r0, [r7, #4]
    {
    }
 80195ac:	bf00      	nop
 80195ae:	370c      	adds	r7, #12
 80195b0:	46bd      	mov	sp, r7
 80195b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195b6:	4770      	bx	lr

080195b8 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 80195b8:	b480      	push	{r7}
 80195ba:	b083      	sub	sp, #12
 80195bc:	af00      	add	r7, sp, #0
 80195be:	6078      	str	r0, [r7, #4]
    {
 80195c0:	4a04      	ldr	r2, [pc, #16]	; (80195d4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	601a      	str	r2, [r3, #0]
    }
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	4618      	mov	r0, r3
 80195ca:	370c      	adds	r7, #12
 80195cc:	46bd      	mov	sp, r7
 80195ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195d2:	4770      	bx	lr
 80195d4:	08024570 	.word	0x08024570

080195d8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80195d8:	b580      	push	{r7, lr}
 80195da:	b082      	sub	sp, #8
 80195dc:	af00      	add	r7, sp, #0
 80195de:	6078      	str	r0, [r7, #4]
    }
 80195e0:	6878      	ldr	r0, [r7, #4]
 80195e2:	f7ff ffe9 	bl	80195b8 <_ZN8touchgfx9PresenterD1Ev>
 80195e6:	2104      	movs	r1, #4
 80195e8:	6878      	ldr	r0, [r7, #4]
 80195ea:	f007 fdc8 	bl	802117e <_ZdlPvj>
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	4618      	mov	r0, r3
 80195f2:	3708      	adds	r7, #8
 80195f4:	46bd      	mov	sp, r7
 80195f6:	bd80      	pop	{r7, pc}

080195f8 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 80195f8:	b480      	push	{r7}
 80195fa:	b083      	sub	sp, #12
 80195fc:	af00      	add	r7, sp, #0
 80195fe:	6078      	str	r0, [r7, #4]
    {
 8019600:	4a04      	ldr	r2, [pc, #16]	; (8019614 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	601a      	str	r2, [r3, #0]
    }
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	4618      	mov	r0, r3
 801960a:	370c      	adds	r7, #12
 801960c:	46bd      	mov	sp, r7
 801960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019612:	4770      	bx	lr
 8019614:	08024570 	.word	0x08024570

08019618 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8019618:	b480      	push	{r7}
 801961a:	b083      	sub	sp, #12
 801961c:	af00      	add	r7, sp, #0
 801961e:	6078      	str	r0, [r7, #4]
 8019620:	4a06      	ldr	r2, [pc, #24]	; (801963c <_ZN13ModelListenerC1Ev+0x24>)
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	601a      	str	r2, [r3, #0]
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	2200      	movs	r2, #0
 801962a:	605a      	str	r2, [r3, #4]
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	4618      	mov	r0, r3
 8019630:	370c      	adds	r7, #12
 8019632:	46bd      	mov	sp, r7
 8019634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019638:	4770      	bx	lr
 801963a:	bf00      	nop
 801963c:	08024558 	.word	0x08024558

08019640 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8019640:	b480      	push	{r7}
 8019642:	b083      	sub	sp, #12
 8019644:	af00      	add	r7, sp, #0
 8019646:	6078      	str	r0, [r7, #4]
 8019648:	4a04      	ldr	r2, [pc, #16]	; (801965c <_ZN13ModelListenerD1Ev+0x1c>)
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	601a      	str	r2, [r3, #0]
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	4618      	mov	r0, r3
 8019652:	370c      	adds	r7, #12
 8019654:	46bd      	mov	sp, r7
 8019656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801965a:	4770      	bx	lr
 801965c:	08024558 	.word	0x08024558

08019660 <_ZN13ModelListenerD0Ev>:
 8019660:	b580      	push	{r7, lr}
 8019662:	b082      	sub	sp, #8
 8019664:	af00      	add	r7, sp, #0
 8019666:	6078      	str	r0, [r7, #4]
 8019668:	6878      	ldr	r0, [r7, #4]
 801966a:	f7ff ffe9 	bl	8019640 <_ZN13ModelListenerD1Ev>
 801966e:	2108      	movs	r1, #8
 8019670:	6878      	ldr	r0, [r7, #4]
 8019672:	f007 fd84 	bl	802117e <_ZdlPvj>
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	4618      	mov	r0, r3
 801967a:	3708      	adds	r7, #8
 801967c:	46bd      	mov	sp, r7
 801967e:	bd80      	pop	{r7, pc}

08019680 <_ZN13ModelListener17m2p_ButtonPressedEv>:
    
    virtual void m2p_ButtonPressed(){}
 8019680:	b480      	push	{r7}
 8019682:	b083      	sub	sp, #12
 8019684:	af00      	add	r7, sp, #0
 8019686:	6078      	str	r0, [r7, #4]
 8019688:	bf00      	nop
 801968a:	370c      	adds	r7, #12
 801968c:	46bd      	mov	sp, r7
 801968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019692:	4770      	bx	lr

08019694 <_ZN13ModelListener16m2p_SetIPAddressEPc>:

#if 1
    virtual void m2p_SetIPAddress(char* ip_addr_ptr){}
 8019694:	b480      	push	{r7}
 8019696:	b083      	sub	sp, #12
 8019698:	af00      	add	r7, sp, #0
 801969a:	6078      	str	r0, [r7, #4]
 801969c:	6039      	str	r1, [r7, #0]
 801969e:	bf00      	nop
 80196a0:	370c      	adds	r7, #12
 80196a2:	46bd      	mov	sp, r7
 80196a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196a8:	4770      	bx	lr
	...

080196ac <_ZN18IOControlPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~IOControlPresenter() {};
 80196ac:	b580      	push	{r7, lr}
 80196ae:	b082      	sub	sp, #8
 80196b0:	af00      	add	r7, sp, #0
 80196b2:	6078      	str	r0, [r7, #4]
 80196b4:	4a09      	ldr	r2, [pc, #36]	; (80196dc <_ZN18IOControlPresenterD1Ev+0x30>)
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	601a      	str	r2, [r3, #0]
 80196ba:	4a09      	ldr	r2, [pc, #36]	; (80196e0 <_ZN18IOControlPresenterD1Ev+0x34>)
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	605a      	str	r2, [r3, #4]
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	3304      	adds	r3, #4
 80196c4:	4618      	mov	r0, r3
 80196c6:	f7ff ffbb 	bl	8019640 <_ZN13ModelListenerD1Ev>
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	4618      	mov	r0, r3
 80196ce:	f7ff ff73 	bl	80195b8 <_ZN8touchgfx9PresenterD1Ev>
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	4618      	mov	r0, r3
 80196d6:	3708      	adds	r7, #8
 80196d8:	46bd      	mov	sp, r7
 80196da:	bd80      	pop	{r7, pc}
 80196dc:	08024528 	.word	0x08024528
 80196e0:	08024540 	.word	0x08024540

080196e4 <_ZThn4_N18IOControlPresenterD1Ev>:
 80196e4:	f1a0 0004 	sub.w	r0, r0, #4
 80196e8:	e7e0      	b.n	80196ac <_ZN18IOControlPresenterD1Ev>
 80196ea:	bf00      	nop

080196ec <_ZN18IOControlPresenterD0Ev>:
 80196ec:	b580      	push	{r7, lr}
 80196ee:	b082      	sub	sp, #8
 80196f0:	af00      	add	r7, sp, #0
 80196f2:	6078      	str	r0, [r7, #4]
 80196f4:	6878      	ldr	r0, [r7, #4]
 80196f6:	f7ff ffd9 	bl	80196ac <_ZN18IOControlPresenterD1Ev>
 80196fa:	2110      	movs	r1, #16
 80196fc:	6878      	ldr	r0, [r7, #4]
 80196fe:	f007 fd3e 	bl	802117e <_ZdlPvj>
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	4618      	mov	r0, r3
 8019706:	3708      	adds	r7, #8
 8019708:	46bd      	mov	sp, r7
 801970a:	bd80      	pop	{r7, pc}

0801970c <_ZThn4_N18IOControlPresenterD0Ev>:
 801970c:	f1a0 0004 	sub.w	r0, r0, #4
 8019710:	e7ec      	b.n	80196ec <_ZN18IOControlPresenterD0Ev>
	...

08019714 <_ZN18IOControlPresenterC1ER13IOControlView>:
#include <gui/iocontrol_screen/IOControlView.hpp>
#include <gui/iocontrol_screen/IOControlPresenter.hpp>

IOControlPresenter::IOControlPresenter(IOControlView& v)
 8019714:	b580      	push	{r7, lr}
 8019716:	b082      	sub	sp, #8
 8019718:	af00      	add	r7, sp, #0
 801971a:	6078      	str	r0, [r7, #4]
 801971c:	6039      	str	r1, [r7, #0]
    : view(v)
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	4618      	mov	r0, r3
 8019722:	f7ff ff69 	bl	80195f8 <_ZN8touchgfx9PresenterC1Ev>
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	3304      	adds	r3, #4
 801972a:	4618      	mov	r0, r3
 801972c:	f7ff ff74 	bl	8019618 <_ZN13ModelListenerC1Ev>
 8019730:	4a06      	ldr	r2, [pc, #24]	; (801974c <_ZN18IOControlPresenterC1ER13IOControlView+0x38>)
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	601a      	str	r2, [r3, #0]
 8019736:	4a06      	ldr	r2, [pc, #24]	; (8019750 <_ZN18IOControlPresenterC1ER13IOControlView+0x3c>)
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	605a      	str	r2, [r3, #4]
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	683a      	ldr	r2, [r7, #0]
 8019740:	60da      	str	r2, [r3, #12]
{
}
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	4618      	mov	r0, r3
 8019746:	3708      	adds	r7, #8
 8019748:	46bd      	mov	sp, r7
 801974a:	bd80      	pop	{r7, pc}
 801974c:	08024528 	.word	0x08024528
 8019750:	08024540 	.word	0x08024540

08019754 <_ZN18IOControlPresenter8activateEv>:

void IOControlPresenter::activate()
{
 8019754:	b480      	push	{r7}
 8019756:	b083      	sub	sp, #12
 8019758:	af00      	add	r7, sp, #0
 801975a:	6078      	str	r0, [r7, #4]

}
 801975c:	bf00      	nop
 801975e:	370c      	adds	r7, #12
 8019760:	46bd      	mov	sp, r7
 8019762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019766:	4770      	bx	lr

08019768 <_ZN18IOControlPresenter10deactivateEv>:

void IOControlPresenter::deactivate()
{
 8019768:	b480      	push	{r7}
 801976a:	b083      	sub	sp, #12
 801976c:	af00      	add	r7, sp, #0
 801976e:	6078      	str	r0, [r7, #4]

}
 8019770:	bf00      	nop
 8019772:	370c      	adds	r7, #12
 8019774:	46bd      	mov	sp, r7
 8019776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801977a:	4770      	bx	lr

0801977c <_ZN18IOControlPresenter15v2p_SetLEDStateEb>:

void IOControlPresenter::v2p_SetLEDState(bool state)
{
 801977c:	b580      	push	{r7, lr}
 801977e:	b082      	sub	sp, #8
 8019780:	af00      	add	r7, sp, #0
 8019782:	6078      	str	r0, [r7, #4]
 8019784:	460b      	mov	r3, r1
 8019786:	70fb      	strb	r3, [r7, #3]
  touchgfx_printf("MainPresenter::%s: %d\r\n", __FUNCTION__, state);
  model->p2m_SetLEDState(state);
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	689b      	ldr	r3, [r3, #8]
 801978c:	78fa      	ldrb	r2, [r7, #3]
 801978e:	4611      	mov	r1, r2
 8019790:	4618      	mov	r0, r3
 8019792:	f000 fc7d 	bl	801a090 <_ZN5Model15p2m_SetLEDStateEb>
 8019796:	bf00      	nop
 8019798:	3708      	adds	r7, #8
 801979a:	46bd      	mov	sp, r7
 801979c:	bd80      	pop	{r7, pc}
	...

080197a0 <_ZN13IOControlViewD1Ev>:

class IOControlView : public IOControlViewBase
{
public:
    IOControlView();
    virtual ~IOControlView() {}
 80197a0:	b580      	push	{r7, lr}
 80197a2:	b082      	sub	sp, #8
 80197a4:	af00      	add	r7, sp, #0
 80197a6:	6078      	str	r0, [r7, #4]
 80197a8:	4a05      	ldr	r2, [pc, #20]	; (80197c0 <_ZN13IOControlViewD1Ev+0x20>)
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	601a      	str	r2, [r3, #0]
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	4618      	mov	r0, r3
 80197b2:	f7fc fb8f 	bl	8015ed4 <_ZN17IOControlViewBaseD1Ev>
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	4618      	mov	r0, r3
 80197ba:	3708      	adds	r7, #8
 80197bc:	46bd      	mov	sp, r7
 80197be:	bd80      	pop	{r7, pc}
 80197c0:	08024588 	.word	0x08024588

080197c4 <_ZN13IOControlViewD0Ev>:
 80197c4:	b580      	push	{r7, lr}
 80197c6:	b082      	sub	sp, #8
 80197c8:	af00      	add	r7, sp, #0
 80197ca:	6078      	str	r0, [r7, #4]
 80197cc:	6878      	ldr	r0, [r7, #4]
 80197ce:	f7ff ffe7 	bl	80197a0 <_ZN13IOControlViewD1Ev>
 80197d2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80197d6:	6878      	ldr	r0, [r7, #4]
 80197d8:	f007 fcd1 	bl	802117e <_ZdlPvj>
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	4618      	mov	r0, r3
 80197e0:	3708      	adds	r7, #8
 80197e2:	46bd      	mov	sp, r7
 80197e4:	bd80      	pop	{r7, pc}
	...

080197e8 <_ZN13IOControlViewC1Ev>:
#include <gui/iocontrol_screen/IOControlView.hpp>

IOControlView::IOControlView()
 80197e8:	b580      	push	{r7, lr}
 80197ea:	b082      	sub	sp, #8
 80197ec:	af00      	add	r7, sp, #0
 80197ee:	6078      	str	r0, [r7, #4]
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	4618      	mov	r0, r3
 80197f4:	f7fc fbda 	bl	8015fac <_ZN17IOControlViewBaseC1Ev>
 80197f8:	4a05      	ldr	r2, [pc, #20]	; (8019810 <_ZN13IOControlViewC1Ev+0x28>)
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	601a      	str	r2, [r3, #0]
{
	led_state = 0;
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	2200      	movs	r2, #0
 8019802:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
}
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	4618      	mov	r0, r3
 801980a:	3708      	adds	r7, #8
 801980c:	46bd      	mov	sp, r7
 801980e:	bd80      	pop	{r7, pc}
 8019810:	08024588 	.word	0x08024588

08019814 <_ZN13IOControlView11setupScreenEv>:

void IOControlView::setupScreen()
{
 8019814:	b580      	push	{r7, lr}
 8019816:	b082      	sub	sp, #8
 8019818:	af00      	add	r7, sp, #0
 801981a:	6078      	str	r0, [r7, #4]
    IOControlViewBase::setupScreen();
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	4618      	mov	r0, r3
 8019820:	f7fc febc 	bl	801659c <_ZN17IOControlViewBase11setupScreenEv>
}
 8019824:	bf00      	nop
 8019826:	3708      	adds	r7, #8
 8019828:	46bd      	mov	sp, r7
 801982a:	bd80      	pop	{r7, pc}

0801982c <_ZN13IOControlView14tearDownScreenEv>:

void IOControlView::tearDownScreen()
{
 801982c:	b580      	push	{r7, lr}
 801982e:	b082      	sub	sp, #8
 8019830:	af00      	add	r7, sp, #0
 8019832:	6078      	str	r0, [r7, #4]
    IOControlViewBase::tearDownScreen();
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	4618      	mov	r0, r3
 8019838:	f7fc f83e 	bl	80158b8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801983c:	bf00      	nop
 801983e:	3708      	adds	r7, #8
 8019840:	46bd      	mov	sp, r7
 8019842:	bd80      	pop	{r7, pc}

08019844 <_ZN13IOControlView16ledButtonPressedEv>:

void IOControlView::ledButtonPressed()
{
 8019844:	b580      	push	{r7, lr}
 8019846:	b082      	sub	sp, #8
 8019848:	af00      	add	r7, sp, #0
 801984a:	6078      	str	r0, [r7, #4]
  led_state = !led_state;
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8019852:	f083 0301 	eor.w	r3, r3, #1
 8019856:	b2da      	uxtb	r2, r3
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
  touchgfx_printf("IOControlView::%s = %d\r\n", __FUNCTION__, led_state);
  presenter->v2p_SetLEDState(led_state);
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8019868:	4619      	mov	r1, r3
 801986a:	4610      	mov	r0, r2
 801986c:	f7ff ff86 	bl	801977c <_ZN18IOControlPresenter15v2p_SetLEDStateEb>
 8019870:	bf00      	nop
 8019872:	3708      	adds	r7, #8
 8019874:	46bd      	mov	sp, r7
 8019876:	bd80      	pop	{r7, pc}

08019878 <_ZN15LoggerPresenterD1Ev>:
    void v2p_LogData(int data);
    void v2p_DumpData(void);
    void v2p_SentData(void);
    void v2p_ClearData(void);

    virtual ~LoggerPresenter() {};
 8019878:	b580      	push	{r7, lr}
 801987a:	b082      	sub	sp, #8
 801987c:	af00      	add	r7, sp, #0
 801987e:	6078      	str	r0, [r7, #4]
 8019880:	4a09      	ldr	r2, [pc, #36]	; (80198a8 <_ZN15LoggerPresenterD1Ev+0x30>)
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	601a      	str	r2, [r3, #0]
 8019886:	4a09      	ldr	r2, [pc, #36]	; (80198ac <_ZN15LoggerPresenterD1Ev+0x34>)
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	605a      	str	r2, [r3, #4]
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	3304      	adds	r3, #4
 8019890:	4618      	mov	r0, r3
 8019892:	f7ff fed5 	bl	8019640 <_ZN13ModelListenerD1Ev>
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	4618      	mov	r0, r3
 801989a:	f7ff fe8d 	bl	80195b8 <_ZN8touchgfx9PresenterD1Ev>
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	4618      	mov	r0, r3
 80198a2:	3708      	adds	r7, #8
 80198a4:	46bd      	mov	sp, r7
 80198a6:	bd80      	pop	{r7, pc}
 80198a8:	080245c0 	.word	0x080245c0
 80198ac:	080245d8 	.word	0x080245d8

080198b0 <_ZThn4_N15LoggerPresenterD1Ev>:
 80198b0:	f1a0 0004 	sub.w	r0, r0, #4
 80198b4:	e7e0      	b.n	8019878 <_ZN15LoggerPresenterD1Ev>
 80198b6:	bf00      	nop

080198b8 <_ZN15LoggerPresenterD0Ev>:
 80198b8:	b580      	push	{r7, lr}
 80198ba:	b082      	sub	sp, #8
 80198bc:	af00      	add	r7, sp, #0
 80198be:	6078      	str	r0, [r7, #4]
 80198c0:	6878      	ldr	r0, [r7, #4]
 80198c2:	f7ff ffd9 	bl	8019878 <_ZN15LoggerPresenterD1Ev>
 80198c6:	2110      	movs	r1, #16
 80198c8:	6878      	ldr	r0, [r7, #4]
 80198ca:	f007 fc58 	bl	802117e <_ZdlPvj>
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	4618      	mov	r0, r3
 80198d2:	3708      	adds	r7, #8
 80198d4:	46bd      	mov	sp, r7
 80198d6:	bd80      	pop	{r7, pc}

080198d8 <_ZThn4_N15LoggerPresenterD0Ev>:
 80198d8:	f1a0 0004 	sub.w	r0, r0, #4
 80198dc:	e7ec      	b.n	80198b8 <_ZN15LoggerPresenterD0Ev>
	...

080198e0 <_ZN15LoggerPresenterC1ER10LoggerView>:
#include <gui/logger_screen/LoggerView.hpp>
#include <gui/logger_screen/LoggerPresenter.hpp>

LoggerPresenter::LoggerPresenter(LoggerView& v)
 80198e0:	b580      	push	{r7, lr}
 80198e2:	b082      	sub	sp, #8
 80198e4:	af00      	add	r7, sp, #0
 80198e6:	6078      	str	r0, [r7, #4]
 80198e8:	6039      	str	r1, [r7, #0]
    : view(v)
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	4618      	mov	r0, r3
 80198ee:	f7ff fe83 	bl	80195f8 <_ZN8touchgfx9PresenterC1Ev>
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	3304      	adds	r3, #4
 80198f6:	4618      	mov	r0, r3
 80198f8:	f7ff fe8e 	bl	8019618 <_ZN13ModelListenerC1Ev>
 80198fc:	4a06      	ldr	r2, [pc, #24]	; (8019918 <_ZN15LoggerPresenterC1ER10LoggerView+0x38>)
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	601a      	str	r2, [r3, #0]
 8019902:	4a06      	ldr	r2, [pc, #24]	; (801991c <_ZN15LoggerPresenterC1ER10LoggerView+0x3c>)
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	605a      	str	r2, [r3, #4]
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	683a      	ldr	r2, [r7, #0]
 801990c:	60da      	str	r2, [r3, #12]
{
}
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	4618      	mov	r0, r3
 8019912:	3708      	adds	r7, #8
 8019914:	46bd      	mov	sp, r7
 8019916:	bd80      	pop	{r7, pc}
 8019918:	080245c0 	.word	0x080245c0
 801991c:	080245d8 	.word	0x080245d8

08019920 <_ZN15LoggerPresenter8activateEv>:

void LoggerPresenter::activate()
{
 8019920:	b480      	push	{r7}
 8019922:	b083      	sub	sp, #12
 8019924:	af00      	add	r7, sp, #0
 8019926:	6078      	str	r0, [r7, #4]

}
 8019928:	bf00      	nop
 801992a:	370c      	adds	r7, #12
 801992c:	46bd      	mov	sp, r7
 801992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019932:	4770      	bx	lr

08019934 <_ZN15LoggerPresenter10deactivateEv>:

void LoggerPresenter::deactivate()
{
 8019934:	b480      	push	{r7}
 8019936:	b083      	sub	sp, #12
 8019938:	af00      	add	r7, sp, #0
 801993a:	6078      	str	r0, [r7, #4]

}
 801993c:	bf00      	nop
 801993e:	370c      	adds	r7, #12
 8019940:	46bd      	mov	sp, r7
 8019942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019946:	4770      	bx	lr

08019948 <_ZN15LoggerPresenter11v2p_LogDataEi>:

void LoggerPresenter::v2p_LogData(int data)
{
 8019948:	b580      	push	{r7, lr}
 801994a:	b082      	sub	sp, #8
 801994c:	af00      	add	r7, sp, #0
 801994e:	6078      	str	r0, [r7, #4]
 8019950:	6039      	str	r1, [r7, #0]
  touchgfx_printf("LoggerPresenter::%s: %d\r\n", __FUNCTION__, data);
  model->p2m_LogData(data);
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	689b      	ldr	r3, [r3, #8]
 8019956:	6839      	ldr	r1, [r7, #0]
 8019958:	4618      	mov	r0, r3
 801995a:	f000 fbb4 	bl	801a0c6 <_ZN5Model11p2m_LogDataEi>
}
 801995e:	bf00      	nop
 8019960:	3708      	adds	r7, #8
 8019962:	46bd      	mov	sp, r7
 8019964:	bd80      	pop	{r7, pc}

08019966 <_ZN15LoggerPresenter12v2p_DumpDataEv>:

void LoggerPresenter::v2p_DumpData(void)
{
 8019966:	b580      	push	{r7, lr}
 8019968:	b082      	sub	sp, #8
 801996a:	af00      	add	r7, sp, #0
 801996c:	6078      	str	r0, [r7, #4]
  touchgfx_printf("LoggerPresenter::%s: %d\r\n", __FUNCTION__, 0);
  model->p2m_DumpData();
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	689b      	ldr	r3, [r3, #8]
 8019972:	4618      	mov	r0, r3
 8019974:	f000 fbb6 	bl	801a0e4 <_ZN5Model12p2m_DumpDataEv>
}
 8019978:	bf00      	nop
 801997a:	3708      	adds	r7, #8
 801997c:	46bd      	mov	sp, r7
 801997e:	bd80      	pop	{r7, pc}

08019980 <_ZN15LoggerPresenter12v2p_SentDataEv>:

void LoggerPresenter::v2p_SentData(void)
{
 8019980:	b580      	push	{r7, lr}
 8019982:	b082      	sub	sp, #8
 8019984:	af00      	add	r7, sp, #0
 8019986:	6078      	str	r0, [r7, #4]
  touchgfx_printf("LoggerPresenter::%s: %d\r\n", __FUNCTION__, 0);
  model->p2m_SentData();
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	689b      	ldr	r3, [r3, #8]
 801998c:	4618      	mov	r0, r3
 801998e:	f000 fbb5 	bl	801a0fc <_ZN5Model12p2m_SentDataEv>
}
 8019992:	bf00      	nop
 8019994:	3708      	adds	r7, #8
 8019996:	46bd      	mov	sp, r7
 8019998:	bd80      	pop	{r7, pc}

0801999a <_ZN15LoggerPresenter13v2p_ClearDataEv>:

void LoggerPresenter::v2p_ClearData(void)
{
 801999a:	b580      	push	{r7, lr}
 801999c:	b082      	sub	sp, #8
 801999e:	af00      	add	r7, sp, #0
 80199a0:	6078      	str	r0, [r7, #4]
  touchgfx_printf("LoggerPresenter::%s: %d\r\n", __FUNCTION__, 0);
  model->p2m_ClearData();
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	689b      	ldr	r3, [r3, #8]
 80199a6:	4618      	mov	r0, r3
 80199a8:	f000 fbb4 	bl	801a114 <_ZN5Model13p2m_ClearDataEv>
}
 80199ac:	bf00      	nop
 80199ae:	3708      	adds	r7, #8
 80199b0:	46bd      	mov	sp, r7
 80199b2:	bd80      	pop	{r7, pc}

080199b4 <_ZNK8touchgfx23TextAreaWithOneWildcard11getWildcardEv>:
    const Unicode::UnicodeChar* getWildcard() const
 80199b4:	b480      	push	{r7}
 80199b6:	b083      	sub	sp, #12
 80199b8:	af00      	add	r7, sp, #0
 80199ba:	6078      	str	r0, [r7, #4]
        return wildcard;
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 80199c0:	4618      	mov	r0, r3
 80199c2:	370c      	adds	r7, #12
 80199c4:	46bd      	mov	sp, r7
 80199c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ca:	4770      	bx	lr

080199cc <_ZN10LoggerViewD1Ev>:

class LoggerView : public LoggerViewBase
{
public:
    LoggerView();
    virtual ~LoggerView() {}
 80199cc:	b580      	push	{r7, lr}
 80199ce:	b082      	sub	sp, #8
 80199d0:	af00      	add	r7, sp, #0
 80199d2:	6078      	str	r0, [r7, #4]
 80199d4:	4a05      	ldr	r2, [pc, #20]	; (80199ec <_ZN10LoggerViewD1Ev+0x20>)
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	601a      	str	r2, [r3, #0]
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	4618      	mov	r0, r3
 80199de:	f7fd fc03 	bl	80171e8 <_ZN14LoggerViewBaseD1Ev>
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	4618      	mov	r0, r3
 80199e6:	3708      	adds	r7, #8
 80199e8:	46bd      	mov	sp, r7
 80199ea:	bd80      	pop	{r7, pc}
 80199ec:	080245f0 	.word	0x080245f0

080199f0 <_ZN10LoggerViewD0Ev>:
 80199f0:	b580      	push	{r7, lr}
 80199f2:	b082      	sub	sp, #8
 80199f4:	af00      	add	r7, sp, #0
 80199f6:	6078      	str	r0, [r7, #4]
 80199f8:	6878      	ldr	r0, [r7, #4]
 80199fa:	f7ff ffe7 	bl	80199cc <_ZN10LoggerViewD1Ev>
 80199fe:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8019a02:	6878      	ldr	r0, [r7, #4]
 8019a04:	f007 fbbb 	bl	802117e <_ZdlPvj>
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	4618      	mov	r0, r3
 8019a0c:	3708      	adds	r7, #8
 8019a0e:	46bd      	mov	sp, r7
 8019a10:	bd80      	pop	{r7, pc}
	...

08019a14 <_ZN10LoggerViewC1Ev>:
#include <gui/logger_screen/LoggerView.hpp>

LoggerView::LoggerView()
 8019a14:	b580      	push	{r7, lr}
 8019a16:	b082      	sub	sp, #8
 8019a18:	af00      	add	r7, sp, #0
 8019a1a:	6078      	str	r0, [r7, #4]
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	4618      	mov	r0, r3
 8019a20:	f7fd fc6c 	bl	80172fc <_ZN14LoggerViewBaseC1Ev>
 8019a24:	4a03      	ldr	r2, [pc, #12]	; (8019a34 <_ZN10LoggerViewC1Ev+0x20>)
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	601a      	str	r2, [r3, #0]
{

}
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	4618      	mov	r0, r3
 8019a2e:	3708      	adds	r7, #8
 8019a30:	46bd      	mov	sp, r7
 8019a32:	bd80      	pop	{r7, pc}
 8019a34:	080245f0 	.word	0x080245f0

08019a38 <_ZN10LoggerView11setupScreenEv>:

void LoggerView::setupScreen()
{
 8019a38:	b580      	push	{r7, lr}
 8019a3a:	b082      	sub	sp, #8
 8019a3c:	af00      	add	r7, sp, #0
 8019a3e:	6078      	str	r0, [r7, #4]
    LoggerViewBase::setupScreen();
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	4618      	mov	r0, r3
 8019a44:	f7fd ff42 	bl	80178cc <_ZN14LoggerViewBase11setupScreenEv>
}
 8019a48:	bf00      	nop
 8019a4a:	3708      	adds	r7, #8
 8019a4c:	46bd      	mov	sp, r7
 8019a4e:	bd80      	pop	{r7, pc}

08019a50 <_ZN10LoggerView14tearDownScreenEv>:

void LoggerView::tearDownScreen()
{
 8019a50:	b580      	push	{r7, lr}
 8019a52:	b082      	sub	sp, #8
 8019a54:	af00      	add	r7, sp, #0
 8019a56:	6078      	str	r0, [r7, #4]
    LoggerViewBase::tearDownScreen();
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	4618      	mov	r0, r3
 8019a5c:	f7fb ff2c 	bl	80158b8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8019a60:	bf00      	nop
 8019a62:	3708      	adds	r7, #8
 8019a64:	46bd      	mov	sp, r7
 8019a66:	bd80      	pop	{r7, pc}

08019a68 <_ZN10LoggerView16logButtonPressedEv>:

void LoggerView::logButtonPressed()
{
 8019a68:	b580      	push	{r7, lr}
 8019a6a:	b084      	sub	sp, #16
 8019a6c:	af00      	add	r7, sp, #0
 8019a6e:	6078      	str	r0, [r7, #4]
  int tmpVal = Unicode::atoi(countTxt.getWildcard());
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8019a76:	4618      	mov	r0, r3
 8019a78:	f7ff ff9c 	bl	80199b4 <_ZNK8touchgfx23TextAreaWithOneWildcard11getWildcardEv>
 8019a7c:	4603      	mov	r3, r0
 8019a7e:	4618      	mov	r0, r3
 8019a80:	f005 fc6d 	bl	801f35e <_ZN8touchgfx7Unicode4atoiEPKt>
 8019a84:	60f8      	str	r0, [r7, #12]
  touchgfx_printf("LoggerView::%s = %d\r\n", __FUNCTION__, tmpVal);
  presenter->v2p_LogData(tmpVal);
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a8a:	68f9      	ldr	r1, [r7, #12]
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	f7ff ff5b 	bl	8019948 <_ZN15LoggerPresenter11v2p_LogDataEi>
}
 8019a92:	bf00      	nop
 8019a94:	3710      	adds	r7, #16
 8019a96:	46bd      	mov	sp, r7
 8019a98:	bd80      	pop	{r7, pc}

08019a9a <_ZN10LoggerView17dumpButtonPressedEv>:

void LoggerView::dumpButtonPressed()
{
 8019a9a:	b580      	push	{r7, lr}
 8019a9c:	b082      	sub	sp, #8
 8019a9e:	af00      	add	r7, sp, #0
 8019aa0:	6078      	str	r0, [r7, #4]
  touchgfx_printf("LoggerView::%s\r\n", __FUNCTION__);
  presenter->v2p_DumpData();
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	f7ff ff5d 	bl	8019966 <_ZN15LoggerPresenter12v2p_DumpDataEv>
}
 8019aac:	bf00      	nop
 8019aae:	3708      	adds	r7, #8
 8019ab0:	46bd      	mov	sp, r7
 8019ab2:	bd80      	pop	{r7, pc}

08019ab4 <_ZN10LoggerView17sentButtonPressedEv>:

void LoggerView::sentButtonPressed()
{
 8019ab4:	b580      	push	{r7, lr}
 8019ab6:	b082      	sub	sp, #8
 8019ab8:	af00      	add	r7, sp, #0
 8019aba:	6078      	str	r0, [r7, #4]
  touchgfx_printf("LoggerView::%s\r\n", __FUNCTION__);
  presenter->v2p_SentData();
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019ac0:	4618      	mov	r0, r3
 8019ac2:	f7ff ff5d 	bl	8019980 <_ZN15LoggerPresenter12v2p_SentDataEv>
}
 8019ac6:	bf00      	nop
 8019ac8:	3708      	adds	r7, #8
 8019aca:	46bd      	mov	sp, r7
 8019acc:	bd80      	pop	{r7, pc}

08019ace <_ZN10LoggerView18clearButtonPressedEv>:

void LoggerView::clearButtonPressed()
{
 8019ace:	b580      	push	{r7, lr}
 8019ad0:	b082      	sub	sp, #8
 8019ad2:	af00      	add	r7, sp, #0
 8019ad4:	6078      	str	r0, [r7, #4]
  touchgfx_printf("LoggerView::%s\r\n", __FUNCTION__);
  presenter->v2p_ClearData();
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019ada:	4618      	mov	r0, r3
 8019adc:	f7ff ff5d 	bl	801999a <_ZN15LoggerPresenter13v2p_ClearDataEv>
 8019ae0:	bf00      	nop
 8019ae2:	3708      	adds	r7, #8
 8019ae4:	46bd      	mov	sp, r7
 8019ae6:	bd80      	pop	{r7, pc}

08019ae8 <_ZN13MainPresenterD1Ev>:
    virtual void deactivate();
    
    /* redefine call on MainListener, to be called from Model*/
    void m2p_ButtonPressed();

    virtual ~MainPresenter() {};
 8019ae8:	b580      	push	{r7, lr}
 8019aea:	b082      	sub	sp, #8
 8019aec:	af00      	add	r7, sp, #0
 8019aee:	6078      	str	r0, [r7, #4]
 8019af0:	4a09      	ldr	r2, [pc, #36]	; (8019b18 <_ZN13MainPresenterD1Ev+0x30>)
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	601a      	str	r2, [r3, #0]
 8019af6:	4a09      	ldr	r2, [pc, #36]	; (8019b1c <_ZN13MainPresenterD1Ev+0x34>)
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	605a      	str	r2, [r3, #4]
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	3304      	adds	r3, #4
 8019b00:	4618      	mov	r0, r3
 8019b02:	f7ff fd9d 	bl	8019640 <_ZN13ModelListenerD1Ev>
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	4618      	mov	r0, r3
 8019b0a:	f7ff fd55 	bl	80195b8 <_ZN8touchgfx9PresenterD1Ev>
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	4618      	mov	r0, r3
 8019b12:	3708      	adds	r7, #8
 8019b14:	46bd      	mov	sp, r7
 8019b16:	bd80      	pop	{r7, pc}
 8019b18:	08024634 	.word	0x08024634
 8019b1c:	08024650 	.word	0x08024650

08019b20 <_ZThn4_N13MainPresenterD1Ev>:
 8019b20:	f1a0 0004 	sub.w	r0, r0, #4
 8019b24:	e7e0      	b.n	8019ae8 <_ZN13MainPresenterD1Ev>
 8019b26:	bf00      	nop

08019b28 <_ZN13MainPresenterD0Ev>:
 8019b28:	b580      	push	{r7, lr}
 8019b2a:	b082      	sub	sp, #8
 8019b2c:	af00      	add	r7, sp, #0
 8019b2e:	6078      	str	r0, [r7, #4]
 8019b30:	6878      	ldr	r0, [r7, #4]
 8019b32:	f7ff ffd9 	bl	8019ae8 <_ZN13MainPresenterD1Ev>
 8019b36:	2110      	movs	r1, #16
 8019b38:	6878      	ldr	r0, [r7, #4]
 8019b3a:	f007 fb20 	bl	802117e <_ZdlPvj>
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	4618      	mov	r0, r3
 8019b42:	3708      	adds	r7, #8
 8019b44:	46bd      	mov	sp, r7
 8019b46:	bd80      	pop	{r7, pc}

08019b48 <_ZThn4_N13MainPresenterD0Ev>:
 8019b48:	f1a0 0004 	sub.w	r0, r0, #4
 8019b4c:	e7ec      	b.n	8019b28 <_ZN13MainPresenterD0Ev>
	...

08019b50 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>
#include <touchgfx/Utils.hpp>

MainPresenter::MainPresenter(MainView& v)
 8019b50:	b580      	push	{r7, lr}
 8019b52:	b082      	sub	sp, #8
 8019b54:	af00      	add	r7, sp, #0
 8019b56:	6078      	str	r0, [r7, #4]
 8019b58:	6039      	str	r1, [r7, #0]
    : view(v)
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	f7ff fd4b 	bl	80195f8 <_ZN8touchgfx9PresenterC1Ev>
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	3304      	adds	r3, #4
 8019b66:	4618      	mov	r0, r3
 8019b68:	f7ff fd56 	bl	8019618 <_ZN13ModelListenerC1Ev>
 8019b6c:	4a06      	ldr	r2, [pc, #24]	; (8019b88 <_ZN13MainPresenterC1ER8MainView+0x38>)
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	601a      	str	r2, [r3, #0]
 8019b72:	4a06      	ldr	r2, [pc, #24]	; (8019b8c <_ZN13MainPresenterC1ER8MainView+0x3c>)
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	605a      	str	r2, [r3, #4]
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	683a      	ldr	r2, [r7, #0]
 8019b7c:	60da      	str	r2, [r3, #12]
{
}
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	4618      	mov	r0, r3
 8019b82:	3708      	adds	r7, #8
 8019b84:	46bd      	mov	sp, r7
 8019b86:	bd80      	pop	{r7, pc}
 8019b88:	08024634 	.word	0x08024634
 8019b8c:	08024650 	.word	0x08024650

08019b90 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8019b90:	b480      	push	{r7}
 8019b92:	b083      	sub	sp, #12
 8019b94:	af00      	add	r7, sp, #0
 8019b96:	6078      	str	r0, [r7, #4]
}
 8019b98:	bf00      	nop
 8019b9a:	370c      	adds	r7, #12
 8019b9c:	46bd      	mov	sp, r7
 8019b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ba2:	4770      	bx	lr

08019ba4 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8019ba4:	b480      	push	{r7}
 8019ba6:	b083      	sub	sp, #12
 8019ba8:	af00      	add	r7, sp, #0
 8019baa:	6078      	str	r0, [r7, #4]
}
 8019bac:	bf00      	nop
 8019bae:	370c      	adds	r7, #12
 8019bb0:	46bd      	mov	sp, r7
 8019bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bb6:	4770      	bx	lr

08019bb8 <_ZN13MainPresenter17m2p_ButtonPressedEv>:

void MainPresenter::m2p_ButtonPressed()
{
 8019bb8:	b580      	push	{r7, lr}
 8019bba:	b082      	sub	sp, #8
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	6078      	str	r0, [r7, #4]
  view.hw_ButtonPressed();
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	68da      	ldr	r2, [r3, #12]
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	68db      	ldr	r3, [r3, #12]
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	333c      	adds	r3, #60	; 0x3c
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	4610      	mov	r0, r2
 8019bd0:	4798      	blx	r3
}
 8019bd2:	bf00      	nop
 8019bd4:	3708      	adds	r7, #8
 8019bd6:	46bd      	mov	sp, r7
 8019bd8:	bd80      	pop	{r7, pc}

08019bda <_ZThn4_N13MainPresenter17m2p_ButtonPressedEv>:
    void m2p_ButtonPressed();
 8019bda:	f1a0 0004 	sub.w	r0, r0, #4
 8019bde:	f7ff bfeb 	b.w	8019bb8 <_ZN13MainPresenter17m2p_ButtonPressedEv>

08019be2 <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>:
    void setAlpha(uint8_t newAlpha)
 8019be2:	b580      	push	{r7, lr}
 8019be4:	b082      	sub	sp, #8
 8019be6:	af00      	add	r7, sp, #0
 8019be8:	6078      	str	r0, [r7, #4]
 8019bea:	460b      	mov	r3, r1
 8019bec:	70fb      	strb	r3, [r7, #3]
        alpha = newAlpha;
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	78fa      	ldrb	r2, [r7, #3]
 8019bf2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        handleAlphaUpdated();
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	338c      	adds	r3, #140	; 0x8c
 8019bfc:	681b      	ldr	r3, [r3, #0]
 8019bfe:	6878      	ldr	r0, [r7, #4]
 8019c00:	4798      	blx	r3
    }
 8019c02:	bf00      	nop
 8019c04:	3708      	adds	r7, #8
 8019c06:	46bd      	mov	sp, r7
 8019c08:	bd80      	pop	{r7, pc}
	...

08019c0c <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView(){}
 8019c0c:	b580      	push	{r7, lr}
 8019c0e:	b082      	sub	sp, #8
 8019c10:	af00      	add	r7, sp, #0
 8019c12:	6078      	str	r0, [r7, #4]
 8019c14:	4a05      	ldr	r2, [pc, #20]	; (8019c2c <_ZN8MainViewD1Ev+0x20>)
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	601a      	str	r2, [r3, #0]
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	4618      	mov	r0, r3
 8019c1e:	f7fe f843 	bl	8017ca8 <_ZN12MainViewBaseD1Ev>
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	4618      	mov	r0, r3
 8019c26:	3708      	adds	r7, #8
 8019c28:	46bd      	mov	sp, r7
 8019c2a:	bd80      	pop	{r7, pc}
 8019c2c:	08024668 	.word	0x08024668

08019c30 <_ZN8MainViewD0Ev>:
 8019c30:	b580      	push	{r7, lr}
 8019c32:	b082      	sub	sp, #8
 8019c34:	af00      	add	r7, sp, #0
 8019c36:	6078      	str	r0, [r7, #4]
 8019c38:	6878      	ldr	r0, [r7, #4]
 8019c3a:	f7ff ffe7 	bl	8019c0c <_ZN8MainViewD1Ev>
 8019c3e:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8019c42:	6878      	ldr	r0, [r7, #4]
 8019c44:	f007 fa9b 	bl	802117e <_ZdlPvj>
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	3708      	adds	r7, #8
 8019c4e:	46bd      	mov	sp, r7
 8019c50:	bd80      	pop	{r7, pc}
	...

08019c54 <_ZN8MainViewC1Ev>:
#include "BitmapDatabase.hpp"
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Utils.hpp>

MainView::MainView()
 8019c54:	b590      	push	{r4, r7, lr}
 8019c56:	b083      	sub	sp, #12
 8019c58:	af00      	add	r7, sp, #0
 8019c5a:	6078      	str	r0, [r7, #4]
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	4618      	mov	r0, r3
 8019c60:	f7fe f8be 	bl	8017de0 <_ZN12MainViewBaseC1Ev>
 8019c64:	4a14      	ldr	r2, [pc, #80]	; (8019cb8 <_ZN8MainViewC1Ev+0x64>)
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8019c6a:	4b14      	ldr	r3, [pc, #80]	; (8019cbc <_ZN8MainViewC1Ev+0x68>)
 8019c6c:	881b      	ldrh	r3, [r3, #0]
 8019c6e:	461c      	mov	r4, r3
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	3370      	adds	r3, #112	; 0x70
 8019c74:	4618      	mov	r0, r3
 8019c76:	f7f2 fe46 	bl	800c906 <_ZNK8touchgfx8Drawable8getWidthEv>
 8019c7a:	4603      	mov	r3, r0
 8019c7c:	429c      	cmp	r4, r3
 8019c7e:	dc0a      	bgt.n	8019c96 <_ZN8MainViewC1Ev+0x42>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 8019c80:	4b0f      	ldr	r3, [pc, #60]	; (8019cc0 <_ZN8MainViewC1Ev+0x6c>)
 8019c82:	881b      	ldrh	r3, [r3, #0]
 8019c84:	461c      	mov	r4, r3
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	3370      	adds	r3, #112	; 0x70
 8019c8a:	4618      	mov	r0, r3
 8019c8c:	f7f2 fe48 	bl	800c920 <_ZNK8touchgfx8Drawable9getHeightEv>
 8019c90:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8019c92:	429c      	cmp	r4, r3
 8019c94:	dd01      	ble.n	8019c9a <_ZN8MainViewC1Ev+0x46>
 8019c96:	2301      	movs	r3, #1
 8019c98:	e000      	b.n	8019c9c <_ZN8MainViewC1Ev+0x48>
 8019c9a:	2300      	movs	r3, #0
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d005      	beq.n	8019cac <_ZN8MainViewC1Ev+0x58>
    {
        backgroundBox.setVisible(true);
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	3340      	adds	r3, #64	; 0x40
 8019ca4:	2101      	movs	r1, #1
 8019ca6:	4618      	mov	r0, r3
 8019ca8:	f7f2 fedc 	bl	800ca64 <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	4618      	mov	r0, r3
 8019cb0:	370c      	adds	r7, #12
 8019cb2:	46bd      	mov	sp, r7
 8019cb4:	bd90      	pop	{r4, r7, pc}
 8019cb6:	bf00      	nop
 8019cb8:	08024668 	.word	0x08024668
 8019cbc:	2000a320 	.word	0x2000a320
 8019cc0:	2000a322 	.word	0x2000a322

08019cc4 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 8019cc4:	b480      	push	{r7}
 8019cc6:	b083      	sub	sp, #12
 8019cc8:	af00      	add	r7, sp, #0
 8019cca:	6078      	str	r0, [r7, #4]
}
 8019ccc:	bf00      	nop
 8019cce:	370c      	adds	r7, #12
 8019cd0:	46bd      	mov	sp, r7
 8019cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cd6:	4770      	bx	lr

08019cd8 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8019cd8:	b480      	push	{r7}
 8019cda:	b083      	sub	sp, #12
 8019cdc:	af00      	add	r7, sp, #0
 8019cde:	6078      	str	r0, [r7, #4]
}
 8019ce0:	bf00      	nop
 8019ce2:	370c      	adds	r7, #12
 8019ce4:	46bd      	mov	sp, r7
 8019ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cea:	4770      	bx	lr

08019cec <_ZN8MainView17zeroButtonPressedEv>:

void MainView::zeroButtonPressed()
{
 8019cec:	b580      	push	{r7, lr}
 8019cee:	b082      	sub	sp, #8
 8019cf0:	af00      	add	r7, sp, #0
 8019cf2:	6078      	str	r0, [r7, #4]
    Unicode::snprintf(countTxtBuffer, COUNTTXT_SIZE, "%d", 0);
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	f503 60ac 	add.w	r0, r3, #1376	; 0x560
 8019cfa:	2300      	movs	r3, #0
 8019cfc:	4a25      	ldr	r2, [pc, #148]	; (8019d94 <_ZN8MainView17zeroButtonPressedEv+0xa8>)
 8019cfe:	2103      	movs	r1, #3
 8019d00:	f005 fdc8 	bl	801f894 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    countTxt.invalidate();
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8019d0a:	4618      	mov	r0, r3
 8019d0c:	f004 fd2b 	bl	801e766 <_ZNK8touchgfx8Drawable10invalidateEv>

    /* Disable button */
    repeatButton.setAlpha(100);
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8019d16:	2164      	movs	r1, #100	; 0x64
 8019d18:	4618      	mov	r0, r3
 8019d1a:	f7ff ff62 	bl	8019be2 <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    repeatButton.setTouchable(false);
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8019d24:	2100      	movs	r1, #0
 8019d26:	4618      	mov	r0, r3
 8019d28:	f7f2 feac 	bl	800ca84 <_ZN8touchgfx8Drawable12setTouchableEb>
    repeatButton.setPressed(false);
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8019d32:	2100      	movs	r1, #0
 8019d34:	4618      	mov	r0, r3
 8019d36:	f7fb fe33 	bl	80159a0 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
    repeatButton.invalidate();
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8019d40:	4618      	mov	r0, r3
 8019d42:	f004 fd10 	bl	801e766 <_ZNK8touchgfx8Drawable10invalidateEv>
    
    /* Enable button */
    if (touchButton.getAlpha() == 100)
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8019d4c:	4618      	mov	r0, r3
 8019d4e:	f7fb fe48 	bl	80159e2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8019d52:	4603      	mov	r3, r0
 8019d54:	2b64      	cmp	r3, #100	; 0x64
 8019d56:	bf0c      	ite	eq
 8019d58:	2301      	moveq	r3, #1
 8019d5a:	2300      	movne	r3, #0
 8019d5c:	b2db      	uxtb	r3, r3
 8019d5e:	2b00      	cmp	r3, #0
 8019d60:	d013      	beq.n	8019d8a <_ZN8MainView17zeroButtonPressedEv+0x9e>
    {
        touchButton.setAlpha(255);
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8019d68:	21ff      	movs	r1, #255	; 0xff
 8019d6a:	4618      	mov	r0, r3
 8019d6c:	f7ff ff39 	bl	8019be2 <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
        touchButton.setTouchable(true);
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8019d76:	2101      	movs	r1, #1
 8019d78:	4618      	mov	r0, r3
 8019d7a:	f7f2 fe83 	bl	800ca84 <_ZN8touchgfx8Drawable12setTouchableEb>
        touchButton.invalidate();
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8019d84:	4618      	mov	r0, r3
 8019d86:	f004 fcee 	bl	801e766 <_ZNK8touchgfx8Drawable10invalidateEv>
    }
}
 8019d8a:	bf00      	nop
 8019d8c:	3708      	adds	r7, #8
 8019d8e:	46bd      	mov	sp, r7
 8019d90:	bd80      	pop	{r7, pc}
 8019d92:	bf00      	nop
 8019d94:	08022b14 	.word	0x08022b14

08019d98 <_ZN8MainView16hw_ButtonPressedEv>:

void MainView::hw_ButtonPressed()
{
 8019d98:	b580      	push	{r7, lr}
 8019d9a:	b082      	sub	sp, #8
 8019d9c:	af00      	add	r7, sp, #0
 8019d9e:	6078      	str	r0, [r7, #4]
    inc_count();
 8019da0:	6878      	ldr	r0, [r7, #4]
 8019da2:	f000 f80f 	bl	8019dc4 <_ZN8MainView9inc_countEv>
}
 8019da6:	bf00      	nop
 8019da8:	3708      	adds	r7, #8
 8019daa:	46bd      	mov	sp, r7
 8019dac:	bd80      	pop	{r7, pc}

08019dae <_ZN8MainView18touchButtonPressedEv>:

void MainView::touchButtonPressed()
{
 8019dae:	b580      	push	{r7, lr}
 8019db0:	b082      	sub	sp, #8
 8019db2:	af00      	add	r7, sp, #0
 8019db4:	6078      	str	r0, [r7, #4]
    inc_count();
 8019db6:	6878      	ldr	r0, [r7, #4]
 8019db8:	f000 f804 	bl	8019dc4 <_ZN8MainView9inc_countEv>
}
 8019dbc:	bf00      	nop
 8019dbe:	3708      	adds	r7, #8
 8019dc0:	46bd      	mov	sp, r7
 8019dc2:	bd80      	pop	{r7, pc}

08019dc4 <_ZN8MainView9inc_countEv>:

void MainView::inc_count()
{
 8019dc4:	b580      	push	{r7, lr}
 8019dc6:	b084      	sub	sp, #16
 8019dc8:	af00      	add	r7, sp, #0
 8019dca:	6078      	str	r0, [r7, #4]
    int tmpVal = Unicode::atoi(countTxt.getWildcard());
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8019dd2:	4618      	mov	r0, r3
 8019dd4:	f7ff fdee 	bl	80199b4 <_ZNK8touchgfx23TextAreaWithOneWildcard11getWildcardEv>
 8019dd8:	4603      	mov	r3, r0
 8019dda:	4618      	mov	r0, r3
 8019ddc:	f005 fabf 	bl	801f35e <_ZN8touchgfx7Unicode4atoiEPKt>
 8019de0:	60f8      	str	r0, [r7, #12]
    if (tmpVal < 50)
 8019de2:	68fb      	ldr	r3, [r7, #12]
 8019de4:	2b31      	cmp	r3, #49	; 0x31
 8019de6:	dc32      	bgt.n	8019e4e <_ZN8MainView9inc_countEv+0x8a>
    {
      /* Update count text */
      tmpVal++;
 8019de8:	68fb      	ldr	r3, [r7, #12]
 8019dea:	3301      	adds	r3, #1
 8019dec:	60fb      	str	r3, [r7, #12]
      Unicode::snprintf(countTxtBuffer, COUNTTXT_SIZE, "%d", tmpVal);
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	f503 60ac 	add.w	r0, r3, #1376	; 0x560
 8019df4:	68fb      	ldr	r3, [r7, #12]
 8019df6:	4a28      	ldr	r2, [pc, #160]	; (8019e98 <_ZN8MainView9inc_countEv+0xd4>)
 8019df8:	2103      	movs	r1, #3
 8019dfa:	f005 fd4b 	bl	801f894 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
      countTxt.invalidate();
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8019e04:	4618      	mov	r0, r3
 8019e06:	f004 fcae 	bl	801e766 <_ZNK8touchgfx8Drawable10invalidateEv>

      /* Enable button */
      if (repeatButton.getAlpha() == 100)
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8019e10:	4618      	mov	r0, r3
 8019e12:	f7fb fde6 	bl	80159e2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8019e16:	4603      	mov	r3, r0
 8019e18:	2b64      	cmp	r3, #100	; 0x64
 8019e1a:	bf0c      	ite	eq
 8019e1c:	2301      	moveq	r3, #1
 8019e1e:	2300      	movne	r3, #0
 8019e20:	b2db      	uxtb	r3, r3
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d013      	beq.n	8019e4e <_ZN8MainView9inc_countEv+0x8a>
      {
          repeatButton.setAlpha(255);
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8019e2c:	21ff      	movs	r1, #255	; 0xff
 8019e2e:	4618      	mov	r0, r3
 8019e30:	f7ff fed7 	bl	8019be2 <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
          repeatButton.setTouchable(true);
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8019e3a:	2101      	movs	r1, #1
 8019e3c:	4618      	mov	r0, r3
 8019e3e:	f7f2 fe21 	bl	800ca84 <_ZN8touchgfx8Drawable12setTouchableEb>
          repeatButton.invalidate();
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8019e48:	4618      	mov	r0, r3
 8019e4a:	f004 fc8c 	bl	801e766 <_ZNK8touchgfx8Drawable10invalidateEv>
      }
    }
    
    if (tmpVal >= 50)
 8019e4e:	68fb      	ldr	r3, [r7, #12]
 8019e50:	2b31      	cmp	r3, #49	; 0x31
 8019e52:	dd1c      	ble.n	8019e8e <_ZN8MainView9inc_countEv+0xca>
    {
      /* Disable button */
      touchButton.setAlpha(100);
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8019e5a:	2164      	movs	r1, #100	; 0x64
 8019e5c:	4618      	mov	r0, r3
 8019e5e:	f7ff fec0 	bl	8019be2 <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
      touchButton.setTouchable(false);
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8019e68:	2100      	movs	r1, #0
 8019e6a:	4618      	mov	r0, r3
 8019e6c:	f7f2 fe0a 	bl	800ca84 <_ZN8touchgfx8Drawable12setTouchableEb>
      touchButton.setPressed(false);
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8019e76:	2100      	movs	r1, #0
 8019e78:	4618      	mov	r0, r3
 8019e7a:	f7fb fd91 	bl	80159a0 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
      touchButton.invalidate();
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8019e84:	4618      	mov	r0, r3
 8019e86:	f004 fc6e 	bl	801e766 <_ZNK8touchgfx8Drawable10invalidateEv>
      
      tmpVal = 50;
 8019e8a:	2332      	movs	r3, #50	; 0x32
 8019e8c:	60fb      	str	r3, [r7, #12]
    }
}
 8019e8e:	bf00      	nop
 8019e90:	3710      	adds	r7, #16
 8019e92:	46bd      	mov	sp, r7
 8019e94:	bd80      	pop	{r7, pc}
 8019e96:	bf00      	nop
 8019e98:	08022b14 	.word	0x08022b14

08019e9c <_ZN8MainView9dec_countEv>:

void MainView::dec_count()
{
 8019e9c:	b580      	push	{r7, lr}
 8019e9e:	b084      	sub	sp, #16
 8019ea0:	af00      	add	r7, sp, #0
 8019ea2:	6078      	str	r0, [r7, #4]
    int tmpVal = Unicode::atoi(countTxt.getWildcard());
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8019eaa:	4618      	mov	r0, r3
 8019eac:	f7ff fd82 	bl	80199b4 <_ZNK8touchgfx23TextAreaWithOneWildcard11getWildcardEv>
 8019eb0:	4603      	mov	r3, r0
 8019eb2:	4618      	mov	r0, r3
 8019eb4:	f005 fa53 	bl	801f35e <_ZN8touchgfx7Unicode4atoiEPKt>
 8019eb8:	60f8      	str	r0, [r7, #12]
    if (tmpVal > 0)
 8019eba:	68fb      	ldr	r3, [r7, #12]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	dd32      	ble.n	8019f26 <_ZN8MainView9dec_countEv+0x8a>
    {
      /* Update count text */
      tmpVal--;
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	3b01      	subs	r3, #1
 8019ec4:	60fb      	str	r3, [r7, #12]
      Unicode::snprintf(countTxtBuffer, COUNTTXT_SIZE, "%d", tmpVal);
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	f503 60ac 	add.w	r0, r3, #1376	; 0x560
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	4a28      	ldr	r2, [pc, #160]	; (8019f70 <_ZN8MainView9dec_countEv+0xd4>)
 8019ed0:	2103      	movs	r1, #3
 8019ed2:	f005 fcdf 	bl	801f894 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
      countTxt.invalidate();
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8019edc:	4618      	mov	r0, r3
 8019ede:	f004 fc42 	bl	801e766 <_ZNK8touchgfx8Drawable10invalidateEv>

      /* Enable button */
      if (touchButton.getAlpha() == 100)
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8019ee8:	4618      	mov	r0, r3
 8019eea:	f7fb fd7a 	bl	80159e2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8019eee:	4603      	mov	r3, r0
 8019ef0:	2b64      	cmp	r3, #100	; 0x64
 8019ef2:	bf0c      	ite	eq
 8019ef4:	2301      	moveq	r3, #1
 8019ef6:	2300      	movne	r3, #0
 8019ef8:	b2db      	uxtb	r3, r3
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d013      	beq.n	8019f26 <_ZN8MainView9dec_countEv+0x8a>
      {
          touchButton.setAlpha(255);
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8019f04:	21ff      	movs	r1, #255	; 0xff
 8019f06:	4618      	mov	r0, r3
 8019f08:	f7ff fe6b 	bl	8019be2 <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
          touchButton.setTouchable(true);
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8019f12:	2101      	movs	r1, #1
 8019f14:	4618      	mov	r0, r3
 8019f16:	f7f2 fdb5 	bl	800ca84 <_ZN8touchgfx8Drawable12setTouchableEb>
          touchButton.invalidate();
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8019f20:	4618      	mov	r0, r3
 8019f22:	f004 fc20 	bl	801e766 <_ZNK8touchgfx8Drawable10invalidateEv>
      }
    }
    
    if (tmpVal <= 0)
 8019f26:	68fb      	ldr	r3, [r7, #12]
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	dc1c      	bgt.n	8019f66 <_ZN8MainView9dec_countEv+0xca>
    {
      /* Disable button */
      repeatButton.setAlpha(100);
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8019f32:	2164      	movs	r1, #100	; 0x64
 8019f34:	4618      	mov	r0, r3
 8019f36:	f7ff fe54 	bl	8019be2 <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
      repeatButton.setTouchable(false);
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8019f40:	2100      	movs	r1, #0
 8019f42:	4618      	mov	r0, r3
 8019f44:	f7f2 fd9e 	bl	800ca84 <_ZN8touchgfx8Drawable12setTouchableEb>
      repeatButton.setPressed(false);
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8019f4e:	2100      	movs	r1, #0
 8019f50:	4618      	mov	r0, r3
 8019f52:	f7fb fd25 	bl	80159a0 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
      repeatButton.invalidate();
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8019f5c:	4618      	mov	r0, r3
 8019f5e:	f004 fc02 	bl	801e766 <_ZNK8touchgfx8Drawable10invalidateEv>
      
      tmpVal = 0;
 8019f62:	2300      	movs	r3, #0
 8019f64:	60fb      	str	r3, [r7, #12]
    }
}
 8019f66:	bf00      	nop
 8019f68:	3710      	adds	r7, #16
 8019f6a:	46bd      	mov	sp, r7
 8019f6c:	bd80      	pop	{r7, pc}
 8019f6e:	bf00      	nop
 8019f70:	08022b14 	.word	0x08022b14

08019f74 <_ZN8MainView19repeatButtonPressedEv>:

void MainView::repeatButtonPressed()
{
 8019f74:	b580      	push	{r7, lr}
 8019f76:	b082      	sub	sp, #8
 8019f78:	af00      	add	r7, sp, #0
 8019f7a:	6078      	str	r0, [r7, #4]
    dec_count();
 8019f7c:	6878      	ldr	r0, [r7, #4]
 8019f7e:	f7ff ff8d 	bl	8019e9c <_ZN8MainView9dec_countEv>
}
 8019f82:	bf00      	nop
 8019f84:	3708      	adds	r7, #8
 8019f86:	46bd      	mov	sp, r7
 8019f88:	bd80      	pop	{r7, pc}

08019f8a <_ZN8MainView19toggleButtonPressedEv>:

void MainView::toggleButtonPressed()
{
 8019f8a:	b590      	push	{r4, r7, lr}
 8019f8c:	b087      	sub	sp, #28
 8019f8e:	af00      	add	r7, sp, #0
 8019f90:	6078      	str	r0, [r7, #4]
    if (countTxt.getColor() == Color::getColorFrom24BitRGB(222, 222, 222))
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8019f98:	4618      	mov	r0, r3
 8019f9a:	f7f3 fa83 	bl	800d4a4 <_ZNK8touchgfx8TextArea8getColorEv>
 8019f9e:	4603      	mov	r3, r0
 8019fa0:	60bb      	str	r3, [r7, #8]
 8019fa2:	f107 0308 	add.w	r3, r7, #8
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	f7f3 ffbe 	bl	800df28 <_ZNK8touchgfx9colortypecvtEv>
 8019fac:	4603      	mov	r3, r0
 8019fae:	461c      	mov	r4, r3
 8019fb0:	22de      	movs	r2, #222	; 0xde
 8019fb2:	21de      	movs	r1, #222	; 0xde
 8019fb4:	20de      	movs	r0, #222	; 0xde
 8019fb6:	f005 fc7b 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8019fba:	4603      	mov	r3, r0
 8019fbc:	60fb      	str	r3, [r7, #12]
 8019fbe:	f107 030c 	add.w	r3, r7, #12
 8019fc2:	4618      	mov	r0, r3
 8019fc4:	f7f3 ffb0 	bl	800df28 <_ZNK8touchgfx9colortypecvtEv>
 8019fc8:	4603      	mov	r3, r0
 8019fca:	429c      	cmp	r4, r3
 8019fcc:	bf0c      	ite	eq
 8019fce:	2301      	moveq	r3, #1
 8019fd0:	2300      	movne	r3, #0
 8019fd2:	b2db      	uxtb	r3, r3
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d01a      	beq.n	801a00e <_ZN8MainView19toggleButtonPressedEv+0x84>
    {
        countTxt.setColor(Color::getColorFrom24BitRGB(231, 154, 9));
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	f503 745b 	add.w	r4, r3, #876	; 0x36c
 8019fde:	2209      	movs	r2, #9
 8019fe0:	219a      	movs	r1, #154	; 0x9a
 8019fe2:	20e7      	movs	r0, #231	; 0xe7
 8019fe4:	f005 fc64 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8019fe8:	4603      	mov	r3, r0
 8019fea:	4619      	mov	r1, r3
 8019fec:	4620      	mov	r0, r4
 8019fee:	f7f3 f884 	bl	800d0fa <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
        toggleButton.setText(TypedText(T_TOGGLEBUTTONORANGE));
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8019ff8:	f107 0310 	add.w	r3, r7, #16
 8019ffc:	2103      	movs	r1, #3
 8019ffe:	4618      	mov	r0, r3
 801a000:	f7f2 ff88 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 801a004:	8a39      	ldrh	r1, [r7, #16]
 801a006:	4620      	mov	r0, r4
 801a008:	f7fe fc29 	bl	801885e <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19ToggleButtonTriggerEEEE7setTextENS_9TypedTextE>
 801a00c:	e019      	b.n	801a042 <_ZN8MainView19toggleButtonPressedEv+0xb8>
    }
    else
    {
        countTxt.setColor(Color::getColorFrom24BitRGB(222, 222, 222));
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	f503 745b 	add.w	r4, r3, #876	; 0x36c
 801a014:	22de      	movs	r2, #222	; 0xde
 801a016:	21de      	movs	r1, #222	; 0xde
 801a018:	20de      	movs	r0, #222	; 0xde
 801a01a:	f005 fc49 	bl	801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801a01e:	4603      	mov	r3, r0
 801a020:	4619      	mov	r1, r3
 801a022:	4620      	mov	r0, r4
 801a024:	f7f3 f869 	bl	800d0fa <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
        toggleButton.setText(TypedText(T_TOGGLEBUTTONWHITE));
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 801a02e:	f107 0314 	add.w	r3, r7, #20
 801a032:	2102      	movs	r1, #2
 801a034:	4618      	mov	r0, r3
 801a036:	f7f2 ff6d 	bl	800cf14 <_ZN8touchgfx9TypedTextC1Et>
 801a03a:	8ab9      	ldrh	r1, [r7, #20]
 801a03c:	4620      	mov	r0, r4
 801a03e:	f7fe fc0e 	bl	801885e <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19ToggleButtonTriggerEEEE7setTextENS_9TypedTextE>
    }
    countTxt.invalidate();
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a048:	4618      	mov	r0, r3
 801a04a:	f004 fb8c 	bl	801e766 <_ZNK8touchgfx8Drawable10invalidateEv>
    toggleButton.invalidate();
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	339c      	adds	r3, #156	; 0x9c
 801a052:	4618      	mov	r0, r3
 801a054:	f004 fb87 	bl	801e766 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 801a058:	bf00      	nop
 801a05a:	371c      	adds	r7, #28
 801a05c:	46bd      	mov	sp, r7
 801a05e:	bd90      	pop	{r4, r7, pc}

0801a060 <_ZN5ModelC1Ev>:
extern osMessageQId getIPQueueHandle;
extern osMessageQId setIPQueueHandle;
#endif
#endif

Model::Model() : modelListener(0)
 801a060:	b480      	push	{r7}
 801a062:	b083      	sub	sp, #12
 801a064:	af00      	add	r7, sp, #0
 801a066:	6078      	str	r0, [r7, #4]
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	2200      	movs	r2, #0
 801a06c:	601a      	str	r2, [r3, #0]
{
}
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	4618      	mov	r0, r3
 801a072:	370c      	adds	r7, #12
 801a074:	46bd      	mov	sp, r7
 801a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a07a:	4770      	bx	lr

0801a07c <_ZN5Model4tickEv>:

void Model::tick()
{
 801a07c:	b480      	push	{r7}
 801a07e:	b083      	sub	sp, #12
 801a080:	af00      	add	r7, sp, #0
 801a082:	6078      	str	r0, [r7, #4]
  {
    modelListener->m2p_SetIPAddress(ip_addr_ptr);
  }
#endif
#endif
} 
 801a084:	bf00      	nop
 801a086:	370c      	adds	r7, #12
 801a088:	46bd      	mov	sp, r7
 801a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a08e:	4770      	bx	lr

0801a090 <_ZN5Model15p2m_SetLEDStateEb>:

void Model::p2m_SetLEDState(bool led_state)
{
 801a090:	b480      	push	{r7}
 801a092:	b083      	sub	sp, #12
 801a094:	af00      	add	r7, sp, #0
 801a096:	6078      	str	r0, [r7, #4]
 801a098:	460b      	mov	r3, r1
 801a09a:	70fb      	strb	r3, [r7, #3]
#ifdef SIMULATOR
  touchgfx_printf("Model::%s: %d\r\n\r\n", __FUNCTION__, led_state);
#elif 0
  xQueueSend(ledQueueHandle, &led_state, 0);
#endif
}
 801a09c:	bf00      	nop
 801a09e:	370c      	adds	r7, #12
 801a0a0:	46bd      	mov	sp, r7
 801a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0a6:	4770      	bx	lr

0801a0a8 <_ZN5Model15p2m_SendTCPDataEi>:

void Model::p2m_SendTCPData(int data)
{
 801a0a8:	b480      	push	{r7}
 801a0aa:	b085      	sub	sp, #20
 801a0ac:	af00      	add	r7, sp, #0
 801a0ae:	6078      	str	r0, [r7, #4]
 801a0b0:	6039      	str	r1, [r7, #0]
  uint8_t u8Data = 0;
 801a0b2:	2300      	movs	r3, #0
 801a0b4:	73fb      	strb	r3, [r7, #15]
  u8Data = (uint8_t)data;
 801a0b6:	683b      	ldr	r3, [r7, #0]
 801a0b8:	73fb      	strb	r3, [r7, #15]
#ifdef SIMULATOR
  touchgfx_printf("Model::%s: %u\r\n\r\n", __FUNCTION__, u8Data);
#elif 0
  xQueueSend(tcpQueueHandle, &u8Data, 0);
#endif
}
 801a0ba:	bf00      	nop
 801a0bc:	3714      	adds	r7, #20
 801a0be:	46bd      	mov	sp, r7
 801a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0c4:	4770      	bx	lr

0801a0c6 <_ZN5Model11p2m_LogDataEi>:

void Model::p2m_LogData(int data)
{
 801a0c6:	b480      	push	{r7}
 801a0c8:	b085      	sub	sp, #20
 801a0ca:	af00      	add	r7, sp, #0
 801a0cc:	6078      	str	r0, [r7, #4]
 801a0ce:	6039      	str	r1, [r7, #0]
  uint8_t u8Data = 0;
 801a0d0:	2300      	movs	r3, #0
 801a0d2:	73fb      	strb	r3, [r7, #15]
  u8Data = (uint8_t)data;
 801a0d4:	683b      	ldr	r3, [r7, #0]
 801a0d6:	73fb      	strb	r3, [r7, #15]
#ifdef SIMULATOR
  touchgfx_printf("Model::%s: %u\r\n\r\n", __FUNCTION__, u8Data);
#elif 0
  xQueueSend(logQueueHandle, &u8Data, 0);
#endif
}
 801a0d8:	bf00      	nop
 801a0da:	3714      	adds	r7, #20
 801a0dc:	46bd      	mov	sp, r7
 801a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0e2:	4770      	bx	lr

0801a0e4 <_ZN5Model12p2m_DumpDataEv>:

void Model::p2m_DumpData(void)
{
 801a0e4:	b480      	push	{r7}
 801a0e6:	b085      	sub	sp, #20
 801a0e8:	af00      	add	r7, sp, #0
 801a0ea:	6078      	str	r0, [r7, #4]
  uint8_t u8Data = 0;
 801a0ec:	2300      	movs	r3, #0
 801a0ee:	73fb      	strb	r3, [r7, #15]
#ifdef SIMULATOR
  touchgfx_printf("Model::%s: %u\r\n\r\n", __FUNCTION__, u8Data);
#elif 0
  xQueueSend(logDumpQueueHandle, &u8Data, 0);
#endif
}
 801a0f0:	bf00      	nop
 801a0f2:	3714      	adds	r7, #20
 801a0f4:	46bd      	mov	sp, r7
 801a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0fa:	4770      	bx	lr

0801a0fc <_ZN5Model12p2m_SentDataEv>:

void Model::p2m_SentData(void)
{
 801a0fc:	b480      	push	{r7}
 801a0fe:	b085      	sub	sp, #20
 801a100:	af00      	add	r7, sp, #0
 801a102:	6078      	str	r0, [r7, #4]
  uint8_t u8Data = 0;
 801a104:	2300      	movs	r3, #0
 801a106:	73fb      	strb	r3, [r7, #15]
#ifdef SIMULATOR
  touchgfx_printf("Model::%s: %u\r\n\r\n", __FUNCTION__, u8Data);
#elif 0
  xQueueSend(logSentQueueHandle, &u8Data, 0);
#endif
}
 801a108:	bf00      	nop
 801a10a:	3714      	adds	r7, #20
 801a10c:	46bd      	mov	sp, r7
 801a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a112:	4770      	bx	lr

0801a114 <_ZN5Model13p2m_ClearDataEv>:

void Model::p2m_ClearData(void)
{
 801a114:	b480      	push	{r7}
 801a116:	b085      	sub	sp, #20
 801a118:	af00      	add	r7, sp, #0
 801a11a:	6078      	str	r0, [r7, #4]
  uint8_t u8Data = 0;
 801a11c:	2300      	movs	r3, #0
 801a11e:	73fb      	strb	r3, [r7, #15]
#ifdef SIMULATOR
  touchgfx_printf("Model::%s: %u\r\n\r\n", __FUNCTION__, u8Data);
#elif 0
  xQueueSend(logClearQueueHandle, &u8Data, 0);
#endif
}
 801a120:	bf00      	nop
 801a122:	3714      	adds	r7, #20
 801a124:	46bd      	mov	sp, r7
 801a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a12a:	4770      	bx	lr

0801a12c <_ZN5Model16p2m_getIPAddressEv>:

void Model::p2m_getIPAddress(void)
{
 801a12c:	b480      	push	{r7}
 801a12e:	b085      	sub	sp, #20
 801a130:	af00      	add	r7, sp, #0
 801a132:	6078      	str	r0, [r7, #4]
  uint8_t u8Data = 0;
 801a134:	2300      	movs	r3, #0
 801a136:	73fb      	strb	r3, [r7, #15]
#ifdef SIMULATOR
  touchgfx_printf("Model::%s: %u\r\n\r\n", __FUNCTION__, u8Data);
#elif 0
  xQueueSend(getIPQueueHandle, &u8Data, 0);
#endif
}
 801a138:	bf00      	nop
 801a13a:	3714      	adds	r7, #20
 801a13c:	46bd      	mov	sp, r7
 801a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a142:	4770      	bx	lr

0801a144 <_ZN16NetworkPresenterD1Ev>:
    void v2p_SendTCPData(int data);
    void v2p_getIPAddress(void);
#if 1
    void m2p_SetIPAddress(char* ip_addr_ptr);
#endif
    virtual ~NetworkPresenter() {};
 801a144:	b580      	push	{r7, lr}
 801a146:	b082      	sub	sp, #8
 801a148:	af00      	add	r7, sp, #0
 801a14a:	6078      	str	r0, [r7, #4]
 801a14c:	4a09      	ldr	r2, [pc, #36]	; (801a174 <_ZN16NetworkPresenterD1Ev+0x30>)
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	601a      	str	r2, [r3, #0]
 801a152:	4a09      	ldr	r2, [pc, #36]	; (801a178 <_ZN16NetworkPresenterD1Ev+0x34>)
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	605a      	str	r2, [r3, #4]
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	3304      	adds	r3, #4
 801a15c:	4618      	mov	r0, r3
 801a15e:	f7ff fa6f 	bl	8019640 <_ZN13ModelListenerD1Ev>
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	4618      	mov	r0, r3
 801a166:	f7ff fa27 	bl	80195b8 <_ZN8touchgfx9PresenterD1Ev>
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	4618      	mov	r0, r3
 801a16e:	3708      	adds	r7, #8
 801a170:	46bd      	mov	sp, r7
 801a172:	bd80      	pop	{r7, pc}
 801a174:	080246b0 	.word	0x080246b0
 801a178:	080246cc 	.word	0x080246cc

0801a17c <_ZThn4_N16NetworkPresenterD1Ev>:
 801a17c:	f1a0 0004 	sub.w	r0, r0, #4
 801a180:	e7e0      	b.n	801a144 <_ZN16NetworkPresenterD1Ev>
 801a182:	bf00      	nop

0801a184 <_ZN16NetworkPresenterD0Ev>:
 801a184:	b580      	push	{r7, lr}
 801a186:	b082      	sub	sp, #8
 801a188:	af00      	add	r7, sp, #0
 801a18a:	6078      	str	r0, [r7, #4]
 801a18c:	6878      	ldr	r0, [r7, #4]
 801a18e:	f7ff ffd9 	bl	801a144 <_ZN16NetworkPresenterD1Ev>
 801a192:	2110      	movs	r1, #16
 801a194:	6878      	ldr	r0, [r7, #4]
 801a196:	f006 fff2 	bl	802117e <_ZdlPvj>
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	4618      	mov	r0, r3
 801a19e:	3708      	adds	r7, #8
 801a1a0:	46bd      	mov	sp, r7
 801a1a2:	bd80      	pop	{r7, pc}

0801a1a4 <_ZThn4_N16NetworkPresenterD0Ev>:
 801a1a4:	f1a0 0004 	sub.w	r0, r0, #4
 801a1a8:	e7ec      	b.n	801a184 <_ZN16NetworkPresenterD0Ev>
	...

0801a1ac <_ZN16NetworkPresenterC1ER11NetworkView>:
#include <gui/network_screen/NetworkView.hpp>
#include <gui/network_screen/NetworkPresenter.hpp>

NetworkPresenter::NetworkPresenter(NetworkView& v)
 801a1ac:	b580      	push	{r7, lr}
 801a1ae:	b082      	sub	sp, #8
 801a1b0:	af00      	add	r7, sp, #0
 801a1b2:	6078      	str	r0, [r7, #4]
 801a1b4:	6039      	str	r1, [r7, #0]
    : view(v)
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	4618      	mov	r0, r3
 801a1ba:	f7ff fa1d 	bl	80195f8 <_ZN8touchgfx9PresenterC1Ev>
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	3304      	adds	r3, #4
 801a1c2:	4618      	mov	r0, r3
 801a1c4:	f7ff fa28 	bl	8019618 <_ZN13ModelListenerC1Ev>
 801a1c8:	4a06      	ldr	r2, [pc, #24]	; (801a1e4 <_ZN16NetworkPresenterC1ER11NetworkView+0x38>)
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	601a      	str	r2, [r3, #0]
 801a1ce:	4a06      	ldr	r2, [pc, #24]	; (801a1e8 <_ZN16NetworkPresenterC1ER11NetworkView+0x3c>)
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	605a      	str	r2, [r3, #4]
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	683a      	ldr	r2, [r7, #0]
 801a1d8:	60da      	str	r2, [r3, #12]
{
}
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	4618      	mov	r0, r3
 801a1de:	3708      	adds	r7, #8
 801a1e0:	46bd      	mov	sp, r7
 801a1e2:	bd80      	pop	{r7, pc}
 801a1e4:	080246b0 	.word	0x080246b0
 801a1e8:	080246cc 	.word	0x080246cc

0801a1ec <_ZN16NetworkPresenter8activateEv>:

void NetworkPresenter::activate()
{
 801a1ec:	b480      	push	{r7}
 801a1ee:	b083      	sub	sp, #12
 801a1f0:	af00      	add	r7, sp, #0
 801a1f2:	6078      	str	r0, [r7, #4]

}
 801a1f4:	bf00      	nop
 801a1f6:	370c      	adds	r7, #12
 801a1f8:	46bd      	mov	sp, r7
 801a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1fe:	4770      	bx	lr

0801a200 <_ZN16NetworkPresenter10deactivateEv>:

void NetworkPresenter::deactivate()
{
 801a200:	b480      	push	{r7}
 801a202:	b083      	sub	sp, #12
 801a204:	af00      	add	r7, sp, #0
 801a206:	6078      	str	r0, [r7, #4]

}
 801a208:	bf00      	nop
 801a20a:	370c      	adds	r7, #12
 801a20c:	46bd      	mov	sp, r7
 801a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a212:	4770      	bx	lr

0801a214 <_ZN16NetworkPresenter15v2p_SendTCPDataEi>:

void NetworkPresenter::v2p_SendTCPData(int data)
{
 801a214:	b580      	push	{r7, lr}
 801a216:	b082      	sub	sp, #8
 801a218:	af00      	add	r7, sp, #0
 801a21a:	6078      	str	r0, [r7, #4]
 801a21c:	6039      	str	r1, [r7, #0]
  touchgfx_printf("NetworkPresenter::%s: %d\r\n", __FUNCTION__, data);
  model->p2m_SendTCPData(data);
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	689b      	ldr	r3, [r3, #8]
 801a222:	6839      	ldr	r1, [r7, #0]
 801a224:	4618      	mov	r0, r3
 801a226:	f7ff ff3f 	bl	801a0a8 <_ZN5Model15p2m_SendTCPDataEi>
}
 801a22a:	bf00      	nop
 801a22c:	3708      	adds	r7, #8
 801a22e:	46bd      	mov	sp, r7
 801a230:	bd80      	pop	{r7, pc}

0801a232 <_ZN16NetworkPresenter16v2p_getIPAddressEv>:

void NetworkPresenter::v2p_getIPAddress()
{
 801a232:	b580      	push	{r7, lr}
 801a234:	b082      	sub	sp, #8
 801a236:	af00      	add	r7, sp, #0
 801a238:	6078      	str	r0, [r7, #4]
  touchgfx_printf("NetworkPresenter::%s\r\n", __FUNCTION__);
  model->p2m_getIPAddress();
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	689b      	ldr	r3, [r3, #8]
 801a23e:	4618      	mov	r0, r3
 801a240:	f7ff ff74 	bl	801a12c <_ZN5Model16p2m_getIPAddressEv>
}
 801a244:	bf00      	nop
 801a246:	3708      	adds	r7, #8
 801a248:	46bd      	mov	sp, r7
 801a24a:	bd80      	pop	{r7, pc}

0801a24c <_ZN16NetworkPresenter16m2p_SetIPAddressEPc>:

void NetworkPresenter::m2p_SetIPAddress(char* ip_addr_ptr)
{
 801a24c:	b580      	push	{r7, lr}
 801a24e:	b082      	sub	sp, #8
 801a250:	af00      	add	r7, sp, #0
 801a252:	6078      	str	r0, [r7, #4]
 801a254:	6039      	str	r1, [r7, #0]
  view.p2v_SetIPAddress(ip_addr_ptr);
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	68da      	ldr	r2, [r3, #12]
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	68db      	ldr	r3, [r3, #12]
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	3334      	adds	r3, #52	; 0x34
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	6839      	ldr	r1, [r7, #0]
 801a266:	4610      	mov	r0, r2
 801a268:	4798      	blx	r3
 801a26a:	bf00      	nop
 801a26c:	3708      	adds	r7, #8
 801a26e:	46bd      	mov	sp, r7
 801a270:	bd80      	pop	{r7, pc}

0801a272 <_ZThn4_N16NetworkPresenter16m2p_SetIPAddressEPc>:
    void m2p_SetIPAddress(char* ip_addr_ptr);
 801a272:	f1a0 0004 	sub.w	r0, r0, #4
 801a276:	f7ff bfe9 	b.w	801a24c <_ZN16NetworkPresenter16m2p_SetIPAddressEPc>
	...

0801a27c <_ZN11NetworkViewD1Ev>:

class NetworkView : public NetworkViewBase
{
public:
    NetworkView();
    virtual ~NetworkView() {}
 801a27c:	b580      	push	{r7, lr}
 801a27e:	b082      	sub	sp, #8
 801a280:	af00      	add	r7, sp, #0
 801a282:	6078      	str	r0, [r7, #4]
 801a284:	4a05      	ldr	r2, [pc, #20]	; (801a29c <_ZN11NetworkViewD1Ev+0x20>)
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	601a      	str	r2, [r3, #0]
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	4618      	mov	r0, r3
 801a28e:	f7fe fca3 	bl	8018bd8 <_ZN15NetworkViewBaseD1Ev>
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	4618      	mov	r0, r3
 801a296:	3708      	adds	r7, #8
 801a298:	46bd      	mov	sp, r7
 801a29a:	bd80      	pop	{r7, pc}
 801a29c:	080246e4 	.word	0x080246e4

0801a2a0 <_ZN11NetworkViewD0Ev>:
 801a2a0:	b580      	push	{r7, lr}
 801a2a2:	b082      	sub	sp, #8
 801a2a4:	af00      	add	r7, sp, #0
 801a2a6:	6078      	str	r0, [r7, #4]
 801a2a8:	6878      	ldr	r0, [r7, #4]
 801a2aa:	f7ff ffe7 	bl	801a27c <_ZN11NetworkViewD1Ev>
 801a2ae:	f44f 714f 	mov.w	r1, #828	; 0x33c
 801a2b2:	6878      	ldr	r0, [r7, #4]
 801a2b4:	f006 ff63 	bl	802117e <_ZdlPvj>
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	4618      	mov	r0, r3
 801a2bc:	3708      	adds	r7, #8
 801a2be:	46bd      	mov	sp, r7
 801a2c0:	bd80      	pop	{r7, pc}
	...

0801a2c4 <_ZN11NetworkViewC1Ev>:
#include <gui/network_screen/NetworkView.hpp>

NetworkView::NetworkView()
 801a2c4:	b580      	push	{r7, lr}
 801a2c6:	b082      	sub	sp, #8
 801a2c8:	af00      	add	r7, sp, #0
 801a2ca:	6078      	str	r0, [r7, #4]
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	4618      	mov	r0, r3
 801a2d0:	f7fe fcee 	bl	8018cb0 <_ZN15NetworkViewBaseC1Ev>
 801a2d4:	4a03      	ldr	r2, [pc, #12]	; (801a2e4 <_ZN11NetworkViewC1Ev+0x20>)
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	601a      	str	r2, [r3, #0]
{

}
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	4618      	mov	r0, r3
 801a2de:	3708      	adds	r7, #8
 801a2e0:	46bd      	mov	sp, r7
 801a2e2:	bd80      	pop	{r7, pc}
 801a2e4:	080246e4 	.word	0x080246e4

0801a2e8 <_ZN11NetworkView11setupScreenEv>:

void NetworkView::setupScreen()
{
 801a2e8:	b580      	push	{r7, lr}
 801a2ea:	b082      	sub	sp, #8
 801a2ec:	af00      	add	r7, sp, #0
 801a2ee:	6078      	str	r0, [r7, #4]
    NetworkViewBase::setupScreen();
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	4618      	mov	r0, r3
 801a2f4:	f7fe ff62 	bl	80191bc <_ZN15NetworkViewBase11setupScreenEv>

    /* Set invalid IP and request to get current */
    Unicode::strncpy(&ipAddrTextBuffer[0], "0.0.0.0", IPADDRTEXT_SIZE);
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	f503 7341 	add.w	r3, r3, #772	; 0x304
 801a2fe:	2210      	movs	r2, #16
 801a300:	4909      	ldr	r1, [pc, #36]	; (801a328 <_ZN11NetworkView11setupScreenEv+0x40>)
 801a302:	4618      	mov	r0, r3
 801a304:	f004 ffca 	bl	801f29c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
    ipAddrText.invalidate();
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801a30e:	4618      	mov	r0, r3
 801a310:	f004 fa29 	bl	801e766 <_ZNK8touchgfx8Drawable10invalidateEv>
    getIPAddress();
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	681b      	ldr	r3, [r3, #0]
 801a318:	3330      	adds	r3, #48	; 0x30
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	6878      	ldr	r0, [r7, #4]
 801a31e:	4798      	blx	r3
}
 801a320:	bf00      	nop
 801a322:	3708      	adds	r7, #8
 801a324:	46bd      	mov	sp, r7
 801a326:	bd80      	pop	{r7, pc}
 801a328:	08022c00 	.word	0x08022c00

0801a32c <_ZN11NetworkView14tearDownScreenEv>:

void NetworkView::tearDownScreen()
{
 801a32c:	b580      	push	{r7, lr}
 801a32e:	b082      	sub	sp, #8
 801a330:	af00      	add	r7, sp, #0
 801a332:	6078      	str	r0, [r7, #4]
    NetworkViewBase::tearDownScreen();
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	4618      	mov	r0, r3
 801a338:	f7fb fabe 	bl	80158b8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801a33c:	bf00      	nop
 801a33e:	3708      	adds	r7, #8
 801a340:	46bd      	mov	sp, r7
 801a342:	bd80      	pop	{r7, pc}

0801a344 <_ZN11NetworkView16tcpButtonPressedEv>:

void NetworkView::tcpButtonPressed()
{
 801a344:	b580      	push	{r7, lr}
 801a346:	b084      	sub	sp, #16
 801a348:	af00      	add	r7, sp, #0
 801a34a:	6078      	str	r0, [r7, #4]
  int tmpVal = 77; //Unicode::atoi(countTxt.getWildcard());
 801a34c:	234d      	movs	r3, #77	; 0x4d
 801a34e:	60fb      	str	r3, [r7, #12]
  touchgfx_printf("NetworkView::%s = %d\r\n", __FUNCTION__, tmpVal);
  presenter->v2p_SendTCPData(tmpVal);
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a354:	68f9      	ldr	r1, [r7, #12]
 801a356:	4618      	mov	r0, r3
 801a358:	f7ff ff5c 	bl	801a214 <_ZN16NetworkPresenter15v2p_SendTCPDataEi>
}
 801a35c:	bf00      	nop
 801a35e:	3710      	adds	r7, #16
 801a360:	46bd      	mov	sp, r7
 801a362:	bd80      	pop	{r7, pc}

0801a364 <_ZN11NetworkView12getIPAddressEv>:

void NetworkView::getIPAddress()
{
 801a364:	b580      	push	{r7, lr}
 801a366:	b082      	sub	sp, #8
 801a368:	af00      	add	r7, sp, #0
 801a36a:	6078      	str	r0, [r7, #4]
  touchgfx_printf("NetworkView::%s\r\n", __FUNCTION__);
  presenter->v2p_getIPAddress();
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a370:	4618      	mov	r0, r3
 801a372:	f7ff ff5e 	bl	801a232 <_ZN16NetworkPresenter16v2p_getIPAddressEv>
}
 801a376:	bf00      	nop
 801a378:	3708      	adds	r7, #8
 801a37a:	46bd      	mov	sp, r7
 801a37c:	bd80      	pop	{r7, pc}

0801a37e <_ZN11NetworkView16p2v_SetIPAddressEPc>:

void NetworkView::p2v_SetIPAddress(char* ip_addr_ptr)
{
 801a37e:	b580      	push	{r7, lr}
 801a380:	b082      	sub	sp, #8
 801a382:	af00      	add	r7, sp, #0
 801a384:	6078      	str	r0, [r7, #4]
 801a386:	6039      	str	r1, [r7, #0]
    // Unicode::strncpy(&ipAddrTextBuffer[0], "192.168.0.0", IPADDRTEXT_SIZE);
    Unicode::strncpy(&ipAddrTextBuffer[0], ip_addr_ptr, IPADDRTEXT_SIZE);
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	f503 7341 	add.w	r3, r3, #772	; 0x304
 801a38e:	2210      	movs	r2, #16
 801a390:	6839      	ldr	r1, [r7, #0]
 801a392:	4618      	mov	r0, r3
 801a394:	f004 ff82 	bl	801f29c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	ipAddrText.resizeToCurrentText();
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801a39e:	4618      	mov	r0, r3
 801a3a0:	f7f3 fcb0 	bl	800dd04 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ipAddrText.invalidate();
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801a3aa:	4618      	mov	r0, r3
 801a3ac:	f004 f9db 	bl	801e766 <_ZNK8touchgfx8Drawable10invalidateEv>
 801a3b0:	bf00      	nop
 801a3b2:	3708      	adds	r7, #8
 801a3b4:	46bd      	mov	sp, r7
 801a3b6:	bd80      	pop	{r7, pc}

0801a3b8 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 801a3b8:	b480      	push	{r7}
 801a3ba:	b083      	sub	sp, #12
 801a3bc:	af00      	add	r7, sp, #0
 801a3be:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	2200      	movs	r2, #0
 801a3c4:	801a      	strh	r2, [r3, #0]
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	2200      	movs	r2, #0
 801a3ca:	805a      	strh	r2, [r3, #2]
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	2200      	movs	r2, #0
 801a3d0:	809a      	strh	r2, [r3, #4]
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	2200      	movs	r2, #0
 801a3d6:	80da      	strh	r2, [r3, #6]
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	2200      	movs	r2, #0
 801a3dc:	811a      	strh	r2, [r3, #8]
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	2200      	movs	r2, #0
 801a3e2:	815a      	strh	r2, [r3, #10]
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	2200      	movs	r2, #0
 801a3e8:	819a      	strh	r2, [r3, #12]
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	2200      	movs	r2, #0
 801a3ee:	739a      	strb	r2, [r3, #14]
        {
        }
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	4618      	mov	r0, r3
 801a3f4:	370c      	adds	r7, #12
 801a3f6:	46bd      	mov	sp, r7
 801a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3fc:	4770      	bx	lr

0801a3fe <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 801a3fe:	b580      	push	{r7, lr}
 801a400:	b082      	sub	sp, #8
 801a402:	af00      	add	r7, sp, #0
 801a404:	6078      	str	r0, [r7, #4]
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	4618      	mov	r0, r3
 801a40a:	f7ff ffd5 	bl	801a3b8 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	2200      	movs	r2, #0
 801a412:	611a      	str	r2, [r3, #16]
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	2200      	movs	r2, #0
 801a418:	829a      	strh	r2, [r3, #20]
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	4618      	mov	r0, r3
 801a41e:	3708      	adds	r7, #8
 801a420:	46bd      	mov	sp, r7
 801a422:	bd80      	pop	{r7, pc}

0801a424 <_ZN8touchgfx18MCUInstrumentationC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructor. Initializes members.
     */
    MCUInstrumentation():
 801a424:	b480      	push	{r7}
 801a426:	b083      	sub	sp, #12
 801a428:	af00      	add	r7, sp, #0
 801a42a:	6078      	str	r0, [r7, #4]
        cc_consumed(0),
        cc_in(0)
 801a42c:	4a07      	ldr	r2, [pc, #28]	; (801a44c <_ZN8touchgfx18MCUInstrumentationC1Ev+0x28>)
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	601a      	str	r2, [r3, #0]
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	2200      	movs	r2, #0
 801a436:	605a      	str	r2, [r3, #4]
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	2200      	movs	r2, #0
 801a43c:	609a      	str	r2, [r3, #8]
    {
    }
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	4618      	mov	r0, r3
 801a442:	370c      	adds	r7, #12
 801a444:	46bd      	mov	sp, r7
 801a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a44a:	4770      	bx	lr
 801a44c:	0802482c 	.word	0x0802482c

0801a450 <_ZN8touchgfx18MCUInstrumentationD1Ev>:
     *
     * @brief Virtual destructor.
     *
     *        Virtual destructor.
     */
    virtual ~MCUInstrumentation() {}
 801a450:	b480      	push	{r7}
 801a452:	b083      	sub	sp, #12
 801a454:	af00      	add	r7, sp, #0
 801a456:	6078      	str	r0, [r7, #4]
 801a458:	4a04      	ldr	r2, [pc, #16]	; (801a46c <_ZN8touchgfx18MCUInstrumentationD1Ev+0x1c>)
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	601a      	str	r2, [r3, #0]
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	4618      	mov	r0, r3
 801a462:	370c      	adds	r7, #12
 801a464:	46bd      	mov	sp, r7
 801a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a46a:	4770      	bx	lr
 801a46c:	0802482c 	.word	0x0802482c

0801a470 <_ZN8touchgfx18MCUInstrumentationD0Ev>:
 801a470:	b580      	push	{r7, lr}
 801a472:	b082      	sub	sp, #8
 801a474:	af00      	add	r7, sp, #0
 801a476:	6078      	str	r0, [r7, #4]
 801a478:	6878      	ldr	r0, [r7, #4]
 801a47a:	f7ff ffe9 	bl	801a450 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 801a47e:	210c      	movs	r1, #12
 801a480:	6878      	ldr	r0, [r7, #4]
 801a482:	f006 fe7c 	bl	802117e <_ZdlPvj>
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	4618      	mov	r0, r3
 801a48a:	3708      	adds	r7, #8
 801a48c:	46bd      	mov	sp, r7
 801a48e:	bd80      	pop	{r7, pc}

0801a490 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb>:
     *
     *        Sets MCU activity high.
     *
     * @param active if True, inactive otherwise.
     */
    virtual void setMCUActive(bool active)
 801a490:	b580      	push	{r7, lr}
 801a492:	b084      	sub	sp, #16
 801a494:	af00      	add	r7, sp, #0
 801a496:	6078      	str	r0, [r7, #4]
 801a498:	460b      	mov	r3, r1
 801a49a:	70fb      	strb	r3, [r7, #3]
    {
        if (active) //idle task sched out
 801a49c:	78fb      	ldrb	r3, [r7, #3]
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d011      	beq.n	801a4c6 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x36>
        {
            uint32_t cc_temp = getCPUCycles() - cc_in;
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	3310      	adds	r3, #16
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	6878      	ldr	r0, [r7, #4]
 801a4ac:	4798      	blx	r3
 801a4ae:	4602      	mov	r2, r0
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	689b      	ldr	r3, [r3, #8]
 801a4b4:	1ad3      	subs	r3, r2, r3
 801a4b6:	60fb      	str	r3, [r7, #12]
            cc_consumed += cc_temp;
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	685a      	ldr	r2, [r3, #4]
 801a4bc:	68fb      	ldr	r3, [r7, #12]
 801a4be:	441a      	add	r2, r3
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	605a      	str	r2, [r3, #4]
        }
        else //idle task sched in
        {
            cc_in = getCPUCycles();
        }
    }
 801a4c4:	e008      	b.n	801a4d8 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x48>
            cc_in = getCPUCycles();
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	3310      	adds	r3, #16
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	6878      	ldr	r0, [r7, #4]
 801a4d0:	4798      	blx	r3
 801a4d2:	4602      	mov	r2, r0
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	609a      	str	r2, [r3, #8]
    }
 801a4d8:	bf00      	nop
 801a4da:	3710      	adds	r7, #16
 801a4dc:	46bd      	mov	sp, r7
 801a4de:	bd80      	pop	{r7, pc}

0801a4e0 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     *        Gets number of consumed clock cycles.
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
 801a4e0:	b480      	push	{r7}
 801a4e2:	b083      	sub	sp, #12
 801a4e4:	af00      	add	r7, sp, #0
 801a4e6:	6078      	str	r0, [r7, #4]
    {
        return cc_consumed;
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	685b      	ldr	r3, [r3, #4]
    }
 801a4ec:	4618      	mov	r0, r3
 801a4ee:	370c      	adds	r7, #12
 801a4f0:	46bd      	mov	sp, r7
 801a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4f6:	4770      	bx	lr

0801a4f8 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     *        Sets number of consumed clock cycles.
     *
     * @param val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
 801a4f8:	b480      	push	{r7}
 801a4fa:	b083      	sub	sp, #12
 801a4fc:	af00      	add	r7, sp, #0
 801a4fe:	6078      	str	r0, [r7, #4]
 801a500:	6039      	str	r1, [r7, #0]
    {
        cc_consumed = val;
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	683a      	ldr	r2, [r7, #0]
 801a506:	605a      	str	r2, [r3, #4]
    }
 801a508:	bf00      	nop
 801a50a:	370c      	adds	r7, #12
 801a50c:	46bd      	mov	sp, r7
 801a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a512:	4770      	bx	lr

0801a514 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 801a514:	b580      	push	{r7, lr}
 801a516:	b084      	sub	sp, #16
 801a518:	af00      	add	r7, sp, #0
 801a51a:	60f8      	str	r0, [r7, #12]
 801a51c:	60b9      	str	r1, [r7, #8]
 801a51e:	607a      	str	r2, [r7, #4]
 801a520:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 801a522:	4a3e      	ldr	r2, [pc, #248]	; (801a61c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x108>)
 801a524:	68fb      	ldr	r3, [r7, #12]
 801a526:	601a      	str	r2, [r3, #0]
 801a528:	68fb      	ldr	r3, [r7, #12]
 801a52a:	68ba      	ldr	r2, [r7, #8]
 801a52c:	605a      	str	r2, [r3, #4]
 801a52e:	68fb      	ldr	r3, [r7, #12]
 801a530:	687a      	ldr	r2, [r7, #4]
 801a532:	609a      	str	r2, [r3, #8]
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	683a      	ldr	r2, [r7, #0]
 801a538:	60da      	str	r2, [r3, #12]
 801a53a:	68fb      	ldr	r3, [r7, #12]
 801a53c:	2200      	movs	r2, #0
 801a53e:	611a      	str	r2, [r3, #16]
 801a540:	68fb      	ldr	r3, [r7, #12]
 801a542:	2200      	movs	r2, #0
 801a544:	615a      	str	r2, [r3, #20]
 801a546:	68fb      	ldr	r3, [r7, #12]
 801a548:	3318      	adds	r3, #24
 801a54a:	4618      	mov	r0, r3
 801a54c:	f7ff ff57 	bl	801a3fe <_ZN8touchgfx8GesturesC1Ev>
 801a550:	68fb      	ldr	r3, [r7, #12]
 801a552:	2200      	movs	r2, #0
 801a554:	635a      	str	r2, [r3, #52]	; 0x34
 801a556:	68fb      	ldr	r3, [r7, #12]
 801a558:	2200      	movs	r2, #0
 801a55a:	639a      	str	r2, [r3, #56]	; 0x38
 801a55c:	68fb      	ldr	r3, [r7, #12]
 801a55e:	2200      	movs	r2, #0
 801a560:	63da      	str	r2, [r3, #60]	; 0x3c
 801a562:	68fb      	ldr	r3, [r7, #12]
 801a564:	2200      	movs	r2, #0
 801a566:	641a      	str	r2, [r3, #64]	; 0x40
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	2200      	movs	r2, #0
 801a56c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	2201      	movs	r2, #1
 801a574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	2201      	movs	r2, #1
 801a57c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	2201      	movs	r2, #1
 801a584:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 801a588:	68fb      	ldr	r3, [r7, #12]
 801a58a:	2200      	movs	r2, #0
 801a58c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 801a590:	68fb      	ldr	r3, [r7, #12]
 801a592:	2200      	movs	r2, #0
 801a594:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 801a598:	68fb      	ldr	r3, [r7, #12]
 801a59a:	2201      	movs	r2, #1
 801a59c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 801a5a0:	68fb      	ldr	r3, [r7, #12]
 801a5a2:	2200      	movs	r2, #0
 801a5a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 801a5a8:	68fb      	ldr	r3, [r7, #12]
 801a5aa:	2200      	movs	r2, #0
 801a5ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 801a5b0:	68fb      	ldr	r3, [r7, #12]
 801a5b2:	2200      	movs	r2, #0
 801a5b4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 801a5b8:	68fb      	ldr	r3, [r7, #12]
 801a5ba:	2200      	movs	r2, #0
 801a5bc:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 801a5c0:	68fb      	ldr	r3, [r7, #12]
 801a5c2:	2200      	movs	r2, #0
 801a5c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 801a5c8:	68fb      	ldr	r3, [r7, #12]
 801a5ca:	2200      	movs	r2, #0
 801a5cc:	661a      	str	r2, [r3, #96]	; 0x60
 801a5ce:	68fb      	ldr	r3, [r7, #12]
 801a5d0:	2200      	movs	r2, #0
 801a5d2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        instance = this;
 801a5d6:	4a12      	ldr	r2, [pc, #72]	; (801a620 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>)
 801a5d8:	68fb      	ldr	r3, [r7, #12]
 801a5da:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 801a5dc:	4a11      	ldr	r2, [pc, #68]	; (801a624 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x110>)
 801a5de:	8b3b      	ldrh	r3, [r7, #24]
 801a5e0:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 801a5e2:	4a11      	ldr	r2, [pc, #68]	; (801a628 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x114>)
 801a5e4:	8bbb      	ldrh	r3, [r7, #28]
 801a5e6:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 801a5e8:	4b10      	ldr	r3, [pc, #64]	; (801a62c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x118>)
 801a5ea:	2200      	movs	r2, #0
 801a5ec:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801a5ee:	4b0d      	ldr	r3, [pc, #52]	; (801a624 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x110>)
 801a5f0:	881a      	ldrh	r2, [r3, #0]
 801a5f2:	4b0f      	ldr	r3, [pc, #60]	; (801a630 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x11c>)
 801a5f4:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 801a5f6:	4b0c      	ldr	r3, [pc, #48]	; (801a628 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x114>)
 801a5f8:	881a      	ldrh	r2, [r3, #0]
 801a5fa:	4b0e      	ldr	r3, [pc, #56]	; (801a634 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 801a5fc:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 801a5fe:	8b3a      	ldrh	r2, [r7, #24]
 801a600:	8bbb      	ldrh	r3, [r7, #28]
 801a602:	429a      	cmp	r2, r3
 801a604:	d301      	bcc.n	801a60a <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xf6>
 801a606:	2200      	movs	r2, #0
 801a608:	e000      	b.n	801a60c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xf8>
 801a60a:	2201      	movs	r2, #1
 801a60c:	68fb      	ldr	r3, [r7, #12]
 801a60e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	4618      	mov	r0, r3
 801a616:	3710      	adds	r7, #16
 801a618:	46bd      	mov	sp, r7
 801a61a:	bd80      	pop	{r7, pc}
 801a61c:	08024d50 	.word	0x08024d50
 801a620:	2000a32c 	.word	0x2000a32c
 801a624:	2000a320 	.word	0x2000a320
 801a628:	2000a322 	.word	0x2000a322
 801a62c:	2000a324 	.word	0x2000a324
 801a630:	2000a326 	.word	0x2000a326
 801a634:	2000a328 	.word	0x2000a328

0801a638 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL() { }
 801a638:	b480      	push	{r7}
 801a63a:	b083      	sub	sp, #12
 801a63c:	af00      	add	r7, sp, #0
 801a63e:	6078      	str	r0, [r7, #4]
 801a640:	4a04      	ldr	r2, [pc, #16]	; (801a654 <_ZN8touchgfx3HALD1Ev+0x1c>)
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	601a      	str	r2, [r3, #0]
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	4618      	mov	r0, r3
 801a64a:	370c      	adds	r7, #12
 801a64c:	46bd      	mov	sp, r7
 801a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a652:	4770      	bx	lr
 801a654:	08024d50 	.word	0x08024d50

0801a658 <_ZN8touchgfx3HALD0Ev>:
 801a658:	b580      	push	{r7, lr}
 801a65a:	b082      	sub	sp, #8
 801a65c:	af00      	add	r7, sp, #0
 801a65e:	6078      	str	r0, [r7, #4]
 801a660:	6878      	ldr	r0, [r7, #4]
 801a662:	f7ff ffe9 	bl	801a638 <_ZN8touchgfx3HALD1Ev>
 801a666:	2168      	movs	r1, #104	; 0x68
 801a668:	6878      	ldr	r0, [r7, #4]
 801a66a:	f006 fd88 	bl	802117e <_ZdlPvj>
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	4618      	mov	r0, r3
 801a672:	3708      	adds	r7, #8
 801a674:	46bd      	mov	sp, r7
 801a676:	bd80      	pop	{r7, pc}

0801a678 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
     *
     * @param enableLock True to lock DMA transfers to the front porch signal. Conservative,
     *                   default setting. False to disable, which will normally yield substantial
     *                   performance improvement.
     */
    void lockDMAToFrontPorch(bool enableLock)
 801a678:	b480      	push	{r7}
 801a67a:	b083      	sub	sp, #12
 801a67c:	af00      	add	r7, sp, #0
 801a67e:	6078      	str	r0, [r7, #4]
 801a680:	460b      	mov	r3, r1
 801a682:	70fb      	strb	r3, [r7, #3]
    {
        lockDMAToPorch = enableLock;
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	78fa      	ldrb	r2, [r7, #3]
 801a688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    }
 801a68c:	bf00      	nop
 801a68e:	370c      	adds	r7, #12
 801a690:	46bd      	mov	sp, r7
 801a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a696:	4770      	bx	lr

0801a698 <_ZN8touchgfx3HAL24setFrameRateCompensationEb>:
     *
     *        Enables or disables compensation for lost frames. See knowledge base article.
     *
     * @param enabled true to enable, false to disable.
     */
    void setFrameRateCompensation(bool enabled)
 801a698:	b480      	push	{r7}
 801a69a:	b083      	sub	sp, #12
 801a69c:	af00      	add	r7, sp, #0
 801a69e:	6078      	str	r0, [r7, #4]
 801a6a0:	460b      	mov	r3, r1
 801a6a2:	70fb      	strb	r3, [r7, #3]
    {
        vSyncCompensationEnabled = enabled;
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	78fa      	ldrb	r2, [r7, #3]
 801a6a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    };
 801a6ac:	bf00      	nop
 801a6ae:	370c      	adds	r7, #12
 801a6b0:	46bd      	mov	sp, r7
 801a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6b6:	4770      	bx	lr

0801a6b8 <_ZN8touchgfx3HAL18setTouchSampleRateEa>:
     *
     *        Sets the number of ticks between each touch screen sample.
     *
     * @param sampleRateInTicks Sample rate. Default is 1 (every tick).
     */
    void setTouchSampleRate(int8_t sampleRateInTicks)
 801a6b8:	b480      	push	{r7}
 801a6ba:	b083      	sub	sp, #12
 801a6bc:	af00      	add	r7, sp, #0
 801a6be:	6078      	str	r0, [r7, #4]
 801a6c0:	460b      	mov	r3, r1
 801a6c2:	70fb      	strb	r3, [r7, #3]
    {
        if (sampleRateInTicks > 0)
 801a6c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	dd03      	ble.n	801a6d4 <_ZN8touchgfx3HAL18setTouchSampleRateEa+0x1c>
        {
            touchSampleRate = sampleRateInTicks;
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	78fa      	ldrb	r2, [r7, #3]
 801a6d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
    }
 801a6d4:	bf00      	nop
 801a6d6:	370c      	adds	r7, #12
 801a6d8:	46bd      	mov	sp, r7
 801a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6de:	4770      	bx	lr

0801a6e0 <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>:
     *
     *        Stores a pointer to an instance of an MCU specific instrumentation class.
     *
     * @param [in] mcuInstr pointer to MCU instrumentation.
     */
    void setMCUInstrumentation(MCUInstrumentation* mcuInstr)
 801a6e0:	b480      	push	{r7}
 801a6e2:	b083      	sub	sp, #12
 801a6e4:	af00      	add	r7, sp, #0
 801a6e6:	6078      	str	r0, [r7, #4]
 801a6e8:	6039      	str	r1, [r7, #0]
    {
        mcuInstrumentation = mcuInstr;
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	683a      	ldr	r2, [r7, #0]
 801a6ee:	611a      	str	r2, [r3, #16]
    }
 801a6f0:	bf00      	nop
 801a6f2:	370c      	adds	r7, #12
 801a6f4:	46bd      	mov	sp, r7
 801a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6fa:	4770      	bx	lr

0801a6fc <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>:
     *        This method sets a flag that determines if generic HAL should calculate MCU load
     *        based on concrete MCU instrumentation.
     *
     * @param enabled If true, set flag to update MCU load.
     */
    void enableMCULoadCalculation(bool enabled)
 801a6fc:	b480      	push	{r7}
 801a6fe:	b083      	sub	sp, #12
 801a700:	af00      	add	r7, sp, #0
 801a702:	6078      	str	r0, [r7, #4]
 801a704:	460b      	mov	r3, r1
 801a706:	70fb      	strb	r3, [r7, #3]
    {
        updateMCULoad = enabled;
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	78fa      	ldrb	r2, [r7, #3]
 801a70c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    }
 801a710:	bf00      	nop
 801a712:	370c      	adds	r7, #12
 801a714:	46bd      	mov	sp, r7
 801a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a71a:	4770      	bx	lr

0801a71c <_ZN8touchgfx3HAL13setFingerSizeEh>:
     *        algorithm will consider the size of the drawable and the distance from the touch
     *        point.
     *
     * @param [in] size the size of the finger.
     */
    void setFingerSize(uint8_t size)
 801a71c:	b480      	push	{r7}
 801a71e:	b083      	sub	sp, #12
 801a720:	af00      	add	r7, sp, #0
 801a722:	6078      	str	r0, [r7, #4]
 801a724:	460b      	mov	r3, r1
 801a726:	70fb      	strb	r3, [r7, #3]
    {
        fingerSize = size;
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	78fa      	ldrb	r2, [r7, #3]
 801a72c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 801a730:	bf00      	nop
 801a732:	370c      	adds	r7, #12
 801a734:	46bd      	mov	sp, r7
 801a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a73a:	4770      	bx	lr

0801a73c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 801a73c:	b480      	push	{r7}
 801a73e:	b083      	sub	sp, #12
 801a740:	af00      	add	r7, sp, #0
 801a742:	6078      	str	r0, [r7, #4]
        texts = t;
 801a744:	4a04      	ldr	r2, [pc, #16]	; (801a758 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	6013      	str	r3, [r2, #0]
    }
 801a74a:	bf00      	nop
 801a74c:	370c      	adds	r7, #12
 801a74e:	46bd      	mov	sp, r7
 801a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a754:	4770      	bx	lr
 801a756:	bf00      	nop
 801a758:	2000a398 	.word	0x2000a398

0801a75c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 801a75c:	b480      	push	{r7}
 801a75e:	b085      	sub	sp, #20
 801a760:	af00      	add	r7, sp, #0
 801a762:	60f8      	str	r0, [r7, #12]
 801a764:	60b9      	str	r1, [r7, #8]
 801a766:	607a      	str	r2, [r7, #4]
 801a768:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 801a76a:	4a0b      	ldr	r2, [pc, #44]	; (801a798 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 801a76c:	68fb      	ldr	r3, [r7, #12]
 801a76e:	601a      	str	r2, [r3, #0]
 801a770:	68fb      	ldr	r3, [r7, #12]
 801a772:	68ba      	ldr	r2, [r7, #8]
 801a774:	605a      	str	r2, [r3, #4]
 801a776:	68fb      	ldr	r3, [r7, #12]
 801a778:	687a      	ldr	r2, [r7, #4]
 801a77a:	609a      	str	r2, [r3, #8]
 801a77c:	68fb      	ldr	r3, [r7, #12]
 801a77e:	683a      	ldr	r2, [r7, #0]
 801a780:	60da      	str	r2, [r3, #12]
 801a782:	68fb      	ldr	r3, [r7, #12]
 801a784:	69ba      	ldr	r2, [r7, #24]
 801a786:	611a      	str	r2, [r3, #16]
    {
    }
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	4618      	mov	r0, r3
 801a78c:	3714      	adds	r7, #20
 801a78e:	46bd      	mov	sp, r7
 801a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a794:	4770      	bx	lr
 801a796:	bf00      	nop
 801a798:	0802481c 	.word	0x0802481c

0801a79c <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 801a79c:	b480      	push	{r7}
 801a79e:	b083      	sub	sp, #12
 801a7a0:	af00      	add	r7, sp, #0
 801a7a2:	6078      	str	r0, [r7, #4]
    {
 801a7a4:	4a04      	ldr	r2, [pc, #16]	; (801a7b8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	601a      	str	r2, [r3, #0]
    }
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	4618      	mov	r0, r3
 801a7ae:	370c      	adds	r7, #12
 801a7b0:	46bd      	mov	sp, r7
 801a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7b6:	4770      	bx	lr
 801a7b8:	0802481c 	.word	0x0802481c

0801a7bc <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801a7bc:	b580      	push	{r7, lr}
 801a7be:	b082      	sub	sp, #8
 801a7c0:	af00      	add	r7, sp, #0
 801a7c2:	6078      	str	r0, [r7, #4]
    }
 801a7c4:	6878      	ldr	r0, [r7, #4]
 801a7c6:	f7ff ffe9 	bl	801a79c <_ZN8touchgfx7MVPHeapD1Ev>
 801a7ca:	2114      	movs	r1, #20
 801a7cc:	6878      	ldr	r0, [r7, #4]
 801a7ce:	f006 fcd6 	bl	802117e <_ZdlPvj>
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	4618      	mov	r0, r3
 801a7d6:	3708      	adds	r7, #8
 801a7d8:	46bd      	mov	sp, r7
 801a7da:	bd80      	pop	{r7, pc}

0801a7dc <_ZN8touchgfx3LCDD1Ev>:
    virtual ~LCD() { }
 801a7dc:	b480      	push	{r7}
 801a7de:	b083      	sub	sp, #12
 801a7e0:	af00      	add	r7, sp, #0
 801a7e2:	6078      	str	r0, [r7, #4]
 801a7e4:	4a04      	ldr	r2, [pc, #16]	; (801a7f8 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	601a      	str	r2, [r3, #0]
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	4618      	mov	r0, r3
 801a7ee:	370c      	adds	r7, #12
 801a7f0:	46bd      	mov	sp, r7
 801a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7f6:	4770      	bx	lr
 801a7f8:	080247e8 	.word	0x080247e8

0801a7fc <_ZN8touchgfx3LCDD0Ev>:
 801a7fc:	b580      	push	{r7, lr}
 801a7fe:	b082      	sub	sp, #8
 801a800:	af00      	add	r7, sp, #0
 801a802:	6078      	str	r0, [r7, #4]
 801a804:	6878      	ldr	r0, [r7, #4]
 801a806:	f7ff ffe9 	bl	801a7dc <_ZN8touchgfx3LCDD1Ev>
 801a80a:	2104      	movs	r1, #4
 801a80c:	6878      	ldr	r0, [r7, #4]
 801a80e:	f006 fcb6 	bl	802117e <_ZdlPvj>
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	4618      	mov	r0, r3
 801a816:	3708      	adds	r7, #8
 801a818:	46bd      	mov	sp, r7
 801a81a:	bd80      	pop	{r7, pc}

0801a81c <_ZN8touchgfx3LCD4initEv>:
    virtual void init() { }
 801a81c:	b480      	push	{r7}
 801a81e:	b083      	sub	sp, #12
 801a820:	af00      	add	r7, sp, #0
 801a822:	6078      	str	r0, [r7, #4]
 801a824:	bf00      	nop
 801a826:	370c      	adds	r7, #12
 801a828:	46bd      	mov	sp, r7
 801a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a82e:	4770      	bx	lr

0801a830 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801a830:	b580      	push	{r7, lr}
 801a832:	b082      	sub	sp, #8
 801a834:	af00      	add	r7, sp, #0
 801a836:	6078      	str	r0, [r7, #4]
 801a838:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 801a83a:	683b      	ldr	r3, [r7, #0]
 801a83c:	4618      	mov	r0, r3
 801a83e:	f7f9 f9f5 	bl	8013c2c <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 801a842:	bf00      	nop
 801a844:	3708      	adds	r7, #8
 801a846:	46bd      	mov	sp, r7
 801a848:	bd80      	pop	{r7, pc}
	...

0801a84c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(AbstractPartition& presenters, AbstractPartition& views, AbstractPartition& transitions, FrontendApplication& app)
 801a84c:	b580      	push	{r7, lr}
 801a84e:	b086      	sub	sp, #24
 801a850:	af02      	add	r7, sp, #8
 801a852:	60f8      	str	r0, [r7, #12]
 801a854:	60b9      	str	r1, [r7, #8]
 801a856:	607a      	str	r2, [r7, #4]
 801a858:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 801a85a:	68f8      	ldr	r0, [r7, #12]
 801a85c:	69bb      	ldr	r3, [r7, #24]
 801a85e:	9300      	str	r3, [sp, #0]
 801a860:	683b      	ldr	r3, [r7, #0]
 801a862:	687a      	ldr	r2, [r7, #4]
 801a864:	68b9      	ldr	r1, [r7, #8]
 801a866:	f7ff ff79 	bl	801a75c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 801a86a:	4a04      	ldr	r2, [pc, #16]	; (801a87c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 801a86c:	68fb      	ldr	r3, [r7, #12]
 801a86e:	601a      	str	r2, [r3, #0]
    {

    }
 801a870:	68fb      	ldr	r3, [r7, #12]
 801a872:	4618      	mov	r0, r3
 801a874:	3710      	adds	r7, #16
 801a876:	46bd      	mov	sp, r7
 801a878:	bd80      	pop	{r7, pc}
 801a87a:	bf00      	nop
 801a87c:	080247d4 	.word	0x080247d4

0801a880 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 801a880:	b580      	push	{r7, lr}
 801a882:	af00      	add	r7, sp, #0
 801a884:	4801      	ldr	r0, [pc, #4]	; (801a88c <__tcf_0+0xc>)
 801a886:	f000 fab7 	bl	801adf8 <_ZN12FrontendHeapD1Ev>
 801a88a:	bd80      	pop	{r7, pc}
 801a88c:	20008f20 	.word	0x20008f20

0801a890 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 801a890:	b580      	push	{r7, lr}
 801a892:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 801a894:	4b08      	ldr	r3, [pc, #32]	; (801a8b8 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	f003 0301 	and.w	r3, r3, #1
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d108      	bne.n	801a8b2 <_ZN12FrontendHeap11getInstanceEv+0x22>
 801a8a0:	4806      	ldr	r0, [pc, #24]	; (801a8bc <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 801a8a2:	f000 f831 	bl	801a908 <_ZN12FrontendHeapC1Ev>
 801a8a6:	4b04      	ldr	r3, [pc, #16]	; (801a8b8 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 801a8a8:	2201      	movs	r2, #1
 801a8aa:	601a      	str	r2, [r3, #0]
 801a8ac:	4804      	ldr	r0, [pc, #16]	; (801a8c0 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 801a8ae:	f006 fca1 	bl	80211f4 <atexit>
        return instance;
 801a8b2:	4b02      	ldr	r3, [pc, #8]	; (801a8bc <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 801a8b4:	4618      	mov	r0, r3
 801a8b6:	bd80      	pop	{r7, pc}
 801a8b8:	20009680 	.word	0x20009680
 801a8bc:	20008f20 	.word	0x20008f20
 801a8c0:	0801a881 	.word	0x0801a881

0801a8c4 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public MVPHeap
 801a8c4:	b580      	push	{r7, lr}
 801a8c6:	b082      	sub	sp, #8
 801a8c8:	af00      	add	r7, sp, #0
 801a8ca:	6078      	str	r0, [r7, #4]
 801a8cc:	4a05      	ldr	r2, [pc, #20]	; (801a8e4 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	601a      	str	r2, [r3, #0]
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	4618      	mov	r0, r3
 801a8d6:	f7ff ff61 	bl	801a79c <_ZN8touchgfx7MVPHeapD1Ev>
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	4618      	mov	r0, r3
 801a8de:	3708      	adds	r7, #8
 801a8e0:	46bd      	mov	sp, r7
 801a8e2:	bd80      	pop	{r7, pc}
 801a8e4:	080247d4 	.word	0x080247d4

0801a8e8 <_ZN16FrontendHeapBaseD0Ev>:
 801a8e8:	b580      	push	{r7, lr}
 801a8ea:	b082      	sub	sp, #8
 801a8ec:	af00      	add	r7, sp, #0
 801a8ee:	6078      	str	r0, [r7, #4]
 801a8f0:	6878      	ldr	r0, [r7, #4]
 801a8f2:	f7ff ffe7 	bl	801a8c4 <_ZN16FrontendHeapBaseD1Ev>
 801a8f6:	2114      	movs	r1, #20
 801a8f8:	6878      	ldr	r0, [r7, #4]
 801a8fa:	f006 fc40 	bl	802117e <_ZdlPvj>
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	4618      	mov	r0, r3
 801a902:	3708      	adds	r7, #8
 801a904:	46bd      	mov	sp, r7
 801a906:	bd80      	pop	{r7, pc}

0801a908 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 801a908:	b590      	push	{r4, r7, lr}
 801a90a:	b085      	sub	sp, #20
 801a90c:	af02      	add	r7, sp, #8
 801a90e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 801a910:	6878      	ldr	r0, [r7, #4]
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	f103 0114 	add.w	r1, r3, #20
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	f203 54ac 	addw	r4, r3, #1452	; 0x5ac
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 801a92a:	9300      	str	r3, [sp, #0]
 801a92c:	4623      	mov	r3, r4
 801a92e:	f7ff ff8d 	bl	801a84c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801a932:	4a18      	ldr	r2, [pc, #96]	; (801a994 <_ZN12FrontendHeapC1Ev+0x8c>)
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	601a      	str	r2, [r3, #0]
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	3314      	adds	r3, #20
 801a93c:	4618      	mov	r0, r3
 801a93e:	f000 f927 	bl	801ab90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18IOControlPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	332c      	adds	r3, #44	; 0x2c
 801a946:	4618      	mov	r0, r3
 801a948:	f000 f956 	bl	801abf8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 801a952:	4618      	mov	r0, r3
 801a954:	f000 f986 	bl	801ac64 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE0EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	f203 600c 	addw	r0, r3, #1548	; 0x60c
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 801a964:	687a      	ldr	r2, [r7, #4]
 801a966:	4619      	mov	r1, r3
 801a968:	f7fe fdfc 	bl	8019564 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 801a972:	4618      	mov	r0, r3
 801a974:	f7ff fb74 	bl	801a060 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 801a978:	687a      	ldr	r2, [r7, #4]
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 801a980:	4619      	mov	r1, r3
 801a982:	4610      	mov	r0, r2
 801a984:	f7ff ff54 	bl	801a830 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	4618      	mov	r0, r3
 801a98c:	370c      	adds	r7, #12
 801a98e:	46bd      	mov	sp, r7
 801a990:	bd90      	pop	{r4, r7, pc}
 801a992:	bf00      	nop
 801a994:	08024724 	.word	0x08024724

0801a998 <_ZN8touchgfx8LCD24bppD1Ev>:
 */
class LCD24bpp : public LCD
{
public:

    virtual ~LCD24bpp() {}
 801a998:	b580      	push	{r7, lr}
 801a99a:	b082      	sub	sp, #8
 801a99c:	af00      	add	r7, sp, #0
 801a99e:	6078      	str	r0, [r7, #4]
 801a9a0:	4a05      	ldr	r2, [pc, #20]	; (801a9b8 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	601a      	str	r2, [r3, #0]
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	4618      	mov	r0, r3
 801a9aa:	f7ff ff17 	bl	801a7dc <_ZN8touchgfx3LCDD1Ev>
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	4618      	mov	r0, r3
 801a9b2:	3708      	adds	r7, #8
 801a9b4:	46bd      	mov	sp, r7
 801a9b6:	bd80      	pop	{r7, pc}
 801a9b8:	08025a4c 	.word	0x08025a4c

0801a9bc <_ZN8touchgfx8LCD24bppD0Ev>:
 801a9bc:	b580      	push	{r7, lr}
 801a9be:	b082      	sub	sp, #8
 801a9c0:	af00      	add	r7, sp, #0
 801a9c2:	6078      	str	r0, [r7, #4]
 801a9c4:	6878      	ldr	r0, [r7, #4]
 801a9c6:	f7ff ffe7 	bl	801a998 <_ZN8touchgfx8LCD24bppD1Ev>
 801a9ca:	2104      	movs	r1, #4
 801a9cc:	6878      	ldr	r0, [r7, #4]
 801a9ce:	f006 fbd6 	bl	802117e <_ZdlPvj>
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	4618      	mov	r0, r3
 801a9d6:	3708      	adds	r7, #8
 801a9d8:	46bd      	mov	sp, r7
 801a9da:	bd80      	pop	{r7, pc}

0801a9dc <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    STM32F7HAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 801a9dc:	b580      	push	{r7, lr}
 801a9de:	b086      	sub	sp, #24
 801a9e0:	af02      	add	r7, sp, #8
 801a9e2:	60f8      	str	r0, [r7, #12]
 801a9e4:	60b9      	str	r1, [r7, #8]
 801a9e6:	607a      	str	r2, [r7, #4]
 801a9e8:	603b      	str	r3, [r7, #0]
 801a9ea:	68f8      	ldr	r0, [r7, #12]
 801a9ec:	8bbb      	ldrh	r3, [r7, #28]
 801a9ee:	9301      	str	r3, [sp, #4]
 801a9f0:	8b3b      	ldrh	r3, [r7, #24]
 801a9f2:	9300      	str	r3, [sp, #0]
 801a9f4:	683b      	ldr	r3, [r7, #0]
 801a9f6:	687a      	ldr	r2, [r7, #4]
 801a9f8:	68b9      	ldr	r1, [r7, #8]
 801a9fa:	f7ff fd8b 	bl	801a514 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801a9fe:	4a04      	ldr	r2, [pc, #16]	; (801aa10 <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801aa00:	68fb      	ldr	r3, [r7, #12]
 801aa02:	601a      	str	r2, [r3, #0]
    {
    }
 801aa04:	68fb      	ldr	r3, [r7, #12]
 801aa06:	4618      	mov	r0, r3
 801aa08:	3710      	adds	r7, #16
 801aa0a:	46bd      	mov	sp, r7
 801aa0c:	bd80      	pop	{r7, pc}
 801aa0e:	bf00      	nop
 801aa10:	080248c4 	.word	0x080248c4

0801aa14 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 801aa14:	b480      	push	{r7}
 801aa16:	b083      	sub	sp, #12
 801aa18:	af00      	add	r7, sp, #0
 801aa1a:	6078      	str	r0, [r7, #4]
 801aa1c:	4a04      	ldr	r2, [pc, #16]	; (801aa30 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	601a      	str	r2, [r3, #0]
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	4618      	mov	r0, r3
 801aa26:	370c      	adds	r7, #12
 801aa28:	46bd      	mov	sp, r7
 801aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa2e:	4770      	bx	lr
 801aa30:	08022d04 	.word	0x08022d04

0801aa34 <_ZN8touchgfx22STM32F7TouchControllerC1Ev>:
namespace touchgfx
{
class STM32F7TouchController: public TouchController
{
public:
    STM32F7TouchController() {}
 801aa34:	b580      	push	{r7, lr}
 801aa36:	b082      	sub	sp, #8
 801aa38:	af00      	add	r7, sp, #0
 801aa3a:	6078      	str	r0, [r7, #4]
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	4618      	mov	r0, r3
 801aa40:	f7ff ffe8 	bl	801aa14 <_ZN8touchgfx15TouchControllerC1Ev>
 801aa44:	4a03      	ldr	r2, [pc, #12]	; (801aa54 <_ZN8touchgfx22STM32F7TouchControllerC1Ev+0x20>)
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	601a      	str	r2, [r3, #0]
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	4618      	mov	r0, r3
 801aa4e:	3708      	adds	r7, #8
 801aa50:	46bd      	mov	sp, r7
 801aa52:	bd80      	pop	{r7, pc}
 801aa54:	08024a38 	.word	0x08024a38

0801aa58 <LCD_GetXSize>:

static uint32_t frameBuf0 = (uint32_t)(0xc0000000);
extern "C" {

uint32_t LCD_GetXSize(void)
{
 801aa58:	b480      	push	{r7}
 801aa5a:	af00      	add	r7, sp, #0
  return 480;
 801aa5c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 801aa60:	4618      	mov	r0, r3
 801aa62:	46bd      	mov	sp, r7
 801aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa68:	4770      	bx	lr

0801aa6a <LCD_GetYSize>:

uint32_t LCD_GetYSize(void)
{
 801aa6a:	b480      	push	{r7}
 801aa6c:	af00      	add	r7, sp, #0
  return 272;
 801aa6e:	f44f 7388 	mov.w	r3, #272	; 0x110
}
 801aa72:	4618      	mov	r0, r3
 801aa74:	46bd      	mov	sp, r7
 801aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa7a:	4770      	bx	lr

0801aa7c <_Z16GRAPHICS_HW_Initv>:
}

void GRAPHICS_HW_Init()
{
 801aa7c:	b580      	push	{r7, lr}
 801aa7e:	af00      	add	r7, sp, #0
    

    /* Initialize the SDRAM */
    MX_FMC_Init();
 801aa80:	f000 fbf0 	bl	801b264 <_Z11MX_FMC_Initv>
    MX_SDRAM_InitEx();
 801aa84:	f000 fc3a 	bl	801b2fc <_Z15MX_SDRAM_InitExv>

    /* Configure LCD */
    MX_LCD_Init();
 801aa88:	f000 fb5c 	bl	801b144 <_Z11MX_LCD_Initv>
    GPIO::init();
 801aa8c:	f000 fb31 	bl	801b0f2 <_ZN8touchgfx4GPIO4initEv>

//Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 801aa90:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 801aa94:	f243 02d2 	movw	r2, #12498	; 0x30d2
 801aa98:	601a      	str	r2, [r3, #0]
}
 801aa9a:	bf00      	nop
 801aa9c:	bd80      	pop	{r7, pc}
	...

0801aaa0 <_ZN8touchgfx22STM32F7InstrumentationC1Ev>:
#include <stdint.h>
#include <main.h>
    
namespace touchgfx
{
class STM32F7Instrumentation: public MCUInstrumentation
 801aaa0:	b580      	push	{r7, lr}
 801aaa2:	b082      	sub	sp, #8
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	6078      	str	r0, [r7, #4]
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	4618      	mov	r0, r3
 801aaac:	f7ff fcba 	bl	801a424 <_ZN8touchgfx18MCUInstrumentationC1Ev>
 801aab0:	4a03      	ldr	r2, [pc, #12]	; (801aac0 <_ZN8touchgfx22STM32F7InstrumentationC1Ev+0x20>)
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	601a      	str	r2, [r3, #0]
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	4618      	mov	r0, r3
 801aaba:	3708      	adds	r7, #8
 801aabc:	46bd      	mov	sp, r7
 801aabe:	bd80      	pop	{r7, pc}
 801aac0:	08024a10 	.word	0x08024a10

0801aac4 <_ZN8touchgfx13touchgfx_initEv>:
static uint16_t bitdepth = 24;

namespace touchgfx
{
void touchgfx_init()
{
 801aac4:	b590      	push	{r4, r7, lr}
 801aac6:	b087      	sub	sp, #28
 801aac8:	af04      	add	r7, sp, #16
  uint16_t dispWidth = 480;
 801aaca:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801aace:	80fb      	strh	r3, [r7, #6]
  uint16_t dispHeight = 272;  
 801aad0:	f44f 7388 	mov.w	r3, #272	; 0x110
 801aad4:	80bb      	strh	r3, [r7, #4]
  
    HAL& hal = touchgfx_generic_init<STM32F7HAL>(dma, display, tc, dispWidth, dispHeight,(uint16_t*) 0, 
                                               0, 0);
 801aad6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801aada:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801aade:	2200      	movs	r2, #0
 801aae0:	9203      	str	r2, [sp, #12]
 801aae2:	2200      	movs	r2, #0
 801aae4:	9202      	str	r2, [sp, #8]
 801aae6:	2200      	movs	r2, #0
 801aae8:	9201      	str	r2, [sp, #4]
 801aaea:	9300      	str	r3, [sp, #0]
 801aaec:	460b      	mov	r3, r1
 801aaee:	4a19      	ldr	r2, [pc, #100]	; (801ab54 <_ZN8touchgfx13touchgfx_initEv+0x90>)
 801aaf0:	4919      	ldr	r1, [pc, #100]	; (801ab58 <_ZN8touchgfx13touchgfx_initEv+0x94>)
 801aaf2:	481a      	ldr	r0, [pc, #104]	; (801ab5c <_ZN8touchgfx13touchgfx_initEv+0x98>)
 801aaf4:	f000 f8ea 	bl	801accc <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>
 801aaf8:	6038      	str	r0, [r7, #0]

    hal.setFrameBufferStartAddress((uint16_t*)frameBuf0, bitdepth ,true , true);
 801aafa:	683b      	ldr	r3, [r7, #0]
 801aafc:	681b      	ldr	r3, [r3, #0]
 801aafe:	3374      	adds	r3, #116	; 0x74
 801ab00:	681c      	ldr	r4, [r3, #0]
 801ab02:	4b17      	ldr	r3, [pc, #92]	; (801ab60 <_ZN8touchgfx13touchgfx_initEv+0x9c>)
 801ab04:	681b      	ldr	r3, [r3, #0]
 801ab06:	4619      	mov	r1, r3
 801ab08:	4b16      	ldr	r3, [pc, #88]	; (801ab64 <_ZN8touchgfx13touchgfx_initEv+0xa0>)
 801ab0a:	881a      	ldrh	r2, [r3, #0]
 801ab0c:	2301      	movs	r3, #1
 801ab0e:	9300      	str	r3, [sp, #0]
 801ab10:	2301      	movs	r3, #1
 801ab12:	6838      	ldr	r0, [r7, #0]
 801ab14:	47a0      	blx	r4

    hal.setTouchSampleRate(2);
 801ab16:	2102      	movs	r1, #2
 801ab18:	6838      	ldr	r0, [r7, #0]
 801ab1a:	f7ff fdcd 	bl	801a6b8 <_ZN8touchgfx3HAL18setTouchSampleRateEa>
    hal.setFingerSize(1);
 801ab1e:	2101      	movs	r1, #1
 801ab20:	6838      	ldr	r0, [r7, #0]
 801ab22:	f7ff fdfb 	bl	801a71c <_ZN8touchgfx3HAL13setFingerSizeEh>

    // By default frame rate compensation is off.
    // Enable frame rate compensation to smooth out animations in case there is periodic slow frame rates.
    hal.setFrameRateCompensation(false);
 801ab26:	2100      	movs	r1, #0
 801ab28:	6838      	ldr	r0, [r7, #0]
 801ab2a:	f7ff fdb5 	bl	801a698 <_ZN8touchgfx3HAL24setFrameRateCompensationEb>

    // This platform can handle simultaneous DMA and TFT accesses to SDRAM, so disable lock to increase performance.
    hal.lockDMAToFrontPorch(false);
 801ab2e:	2100      	movs	r1, #0
 801ab30:	6838      	ldr	r0, [r7, #0]
 801ab32:	f7ff fda1 	bl	801a678 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>

    mcuInstr.init();
 801ab36:	480c      	ldr	r0, [pc, #48]	; (801ab68 <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 801ab38:	f001 fd2c 	bl	801c594 <_ZN8touchgfx22STM32F7Instrumentation4initEv>

    //Set MCU instrumentation and Load calculation
    hal.setMCUInstrumentation(&mcuInstr);
 801ab3c:	490a      	ldr	r1, [pc, #40]	; (801ab68 <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 801ab3e:	6838      	ldr	r0, [r7, #0]
 801ab40:	f7ff fdce 	bl	801a6e0 <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>
    hal.enableMCULoadCalculation(true);
 801ab44:	2101      	movs	r1, #1
 801ab46:	6838      	ldr	r0, [r7, #0]
 801ab48:	f7ff fdd8 	bl	801a6fc <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>
}
 801ab4c:	bf00      	nop
 801ab4e:	370c      	adds	r7, #12
 801ab50:	46bd      	mov	sp, r7
 801ab52:	bd90      	pop	{r4, r7, pc}
 801ab54:	2000a128 	.word	0x2000a128
 801ab58:	20000050 	.word	0x20000050
 801ab5c:	20009688 	.word	0x20009688
 801ab60:	2000004c 	.word	0x2000004c
 801ab64:	20000054 	.word	0x20000054
 801ab68:	2000a12c 	.word	0x2000a12c

0801ab6c <_Z13GRAPHICS_Initv>:
}

void GRAPHICS_Init()
{
 801ab6c:	b580      	push	{r7, lr}
 801ab6e:	af00      	add	r7, sp, #0
   touchgfx::touchgfx_init();
 801ab70:	f7ff ffa8 	bl	801aac4 <_ZN8touchgfx13touchgfx_initEv>
}
 801ab74:	bf00      	nop
 801ab76:	bd80      	pop	{r7, pc}

0801ab78 <_Z17GRAPHICS_MainTaskv>:

void GRAPHICS_MainTask(void)
{
 801ab78:	b580      	push	{r7, lr}
 801ab7a:	af00      	add	r7, sp, #0
    touchgfx::HAL::getInstance()->taskEntry();
 801ab7c:	f7f2 f950 	bl	800ce20 <_ZN8touchgfx3HAL11getInstanceEv>
 801ab80:	4602      	mov	r2, r0
 801ab82:	6813      	ldr	r3, [r2, #0]
 801ab84:	330c      	adds	r3, #12
 801ab86:	681b      	ldr	r3, [r3, #0]
 801ab88:	4610      	mov	r0, r2
 801ab8a:	4798      	blx	r3
}
 801ab8c:	bf00      	nop
 801ab8e:	bd80      	pop	{r7, pc}

0801ab90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18IOControlPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 801ab90:	b580      	push	{r7, lr}
 801ab92:	b082      	sub	sp, #8
 801ab94:	af00      	add	r7, sp, #0
 801ab96:	6078      	str	r0, [r7, #4]
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	4618      	mov	r0, r3
 801ab9c:	f001 fe7e 	bl	801c89c <_ZN8touchgfx17AbstractPartitionC1Ev>
 801aba0:	4a03      	ldr	r2, [pc, #12]	; (801abb0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18IOControlPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	601a      	str	r2, [r3, #0]
    {
    }
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	4618      	mov	r0, r3
 801abaa:	3708      	adds	r7, #8
 801abac:	46bd      	mov	sp, r7
 801abae:	bd80      	pop	{r7, pc}
 801abb0:	080247a0 	.word	0x080247a0

0801abb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18IOControlPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 801abb4:	b580      	push	{r7, lr}
 801abb6:	b082      	sub	sp, #8
 801abb8:	af00      	add	r7, sp, #0
 801abba:	6078      	str	r0, [r7, #4]
    {
    }
 801abbc:	4a05      	ldr	r2, [pc, #20]	; (801abd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18IOControlPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	601a      	str	r2, [r3, #0]
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	4618      	mov	r0, r3
 801abc6:	f001 fe67 	bl	801c898 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	4618      	mov	r0, r3
 801abce:	3708      	adds	r7, #8
 801abd0:	46bd      	mov	sp, r7
 801abd2:	bd80      	pop	{r7, pc}
 801abd4:	080247a0 	.word	0x080247a0

0801abd8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18IOControlPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801abd8:	b580      	push	{r7, lr}
 801abda:	b082      	sub	sp, #8
 801abdc:	af00      	add	r7, sp, #0
 801abde:	6078      	str	r0, [r7, #4]
    }
 801abe0:	6878      	ldr	r0, [r7, #4]
 801abe2:	f7ff ffe7 	bl	801abb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18IOControlPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801abe6:	2118      	movs	r1, #24
 801abe8:	6878      	ldr	r0, [r7, #4]
 801abea:	f006 fac8 	bl	802117e <_ZdlPvj>
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	4618      	mov	r0, r3
 801abf2:	3708      	adds	r7, #8
 801abf4:	46bd      	mov	sp, r7
 801abf6:	bd80      	pop	{r7, pc}

0801abf8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 801abf8:	b580      	push	{r7, lr}
 801abfa:	b082      	sub	sp, #8
 801abfc:	af00      	add	r7, sp, #0
 801abfe:	6078      	str	r0, [r7, #4]
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	4618      	mov	r0, r3
 801ac04:	f001 fe4a 	bl	801c89c <_ZN8touchgfx17AbstractPartitionC1Ev>
 801ac08:	4a03      	ldr	r2, [pc, #12]	; (801ac18 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	601a      	str	r2, [r3, #0]
    }
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	4618      	mov	r0, r3
 801ac12:	3708      	adds	r7, #8
 801ac14:	46bd      	mov	sp, r7
 801ac16:	bd80      	pop	{r7, pc}
 801ac18:	0802476c 	.word	0x0802476c

0801ac1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 801ac1c:	b580      	push	{r7, lr}
 801ac1e:	b082      	sub	sp, #8
 801ac20:	af00      	add	r7, sp, #0
 801ac22:	6078      	str	r0, [r7, #4]
    }
 801ac24:	4a05      	ldr	r2, [pc, #20]	; (801ac3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	601a      	str	r2, [r3, #0]
 801ac2a:	687b      	ldr	r3, [r7, #4]
 801ac2c:	4618      	mov	r0, r3
 801ac2e:	f001 fe33 	bl	801c898 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	4618      	mov	r0, r3
 801ac36:	3708      	adds	r7, #8
 801ac38:	46bd      	mov	sp, r7
 801ac3a:	bd80      	pop	{r7, pc}
 801ac3c:	0802476c 	.word	0x0802476c

0801ac40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801ac40:	b580      	push	{r7, lr}
 801ac42:	b082      	sub	sp, #8
 801ac44:	af00      	add	r7, sp, #0
 801ac46:	6078      	str	r0, [r7, #4]
    }
 801ac48:	6878      	ldr	r0, [r7, #4]
 801ac4a:	f7ff ffe7 	bl	801ac1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801ac4e:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 801ac52:	6878      	ldr	r0, [r7, #4]
 801ac54:	f006 fa93 	bl	802117e <_ZdlPvj>
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	4618      	mov	r0, r3
 801ac5c:	3708      	adds	r7, #8
 801ac5e:	46bd      	mov	sp, r7
 801ac60:	bd80      	pop	{r7, pc}
	...

0801ac64 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE0EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 801ac64:	b580      	push	{r7, lr}
 801ac66:	b082      	sub	sp, #8
 801ac68:	af00      	add	r7, sp, #0
 801ac6a:	6078      	str	r0, [r7, #4]
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	4618      	mov	r0, r3
 801ac70:	f001 fe14 	bl	801c89c <_ZN8touchgfx17AbstractPartitionC1Ev>
 801ac74:	4a03      	ldr	r2, [pc, #12]	; (801ac84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE0EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	601a      	str	r2, [r3, #0]
    }
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	4618      	mov	r0, r3
 801ac7e:	3708      	adds	r7, #8
 801ac80:	46bd      	mov	sp, r7
 801ac82:	bd80      	pop	{r7, pc}
 801ac84:	08024738 	.word	0x08024738

0801ac88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE0EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
    virtual ~Partition()
 801ac88:	b580      	push	{r7, lr}
 801ac8a:	b082      	sub	sp, #8
 801ac8c:	af00      	add	r7, sp, #0
 801ac8e:	6078      	str	r0, [r7, #4]
    }
 801ac90:	4a05      	ldr	r2, [pc, #20]	; (801aca8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE0EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	601a      	str	r2, [r3, #0]
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	4618      	mov	r0, r3
 801ac9a:	f001 fdfd 	bl	801c898 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	4618      	mov	r0, r3
 801aca2:	3708      	adds	r7, #8
 801aca4:	46bd      	mov	sp, r7
 801aca6:	bd80      	pop	{r7, pc}
 801aca8:	08024738 	.word	0x08024738

0801acac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE0EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
    virtual ~Partition()
 801acac:	b580      	push	{r7, lr}
 801acae:	b082      	sub	sp, #8
 801acb0:	af00      	add	r7, sp, #0
 801acb2:	6078      	str	r0, [r7, #4]
    }
 801acb4:	6878      	ldr	r0, [r7, #4]
 801acb6:	f7ff ffe7 	bl	801ac88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE0EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 801acba:	2160      	movs	r1, #96	; 0x60
 801acbc:	6878      	ldr	r0, [r7, #4]
 801acbe:	f006 fa5e 	bl	802117e <_ZdlPvj>
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	4618      	mov	r0, r3
 801acc6:	3708      	adds	r7, #8
 801acc8:	46bd      	mov	sp, r7
 801acca:	bd80      	pop	{r7, pc}

0801accc <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>:
 * @param numberOfDynamicBitmaps Number of dynamic bitmaps.
 *
 * @return A reference to the allocated (and initialized) HAL object.
 */
template <class HALType>
HAL& touchgfx_generic_init(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height,
 801accc:	b590      	push	{r4, r7, lr}
 801acce:	b089      	sub	sp, #36	; 0x24
 801acd0:	af02      	add	r7, sp, #8
 801acd2:	60f8      	str	r0, [r7, #12]
 801acd4:	60b9      	str	r1, [r7, #8]
 801acd6:	607a      	str	r2, [r7, #4]
 801acd8:	807b      	strh	r3, [r7, #2]
                           uint16_t* bitmapCache, uint32_t bitmapCacheSize, uint32_t numberOfDynamicBitmaps = 0)
{
    HAL& hal = getHAL<HALType>(dma, display, tc, width, height);
 801acda:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801acde:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801ace2:	9300      	str	r3, [sp, #0]
 801ace4:	4613      	mov	r3, r2
 801ace6:	687a      	ldr	r2, [r7, #4]
 801ace8:	68b9      	ldr	r1, [r7, #8]
 801acea:	68f8      	ldr	r0, [r7, #12]
 801acec:	f000 f85c 	bl	801ada8 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>
 801acf0:	6178      	str	r0, [r7, #20]
    hal.initialize();
 801acf2:	6978      	ldr	r0, [r7, #20]
 801acf4:	f001 ffa4 	bl	801cc40 <_ZN8touchgfx3HAL10initializeEv>

    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(),
 801acf8:	f7fe fb38 	bl	801936c <_ZN14BitmapDatabase11getInstanceEv>
 801acfc:	4604      	mov	r4, r0
 801acfe:	f7fe fb3f 	bl	8019380 <_ZN14BitmapDatabase15getInstanceSizeEv>
 801ad02:	4603      	mov	r3, r0
 801ad04:	4619      	mov	r1, r3
 801ad06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad08:	9300      	str	r3, [sp, #0]
 801ad0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ad0e:	4620      	mov	r0, r4
 801ad10:	f004 febc 	bl	801fa8c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
                                   BitmapDatabase::getInstanceSize(),
                                   bitmapCache,
                                   bitmapCacheSize,
                                   numberOfDynamicBitmaps);

    TypedText::registerTexts(&texts);
 801ad14:	480d      	ldr	r0, [pc, #52]	; (801ad4c <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x80>)
 801ad16:	f7ff fd11 	bl	801a73c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 801ad1a:	2000      	movs	r0, #0
 801ad1c:	f7fe fb54 	bl	80193c8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 801ad20:	480b      	ldr	r0, [pc, #44]	; (801ad50 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x84>)
 801ad22:	f004 fe1d 	bl	801f960 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 801ad26:	f7ff fdb3 	bl	801a890 <_ZN12FrontendHeap11getInstanceEv>
 801ad2a:	6138      	str	r0, [r7, #16]
    (void)heap; // we need to obtain the reference above to initialize the frontend heap.

    hal.registerEventListener(*(Application::getInstance()));
 801ad2c:	697b      	ldr	r3, [r7, #20]
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	3350      	adds	r3, #80	; 0x50
 801ad32:	681c      	ldr	r4, [r3, #0]
 801ad34:	f003 f92a 	bl	801df8c <_ZN8touchgfx11Application11getInstanceEv>
 801ad38:	4603      	mov	r3, r0
 801ad3a:	4619      	mov	r1, r3
 801ad3c:	6978      	ldr	r0, [r7, #20]
 801ad3e:	47a0      	blx	r4

    return hal;
 801ad40:	697b      	ldr	r3, [r7, #20]
}
 801ad42:	4618      	mov	r0, r3
 801ad44:	371c      	adds	r7, #28
 801ad46:	46bd      	mov	sp, r7
 801ad48:	bd90      	pop	{r4, r7, pc}
 801ad4a:	bf00      	nop
 801ad4c:	20009684 	.word	0x20009684
 801ad50:	20000048 	.word	0x20000048

0801ad54 <_ZN10STM32F7HALD1Ev>:
class STM32F7HAL : public touchgfx::HAL
 801ad54:	b580      	push	{r7, lr}
 801ad56:	b082      	sub	sp, #8
 801ad58:	af00      	add	r7, sp, #0
 801ad5a:	6078      	str	r0, [r7, #4]
 801ad5c:	4a05      	ldr	r2, [pc, #20]	; (801ad74 <_ZN10STM32F7HALD1Ev+0x20>)
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	601a      	str	r2, [r3, #0]
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	4618      	mov	r0, r3
 801ad66:	f7ff fc67 	bl	801a638 <_ZN8touchgfx3HALD1Ev>
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	4618      	mov	r0, r3
 801ad6e:	3708      	adds	r7, #8
 801ad70:	46bd      	mov	sp, r7
 801ad72:	bd80      	pop	{r7, pc}
 801ad74:	080248c4 	.word	0x080248c4

0801ad78 <_ZN10STM32F7HALD0Ev>:
 801ad78:	b580      	push	{r7, lr}
 801ad7a:	b082      	sub	sp, #8
 801ad7c:	af00      	add	r7, sp, #0
 801ad7e:	6078      	str	r0, [r7, #4]
 801ad80:	6878      	ldr	r0, [r7, #4]
 801ad82:	f7ff ffe7 	bl	801ad54 <_ZN10STM32F7HALD1Ev>
 801ad86:	2168      	movs	r1, #104	; 0x68
 801ad88:	6878      	ldr	r0, [r7, #4]
 801ad8a:	f006 f9f8 	bl	802117e <_ZdlPvj>
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	4618      	mov	r0, r3
 801ad92:	3708      	adds	r7, #8
 801ad94:	46bd      	mov	sp, r7
 801ad96:	bd80      	pop	{r7, pc}

0801ad98 <__tcf_1>:
    static T hal(dma, display, tc, width, height);
 801ad98:	b580      	push	{r7, lr}
 801ad9a:	af00      	add	r7, sp, #0
 801ad9c:	4801      	ldr	r0, [pc, #4]	; (801ada4 <__tcf_1+0xc>)
 801ad9e:	f7ff ffd9 	bl	801ad54 <_ZN10STM32F7HALD1Ev>
 801ada2:	bd80      	pop	{r7, pc}
 801ada4:	2000a13c 	.word	0x2000a13c

0801ada8 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>:
HAL& getHAL(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height)
 801ada8:	b580      	push	{r7, lr}
 801adaa:	b086      	sub	sp, #24
 801adac:	af02      	add	r7, sp, #8
 801adae:	60f8      	str	r0, [r7, #12]
 801adb0:	60b9      	str	r1, [r7, #8]
 801adb2:	607a      	str	r2, [r7, #4]
 801adb4:	807b      	strh	r3, [r7, #2]
    static T hal(dma, display, tc, width, height);
 801adb6:	4b0d      	ldr	r3, [pc, #52]	; (801adec <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x44>)
 801adb8:	681b      	ldr	r3, [r3, #0]
 801adba:	f003 0301 	and.w	r3, r3, #1
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	d10f      	bne.n	801ade2 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x3a>
 801adc2:	887b      	ldrh	r3, [r7, #2]
 801adc4:	8b3a      	ldrh	r2, [r7, #24]
 801adc6:	9201      	str	r2, [sp, #4]
 801adc8:	9300      	str	r3, [sp, #0]
 801adca:	687b      	ldr	r3, [r7, #4]
 801adcc:	68ba      	ldr	r2, [r7, #8]
 801adce:	68f9      	ldr	r1, [r7, #12]
 801add0:	4807      	ldr	r0, [pc, #28]	; (801adf0 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x48>)
 801add2:	f7ff fe03 	bl	801a9dc <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801add6:	4b05      	ldr	r3, [pc, #20]	; (801adec <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x44>)
 801add8:	2201      	movs	r2, #1
 801adda:	601a      	str	r2, [r3, #0]
 801addc:	4805      	ldr	r0, [pc, #20]	; (801adf4 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x4c>)
 801adde:	f006 fa09 	bl	80211f4 <atexit>
    return hal;
 801ade2:	4b03      	ldr	r3, [pc, #12]	; (801adf0 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x48>)
}
 801ade4:	4618      	mov	r0, r3
 801ade6:	3710      	adds	r7, #16
 801ade8:	46bd      	mov	sp, r7
 801adea:	bd80      	pop	{r7, pc}
 801adec:	2000a1a4 	.word	0x2000a1a4
 801adf0:	2000a13c 	.word	0x2000a13c
 801adf4:	0801ad99 	.word	0x0801ad99

0801adf8 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 801adf8:	b580      	push	{r7, lr}
 801adfa:	b082      	sub	sp, #8
 801adfc:	af00      	add	r7, sp, #0
 801adfe:	6078      	str	r0, [r7, #4]
 801ae00:	4a10      	ldr	r2, [pc, #64]	; (801ae44 <_ZN12FrontendHeapD1Ev+0x4c>)
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	601a      	str	r2, [r3, #0]
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 801ae0c:	4618      	mov	r0, r3
 801ae0e:	f7fe fb73 	bl	80194f8 <_ZN19FrontendApplicationD1Ev>
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 801ae18:	4618      	mov	r0, r3
 801ae1a:	f7ff ff35 	bl	801ac88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE0EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	332c      	adds	r3, #44	; 0x2c
 801ae22:	4618      	mov	r0, r3
 801ae24:	f7ff fefa 	bl	801ac1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	3314      	adds	r3, #20
 801ae2c:	4618      	mov	r0, r3
 801ae2e:	f7ff fec1 	bl	801abb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18IOControlPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	4618      	mov	r0, r3
 801ae36:	f7ff fd45 	bl	801a8c4 <_ZN16FrontendHeapBaseD1Ev>
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	4618      	mov	r0, r3
 801ae3e:	3708      	adds	r7, #8
 801ae40:	46bd      	mov	sp, r7
 801ae42:	bd80      	pop	{r7, pc}
 801ae44:	08024724 	.word	0x08024724

0801ae48 <_ZN12FrontendHeapD0Ev>:
 801ae48:	b580      	push	{r7, lr}
 801ae4a:	b082      	sub	sp, #8
 801ae4c:	af00      	add	r7, sp, #0
 801ae4e:	6078      	str	r0, [r7, #4]
 801ae50:	6878      	ldr	r0, [r7, #4]
 801ae52:	f7ff ffd1 	bl	801adf8 <_ZN12FrontendHeapD1Ev>
 801ae56:	f44f 61ec 	mov.w	r1, #1888	; 0x760
 801ae5a:	6878      	ldr	r0, [r7, #4]
 801ae5c:	f006 f98f 	bl	802117e <_ZdlPvj>
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	4618      	mov	r0, r3
 801ae64:	3708      	adds	r7, #8
 801ae66:	46bd      	mov	sp, r7
 801ae68:	bd80      	pop	{r7, pc}
	...

0801ae6c <_ZN8touchgfx22STM32F7InstrumentationD1Ev>:
 801ae6c:	b580      	push	{r7, lr}
 801ae6e:	b082      	sub	sp, #8
 801ae70:	af00      	add	r7, sp, #0
 801ae72:	6078      	str	r0, [r7, #4]
 801ae74:	4a05      	ldr	r2, [pc, #20]	; (801ae8c <_ZN8touchgfx22STM32F7InstrumentationD1Ev+0x20>)
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	601a      	str	r2, [r3, #0]
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	4618      	mov	r0, r3
 801ae7e:	f7ff fae7 	bl	801a450 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	4618      	mov	r0, r3
 801ae86:	3708      	adds	r7, #8
 801ae88:	46bd      	mov	sp, r7
 801ae8a:	bd80      	pop	{r7, pc}
 801ae8c:	08024a10 	.word	0x08024a10

0801ae90 <_ZN8touchgfx22STM32F7InstrumentationD0Ev>:
 801ae90:	b580      	push	{r7, lr}
 801ae92:	b082      	sub	sp, #8
 801ae94:	af00      	add	r7, sp, #0
 801ae96:	6078      	str	r0, [r7, #4]
 801ae98:	6878      	ldr	r0, [r7, #4]
 801ae9a:	f7ff ffe7 	bl	801ae6c <_ZN8touchgfx22STM32F7InstrumentationD1Ev>
 801ae9e:	2110      	movs	r1, #16
 801aea0:	6878      	ldr	r0, [r7, #4]
 801aea2:	f006 f96c 	bl	802117e <_ZdlPvj>
 801aea6:	687b      	ldr	r3, [r7, #4]
 801aea8:	4618      	mov	r0, r3
 801aeaa:	3708      	adds	r7, #8
 801aeac:	46bd      	mov	sp, r7
 801aeae:	bd80      	pop	{r7, pc}

0801aeb0 <_ZN8touchgfx22STM32F7TouchControllerD1Ev>:
class STM32F7TouchController: public TouchController
 801aeb0:	b580      	push	{r7, lr}
 801aeb2:	b082      	sub	sp, #8
 801aeb4:	af00      	add	r7, sp, #0
 801aeb6:	6078      	str	r0, [r7, #4]
 801aeb8:	4a05      	ldr	r2, [pc, #20]	; (801aed0 <_ZN8touchgfx22STM32F7TouchControllerD1Ev+0x20>)
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	601a      	str	r2, [r3, #0]
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	4618      	mov	r0, r3
 801aec2:	f7f0 feff 	bl	800bcc4 <_ZN8touchgfx15TouchControllerD1Ev>
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	4618      	mov	r0, r3
 801aeca:	3708      	adds	r7, #8
 801aecc:	46bd      	mov	sp, r7
 801aece:	bd80      	pop	{r7, pc}
 801aed0:	08024a38 	.word	0x08024a38

0801aed4 <_ZN8touchgfx22STM32F7TouchControllerD0Ev>:
 801aed4:	b580      	push	{r7, lr}
 801aed6:	b082      	sub	sp, #8
 801aed8:	af00      	add	r7, sp, #0
 801aeda:	6078      	str	r0, [r7, #4]
 801aedc:	6878      	ldr	r0, [r7, #4]
 801aede:	f7ff ffe7 	bl	801aeb0 <_ZN8touchgfx22STM32F7TouchControllerD1Ev>
 801aee2:	2104      	movs	r1, #4
 801aee4:	6878      	ldr	r0, [r7, #4]
 801aee6:	f006 f94a 	bl	802117e <_ZdlPvj>
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	4618      	mov	r0, r3
 801aeee:	3708      	adds	r7, #8
 801aef0:	46bd      	mov	sp, r7
 801aef2:	bd80      	pop	{r7, pc}

0801aef4 <_Z41__static_initialization_and_destruction_0ii>:
 801aef4:	b580      	push	{r7, lr}
 801aef6:	b082      	sub	sp, #8
 801aef8:	af00      	add	r7, sp, #0
 801aefa:	6078      	str	r0, [r7, #4]
 801aefc:	6039      	str	r1, [r7, #0]
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	2b01      	cmp	r3, #1
 801af02:	d10d      	bne.n	801af20 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 801af04:	683b      	ldr	r3, [r7, #0]
 801af06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801af0a:	4293      	cmp	r3, r2
 801af0c:	d108      	bne.n	801af20 <_Z41__static_initialization_and_destruction_0ii+0x2c>
STM32F7DMA dma;
 801af0e:	4812      	ldr	r0, [pc, #72]	; (801af58 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 801af10:	f000 fd06 	bl	801b920 <_ZN10STM32F7DMAC1Ev>
STM32F7TouchController tc;
 801af14:	4811      	ldr	r0, [pc, #68]	; (801af5c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801af16:	f7ff fd8d 	bl	801aa34 <_ZN8touchgfx22STM32F7TouchControllerC1Ev>
STM32F7Instrumentation mcuInstr;
 801af1a:	4811      	ldr	r0, [pc, #68]	; (801af60 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801af1c:	f7ff fdc0 	bl	801aaa0 <_ZN8touchgfx22STM32F7InstrumentationC1Ev>
static LCD24bpp display;
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	2b00      	cmp	r3, #0
 801af24:	d113      	bne.n	801af4e <_Z41__static_initialization_and_destruction_0ii+0x5a>
 801af26:	683b      	ldr	r3, [r7, #0]
 801af28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801af2c:	4293      	cmp	r3, r2
 801af2e:	d10e      	bne.n	801af4e <_Z41__static_initialization_and_destruction_0ii+0x5a>
 801af30:	480c      	ldr	r0, [pc, #48]	; (801af64 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 801af32:	f7ff fd31 	bl	801a998 <_ZN8touchgfx8LCD24bppD1Ev>
STM32F7Instrumentation mcuInstr;
 801af36:	480a      	ldr	r0, [pc, #40]	; (801af60 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801af38:	f7ff ff98 	bl	801ae6c <_ZN8touchgfx22STM32F7InstrumentationD1Ev>
STM32F7TouchController tc;
 801af3c:	4807      	ldr	r0, [pc, #28]	; (801af5c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801af3e:	f7ff ffb7 	bl	801aeb0 <_ZN8touchgfx22STM32F7TouchControllerD1Ev>
STM32F7DMA dma;
 801af42:	4805      	ldr	r0, [pc, #20]	; (801af58 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 801af44:	f000 fd16 	bl	801b974 <_ZN10STM32F7DMAD1Ev>
static ApplicationFontProvider fontProvider;
 801af48:	4807      	ldr	r0, [pc, #28]	; (801af68 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 801af4a:	f7f8 f9fb 	bl	8013344 <_ZN23ApplicationFontProviderD1Ev>
}
 801af4e:	bf00      	nop
 801af50:	3708      	adds	r7, #8
 801af52:	46bd      	mov	sp, r7
 801af54:	bd80      	pop	{r7, pc}
 801af56:	bf00      	nop
 801af58:	20009688 	.word	0x20009688
 801af5c:	2000a128 	.word	0x2000a128
 801af60:	2000a12c 	.word	0x2000a12c
 801af64:	20000050 	.word	0x20000050
 801af68:	20000048 	.word	0x20000048

0801af6c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE0EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 801af6c:	b480      	push	{r7}
 801af6e:	b083      	sub	sp, #12
 801af70:	af00      	add	r7, sp, #0
 801af72:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 801af74:	2301      	movs	r3, #1
    }
 801af76:	4618      	mov	r0, r3
 801af78:	370c      	adds	r7, #12
 801af7a:	46bd      	mov	sp, r7
 801af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af80:	4770      	bx	lr

0801af82 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE0EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 801af82:	b480      	push	{r7}
 801af84:	b083      	sub	sp, #12
 801af86:	af00      	add	r7, sp, #0
 801af88:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801af8a:	2358      	movs	r3, #88	; 0x58
    }
 801af8c:	4618      	mov	r0, r3
 801af8e:	370c      	adds	r7, #12
 801af90:	46bd      	mov	sp, r7
 801af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af96:	4770      	bx	lr

0801af98 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE0EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 801af98:	b480      	push	{r7}
 801af9a:	b083      	sub	sp, #12
 801af9c:	af00      	add	r7, sp, #0
 801af9e:	6078      	str	r0, [r7, #4]
 801afa0:	460b      	mov	r3, r1
 801afa2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801afa4:	887b      	ldrh	r3, [r7, #2]
 801afa6:	2258      	movs	r2, #88	; 0x58
 801afa8:	fb02 f303 	mul.w	r3, r2, r3
 801afac:	3308      	adds	r3, #8
 801afae:	687a      	ldr	r2, [r7, #4]
 801afb0:	4413      	add	r3, r2
    }
 801afb2:	4618      	mov	r0, r3
 801afb4:	370c      	adds	r7, #12
 801afb6:	46bd      	mov	sp, r7
 801afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afbc:	4770      	bx	lr

0801afbe <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE0EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 801afbe:	b480      	push	{r7}
 801afc0:	b083      	sub	sp, #12
 801afc2:	af00      	add	r7, sp, #0
 801afc4:	6078      	str	r0, [r7, #4]
 801afc6:	460b      	mov	r3, r1
 801afc8:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801afca:	887b      	ldrh	r3, [r7, #2]
 801afcc:	2258      	movs	r2, #88	; 0x58
 801afce:	fb02 f303 	mul.w	r3, r2, r3
 801afd2:	3308      	adds	r3, #8
 801afd4:	687a      	ldr	r2, [r7, #4]
 801afd6:	4413      	add	r3, r2
    }
 801afd8:	4618      	mov	r0, r3
 801afda:	370c      	adds	r7, #12
 801afdc:	46bd      	mov	sp, r7
 801afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afe2:	4770      	bx	lr

0801afe4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801afe4:	b480      	push	{r7}
 801afe6:	b083      	sub	sp, #12
 801afe8:	af00      	add	r7, sp, #0
 801afea:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801afec:	2301      	movs	r3, #1
    }
 801afee:	4618      	mov	r0, r3
 801aff0:	370c      	adds	r7, #12
 801aff2:	46bd      	mov	sp, r7
 801aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aff8:	4770      	bx	lr

0801affa <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801affa:	b480      	push	{r7}
 801affc:	b083      	sub	sp, #12
 801affe:	af00      	add	r7, sp, #0
 801b000:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801b002:	f44f 63af 	mov.w	r3, #1400	; 0x578
    }
 801b006:	4618      	mov	r0, r3
 801b008:	370c      	adds	r7, #12
 801b00a:	46bd      	mov	sp, r7
 801b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b010:	4770      	bx	lr

0801b012 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801b012:	b480      	push	{r7}
 801b014:	b083      	sub	sp, #12
 801b016:	af00      	add	r7, sp, #0
 801b018:	6078      	str	r0, [r7, #4]
 801b01a:	460b      	mov	r3, r1
 801b01c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801b01e:	887b      	ldrh	r3, [r7, #2]
 801b020:	f44f 62af 	mov.w	r2, #1400	; 0x578
 801b024:	fb02 f303 	mul.w	r3, r2, r3
 801b028:	3308      	adds	r3, #8
 801b02a:	687a      	ldr	r2, [r7, #4]
 801b02c:	4413      	add	r3, r2
    }
 801b02e:	4618      	mov	r0, r3
 801b030:	370c      	adds	r7, #12
 801b032:	46bd      	mov	sp, r7
 801b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b038:	4770      	bx	lr

0801b03a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801b03a:	b480      	push	{r7}
 801b03c:	b083      	sub	sp, #12
 801b03e:	af00      	add	r7, sp, #0
 801b040:	6078      	str	r0, [r7, #4]
 801b042:	460b      	mov	r3, r1
 801b044:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801b046:	887b      	ldrh	r3, [r7, #2]
 801b048:	f44f 62af 	mov.w	r2, #1400	; 0x578
 801b04c:	fb02 f303 	mul.w	r3, r2, r3
 801b050:	3308      	adds	r3, #8
 801b052:	687a      	ldr	r2, [r7, #4]
 801b054:	4413      	add	r3, r2
    }
 801b056:	4618      	mov	r0, r3
 801b058:	370c      	adds	r7, #12
 801b05a:	46bd      	mov	sp, r7
 801b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b060:	4770      	bx	lr

0801b062 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI18IOControlPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801b062:	b480      	push	{r7}
 801b064:	b083      	sub	sp, #12
 801b066:	af00      	add	r7, sp, #0
 801b068:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801b06a:	2301      	movs	r3, #1
    }
 801b06c:	4618      	mov	r0, r3
 801b06e:	370c      	adds	r7, #12
 801b070:	46bd      	mov	sp, r7
 801b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b076:	4770      	bx	lr

0801b078 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18IOControlPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801b078:	b480      	push	{r7}
 801b07a:	b083      	sub	sp, #12
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801b080:	2310      	movs	r3, #16
    }
 801b082:	4618      	mov	r0, r3
 801b084:	370c      	adds	r7, #12
 801b086:	46bd      	mov	sp, r7
 801b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b08c:	4770      	bx	lr

0801b08e <_ZN8touchgfx9PartitionINS_4meta8TypeListI18IOControlPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801b08e:	b480      	push	{r7}
 801b090:	b083      	sub	sp, #12
 801b092:	af00      	add	r7, sp, #0
 801b094:	6078      	str	r0, [r7, #4]
 801b096:	460b      	mov	r3, r1
 801b098:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801b09a:	887b      	ldrh	r3, [r7, #2]
 801b09c:	011b      	lsls	r3, r3, #4
 801b09e:	3308      	adds	r3, #8
 801b0a0:	687a      	ldr	r2, [r7, #4]
 801b0a2:	4413      	add	r3, r2
    }
 801b0a4:	4618      	mov	r0, r3
 801b0a6:	370c      	adds	r7, #12
 801b0a8:	46bd      	mov	sp, r7
 801b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0ae:	4770      	bx	lr

0801b0b0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI18IOControlPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801b0b0:	b480      	push	{r7}
 801b0b2:	b083      	sub	sp, #12
 801b0b4:	af00      	add	r7, sp, #0
 801b0b6:	6078      	str	r0, [r7, #4]
 801b0b8:	460b      	mov	r3, r1
 801b0ba:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801b0bc:	887b      	ldrh	r3, [r7, #2]
 801b0be:	011b      	lsls	r3, r3, #4
 801b0c0:	3308      	adds	r3, #8
 801b0c2:	687a      	ldr	r2, [r7, #4]
 801b0c4:	4413      	add	r3, r2
    }
 801b0c6:	4618      	mov	r0, r3
 801b0c8:	370c      	adds	r7, #12
 801b0ca:	46bd      	mov	sp, r7
 801b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0d0:	4770      	bx	lr

0801b0d2 <_GLOBAL__sub_I_LCD_GetXSize>:
 801b0d2:	b580      	push	{r7, lr}
 801b0d4:	af00      	add	r7, sp, #0
 801b0d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b0da:	2001      	movs	r0, #1
 801b0dc:	f7ff ff0a 	bl	801aef4 <_Z41__static_initialization_and_destruction_0ii>
 801b0e0:	bd80      	pop	{r7, pc}

0801b0e2 <_GLOBAL__sub_D_LCD_GetXSize>:
 801b0e2:	b580      	push	{r7, lr}
 801b0e4:	af00      	add	r7, sp, #0
 801b0e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b0ea:	2000      	movs	r0, #0
 801b0ec:	f7ff ff02 	bl	801aef4 <_Z41__static_initialization_and_destruction_0ii>
 801b0f0:	bd80      	pop	{r7, pc}

0801b0f2 <_ZN8touchgfx4GPIO4initEv>:
/* USER CODE END user includes */

using namespace touchgfx;

void GPIO::init()
{
 801b0f2:	b480      	push	{r7}
 801b0f4:	af00      	add	r7, sp, #0
}
 801b0f6:	bf00      	nop
 801b0f8:	46bd      	mov	sp, r7
 801b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0fe:	4770      	bx	lr

0801b100 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

void GPIO::set(GPIO_ID id)
{
 801b100:	b480      	push	{r7}
 801b102:	b083      	sub	sp, #12
 801b104:	af00      	add	r7, sp, #0
 801b106:	4603      	mov	r3, r0
 801b108:	71fb      	strb	r3, [r7, #7]
}
 801b10a:	bf00      	nop
 801b10c:	370c      	adds	r7, #12
 801b10e:	46bd      	mov	sp, r7
 801b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b114:	4770      	bx	lr

0801b116 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

void GPIO::clear(GPIO_ID id)
{
 801b116:	b480      	push	{r7}
 801b118:	b083      	sub	sp, #12
 801b11a:	af00      	add	r7, sp, #0
 801b11c:	4603      	mov	r3, r0
 801b11e:	71fb      	strb	r3, [r7, #7]
}
 801b120:	bf00      	nop
 801b122:	370c      	adds	r7, #12
 801b124:	46bd      	mov	sp, r7
 801b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b12a:	4770      	bx	lr

0801b12c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

void GPIO::toggle(GPIO_ID id)
{
 801b12c:	b480      	push	{r7}
 801b12e:	b083      	sub	sp, #12
 801b130:	af00      	add	r7, sp, #0
 801b132:	4603      	mov	r3, r0
 801b134:	71fb      	strb	r3, [r7, #7]
}
 801b136:	bf00      	nop
 801b138:	370c      	adds	r7, #12
 801b13a:	46bd      	mov	sp, r7
 801b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b140:	4770      	bx	lr
	...

0801b144 <_Z11MX_LCD_Initv>:
  * @param  LayerIndex : layer Index.
  * @retval None
  */

void MX_LCD_Init(void) 
{ 
 801b144:	b580      	push	{r7, lr}
 801b146:	b08e      	sub	sp, #56	; 0x38
 801b148:	af00      	add	r7, sp, #0
 LTDC_LayerCfgTypeDef pLayerCfg;

/* De-Initialize LTDC */
  HAL_LTDC_DeInit(&hltdc);
 801b14a:	4844      	ldr	r0, [pc, #272]	; (801b25c <_Z11MX_LCD_Initv+0x118>)
 801b14c:	f7ea f9e8 	bl	8005520 <HAL_LTDC_DeInit>
/* Configure LTDC */

  hltdc.Instance = LTDC;
 801b150:	4b42      	ldr	r3, [pc, #264]	; (801b25c <_Z11MX_LCD_Initv+0x118>)
 801b152:	4a43      	ldr	r2, [pc, #268]	; (801b260 <_Z11MX_LCD_Initv+0x11c>)
 801b154:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 801b156:	4b41      	ldr	r3, [pc, #260]	; (801b25c <_Z11MX_LCD_Initv+0x118>)
 801b158:	2200      	movs	r2, #0
 801b15a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 801b15c:	4b3f      	ldr	r3, [pc, #252]	; (801b25c <_Z11MX_LCD_Initv+0x118>)
 801b15e:	2200      	movs	r2, #0
 801b160:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 801b162:	4b3e      	ldr	r3, [pc, #248]	; (801b25c <_Z11MX_LCD_Initv+0x118>)
 801b164:	2200      	movs	r2, #0
 801b166:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 801b168:	4b3c      	ldr	r3, [pc, #240]	; (801b25c <_Z11MX_LCD_Initv+0x118>)
 801b16a:	2200      	movs	r2, #0
 801b16c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 801b16e:	4b3b      	ldr	r3, [pc, #236]	; (801b25c <_Z11MX_LCD_Initv+0x118>)
 801b170:	2228      	movs	r2, #40	; 0x28
 801b172:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 801b174:	4b39      	ldr	r3, [pc, #228]	; (801b25c <_Z11MX_LCD_Initv+0x118>)
 801b176:	2209      	movs	r2, #9
 801b178:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 801b17a:	4b38      	ldr	r3, [pc, #224]	; (801b25c <_Z11MX_LCD_Initv+0x118>)
 801b17c:	2235      	movs	r2, #53	; 0x35
 801b17e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 801b180:	4b36      	ldr	r3, [pc, #216]	; (801b25c <_Z11MX_LCD_Initv+0x118>)
 801b182:	220b      	movs	r2, #11
 801b184:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 801b186:	4b35      	ldr	r3, [pc, #212]	; (801b25c <_Z11MX_LCD_Initv+0x118>)
 801b188:	f240 2215 	movw	r2, #533	; 0x215
 801b18c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 801b18e:	4b33      	ldr	r3, [pc, #204]	; (801b25c <_Z11MX_LCD_Initv+0x118>)
 801b190:	f240 121b 	movw	r2, #283	; 0x11b
 801b194:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 801b196:	4b31      	ldr	r3, [pc, #196]	; (801b25c <_Z11MX_LCD_Initv+0x118>)
 801b198:	f240 2235 	movw	r2, #565	; 0x235
 801b19c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 801b19e:	4b2f      	ldr	r3, [pc, #188]	; (801b25c <_Z11MX_LCD_Initv+0x118>)
 801b1a0:	f240 121d 	movw	r2, #285	; 0x11d
 801b1a4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 801b1a6:	4b2d      	ldr	r3, [pc, #180]	; (801b25c <_Z11MX_LCD_Initv+0x118>)
 801b1a8:	2200      	movs	r2, #0
 801b1aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 801b1ae:	4b2b      	ldr	r3, [pc, #172]	; (801b25c <_Z11MX_LCD_Initv+0x118>)
 801b1b0:	2200      	movs	r2, #0
 801b1b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 801b1b6:	4b29      	ldr	r3, [pc, #164]	; (801b25c <_Z11MX_LCD_Initv+0x118>)
 801b1b8:	2200      	movs	r2, #0
 801b1ba:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801b1be:	4827      	ldr	r0, [pc, #156]	; (801b25c <_Z11MX_LCD_Initv+0x118>)
 801b1c0:	f7ea f8de 	bl	8005380 <HAL_LTDC_Init>
 801b1c4:	4603      	mov	r3, r0
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	bf14      	ite	ne
 801b1ca:	2301      	movne	r3, #1
 801b1cc:	2300      	moveq	r3, #0
 801b1ce:	b2db      	uxtb	r3, r3
 801b1d0:	2b00      	cmp	r3, #0
 801b1d2:	d001      	beq.n	801b1d8 <_Z11MX_LCD_Initv+0x94>
  {
    Error_Handler( );
 801b1d4:	f7f6 fe38 	bl	8011e48 <Error_Handler>
  }

  pLayerCfg.WindowX0 = 0;
 801b1d8:	2300      	movs	r3, #0
 801b1da:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 801b1dc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801b1e0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 801b1e2:	2300      	movs	r3, #0
 801b1e4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 801b1e6:	f44f 7388 	mov.w	r3, #272	; 0x110
 801b1ea:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 801b1ec:	2301      	movs	r3, #1
 801b1ee:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 801b1f0:	23ff      	movs	r3, #255	; 0xff
 801b1f2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 801b1f4:	2300      	movs	r3, #0
 801b1f6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 801b1f8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801b1fc:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 801b1fe:	2307      	movs	r3, #7
 801b200:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 801b202:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 801b206:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 801b208:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801b20c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 801b20e:	f44f 7388 	mov.w	r3, #272	; 0x110
 801b212:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 801b214:	2300      	movs	r3, #0
 801b216:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 801b21a:	2300      	movs	r3, #0
 801b21c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 801b220:	2300      	movs	r3, #0
 801b222:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801b226:	1d3b      	adds	r3, r7, #4
 801b228:	2200      	movs	r2, #0
 801b22a:	4619      	mov	r1, r3
 801b22c:	480b      	ldr	r0, [pc, #44]	; (801b25c <_Z11MX_LCD_Initv+0x118>)
 801b22e:	f7ea fa47 	bl	80056c0 <HAL_LTDC_ConfigLayer>
 801b232:	4603      	mov	r3, r0
 801b234:	2b00      	cmp	r3, #0
 801b236:	bf14      	ite	ne
 801b238:	2301      	movne	r3, #1
 801b23a:	2300      	moveq	r3, #0
 801b23c:	b2db      	uxtb	r3, r3
 801b23e:	2b00      	cmp	r3, #0
 801b240:	d001      	beq.n	801b246 <_Z11MX_LCD_Initv+0x102>
  {
    Error_Handler( );
 801b242:	f7f6 fe01 	bl	8011e48 <Error_Handler>
  }

 HAL_LTDC_SetPitch(&hltdc, 480, 0);
 801b246:	2200      	movs	r2, #0
 801b248:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 801b24c:	4803      	ldr	r0, [pc, #12]	; (801b25c <_Z11MX_LCD_Initv+0x118>)
 801b24e:	f7ea fa75 	bl	800573c <HAL_LTDC_SetPitch>

}
 801b252:	bf00      	nop
 801b254:	3738      	adds	r7, #56	; 0x38
 801b256:	46bd      	mov	sp, r7
 801b258:	bd80      	pop	{r7, pc}
 801b25a:	bf00      	nop
 801b25c:	2000a1a8 	.word	0x2000a1a8
 801b260:	40016800 	.word	0x40016800

0801b264 <_Z11MX_FMC_Initv>:

/**
  * @brief  Initializes LCD IO.
  */ 
void MX_FMC_Init(void) 
{  
 801b264:	b580      	push	{r7, lr}
 801b266:	b088      	sub	sp, #32
 801b268:	af00      	add	r7, sp, #0
/* FMC initialization function */
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 801b26a:	4b22      	ldr	r3, [pc, #136]	; (801b2f4 <_Z11MX_FMC_Initv+0x90>)
 801b26c:	4a22      	ldr	r2, [pc, #136]	; (801b2f8 <_Z11MX_FMC_Initv+0x94>)
 801b26e:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 801b270:	4b20      	ldr	r3, [pc, #128]	; (801b2f4 <_Z11MX_FMC_Initv+0x90>)
 801b272:	2200      	movs	r2, #0
 801b274:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 801b276:	4b1f      	ldr	r3, [pc, #124]	; (801b2f4 <_Z11MX_FMC_Initv+0x90>)
 801b278:	2200      	movs	r2, #0
 801b27a:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 801b27c:	4b1d      	ldr	r3, [pc, #116]	; (801b2f4 <_Z11MX_FMC_Initv+0x90>)
 801b27e:	2204      	movs	r2, #4
 801b280:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 801b282:	4b1c      	ldr	r3, [pc, #112]	; (801b2f4 <_Z11MX_FMC_Initv+0x90>)
 801b284:	2210      	movs	r2, #16
 801b286:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 801b288:	4b1a      	ldr	r3, [pc, #104]	; (801b2f4 <_Z11MX_FMC_Initv+0x90>)
 801b28a:	2240      	movs	r2, #64	; 0x40
 801b28c:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 801b28e:	4b19      	ldr	r3, [pc, #100]	; (801b2f4 <_Z11MX_FMC_Initv+0x90>)
 801b290:	f44f 72c0 	mov.w	r2, #384	; 0x180
 801b294:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 801b296:	4b17      	ldr	r3, [pc, #92]	; (801b2f4 <_Z11MX_FMC_Initv+0x90>)
 801b298:	2200      	movs	r2, #0
 801b29a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 801b29c:	4b15      	ldr	r3, [pc, #84]	; (801b2f4 <_Z11MX_FMC_Initv+0x90>)
 801b29e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801b2a2:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 801b2a4:	4b13      	ldr	r3, [pc, #76]	; (801b2f4 <_Z11MX_FMC_Initv+0x90>)
 801b2a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801b2aa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 801b2ac:	4b11      	ldr	r3, [pc, #68]	; (801b2f4 <_Z11MX_FMC_Initv+0x90>)
 801b2ae:	2200      	movs	r2, #0
 801b2b0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 801b2b2:	2302      	movs	r3, #2
 801b2b4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 801b2b6:	2307      	movs	r3, #7
 801b2b8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 801b2ba:	2304      	movs	r3, #4
 801b2bc:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 801b2be:	2307      	movs	r3, #7
 801b2c0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 801b2c2:	2303      	movs	r3, #3
 801b2c4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 801b2c6:	2302      	movs	r3, #2
 801b2c8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 801b2ca:	2302      	movs	r3, #2
 801b2cc:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 801b2ce:	1d3b      	adds	r3, r7, #4
 801b2d0:	4619      	mov	r1, r3
 801b2d2:	4808      	ldr	r0, [pc, #32]	; (801b2f4 <_Z11MX_FMC_Initv+0x90>)
 801b2d4:	f7ed fda0 	bl	8008e18 <HAL_SDRAM_Init>
 801b2d8:	4603      	mov	r3, r0
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	bf14      	ite	ne
 801b2de:	2301      	movne	r3, #1
 801b2e0:	2300      	moveq	r3, #0
 801b2e2:	b2db      	uxtb	r3, r3
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	d001      	beq.n	801b2ec <_Z11MX_FMC_Initv+0x88>
  {
    Error_Handler( );
 801b2e8:	f7f6 fdae 	bl	8011e48 <Error_Handler>
  }

}
 801b2ec:	bf00      	nop
 801b2ee:	3720      	adds	r7, #32
 801b2f0:	46bd      	mov	sp, r7
 801b2f2:	bd80      	pop	{r7, pc}
 801b2f4:	2000a290 	.word	0x2000a290
 801b2f8:	a0000140 	.word	0xa0000140

0801b2fc <_Z15MX_SDRAM_InitExv>:
/**
  * @brief  Programs the SDRAM device.
  * @retval None
  */
void MX_SDRAM_InitEx(void)
{
 801b2fc:	b580      	push	{r7, lr}
 801b2fe:	b082      	sub	sp, #8
 801b300:	af00      	add	r7, sp, #0
  __IO uint32_t tmpmrd = 0;
 801b302:	2300      	movs	r3, #0
 801b304:	607b      	str	r3, [r7, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 801b306:	4b2b      	ldr	r3, [pc, #172]	; (801b3b4 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b308:	2201      	movs	r2, #1
 801b30a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 801b30c:	4b29      	ldr	r3, [pc, #164]	; (801b3b4 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b30e:	2210      	movs	r2, #16
 801b310:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 801b312:	4b28      	ldr	r3, [pc, #160]	; (801b3b4 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b314:	2201      	movs	r2, #1
 801b316:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 801b318:	4b26      	ldr	r3, [pc, #152]	; (801b3b4 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b31a:	2200      	movs	r2, #0
 801b31c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801b31e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b322:	4924      	ldr	r1, [pc, #144]	; (801b3b4 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b324:	4824      	ldr	r0, [pc, #144]	; (801b3b8 <_Z15MX_SDRAM_InitExv+0xbc>)
 801b326:	f7ed fdab 	bl	8008e80 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 801b32a:	2001      	movs	r0, #1
 801b32c:	f7e6 f9e2 	bl	80016f4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 801b330:	4b20      	ldr	r3, [pc, #128]	; (801b3b4 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b332:	2202      	movs	r2, #2
 801b334:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 801b336:	4b1f      	ldr	r3, [pc, #124]	; (801b3b4 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b338:	2210      	movs	r2, #16
 801b33a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 801b33c:	4b1d      	ldr	r3, [pc, #116]	; (801b3b4 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b33e:	2201      	movs	r2, #1
 801b340:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 801b342:	4b1c      	ldr	r3, [pc, #112]	; (801b3b4 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b344:	2200      	movs	r2, #0
 801b346:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 801b348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b34c:	4919      	ldr	r1, [pc, #100]	; (801b3b4 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b34e:	481a      	ldr	r0, [pc, #104]	; (801b3b8 <_Z15MX_SDRAM_InitExv+0xbc>)
 801b350:	f7ed fd96 	bl	8008e80 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 801b354:	4b17      	ldr	r3, [pc, #92]	; (801b3b4 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b356:	2203      	movs	r2, #3
 801b358:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 801b35a:	4b16      	ldr	r3, [pc, #88]	; (801b3b4 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b35c:	2210      	movs	r2, #16
 801b35e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 801b360:	4b14      	ldr	r3, [pc, #80]	; (801b3b4 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b362:	2208      	movs	r2, #8
 801b364:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 801b366:	4b13      	ldr	r3, [pc, #76]	; (801b3b4 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b368:	2200      	movs	r2, #0
 801b36a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801b36c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b370:	4910      	ldr	r1, [pc, #64]	; (801b3b4 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b372:	4811      	ldr	r0, [pc, #68]	; (801b3b8 <_Z15MX_SDRAM_InitExv+0xbc>)
 801b374:	f7ed fd84 	bl	8008e80 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 801b378:	f44f 730c 	mov.w	r3, #560	; 0x230
 801b37c:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 801b37e:	4b0d      	ldr	r3, [pc, #52]	; (801b3b4 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b380:	2204      	movs	r2, #4
 801b382:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 801b384:	4b0b      	ldr	r3, [pc, #44]	; (801b3b4 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b386:	2210      	movs	r2, #16
 801b388:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 801b38a:	4b0a      	ldr	r3, [pc, #40]	; (801b3b4 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b38c:	2201      	movs	r2, #1
 801b38e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	4a08      	ldr	r2, [pc, #32]	; (801b3b4 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b394:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801b396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b39a:	4906      	ldr	r1, [pc, #24]	; (801b3b4 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b39c:	4806      	ldr	r0, [pc, #24]	; (801b3b8 <_Z15MX_SDRAM_InitExv+0xbc>)
 801b39e:	f7ed fd6f 	bl	8008e80 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 801b3a2:	f44f 61ce 	mov.w	r1, #1648	; 0x670
 801b3a6:	4804      	ldr	r0, [pc, #16]	; (801b3b8 <_Z15MX_SDRAM_InitExv+0xbc>)
 801b3a8:	f7ed fd95 	bl	8008ed6 <HAL_SDRAM_ProgramRefreshRate>
}
 801b3ac:	bf00      	nop
 801b3ae:	3708      	adds	r7, #8
 801b3b0:	46bd      	mov	sp, r7
 801b3b2:	bd80      	pop	{r7, pc}
 801b3b4:	2000a2c4 	.word	0x2000a2c4
 801b3b8:	2000a290 	.word	0x2000a290

0801b3bc <HAL_LTDC_MspInit>:
}

/*  MSPInit/deInit Implementation */

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 801b3bc:	b580      	push	{r7, lr}
 801b3be:	b088      	sub	sp, #32
 801b3c0:	af00      	add	r7, sp, #0
 801b3c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(ltdcHandle->Instance==LTDC)
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	681b      	ldr	r3, [r3, #0]
 801b3c8:	4a36      	ldr	r2, [pc, #216]	; (801b4a4 <HAL_LTDC_MspInit+0xe8>)
 801b3ca:	4293      	cmp	r3, r2
 801b3cc:	d166      	bne.n	801b49c <HAL_LTDC_MspInit+0xe0>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 801b3ce:	4b36      	ldr	r3, [pc, #216]	; (801b4a8 <HAL_LTDC_MspInit+0xec>)
 801b3d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b3d2:	4a35      	ldr	r2, [pc, #212]	; (801b4a8 <HAL_LTDC_MspInit+0xec>)
 801b3d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801b3d8:	6453      	str	r3, [r2, #68]	; 0x44
 801b3da:	4b33      	ldr	r3, [pc, #204]	; (801b4a8 <HAL_LTDC_MspInit+0xec>)
 801b3dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b3de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801b3e2:	60bb      	str	r3, [r7, #8]
 801b3e4:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 801b3e6:	2310      	movs	r3, #16
 801b3e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b3ea:	2302      	movs	r3, #2
 801b3ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b3ee:	2300      	movs	r3, #0
 801b3f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b3f2:	2300      	movs	r3, #0
 801b3f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801b3f6:	230e      	movs	r3, #14
 801b3f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 801b3fa:	f107 030c 	add.w	r3, r7, #12
 801b3fe:	4619      	mov	r1, r3
 801b400:	482a      	ldr	r0, [pc, #168]	; (801b4ac <HAL_LTDC_MspInit+0xf0>)
 801b402:	f7e7 fd43 	bl	8002e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 801b406:	f64e 73ff 	movw	r3, #61439	; 0xefff
 801b40a:	60fb      	str	r3, [r7, #12]
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b40c:	2302      	movs	r3, #2
 801b40e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b410:	2300      	movs	r3, #0
 801b412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b414:	2300      	movs	r3, #0
 801b416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801b418:	230e      	movs	r3, #14
 801b41a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 801b41c:	f107 030c 	add.w	r3, r7, #12
 801b420:	4619      	mov	r1, r3
 801b422:	4823      	ldr	r0, [pc, #140]	; (801b4b0 <HAL_LTDC_MspInit+0xf4>)
 801b424:	f7e7 fd32 	bl	8002e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 801b428:	23f7      	movs	r3, #247	; 0xf7
 801b42a:	60fb      	str	r3, [r7, #12]
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b42c:	2302      	movs	r3, #2
 801b42e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b430:	2300      	movs	r3, #0
 801b432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b434:	2300      	movs	r3, #0
 801b436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801b438:	230e      	movs	r3, #14
 801b43a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 801b43c:	f107 030c 	add.w	r3, r7, #12
 801b440:	4619      	mov	r1, r3
 801b442:	481c      	ldr	r0, [pc, #112]	; (801b4b4 <HAL_LTDC_MspInit+0xf8>)
 801b444:	f7e7 fd22 	bl	8002e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 801b448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b44c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b44e:	2302      	movs	r3, #2
 801b450:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b452:	2300      	movs	r3, #0
 801b454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b456:	2300      	movs	r3, #0
 801b458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 801b45a:	2309      	movs	r3, #9
 801b45c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 801b45e:	f107 030c 	add.w	r3, r7, #12
 801b462:	4619      	mov	r1, r3
 801b464:	4814      	ldr	r0, [pc, #80]	; (801b4b8 <HAL_LTDC_MspInit+0xfc>)
 801b466:	f7e7 fd11 	bl	8002e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 801b46a:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 801b46e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b470:	2302      	movs	r3, #2
 801b472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b474:	2300      	movs	r3, #0
 801b476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b478:	2300      	movs	r3, #0
 801b47a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801b47c:	230e      	movs	r3, #14
 801b47e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801b480:	f107 030c 	add.w	r3, r7, #12
 801b484:	4619      	mov	r1, r3
 801b486:	480d      	ldr	r0, [pc, #52]	; (801b4bc <HAL_LTDC_MspInit+0x100>)
 801b488:	f7e7 fd00 	bl	8002e8c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 801b48c:	2200      	movs	r2, #0
 801b48e:	2105      	movs	r1, #5
 801b490:	2058      	movs	r0, #88	; 0x58
 801b492:	f7e6 fc9d 	bl	8001dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 801b496:	2058      	movs	r0, #88	; 0x58
 801b498:	f7e6 fcb6 	bl	8001e08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 801b49c:	bf00      	nop
 801b49e:	3720      	adds	r7, #32
 801b4a0:	46bd      	mov	sp, r7
 801b4a2:	bd80      	pop	{r7, pc}
 801b4a4:	40016800 	.word	0x40016800
 801b4a8:	40023800 	.word	0x40023800
 801b4ac:	40021000 	.word	0x40021000
 801b4b0:	40022400 	.word	0x40022400
 801b4b4:	40022800 	.word	0x40022800
 801b4b8:	40021800 	.word	0x40021800
 801b4bc:	40022000 	.word	0x40022000

0801b4c0 <HAL_LTDC_MspDeInit>:

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* ltdcHandle)
{
 801b4c0:	b580      	push	{r7, lr}
 801b4c2:	b082      	sub	sp, #8
 801b4c4:	af00      	add	r7, sp, #0
 801b4c6:	6078      	str	r0, [r7, #4]
  if(ltdcHandle->Instance==LTDC)
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	681b      	ldr	r3, [r3, #0]
 801b4cc:	4a13      	ldr	r2, [pc, #76]	; (801b51c <HAL_LTDC_MspDeInit+0x5c>)
 801b4ce:	4293      	cmp	r3, r2
 801b4d0:	d11f      	bne.n	801b512 <HAL_LTDC_MspDeInit+0x52>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 801b4d2:	4b13      	ldr	r3, [pc, #76]	; (801b520 <HAL_LTDC_MspDeInit+0x60>)
 801b4d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b4d6:	4a12      	ldr	r2, [pc, #72]	; (801b520 <HAL_LTDC_MspDeInit+0x60>)
 801b4d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801b4dc:	6453      	str	r3, [r2, #68]	; 0x44
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    HAL_GPIO_DeInit(LCD_B0_GPIO_Port, LCD_B0_Pin);
 801b4de:	2110      	movs	r1, #16
 801b4e0:	4810      	ldr	r0, [pc, #64]	; (801b524 <HAL_LTDC_MspDeInit+0x64>)
 801b4e2:	f7e7 fe7d 	bl	80031e0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOJ, LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 801b4e6:	f64e 71ff 	movw	r1, #61439	; 0xefff
 801b4ea:	480f      	ldr	r0, [pc, #60]	; (801b528 <HAL_LTDC_MspDeInit+0x68>)
 801b4ec:	f7e7 fe78 	bl	80031e0 <HAL_GPIO_DeInit>
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin);

    HAL_GPIO_DeInit(GPIOK, LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 801b4f0:	21f7      	movs	r1, #247	; 0xf7
 801b4f2:	480e      	ldr	r0, [pc, #56]	; (801b52c <HAL_LTDC_MspDeInit+0x6c>)
 801b4f4:	f7e7 fe74 	bl	80031e0 <HAL_GPIO_DeInit>
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin);

    HAL_GPIO_DeInit(LCD_B4_GPIO_Port, LCD_B4_Pin);
 801b4f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801b4fc:	480c      	ldr	r0, [pc, #48]	; (801b530 <HAL_LTDC_MspDeInit+0x70>)
 801b4fe:	f7e7 fe6f 	bl	80031e0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOI, LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin);
 801b502:	f44f 4146 	mov.w	r1, #50688	; 0xc600
 801b506:	480b      	ldr	r0, [pc, #44]	; (801b534 <HAL_LTDC_MspDeInit+0x74>)
 801b508:	f7e7 fe6a 	bl	80031e0 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 801b50c:	2058      	movs	r0, #88	; 0x58
 801b50e:	f7e6 fc89 	bl	8001e24 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }
}
 801b512:	bf00      	nop
 801b514:	3708      	adds	r7, #8
 801b516:	46bd      	mov	sp, r7
 801b518:	bd80      	pop	{r7, pc}
 801b51a:	bf00      	nop
 801b51c:	40016800 	.word	0x40016800
 801b520:	40023800 	.word	0x40023800
 801b524:	40021000 	.word	0x40021000
 801b528:	40022400 	.word	0x40022400
 801b52c:	40022800 	.word	0x40022800
 801b530:	40021800 	.word	0x40021800
 801b534:	40022000 	.word	0x40022000

0801b538 <_ZL15HAL_FMC_MspInitv>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 801b538:	b580      	push	{r7, lr}
 801b53a:	b086      	sub	sp, #24
 801b53c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 801b53e:	4b3b      	ldr	r3, [pc, #236]	; (801b62c <_ZL15HAL_FMC_MspInitv+0xf4>)
 801b540:	681b      	ldr	r3, [r3, #0]
 801b542:	2b00      	cmp	r3, #0
 801b544:	d16d      	bne.n	801b622 <_ZL15HAL_FMC_MspInitv+0xea>
    return;
  }
  FMC_Initialized = 1;
 801b546:	4b39      	ldr	r3, [pc, #228]	; (801b62c <_ZL15HAL_FMC_MspInitv+0xf4>)
 801b548:	2201      	movs	r2, #1
 801b54a:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 801b54c:	4b38      	ldr	r3, [pc, #224]	; (801b630 <_ZL15HAL_FMC_MspInitv+0xf8>)
 801b54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b550:	4a37      	ldr	r2, [pc, #220]	; (801b630 <_ZL15HAL_FMC_MspInitv+0xf8>)
 801b552:	f043 0301 	orr.w	r3, r3, #1
 801b556:	6393      	str	r3, [r2, #56]	; 0x38
 801b558:	4b35      	ldr	r3, [pc, #212]	; (801b630 <_ZL15HAL_FMC_MspInitv+0xf8>)
 801b55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b55c:	f003 0301 	and.w	r3, r3, #1
 801b560:	603b      	str	r3, [r7, #0]
 801b562:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 801b564:	f64f 7383 	movw	r3, #65411	; 0xff83
 801b568:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b56a:	2302      	movs	r3, #2
 801b56c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b56e:	2300      	movs	r3, #0
 801b570:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b572:	2303      	movs	r3, #3
 801b574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801b576:	230c      	movs	r3, #12
 801b578:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801b57a:	1d3b      	adds	r3, r7, #4
 801b57c:	4619      	mov	r1, r3
 801b57e:	482d      	ldr	r0, [pc, #180]	; (801b634 <_ZL15HAL_FMC_MspInitv+0xfc>)
 801b580:	f7e7 fc84 	bl	8002e8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 801b584:	f248 1333 	movw	r3, #33075	; 0x8133
 801b588:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b58a:	2302      	movs	r3, #2
 801b58c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b58e:	2300      	movs	r3, #0
 801b590:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b592:	2303      	movs	r3, #3
 801b594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801b596:	230c      	movs	r3, #12
 801b598:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801b59a:	1d3b      	adds	r3, r7, #4
 801b59c:	4619      	mov	r1, r3
 801b59e:	4826      	ldr	r0, [pc, #152]	; (801b638 <_ZL15HAL_FMC_MspInitv+0x100>)
 801b5a0:	f7e7 fc74 	bl	8002e8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 801b5a4:	f24c 7303 	movw	r3, #50947	; 0xc703
 801b5a8:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b5aa:	2302      	movs	r3, #2
 801b5ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b5ae:	2300      	movs	r3, #0
 801b5b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b5b2:	2303      	movs	r3, #3
 801b5b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801b5b6:	230c      	movs	r3, #12
 801b5b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801b5ba:	1d3b      	adds	r3, r7, #4
 801b5bc:	4619      	mov	r1, r3
 801b5be:	481f      	ldr	r0, [pc, #124]	; (801b63c <_ZL15HAL_FMC_MspInitv+0x104>)
 801b5c0:	f7e7 fc64 	bl	8002e8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 801b5c4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 801b5c8:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b5ca:	2302      	movs	r3, #2
 801b5cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b5ce:	2300      	movs	r3, #0
 801b5d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b5d2:	2303      	movs	r3, #3
 801b5d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801b5d6:	230c      	movs	r3, #12
 801b5d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801b5da:	1d3b      	adds	r3, r7, #4
 801b5dc:	4619      	mov	r1, r3
 801b5de:	4818      	ldr	r0, [pc, #96]	; (801b640 <_ZL15HAL_FMC_MspInitv+0x108>)
 801b5e0:	f7e7 fc54 	bl	8002e8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 801b5e4:	2328      	movs	r3, #40	; 0x28
 801b5e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b5e8:	2302      	movs	r3, #2
 801b5ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b5ec:	2300      	movs	r3, #0
 801b5ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b5f0:	2303      	movs	r3, #3
 801b5f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801b5f4:	230c      	movs	r3, #12
 801b5f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801b5f8:	1d3b      	adds	r3, r7, #4
 801b5fa:	4619      	mov	r1, r3
 801b5fc:	4811      	ldr	r0, [pc, #68]	; (801b644 <_ZL15HAL_FMC_MspInitv+0x10c>)
 801b5fe:	f7e7 fc45 	bl	8002e8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 801b602:	2308      	movs	r3, #8
 801b604:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b606:	2302      	movs	r3, #2
 801b608:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b60a:	2300      	movs	r3, #0
 801b60c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b60e:	2303      	movs	r3, #3
 801b610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801b612:	230c      	movs	r3, #12
 801b614:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 801b616:	1d3b      	adds	r3, r7, #4
 801b618:	4619      	mov	r1, r3
 801b61a:	480b      	ldr	r0, [pc, #44]	; (801b648 <_ZL15HAL_FMC_MspInitv+0x110>)
 801b61c:	f7e7 fc36 	bl	8002e8c <HAL_GPIO_Init>
 801b620:	e000      	b.n	801b624 <_ZL15HAL_FMC_MspInitv+0xec>
    return;
 801b622:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 801b624:	3718      	adds	r7, #24
 801b626:	46bd      	mov	sp, r7
 801b628:	bd80      	pop	{r7, pc}
 801b62a:	bf00      	nop
 801b62c:	2000a2d4 	.word	0x2000a2d4
 801b630:	40023800 	.word	0x40023800
 801b634:	40021000 	.word	0x40021000
 801b638:	40021800 	.word	0x40021800
 801b63c:	40020c00 	.word	0x40020c00
 801b640:	40021400 	.word	0x40021400
 801b644:	40021c00 	.word	0x40021c00
 801b648:	40020800 	.word	0x40020800

0801b64c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 801b64c:	b580      	push	{r7, lr}
 801b64e:	b082      	sub	sp, #8
 801b650:	af00      	add	r7, sp, #0
 801b652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 801b654:	f7ff ff70 	bl	801b538 <_ZL15HAL_FMC_MspInitv>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 801b658:	bf00      	nop
 801b65a:	3708      	adds	r7, #8
 801b65c:	46bd      	mov	sp, r7
 801b65e:	bd80      	pop	{r7, pc}

0801b660 <HAL_DMA2D_MspInit>:

  /* USER CODE END SDRAM_MspDeInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 801b660:	b580      	push	{r7, lr}
 801b662:	b084      	sub	sp, #16
 801b664:	af00      	add	r7, sp, #0
 801b666:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 801b668:	687b      	ldr	r3, [r7, #4]
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	4a0d      	ldr	r2, [pc, #52]	; (801b6a4 <HAL_DMA2D_MspInit+0x44>)
 801b66e:	4293      	cmp	r3, r2
 801b670:	d113      	bne.n	801b69a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801b672:	4b0d      	ldr	r3, [pc, #52]	; (801b6a8 <HAL_DMA2D_MspInit+0x48>)
 801b674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b676:	4a0c      	ldr	r2, [pc, #48]	; (801b6a8 <HAL_DMA2D_MspInit+0x48>)
 801b678:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801b67c:	6313      	str	r3, [r2, #48]	; 0x30
 801b67e:	4b0a      	ldr	r3, [pc, #40]	; (801b6a8 <HAL_DMA2D_MspInit+0x48>)
 801b680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b682:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801b686:	60fb      	str	r3, [r7, #12]
 801b688:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 801b68a:	2200      	movs	r2, #0
 801b68c:	2105      	movs	r1, #5
 801b68e:	205a      	movs	r0, #90	; 0x5a
 801b690:	f7e6 fb9e 	bl	8001dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 801b694:	205a      	movs	r0, #90	; 0x5a
 801b696:	f7e6 fbb7 	bl	8001e08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 801b69a:	bf00      	nop
 801b69c:	3710      	adds	r7, #16
 801b69e:	46bd      	mov	sp, r7
 801b6a0:	bd80      	pop	{r7, pc}
 801b6a2:	bf00      	nop
 801b6a4:	4002b000 	.word	0x4002b000
 801b6a8:	40023800 	.word	0x40023800

0801b6ac <HAL_DMA2D_MspDeInit>:

void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 801b6ac:	b580      	push	{r7, lr}
 801b6ae:	b082      	sub	sp, #8
 801b6b0:	af00      	add	r7, sp, #0
 801b6b2:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	681b      	ldr	r3, [r3, #0]
 801b6b8:	4a07      	ldr	r2, [pc, #28]	; (801b6d8 <HAL_DMA2D_MspDeInit+0x2c>)
 801b6ba:	4293      	cmp	r3, r2
 801b6bc:	d108      	bne.n	801b6d0 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 801b6be:	4b07      	ldr	r3, [pc, #28]	; (801b6dc <HAL_DMA2D_MspDeInit+0x30>)
 801b6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6c2:	4a06      	ldr	r2, [pc, #24]	; (801b6dc <HAL_DMA2D_MspDeInit+0x30>)
 801b6c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801b6c8:	6313      	str	r3, [r2, #48]	; 0x30

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 801b6ca:	205a      	movs	r0, #90	; 0x5a
 801b6cc:	f7e6 fbaa 	bl	8001e24 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }
}
 801b6d0:	bf00      	nop
 801b6d2:	3708      	adds	r7, #8
 801b6d4:	46bd      	mov	sp, r7
 801b6d6:	bd80      	pop	{r7, pc}
 801b6d8:	4002b000 	.word	0x4002b000
 801b6dc:	40023800 	.word	0x40023800

0801b6e0 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 801b6e0:	b480      	push	{r7}
 801b6e2:	b083      	sub	sp, #12
 801b6e4:	af00      	add	r7, sp, #0
 801b6e6:	6078      	str	r0, [r7, #4]
    {
 801b6e8:	4a04      	ldr	r2, [pc, #16]	; (801b6fc <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801b6ea:	687b      	ldr	r3, [r7, #4]
 801b6ec:	601a      	str	r2, [r3, #0]
    }
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	4618      	mov	r0, r3
 801b6f2:	370c      	adds	r7, #12
 801b6f4:	46bd      	mov	sp, r7
 801b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6fa:	4770      	bx	lr
 801b6fc:	080248a0 	.word	0x080248a0

0801b700 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 801b700:	b580      	push	{r7, lr}
 801b702:	b082      	sub	sp, #8
 801b704:	af00      	add	r7, sp, #0
 801b706:	6078      	str	r0, [r7, #4]
    }
 801b708:	6878      	ldr	r0, [r7, #4]
 801b70a:	f7ff ffe9 	bl	801b6e0 <_ZN8touchgfx9DMA_QueueD1Ev>
 801b70e:	2104      	movs	r1, #4
 801b710:	6878      	ldr	r0, [r7, #4]
 801b712:	f005 fd34 	bl	802117e <_ZdlPvj>
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	4618      	mov	r0, r3
 801b71a:	3708      	adds	r7, #8
 801b71c:	46bd      	mov	sp, r7
 801b71e:	bd80      	pop	{r7, pc}

0801b720 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 801b720:	b580      	push	{r7, lr}
 801b722:	b082      	sub	sp, #8
 801b724:	af00      	add	r7, sp, #0
 801b726:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	681b      	ldr	r3, [r3, #0]
 801b72c:	3340      	adds	r3, #64	; 0x40
 801b72e:	681b      	ldr	r3, [r3, #0]
 801b730:	6878      	ldr	r0, [r7, #4]
 801b732:	4798      	blx	r3
    }
 801b734:	bf00      	nop
 801b736:	3708      	adds	r7, #8
 801b738:	46bd      	mov	sp, r7
 801b73a:	bd80      	pop	{r7, pc}

0801b73c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 801b73c:	b480      	push	{r7}
 801b73e:	b083      	sub	sp, #12
 801b740:	af00      	add	r7, sp, #0
 801b742:	6078      	str	r0, [r7, #4]
    {
 801b744:	4a04      	ldr	r2, [pc, #16]	; (801b758 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	601a      	str	r2, [r3, #0]
    }
 801b74a:	687b      	ldr	r3, [r7, #4]
 801b74c:	4618      	mov	r0, r3
 801b74e:	370c      	adds	r7, #12
 801b750:	46bd      	mov	sp, r7
 801b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b756:	4770      	bx	lr
 801b758:	080250d8 	.word	0x080250d8

0801b75c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 801b75c:	b580      	push	{r7, lr}
 801b75e:	b082      	sub	sp, #8
 801b760:	af00      	add	r7, sp, #0
 801b762:	6078      	str	r0, [r7, #4]
    }
 801b764:	6878      	ldr	r0, [r7, #4]
 801b766:	f7ff ffe9 	bl	801b73c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801b76a:	210c      	movs	r1, #12
 801b76c:	6878      	ldr	r0, [r7, #4]
 801b76e:	f005 fd06 	bl	802117e <_ZdlPvj>
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	4618      	mov	r0, r3
 801b776:	3708      	adds	r7, #8
 801b778:	46bd      	mov	sp, r7
 801b77a:	bd80      	pop	{r7, pc}

0801b77c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 801b77c:	b480      	push	{r7}
 801b77e:	b083      	sub	sp, #12
 801b780:	af00      	add	r7, sp, #0
 801b782:	6078      	str	r0, [r7, #4]
 801b784:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801b786:	4a09      	ldr	r2, [pc, #36]	; (801b7ac <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	601a      	str	r2, [r3, #0]
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	683a      	ldr	r2, [r7, #0]
 801b790:	605a      	str	r2, [r3, #4]
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	2200      	movs	r2, #0
 801b796:	721a      	strb	r2, [r3, #8]
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	2200      	movs	r2, #0
 801b79c:	725a      	strb	r2, [r3, #9]
    {
    }
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	4618      	mov	r0, r3
 801b7a2:	370c      	adds	r7, #12
 801b7a4:	46bd      	mov	sp, r7
 801b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7aa:	4770      	bx	lr
 801b7ac:	080250d8 	.word	0x080250d8

0801b7b0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 801b7b0:	b580      	push	{r7, lr}
 801b7b2:	b082      	sub	sp, #8
 801b7b4:	af00      	add	r7, sp, #0
 801b7b6:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 801b7b8:	687b      	ldr	r3, [r7, #4]
 801b7ba:	685a      	ldr	r2, [r3, #4]
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	685b      	ldr	r3, [r3, #4]
 801b7c0:	681b      	ldr	r3, [r3, #0]
 801b7c2:	3314      	adds	r3, #20
 801b7c4:	681b      	ldr	r3, [r3, #0]
 801b7c6:	4610      	mov	r0, r2
 801b7c8:	4798      	blx	r3
    }
 801b7ca:	bf00      	nop
 801b7cc:	3708      	adds	r7, #8
 801b7ce:	46bd      	mov	sp, r7
 801b7d0:	bd80      	pop	{r7, pc}

0801b7d2 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801b7d2:	b580      	push	{r7, lr}
 801b7d4:	b082      	sub	sp, #8
 801b7d6:	af00      	add	r7, sp, #0
 801b7d8:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 801b7da:	687a      	ldr	r2, [r7, #4]
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	681b      	ldr	r3, [r3, #0]
 801b7e0:	3324      	adds	r3, #36	; 0x24
 801b7e2:	681b      	ldr	r3, [r3, #0]
 801b7e4:	4610      	mov	r0, r2
 801b7e6:	4798      	blx	r3
    }
 801b7e8:	bf00      	nop
 801b7ea:	3708      	adds	r7, #8
 801b7ec:	46bd      	mov	sp, r7
 801b7ee:	bd80      	pop	{r7, pc}

0801b7f0 <__NVIC_EnableIRQ>:
{
 801b7f0:	b480      	push	{r7}
 801b7f2:	b083      	sub	sp, #12
 801b7f4:	af00      	add	r7, sp, #0
 801b7f6:	4603      	mov	r3, r0
 801b7f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b7fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b7fe:	2b00      	cmp	r3, #0
 801b800:	db0d      	blt.n	801b81e <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b806:	b2db      	uxtb	r3, r3
 801b808:	f003 021f 	and.w	r2, r3, #31
 801b80c:	4907      	ldr	r1, [pc, #28]	; (801b82c <__NVIC_EnableIRQ+0x3c>)
 801b80e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b812:	095b      	lsrs	r3, r3, #5
 801b814:	2001      	movs	r0, #1
 801b816:	fa00 f202 	lsl.w	r2, r0, r2
 801b81a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801b81e:	bf00      	nop
 801b820:	370c      	adds	r7, #12
 801b822:	46bd      	mov	sp, r7
 801b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b828:	4770      	bx	lr
 801b82a:	bf00      	nop
 801b82c:	e000e100 	.word	0xe000e100

0801b830 <__NVIC_DisableIRQ>:
{
 801b830:	b480      	push	{r7}
 801b832:	b083      	sub	sp, #12
 801b834:	af00      	add	r7, sp, #0
 801b836:	4603      	mov	r3, r0
 801b838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b83a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b83e:	2b00      	cmp	r3, #0
 801b840:	db12      	blt.n	801b868 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b846:	b2db      	uxtb	r3, r3
 801b848:	f003 021f 	and.w	r2, r3, #31
 801b84c:	4909      	ldr	r1, [pc, #36]	; (801b874 <__NVIC_DisableIRQ+0x44>)
 801b84e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b852:	095b      	lsrs	r3, r3, #5
 801b854:	2001      	movs	r0, #1
 801b856:	fa00 f202 	lsl.w	r2, r0, r2
 801b85a:	3320      	adds	r3, #32
 801b85c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801b860:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801b864:	f3bf 8f6f 	isb	sy
}
 801b868:	bf00      	nop
 801b86a:	370c      	adds	r7, #12
 801b86c:	46bd      	mov	sp, r7
 801b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b872:	4770      	bx	lr
 801b874:	e000e100 	.word	0xe000e100

0801b878 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 801b878:	b480      	push	{r7}
 801b87a:	b085      	sub	sp, #20
 801b87c:	af00      	add	r7, sp, #0
 801b87e:	60f8      	str	r0, [r7, #12]
 801b880:	60b9      	str	r1, [r7, #8]
 801b882:	607a      	str	r2, [r7, #4]
 801b884:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 801b886:	68fb      	ldr	r3, [r7, #12]
 801b888:	681b      	ldr	r3, [r3, #0]
 801b88a:	681b      	ldr	r3, [r3, #0]
 801b88c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 801b890:	68ba      	ldr	r2, [r7, #8]
 801b892:	68fb      	ldr	r3, [r7, #12]
 801b894:	681b      	ldr	r3, [r3, #0]
 801b896:	430a      	orrs	r2, r1
 801b898:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 801b89a:	68fb      	ldr	r3, [r7, #12]
 801b89c:	681b      	ldr	r3, [r3, #0]
 801b89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b8a0:	f023 0107 	bic.w	r1, r3, #7
 801b8a4:	687a      	ldr	r2, [r7, #4]
 801b8a6:	68fb      	ldr	r3, [r7, #12]
 801b8a8:	681b      	ldr	r3, [r3, #0]
 801b8aa:	430a      	orrs	r2, r1
 801b8ac:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 801b8ae:	68fb      	ldr	r3, [r7, #12]
 801b8b0:	681b      	ldr	r3, [r3, #0]
 801b8b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b8b4:	4b06      	ldr	r3, [pc, #24]	; (801b8d0 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 801b8b6:	4013      	ands	r3, r2
 801b8b8:	6839      	ldr	r1, [r7, #0]
 801b8ba:	68fa      	ldr	r2, [r7, #12]
 801b8bc:	6812      	ldr	r2, [r2, #0]
 801b8be:	430b      	orrs	r3, r1
 801b8c0:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 801b8c2:	2300      	movs	r3, #0
}
 801b8c4:	4618      	mov	r0, r3
 801b8c6:	3714      	adds	r7, #20
 801b8c8:	46bd      	mov	sp, r7
 801b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8ce:	4770      	bx	lr
 801b8d0:	ffffc000 	.word	0xffffc000

0801b8d4 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 801b8d4:	b580      	push	{r7, lr}
 801b8d6:	b082      	sub	sp, #8
 801b8d8:	af00      	add	r7, sp, #0
 801b8da:	6078      	str	r0, [r7, #4]
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 801b8dc:	f7f1 faa0 	bl	800ce20 <_ZN8touchgfx3HAL11getInstanceEv>
 801b8e0:	4603      	mov	r3, r0
 801b8e2:	4618      	mov	r0, r3
 801b8e4:	f7ff ff64 	bl	801b7b0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 801b8e8:	bf00      	nop
 801b8ea:	3708      	adds	r7, #8
 801b8ec:	46bd      	mov	sp, r7
 801b8ee:	bd80      	pop	{r7, pc}

0801b8f0 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 801b8f0:	b480      	push	{r7}
 801b8f2:	b083      	sub	sp, #12
 801b8f4:	af00      	add	r7, sp, #0
 801b8f6:	6078      	str	r0, [r7, #4]
    //assert(0);
}
 801b8f8:	bf00      	nop
 801b8fa:	370c      	adds	r7, #12
 801b8fc:	46bd      	mov	sp, r7
 801b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b902:	4770      	bx	lr

0801b904 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 801b904:	b580      	push	{r7, lr}
 801b906:	b082      	sub	sp, #8
 801b908:	af00      	add	r7, sp, #0
 801b90a:	6078      	str	r0, [r7, #4]
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	3314      	adds	r3, #20
 801b910:	4618      	mov	r0, r3
 801b912:	f7f1 faa1 	bl	800ce58 <_ZN8touchgfx9colortypeC1Ev>
 801b916:	687b      	ldr	r3, [r7, #4]
 801b918:	4618      	mov	r0, r3
 801b91a:	3708      	adds	r7, #8
 801b91c:	46bd      	mov	sp, r7
 801b91e:	bd80      	pop	{r7, pc}

0801b920 <_ZN10STM32F7DMAC1Ev>:

}

STM32F7DMA::STM32F7DMA()
 801b920:	b5b0      	push	{r4, r5, r7, lr}
 801b922:	b082      	sub	sp, #8
 801b924:	af00      	add	r7, sp, #0
 801b926:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 801b928:	687a      	ldr	r2, [r7, #4]
 801b92a:	687b      	ldr	r3, [r7, #4]
 801b92c:	330c      	adds	r3, #12
 801b92e:	4619      	mov	r1, r3
 801b930:	4610      	mov	r0, r2
 801b932:	f7ff ff23 	bl	801b77c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801b936:	4a0e      	ldr	r2, [pc, #56]	; (801b970 <_ZN10STM32F7DMAC1Ev+0x50>)
 801b938:	687b      	ldr	r3, [r7, #4]
 801b93a:	601a      	str	r2, [r3, #0]
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	f103 000c 	add.w	r0, r3, #12
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	3320      	adds	r3, #32
 801b946:	2260      	movs	r2, #96	; 0x60
 801b948:	4619      	mov	r1, r3
 801b94a:	f001 fca1 	bl	801d290 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	3320      	adds	r3, #32
 801b952:	245f      	movs	r4, #95	; 0x5f
 801b954:	461d      	mov	r5, r3
 801b956:	2c00      	cmp	r4, #0
 801b958:	db05      	blt.n	801b966 <_ZN10STM32F7DMAC1Ev+0x46>
 801b95a:	4628      	mov	r0, r5
 801b95c:	f7ff ffd2 	bl	801b904 <_ZN8touchgfx6BlitOpC1Ev>
 801b960:	351c      	adds	r5, #28
 801b962:	3c01      	subs	r4, #1
 801b964:	e7f7      	b.n	801b956 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	4618      	mov	r0, r3
 801b96a:	3708      	adds	r7, #8
 801b96c:	46bd      	mov	sp, r7
 801b96e:	bdb0      	pop	{r4, r5, r7, pc}
 801b970:	08024854 	.word	0x08024854

0801b974 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 801b974:	b580      	push	{r7, lr}
 801b976:	b082      	sub	sp, #8
 801b978:	af00      	add	r7, sp, #0
 801b97a:	6078      	str	r0, [r7, #4]
 801b97c:	4a0b      	ldr	r2, [pc, #44]	; (801b9ac <_ZN10STM32F7DMAD1Ev+0x38>)
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 801b982:	480b      	ldr	r0, [pc, #44]	; (801b9b0 <_ZN10STM32F7DMAD1Ev+0x3c>)
 801b984:	f7e6 fe58 	bl	8002638 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 801b988:	205a      	movs	r0, #90	; 0x5a
 801b98a:	f7ff ff51 	bl	801b830 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	330c      	adds	r3, #12
 801b992:	4618      	mov	r0, r3
 801b994:	f000 fab6 	bl	801bf04 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	4618      	mov	r0, r3
 801b99c:	f7ff fece 	bl	801b73c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	4618      	mov	r0, r3
 801b9a4:	3708      	adds	r7, #8
 801b9a6:	46bd      	mov	sp, r7
 801b9a8:	bd80      	pop	{r7, pc}
 801b9aa:	bf00      	nop
 801b9ac:	08024854 	.word	0x08024854
 801b9b0:	2000a250 	.word	0x2000a250

0801b9b4 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 801b9b4:	b580      	push	{r7, lr}
 801b9b6:	b082      	sub	sp, #8
 801b9b8:	af00      	add	r7, sp, #0
 801b9ba:	6078      	str	r0, [r7, #4]
}
 801b9bc:	6878      	ldr	r0, [r7, #4]
 801b9be:	f7ff ffd9 	bl	801b974 <_ZN10STM32F7DMAD1Ev>
 801b9c2:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
 801b9c6:	6878      	ldr	r0, [r7, #4]
 801b9c8:	f005 fbd9 	bl	802117e <_ZdlPvj>
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	4618      	mov	r0, r3
 801b9d0:	3708      	adds	r7, #8
 801b9d2:	46bd      	mov	sp, r7
 801b9d4:	bd80      	pop	{r7, pc}
	...

0801b9d8 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 801b9d8:	b580      	push	{r7, lr}
 801b9da:	b082      	sub	sp, #8
 801b9dc:	af00      	add	r7, sp, #0
 801b9de:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 801b9e0:	4b09      	ldr	r3, [pc, #36]	; (801ba08 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801b9e2:	4a0a      	ldr	r2, [pc, #40]	; (801ba0c <_ZN10STM32F7DMA10initializeEv+0x34>)
 801b9e4:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 801b9e6:	4808      	ldr	r0, [pc, #32]	; (801ba08 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801b9e8:	f7e6 fddc 	bl	80025a4 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 801b9ec:	4b06      	ldr	r3, [pc, #24]	; (801ba08 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801b9ee:	4a08      	ldr	r2, [pc, #32]	; (801ba10 <_ZN10STM32F7DMA10initializeEv+0x38>)
 801b9f0:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 801b9f2:	4b05      	ldr	r3, [pc, #20]	; (801ba08 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801b9f4:	4a07      	ldr	r2, [pc, #28]	; (801ba14 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 801b9f6:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 801b9f8:	205a      	movs	r0, #90	; 0x5a
 801b9fa:	f7ff fef9 	bl	801b7f0 <__NVIC_EnableIRQ>
}
 801b9fe:	bf00      	nop
 801ba00:	3708      	adds	r7, #8
 801ba02:	46bd      	mov	sp, r7
 801ba04:	bd80      	pop	{r7, pc}
 801ba06:	bf00      	nop
 801ba08:	2000a250 	.word	0x2000a250
 801ba0c:	4002b000 	.word	0x4002b000
 801ba10:	0801b8d5 	.word	0x0801b8d5
 801ba14:	0801b8f1 	.word	0x0801b8f1

0801ba18 <_ZN10STM32F7DMA11getBlitCapsEv>:

volatile bool disableChromArt = false;

BlitOperations STM32F7DMA::getBlitCaps()
{
 801ba18:	b480      	push	{r7}
 801ba1a:	b083      	sub	sp, #12
 801ba1c:	af00      	add	r7, sp, #0
 801ba1e:	6078      	str	r0, [r7, #4]
    if (disableChromArt)
 801ba20:	4b07      	ldr	r3, [pc, #28]	; (801ba40 <_ZN10STM32F7DMA11getBlitCapsEv+0x28>)
 801ba22:	781b      	ldrb	r3, [r3, #0]
 801ba24:	b2db      	uxtb	r3, r3
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	d001      	beq.n	801ba2e <_ZN10STM32F7DMA11getBlitCapsEv+0x16>
    {
        return static_cast<BlitOperations>(0);
 801ba2a:	2300      	movs	r3, #0
 801ba2c:	e001      	b.n	801ba32 <_ZN10STM32F7DMA11getBlitCapsEv+0x1a>
                                           | BLIT_OP_COPY
                                           | BLIT_OP_COPY_WITH_ALPHA
                                           | BLIT_OP_COPY_ARGB8888
                                           | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                           | BLIT_OP_COPY_A4
                                           | BLIT_OP_COPY_A8);
 801ba2e:	f240 13ef 	movw	r3, #495	; 0x1ef
    }
}
 801ba32:	4618      	mov	r0, r3
 801ba34:	370c      	adds	r7, #12
 801ba36:	46bd      	mov	sp, r7
 801ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba3c:	4770      	bx	lr
 801ba3e:	bf00      	nop
 801ba40:	2000a2d8 	.word	0x2000a2d8

0801ba44 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 801ba44:	b590      	push	{r4, r7, lr}
 801ba46:	b08d      	sub	sp, #52	; 0x34
 801ba48:	af02      	add	r7, sp, #8
 801ba4a:	6078      	str	r0, [r7, #4]
 801ba4c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 801ba4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801ba52:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 801ba54:	2300      	movs	r3, #0
 801ba56:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 801ba58:	683b      	ldr	r3, [r7, #0]
 801ba5a:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 801ba5c:	2b20      	cmp	r3, #32
 801ba5e:	d007      	beq.n	801ba70 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 801ba60:	683b      	ldr	r3, [r7, #0]
 801ba62:	681b      	ldr	r3, [r3, #0]
 801ba64:	2b40      	cmp	r3, #64	; 0x40
 801ba66:	d003      	beq.n	801ba70 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 801ba68:	683b      	ldr	r3, [r7, #0]
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	2b04      	cmp	r3, #4
 801ba6e:	d101      	bne.n	801ba74 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 801ba70:	2301      	movs	r3, #1
 801ba72:	e000      	b.n	801ba76 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 801ba74:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 801ba76:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 801ba78:	683b      	ldr	r3, [r7, #0]
 801ba7a:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 801ba7c:	2b80      	cmp	r3, #128	; 0x80
 801ba7e:	d004      	beq.n	801ba8a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 801ba80:	683b      	ldr	r3, [r7, #0]
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ba88:	d101      	bne.n	801ba8e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 801ba8a:	2301      	movs	r3, #1
 801ba8c:	e000      	b.n	801ba90 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 801ba8e:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 801ba90:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 801ba92:	f7f1 f9ef 	bl	800ce74 <_ZN8touchgfx3HAL3lcdEv>
 801ba96:	4602      	mov	r2, r0
 801ba98:	6813      	ldr	r3, [r2, #0]
 801ba9a:	3320      	adds	r3, #32
 801ba9c:	681b      	ldr	r3, [r3, #0]
 801ba9e:	4610      	mov	r0, r2
 801baa0:	4798      	blx	r3
 801baa2:	4603      	mov	r3, r0
 801baa4:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 801baa6:	683b      	ldr	r3, [r7, #0]
 801baa8:	681b      	ldr	r3, [r3, #0]
 801baaa:	2b40      	cmp	r3, #64	; 0x40
 801baac:	d01d      	beq.n	801baea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 801baae:	2b40      	cmp	r3, #64	; 0x40
 801bab0:	d804      	bhi.n	801babc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 801bab2:	2b04      	cmp	r3, #4
 801bab4:	d00e      	beq.n	801bad4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 801bab6:	2b20      	cmp	r3, #32
 801bab8:	d017      	beq.n	801baea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 801baba:	e019      	b.n	801baf0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 801babc:	2b80      	cmp	r3, #128	; 0x80
 801babe:	d003      	beq.n	801bac8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 801bac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bac4:	d003      	beq.n	801bace <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 801bac6:	e013      	b.n	801baf0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 801bac8:	230a      	movs	r3, #10
 801baca:	623b      	str	r3, [r7, #32]
        break;
 801bacc:	e01a      	b.n	801bb04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 801bace:	2309      	movs	r3, #9
 801bad0:	623b      	str	r3, [r7, #32]
        break;
 801bad2:	e017      	b.n	801bb04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 801bad4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801bad8:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801bada:	7f7b      	ldrb	r3, [r7, #29]
 801badc:	2b10      	cmp	r3, #16
 801bade:	d101      	bne.n	801bae4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 801bae0:	2302      	movs	r3, #2
 801bae2:	e000      	b.n	801bae6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 801bae4:	2301      	movs	r3, #1
 801bae6:	623b      	str	r3, [r7, #32]
        break;
 801bae8:	e00c      	b.n	801bb04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 801baea:	2300      	movs	r3, #0
 801baec:	623b      	str	r3, [r7, #32]
        break;
 801baee:	e009      	b.n	801bb04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 801baf0:	2300      	movs	r3, #0
 801baf2:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801baf4:	7f7b      	ldrb	r3, [r7, #29]
 801baf6:	2b10      	cmp	r3, #16
 801baf8:	d101      	bne.n	801bafe <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 801bafa:	2302      	movs	r3, #2
 801bafc:	e000      	b.n	801bb00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 801bafe:	2301      	movs	r3, #1
 801bb00:	623b      	str	r3, [r7, #32]
        break;
 801bb02:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 801bb04:	4a76      	ldr	r2, [pc, #472]	; (801bce0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801bb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb08:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 801bb0a:	7f7b      	ldrb	r3, [r7, #29]
 801bb0c:	2b10      	cmp	r3, #16
 801bb0e:	d101      	bne.n	801bb14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 801bb10:	2302      	movs	r3, #2
 801bb12:	e000      	b.n	801bb16 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 801bb14:	2301      	movs	r3, #1
 801bb16:	4a72      	ldr	r2, [pc, #456]	; (801bce0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801bb18:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801bb1a:	683b      	ldr	r3, [r7, #0]
 801bb1c:	8a5b      	ldrh	r3, [r3, #18]
 801bb1e:	461a      	mov	r2, r3
 801bb20:	683b      	ldr	r3, [r7, #0]
 801bb22:	899b      	ldrh	r3, [r3, #12]
 801bb24:	1ad3      	subs	r3, r2, r3
 801bb26:	461a      	mov	r2, r3
 801bb28:	4b6d      	ldr	r3, [pc, #436]	; (801bce0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801bb2a:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801bb2c:	7f7b      	ldrb	r3, [r7, #29]
 801bb2e:	2b10      	cmp	r3, #16
 801bb30:	d101      	bne.n	801bb36 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 801bb32:	2202      	movs	r2, #2
 801bb34:	e000      	b.n	801bb38 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 801bb36:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 801bb38:	683b      	ldr	r3, [r7, #0]
 801bb3a:	8a5b      	ldrh	r3, [r3, #18]
 801bb3c:	4619      	mov	r1, r3
 801bb3e:	683b      	ldr	r3, [r7, #0]
 801bb40:	899b      	ldrh	r3, [r3, #12]
 801bb42:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801bb44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801bb46:	4866      	ldr	r0, [pc, #408]	; (801bce0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801bb48:	f7ff fe96 	bl	801b878 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 801bb4c:	4a64      	ldr	r2, [pc, #400]	; (801bce0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801bb4e:	6a3b      	ldr	r3, [r7, #32]
 801bb50:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 801bb52:	683b      	ldr	r3, [r7, #0]
 801bb54:	8a1b      	ldrh	r3, [r3, #16]
 801bb56:	461a      	mov	r2, r3
 801bb58:	683b      	ldr	r3, [r7, #0]
 801bb5a:	899b      	ldrh	r3, [r3, #12]
 801bb5c:	1ad3      	subs	r3, r2, r3
 801bb5e:	461a      	mov	r2, r3
 801bb60:	4b5f      	ldr	r3, [pc, #380]	; (801bce0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801bb62:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 801bb64:	7ffb      	ldrb	r3, [r7, #31]
 801bb66:	2b00      	cmp	r3, #0
 801bb68:	d103      	bne.n	801bb72 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 801bb6a:	7fbb      	ldrb	r3, [r7, #30]
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	f000 8082 	beq.w	801bc76 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 801bb72:	683b      	ldr	r3, [r7, #0]
 801bb74:	7e1b      	ldrb	r3, [r3, #24]
 801bb76:	2bff      	cmp	r3, #255	; 0xff
 801bb78:	d008      	beq.n	801bb8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 801bb7a:	4b59      	ldr	r3, [pc, #356]	; (801bce0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801bb7c:	2202      	movs	r2, #2
 801bb7e:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 801bb80:	683b      	ldr	r3, [r7, #0]
 801bb82:	7e1b      	ldrb	r3, [r3, #24]
 801bb84:	461a      	mov	r2, r3
 801bb86:	4b56      	ldr	r3, [pc, #344]	; (801bce0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801bb88:	635a      	str	r2, [r3, #52]	; 0x34
 801bb8a:	e002      	b.n	801bb92 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801bb8c:	4b54      	ldr	r3, [pc, #336]	; (801bce0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801bb8e:	2200      	movs	r2, #0
 801bb90:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 801bb92:	7fbb      	ldrb	r3, [r7, #30]
 801bb94:	2b00      	cmp	r3, #0
 801bb96:	d059      	beq.n	801bc4c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 801bb98:	7f7b      	ldrb	r3, [r7, #29]
 801bb9a:	2b10      	cmp	r3, #16
 801bb9c:	d14a      	bne.n	801bc34 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801bb9e:	683b      	ldr	r3, [r7, #0]
 801bba0:	3314      	adds	r3, #20
 801bba2:	4618      	mov	r0, r3
 801bba4:	f7f2 f9c0 	bl	800df28 <_ZNK8touchgfx9colortypecvtEv>
 801bba8:	4603      	mov	r3, r0
 801bbaa:	12db      	asrs	r3, r3, #11
 801bbac:	f003 021f 	and.w	r2, r3, #31
 801bbb0:	4613      	mov	r3, r2
 801bbb2:	021b      	lsls	r3, r3, #8
 801bbb4:	1a9b      	subs	r3, r3, r2
 801bbb6:	4a4b      	ldr	r2, [pc, #300]	; (801bce4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801bbb8:	fb82 1203 	smull	r1, r2, r2, r3
 801bbbc:	441a      	add	r2, r3
 801bbbe:	1112      	asrs	r2, r2, #4
 801bbc0:	17db      	asrs	r3, r3, #31
 801bbc2:	1ad3      	subs	r3, r2, r3
 801bbc4:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 801bbc6:	683b      	ldr	r3, [r7, #0]
 801bbc8:	3314      	adds	r3, #20
 801bbca:	4618      	mov	r0, r3
 801bbcc:	f7f2 f9ac 	bl	800df28 <_ZNK8touchgfx9colortypecvtEv>
 801bbd0:	4603      	mov	r3, r0
 801bbd2:	115b      	asrs	r3, r3, #5
 801bbd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801bbd8:	4613      	mov	r3, r2
 801bbda:	021b      	lsls	r3, r3, #8
 801bbdc:	1a9b      	subs	r3, r3, r2
 801bbde:	4a42      	ldr	r2, [pc, #264]	; (801bce8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801bbe0:	fb82 1203 	smull	r1, r2, r2, r3
 801bbe4:	441a      	add	r2, r3
 801bbe6:	1152      	asrs	r2, r2, #5
 801bbe8:	17db      	asrs	r3, r3, #31
 801bbea:	1ad3      	subs	r3, r2, r3
 801bbec:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801bbee:	683b      	ldr	r3, [r7, #0]
 801bbf0:	3314      	adds	r3, #20
 801bbf2:	4618      	mov	r0, r3
 801bbf4:	f7f2 f998 	bl	800df28 <_ZNK8touchgfx9colortypecvtEv>
 801bbf8:	4603      	mov	r3, r0
 801bbfa:	f003 021f 	and.w	r2, r3, #31
 801bbfe:	4613      	mov	r3, r2
 801bc00:	021b      	lsls	r3, r3, #8
 801bc02:	1a9b      	subs	r3, r3, r2
 801bc04:	4a37      	ldr	r2, [pc, #220]	; (801bce4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801bc06:	fb82 1203 	smull	r1, r2, r2, r3
 801bc0a:	441a      	add	r2, r3
 801bc0c:	1112      	asrs	r2, r2, #4
 801bc0e:	17db      	asrs	r3, r3, #31
 801bc10:	1ad3      	subs	r3, r2, r3
 801bc12:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 801bc14:	683b      	ldr	r3, [r7, #0]
 801bc16:	7e1b      	ldrb	r3, [r3, #24]
 801bc18:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801bc1a:	68fb      	ldr	r3, [r7, #12]
 801bc1c:	061a      	lsls	r2, r3, #24
 801bc1e:	69bb      	ldr	r3, [r7, #24]
 801bc20:	041b      	lsls	r3, r3, #16
 801bc22:	431a      	orrs	r2, r3
 801bc24:	697b      	ldr	r3, [r7, #20]
 801bc26:	021b      	lsls	r3, r3, #8
 801bc28:	431a      	orrs	r2, r3
 801bc2a:	693b      	ldr	r3, [r7, #16]
 801bc2c:	4313      	orrs	r3, r2
 801bc2e:	4a2c      	ldr	r2, [pc, #176]	; (801bce0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801bc30:	6353      	str	r3, [r2, #52]	; 0x34
 801bc32:	e00b      	b.n	801bc4c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 801bc34:	683b      	ldr	r3, [r7, #0]
 801bc36:	3314      	adds	r3, #20
 801bc38:	4618      	mov	r0, r3
 801bc3a:	f7f2 f982 	bl	800df42 <_ZNK8touchgfx9colortype10getColor32Ev>
 801bc3e:	4602      	mov	r2, r0
 801bc40:	683b      	ldr	r3, [r7, #0]
 801bc42:	7e1b      	ldrb	r3, [r3, #24]
 801bc44:	061b      	lsls	r3, r3, #24
 801bc46:	4313      	orrs	r3, r2
 801bc48:	4a25      	ldr	r2, [pc, #148]	; (801bce0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801bc4a:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801bc4c:	683b      	ldr	r3, [r7, #0]
 801bc4e:	8a5b      	ldrh	r3, [r3, #18]
 801bc50:	461a      	mov	r2, r3
 801bc52:	683b      	ldr	r3, [r7, #0]
 801bc54:	899b      	ldrh	r3, [r3, #12]
 801bc56:	1ad3      	subs	r3, r2, r3
 801bc58:	461a      	mov	r2, r3
 801bc5a:	4b21      	ldr	r3, [pc, #132]	; (801bce0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801bc5c:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801bc5e:	7f7b      	ldrb	r3, [r7, #29]
 801bc60:	2b10      	cmp	r3, #16
 801bc62:	d101      	bne.n	801bc68 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 801bc64:	2302      	movs	r3, #2
 801bc66:	e000      	b.n	801bc6a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 801bc68:	2301      	movs	r3, #1
 801bc6a:	4a1d      	ldr	r2, [pc, #116]	; (801bce0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801bc6c:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801bc6e:	2100      	movs	r1, #0
 801bc70:	481b      	ldr	r0, [pc, #108]	; (801bce0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801bc72:	f7e6 ff61 	bl	8002b38 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801bc76:	2101      	movs	r1, #1
 801bc78:	4819      	ldr	r0, [pc, #100]	; (801bce0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801bc7a:	f7e6 ff5d 	bl	8002b38 <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 801bc7e:	7ffb      	ldrb	r3, [r7, #31]
 801bc80:	2b00      	cmp	r3, #0
 801bc82:	d102      	bne.n	801bc8a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 801bc84:	7fbb      	ldrb	r3, [r7, #30]
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d015      	beq.n	801bcb6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 801bc8a:	683b      	ldr	r3, [r7, #0]
 801bc8c:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801bc8e:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 801bc90:	683b      	ldr	r3, [r7, #0]
 801bc92:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801bc94:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 801bc96:	683b      	ldr	r3, [r7, #0]
 801bc98:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801bc9a:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801bc9c:	683b      	ldr	r3, [r7, #0]
 801bc9e:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801bca0:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801bca2:	683b      	ldr	r3, [r7, #0]
 801bca4:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801bca6:	9301      	str	r3, [sp, #4]
 801bca8:	9200      	str	r2, [sp, #0]
 801bcaa:	4623      	mov	r3, r4
 801bcac:	4602      	mov	r2, r0
 801bcae:	480c      	ldr	r0, [pc, #48]	; (801bce0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801bcb0:	f7e6 fd65 	bl	800277e <HAL_DMA2D_BlendingStart_IT>
 801bcb4:	e00f      	b.n	801bcd6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 801bcb6:	683b      	ldr	r3, [r7, #0]
 801bcb8:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 801bcba:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 801bcbc:	683b      	ldr	r3, [r7, #0]
 801bcbe:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_Start_IT(&hdma2d,
 801bcc0:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801bcc2:	683b      	ldr	r3, [r7, #0]
 801bcc4:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 801bcc6:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 801bcc8:	683b      	ldr	r3, [r7, #0]
 801bcca:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_Start_IT(&hdma2d,
 801bccc:	9300      	str	r3, [sp, #0]
 801bcce:	4603      	mov	r3, r0
 801bcd0:	4803      	ldr	r0, [pc, #12]	; (801bce0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801bcd2:	f7e6 fd21 	bl	8002718 <HAL_DMA2D_Start_IT>
    }
}
 801bcd6:	bf00      	nop
 801bcd8:	372c      	adds	r7, #44	; 0x2c
 801bcda:	46bd      	mov	sp, r7
 801bcdc:	bd90      	pop	{r4, r7, pc}
 801bcde:	bf00      	nop
 801bce0:	2000a250 	.word	0x2000a250
 801bce4:	84210843 	.word	0x84210843
 801bce8:	82082083 	.word	0x82082083

0801bcec <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 801bcec:	b590      	push	{r4, r7, lr}
 801bcee:	b08d      	sub	sp, #52	; 0x34
 801bcf0:	af02      	add	r7, sp, #8
 801bcf2:	6078      	str	r0, [r7, #4]
 801bcf4:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 801bcf6:	f7f1 f8bd 	bl	800ce74 <_ZN8touchgfx3HAL3lcdEv>
 801bcfa:	4602      	mov	r2, r0
 801bcfc:	6813      	ldr	r3, [r2, #0]
 801bcfe:	3320      	adds	r3, #32
 801bd00:	681b      	ldr	r3, [r3, #0]
 801bd02:	4610      	mov	r0, r2
 801bd04:	4798      	blx	r3
 801bd06:	4603      	mov	r3, r0
 801bd08:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801bd0a:	7ffb      	ldrb	r3, [r7, #31]
 801bd0c:	2b10      	cmp	r3, #16
 801bd0e:	d101      	bne.n	801bd14 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 801bd10:	2302      	movs	r3, #2
 801bd12:	e000      	b.n	801bd16 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 801bd14:	2301      	movs	r3, #1
 801bd16:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 801bd18:	2300      	movs	r3, #0
 801bd1a:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 801bd1c:	7ffb      	ldrb	r3, [r7, #31]
 801bd1e:	2b10      	cmp	r3, #16
 801bd20:	d149      	bne.n	801bdb6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801bd22:	683b      	ldr	r3, [r7, #0]
 801bd24:	3314      	adds	r3, #20
 801bd26:	4618      	mov	r0, r3
 801bd28:	f7f2 f8fe 	bl	800df28 <_ZNK8touchgfx9colortypecvtEv>
 801bd2c:	4603      	mov	r3, r0
 801bd2e:	12db      	asrs	r3, r3, #11
 801bd30:	f003 021f 	and.w	r2, r3, #31
 801bd34:	4613      	mov	r3, r2
 801bd36:	021b      	lsls	r3, r3, #8
 801bd38:	1a9b      	subs	r3, r3, r2
 801bd3a:	4a69      	ldr	r2, [pc, #420]	; (801bee0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 801bd3c:	fb82 1203 	smull	r1, r2, r2, r3
 801bd40:	441a      	add	r2, r3
 801bd42:	1112      	asrs	r2, r2, #4
 801bd44:	17db      	asrs	r3, r3, #31
 801bd46:	1ad3      	subs	r3, r2, r3
 801bd48:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 801bd4a:	683b      	ldr	r3, [r7, #0]
 801bd4c:	3314      	adds	r3, #20
 801bd4e:	4618      	mov	r0, r3
 801bd50:	f7f2 f8ea 	bl	800df28 <_ZNK8touchgfx9colortypecvtEv>
 801bd54:	4603      	mov	r3, r0
 801bd56:	115b      	asrs	r3, r3, #5
 801bd58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801bd5c:	4613      	mov	r3, r2
 801bd5e:	021b      	lsls	r3, r3, #8
 801bd60:	1a9b      	subs	r3, r3, r2
 801bd62:	4a60      	ldr	r2, [pc, #384]	; (801bee4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 801bd64:	fb82 1203 	smull	r1, r2, r2, r3
 801bd68:	441a      	add	r2, r3
 801bd6a:	1152      	asrs	r2, r2, #5
 801bd6c:	17db      	asrs	r3, r3, #31
 801bd6e:	1ad3      	subs	r3, r2, r3
 801bd70:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801bd72:	683b      	ldr	r3, [r7, #0]
 801bd74:	3314      	adds	r3, #20
 801bd76:	4618      	mov	r0, r3
 801bd78:	f7f2 f8d6 	bl	800df28 <_ZNK8touchgfx9colortypecvtEv>
 801bd7c:	4603      	mov	r3, r0
 801bd7e:	f003 021f 	and.w	r2, r3, #31
 801bd82:	4613      	mov	r3, r2
 801bd84:	021b      	lsls	r3, r3, #8
 801bd86:	1a9b      	subs	r3, r3, r2
 801bd88:	4a55      	ldr	r2, [pc, #340]	; (801bee0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 801bd8a:	fb82 1203 	smull	r1, r2, r2, r3
 801bd8e:	441a      	add	r2, r3
 801bd90:	1112      	asrs	r2, r2, #4
 801bd92:	17db      	asrs	r3, r3, #31
 801bd94:	1ad3      	subs	r3, r2, r3
 801bd96:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 801bd98:	683b      	ldr	r3, [r7, #0]
 801bd9a:	7e1b      	ldrb	r3, [r3, #24]
 801bd9c:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801bd9e:	68bb      	ldr	r3, [r7, #8]
 801bda0:	061a      	lsls	r2, r3, #24
 801bda2:	697b      	ldr	r3, [r7, #20]
 801bda4:	041b      	lsls	r3, r3, #16
 801bda6:	431a      	orrs	r2, r3
 801bda8:	693b      	ldr	r3, [r7, #16]
 801bdaa:	021b      	lsls	r3, r3, #8
 801bdac:	4313      	orrs	r3, r2
 801bdae:	68fa      	ldr	r2, [r7, #12]
 801bdb0:	4313      	orrs	r3, r2
 801bdb2:	623b      	str	r3, [r7, #32]
 801bdb4:	e00b      	b.n	801bdce <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 801bdb6:	683b      	ldr	r3, [r7, #0]
 801bdb8:	7e1b      	ldrb	r3, [r3, #24]
 801bdba:	061b      	lsls	r3, r3, #24
 801bdbc:	461c      	mov	r4, r3
 801bdbe:	683b      	ldr	r3, [r7, #0]
 801bdc0:	3314      	adds	r3, #20
 801bdc2:	4618      	mov	r0, r3
 801bdc4:	f7f2 f8bd 	bl	800df42 <_ZNK8touchgfx9colortype10getColor32Ev>
 801bdc8:	4603      	mov	r3, r0
 801bdca:	4323      	orrs	r3, r4
 801bdcc:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 801bdce:	683b      	ldr	r3, [r7, #0]
 801bdd0:	681b      	ldr	r3, [r3, #0]
 801bdd2:	2b08      	cmp	r3, #8
 801bdd4:	d103      	bne.n	801bdde <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 801bdd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801bdda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801bddc:	e003      	b.n	801bde6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 801bdde:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801bde2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801bde4:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 801bde6:	4a40      	ldr	r2, [pc, #256]	; (801bee8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801bde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bdea:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 801bdec:	7ffb      	ldrb	r3, [r7, #31]
 801bdee:	2b10      	cmp	r3, #16
 801bdf0:	d101      	bne.n	801bdf6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 801bdf2:	2302      	movs	r3, #2
 801bdf4:	e000      	b.n	801bdf8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 801bdf6:	2301      	movs	r3, #1
 801bdf8:	4a3b      	ldr	r2, [pc, #236]	; (801bee8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801bdfa:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801bdfc:	683b      	ldr	r3, [r7, #0]
 801bdfe:	8a5b      	ldrh	r3, [r3, #18]
 801be00:	461a      	mov	r2, r3
 801be02:	683b      	ldr	r3, [r7, #0]
 801be04:	899b      	ldrh	r3, [r3, #12]
 801be06:	1ad3      	subs	r3, r2, r3
 801be08:	461a      	mov	r2, r3
 801be0a:	4b37      	ldr	r3, [pc, #220]	; (801bee8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801be0c:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801be0e:	7ffb      	ldrb	r3, [r7, #31]
 801be10:	2b10      	cmp	r3, #16
 801be12:	d101      	bne.n	801be18 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 801be14:	2202      	movs	r2, #2
 801be16:	e000      	b.n	801be1a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 801be18:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 801be1a:	683b      	ldr	r3, [r7, #0]
 801be1c:	8a5b      	ldrh	r3, [r3, #18]
 801be1e:	4619      	mov	r1, r3
 801be20:	683b      	ldr	r3, [r7, #0]
 801be22:	899b      	ldrh	r3, [r3, #12]
 801be24:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801be26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801be28:	482f      	ldr	r0, [pc, #188]	; (801bee8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801be2a:	f7ff fd25 	bl	801b878 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 801be2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801be34:	d11e      	bne.n	801be74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 801be36:	4b2c      	ldr	r3, [pc, #176]	; (801bee8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801be38:	2201      	movs	r2, #1
 801be3a:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 801be3c:	4a2a      	ldr	r2, [pc, #168]	; (801bee8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801be3e:	6a3b      	ldr	r3, [r7, #32]
 801be40:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 801be42:	4b29      	ldr	r3, [pc, #164]	; (801bee8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801be44:	2209      	movs	r2, #9
 801be46:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801be48:	683b      	ldr	r3, [r7, #0]
 801be4a:	8a5b      	ldrh	r3, [r3, #18]
 801be4c:	461a      	mov	r2, r3
 801be4e:	683b      	ldr	r3, [r7, #0]
 801be50:	899b      	ldrh	r3, [r3, #12]
 801be52:	1ad3      	subs	r3, r2, r3
 801be54:	461a      	mov	r2, r3
 801be56:	4b24      	ldr	r3, [pc, #144]	; (801bee8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801be58:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801be5a:	7ffb      	ldrb	r3, [r7, #31]
 801be5c:	2b10      	cmp	r3, #16
 801be5e:	d101      	bne.n	801be64 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 801be60:	2302      	movs	r3, #2
 801be62:	e000      	b.n	801be66 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 801be64:	2301      	movs	r3, #1
 801be66:	4a20      	ldr	r2, [pc, #128]	; (801bee8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801be68:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801be6a:	2100      	movs	r1, #0
 801be6c:	481e      	ldr	r0, [pc, #120]	; (801bee8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801be6e:	f7e6 fe63 	bl	8002b38 <HAL_DMA2D_ConfigLayer>
 801be72:	e005      	b.n	801be80 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 801be74:	4a1c      	ldr	r2, [pc, #112]	; (801bee8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801be76:	69bb      	ldr	r3, [r7, #24]
 801be78:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 801be7a:	4b1b      	ldr	r3, [pc, #108]	; (801bee8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801be7c:	2200      	movs	r2, #0
 801be7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801be80:	2101      	movs	r1, #1
 801be82:	4819      	ldr	r0, [pc, #100]	; (801bee8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801be84:	f7e6 fe58 	bl	8002b38 <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 801be88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801be8e:	d115      	bne.n	801bebc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 801be90:	683b      	ldr	r3, [r7, #0]
 801be92:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801be94:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 801be96:	683b      	ldr	r3, [r7, #0]
 801be98:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801be9a:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 801be9c:	683b      	ldr	r3, [r7, #0]
 801be9e:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801bea0:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801bea2:	683b      	ldr	r3, [r7, #0]
 801bea4:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801bea6:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801bea8:	683b      	ldr	r3, [r7, #0]
 801beaa:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801beac:	9301      	str	r3, [sp, #4]
 801beae:	9200      	str	r2, [sp, #0]
 801beb0:	4623      	mov	r3, r4
 801beb2:	4602      	mov	r2, r0
 801beb4:	480c      	ldr	r0, [pc, #48]	; (801bee8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801beb6:	f7e6 fc62 	bl	800277e <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 801beba:	e00d      	b.n	801bed8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801bebc:	683b      	ldr	r3, [r7, #0]
 801bebe:	689b      	ldr	r3, [r3, #8]
 801bec0:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801bec2:	683b      	ldr	r3, [r7, #0]
 801bec4:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801bec6:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 801bec8:	683b      	ldr	r3, [r7, #0]
 801beca:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801becc:	9300      	str	r3, [sp, #0]
 801bece:	460b      	mov	r3, r1
 801bed0:	6a39      	ldr	r1, [r7, #32]
 801bed2:	4805      	ldr	r0, [pc, #20]	; (801bee8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801bed4:	f7e6 fc20 	bl	8002718 <HAL_DMA2D_Start_IT>
}
 801bed8:	bf00      	nop
 801beda:	372c      	adds	r7, #44	; 0x2c
 801bedc:	46bd      	mov	sp, r7
 801bede:	bd90      	pop	{r4, r7, pc}
 801bee0:	84210843 	.word	0x84210843
 801bee4:	82082083 	.word	0x82082083
 801bee8:	2000a250 	.word	0x2000a250

0801beec <_ZN10STM32F7DMA5startEv>:

void STM32F7DMA::start()
{
 801beec:	b580      	push	{r7, lr}
 801beee:	b082      	sub	sp, #8
 801bef0:	af00      	add	r7, sp, #0
 801bef2:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanDCache() or SCB_CleanDCache_by_Addr().
    DMA_Interface::start();
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	4618      	mov	r0, r3
 801bef8:	f001 f9b8 	bl	801d26c <_ZN8touchgfx13DMA_Interface5startEv>
}
 801befc:	bf00      	nop
 801befe:	3708      	adds	r7, #8
 801bf00:	46bd      	mov	sp, r7
 801bf02:	bd80      	pop	{r7, pc}

0801bf04 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 801bf04:	b580      	push	{r7, lr}
 801bf06:	b082      	sub	sp, #8
 801bf08:	af00      	add	r7, sp, #0
 801bf0a:	6078      	str	r0, [r7, #4]
 801bf0c:	4a05      	ldr	r2, [pc, #20]	; (801bf24 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	601a      	str	r2, [r3, #0]
 801bf12:	687b      	ldr	r3, [r7, #4]
 801bf14:	4618      	mov	r0, r3
 801bf16:	f7ff fbe3 	bl	801b6e0 <_ZN8touchgfx9DMA_QueueD1Ev>
 801bf1a:	687b      	ldr	r3, [r7, #4]
 801bf1c:	4618      	mov	r0, r3
 801bf1e:	3708      	adds	r7, #8
 801bf20:	46bd      	mov	sp, r7
 801bf22:	bd80      	pop	{r7, pc}
 801bf24:	08025124 	.word	0x08025124

0801bf28 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801bf28:	b580      	push	{r7, lr}
 801bf2a:	b082      	sub	sp, #8
 801bf2c:	af00      	add	r7, sp, #0
 801bf2e:	6078      	str	r0, [r7, #4]
 801bf30:	6878      	ldr	r0, [r7, #4]
 801bf32:	f7ff ffe7 	bl	801bf04 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801bf36:	2114      	movs	r1, #20
 801bf38:	6878      	ldr	r0, [r7, #4]
 801bf3a:	f005 f920 	bl	802117e <_ZdlPvj>
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	4618      	mov	r0, r3
 801bf42:	3708      	adds	r7, #8
 801bf44:	46bd      	mov	sp, r7
 801bf46:	bd80      	pop	{r7, pc}

0801bf48 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 801bf48:	b480      	push	{r7}
 801bf4a:	b083      	sub	sp, #12
 801bf4c:	af00      	add	r7, sp, #0
 801bf4e:	6078      	str	r0, [r7, #4]
 801bf50:	460b      	mov	r3, r1
 801bf52:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 801bf54:	687b      	ldr	r3, [r7, #4]
 801bf56:	78fa      	ldrb	r2, [r7, #3]
 801bf58:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        displayOrientationChangeRequested = true;
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	2201      	movs	r2, #1
 801bf60:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }
 801bf64:	bf00      	nop
 801bf66:	370c      	adds	r7, #12
 801bf68:	46bd      	mov	sp, r7
 801bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf6e:	4770      	bx	lr

0801bf70 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 801bf70:	b580      	push	{r7, lr}
 801bf72:	b082      	sub	sp, #8
 801bf74:	af00      	add	r7, sp, #0
 801bf76:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	681b      	ldr	r3, [r3, #0]
 801bf7c:	3318      	adds	r3, #24
 801bf7e:	681b      	ldr	r3, [r3, #0]
 801bf80:	6878      	ldr	r0, [r7, #4]
 801bf82:	4798      	blx	r3
    }
 801bf84:	bf00      	nop
 801bf86:	3708      	adds	r7, #8
 801bf88:	46bd      	mov	sp, r7
 801bf8a:	bd80      	pop	{r7, pc}

0801bf8c <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 801bf8c:	b580      	push	{r7, lr}
 801bf8e:	b082      	sub	sp, #8
 801bf90:	af00      	add	r7, sp, #0
 801bf92:	6078      	str	r0, [r7, #4]
        return dma.getBlitCaps();
 801bf94:	687b      	ldr	r3, [r7, #4]
 801bf96:	685a      	ldr	r2, [r3, #4]
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	685b      	ldr	r3, [r3, #4]
 801bf9c:	681b      	ldr	r3, [r3, #0]
 801bf9e:	681b      	ldr	r3, [r3, #0]
 801bfa0:	4610      	mov	r0, r2
 801bfa2:	4798      	blx	r3
 801bfa4:	4603      	mov	r3, r0
    };
 801bfa6:	4618      	mov	r0, r3
 801bfa8:	3708      	adds	r7, #8
 801bfaa:	46bd      	mov	sp, r7
 801bfac:	bd80      	pop	{r7, pc}

0801bfae <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 801bfae:	b480      	push	{r7}
 801bfb0:	b083      	sub	sp, #12
 801bfb2:	af00      	add	r7, sp, #0
 801bfb4:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801bfb6:	687b      	ldr	r3, [r7, #4]
 801bfb8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801bfbc:	3301      	adds	r3, #1
 801bfbe:	b2da      	uxtb	r2, r3
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    };
 801bfc6:	bf00      	nop
 801bfc8:	370c      	adds	r7, #12
 801bfca:	46bd      	mov	sp, r7
 801bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfd0:	4770      	bx	lr

0801bfd2 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 801bfd2:	b580      	push	{r7, lr}
 801bfd4:	b082      	sub	sp, #8
 801bfd6:	af00      	add	r7, sp, #0
 801bfd8:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 801bfda:	6878      	ldr	r0, [r7, #4]
 801bfdc:	f001 f81c 	bl	801d018 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	681b      	ldr	r3, [r3, #0]
 801bfe4:	3384      	adds	r3, #132	; 0x84
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	6878      	ldr	r0, [r7, #4]
 801bfea:	4798      	blx	r3
    }
 801bfec:	bf00      	nop
 801bfee:	3708      	adds	r7, #8
 801bff0:	46bd      	mov	sp, r7
 801bff2:	bd80      	pop	{r7, pc}

0801bff4 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 801bff4:	b480      	push	{r7}
 801bff6:	b083      	sub	sp, #12
 801bff8:	af00      	add	r7, sp, #0
 801bffa:	6078      	str	r0, [r7, #4]
 801bffc:	6039      	str	r1, [r7, #0]
        return false;
 801bffe:	2300      	movs	r3, #0
    }
 801c000:	4618      	mov	r0, r3
 801c002:	370c      	adds	r7, #12
 801c004:	46bd      	mov	sp, r7
 801c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c00a:	4770      	bx	lr

0801c00c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 801c00c:	b580      	push	{r7, lr}
 801c00e:	b086      	sub	sp, #24
 801c010:	af00      	add	r7, sp, #0
 801c012:	60f8      	str	r0, [r7, #12]
 801c014:	60b9      	str	r1, [r7, #8]
 801c016:	4611      	mov	r1, r2
 801c018:	461a      	mov	r2, r3
 801c01a:	460b      	mov	r3, r1
 801c01c:	80fb      	strh	r3, [r7, #6]
 801c01e:	4613      	mov	r3, r2
 801c020:	717b      	strb	r3, [r7, #5]
        uint32_t bufferSizeInBytes = 0;
 801c022:	2300      	movs	r3, #0
 801c024:	617b      	str	r3, [r7, #20]
        switch (depth)
 801c026:	88fb      	ldrh	r3, [r7, #6]
 801c028:	3b01      	subs	r3, #1
 801c02a:	2b1f      	cmp	r3, #31
 801c02c:	d862      	bhi.n	801c0f4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xe8>
 801c02e:	a201      	add	r2, pc, #4	; (adr r2, 801c034 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x28>)
 801c030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c034:	0801c0d1 	.word	0x0801c0d1
 801c038:	0801c0d1 	.word	0x0801c0d1
 801c03c:	0801c0f5 	.word	0x0801c0f5
 801c040:	0801c0d1 	.word	0x0801c0d1
 801c044:	0801c0f5 	.word	0x0801c0f5
 801c048:	0801c0f5 	.word	0x0801c0f5
 801c04c:	0801c0f5 	.word	0x0801c0f5
 801c050:	0801c0b5 	.word	0x0801c0b5
 801c054:	0801c0f5 	.word	0x0801c0f5
 801c058:	0801c0f5 	.word	0x0801c0f5
 801c05c:	0801c0f5 	.word	0x0801c0f5
 801c060:	0801c0f5 	.word	0x0801c0f5
 801c064:	0801c0f5 	.word	0x0801c0f5
 801c068:	0801c0f5 	.word	0x0801c0f5
 801c06c:	0801c0f5 	.word	0x0801c0f5
 801c070:	0801c0b5 	.word	0x0801c0b5
 801c074:	0801c0f5 	.word	0x0801c0f5
 801c078:	0801c0f5 	.word	0x0801c0f5
 801c07c:	0801c0f5 	.word	0x0801c0f5
 801c080:	0801c0f5 	.word	0x0801c0f5
 801c084:	0801c0f5 	.word	0x0801c0f5
 801c088:	0801c0f5 	.word	0x0801c0f5
 801c08c:	0801c0f5 	.word	0x0801c0f5
 801c090:	0801c0b5 	.word	0x0801c0b5
 801c094:	0801c0f5 	.word	0x0801c0f5
 801c098:	0801c0f5 	.word	0x0801c0f5
 801c09c:	0801c0f5 	.word	0x0801c0f5
 801c0a0:	0801c0f5 	.word	0x0801c0f5
 801c0a4:	0801c0f5 	.word	0x0801c0f5
 801c0a8:	0801c0f5 	.word	0x0801c0f5
 801c0ac:	0801c0f5 	.word	0x0801c0f5
 801c0b0:	0801c0b5 	.word	0x0801c0b5
            bufferSizeInBytes = (DISPLAY_WIDTH * DISPLAY_HEIGHT) * (depth / 8);
 801c0b4:	4b29      	ldr	r3, [pc, #164]	; (801c15c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x150>)
 801c0b6:	881b      	ldrh	r3, [r3, #0]
 801c0b8:	461a      	mov	r2, r3
 801c0ba:	4b29      	ldr	r3, [pc, #164]	; (801c160 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x154>)
 801c0bc:	881b      	ldrh	r3, [r3, #0]
 801c0be:	fb03 f302 	mul.w	r3, r3, r2
 801c0c2:	88fa      	ldrh	r2, [r7, #6]
 801c0c4:	08d2      	lsrs	r2, r2, #3
 801c0c6:	b292      	uxth	r2, r2
 801c0c8:	fb02 f303 	mul.w	r3, r2, r3
 801c0cc:	617b      	str	r3, [r7, #20]
            break;
 801c0ce:	e018      	b.n	801c102 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xf6>
            bufferSizeInBytes = ((DISPLAY_WIDTH * depth + 7) / 8) * DISPLAY_HEIGHT;
 801c0d0:	4b22      	ldr	r3, [pc, #136]	; (801c15c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x150>)
 801c0d2:	881b      	ldrh	r3, [r3, #0]
 801c0d4:	461a      	mov	r2, r3
 801c0d6:	88fb      	ldrh	r3, [r7, #6]
 801c0d8:	fb03 f302 	mul.w	r3, r3, r2
 801c0dc:	3307      	adds	r3, #7
 801c0de:	2b00      	cmp	r3, #0
 801c0e0:	da00      	bge.n	801c0e4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xd8>
 801c0e2:	3307      	adds	r3, #7
 801c0e4:	10db      	asrs	r3, r3, #3
 801c0e6:	461a      	mov	r2, r3
 801c0e8:	4b1d      	ldr	r3, [pc, #116]	; (801c160 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x154>)
 801c0ea:	881b      	ldrh	r3, [r3, #0]
 801c0ec:	fb03 f302 	mul.w	r3, r3, r2
 801c0f0:	617b      	str	r3, [r7, #20]
            break;
 801c0f2:	e006      	b.n	801c102 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xf6>
            assert(0 && "Unsupported bit depth"); // Must be power of two
 801c0f4:	4b1b      	ldr	r3, [pc, #108]	; (801c164 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x158>)
 801c0f6:	4a1c      	ldr	r2, [pc, #112]	; (801c168 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x15c>)
 801c0f8:	f44f 7139 	mov.w	r1, #740	; 0x2e4
 801c0fc:	481b      	ldr	r0, [pc, #108]	; (801c16c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x160>)
 801c0fe:	f005 f85b 	bl	80211b8 <__assert_func>
        uint8_t* buffer = static_cast<uint8_t*>(adr);
 801c102:	68bb      	ldr	r3, [r7, #8]
 801c104:	613b      	str	r3, [r7, #16]
        frameBuffer0 = reinterpret_cast<uint16_t*>(buffer);
 801c106:	68fb      	ldr	r3, [r7, #12]
 801c108:	693a      	ldr	r2, [r7, #16]
 801c10a:	639a      	str	r2, [r3, #56]	; 0x38
        if (useDoubleBuffering)
 801c10c:	797b      	ldrb	r3, [r7, #5]
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d007      	beq.n	801c122 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x116>
            buffer += bufferSizeInBytes;
 801c112:	693a      	ldr	r2, [r7, #16]
 801c114:	697b      	ldr	r3, [r7, #20]
 801c116:	4413      	add	r3, r2
 801c118:	613b      	str	r3, [r7, #16]
            frameBuffer1 = reinterpret_cast<uint16_t*>(buffer);
 801c11a:	68fb      	ldr	r3, [r7, #12]
 801c11c:	693a      	ldr	r2, [r7, #16]
 801c11e:	63da      	str	r2, [r3, #60]	; 0x3c
 801c120:	e002      	b.n	801c128 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11c>
            frameBuffer1 = 0;
 801c122:	68fb      	ldr	r3, [r7, #12]
 801c124:	2200      	movs	r2, #0
 801c126:	63da      	str	r2, [r3, #60]	; 0x3c
        if (useAnimationStorage)
 801c128:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d007      	beq.n	801c140 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x134>
            buffer += bufferSizeInBytes;
 801c130:	693a      	ldr	r2, [r7, #16]
 801c132:	697b      	ldr	r3, [r7, #20]
 801c134:	4413      	add	r3, r2
 801c136:	613b      	str	r3, [r7, #16]
            frameBuffer2 = reinterpret_cast<uint16_t*>(buffer);
 801c138:	68fb      	ldr	r3, [r7, #12]
 801c13a:	693a      	ldr	r2, [r7, #16]
 801c13c:	641a      	str	r2, [r3, #64]	; 0x40
 801c13e:	e002      	b.n	801c146 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x13a>
            frameBuffer2 = 0;
 801c140:	68fb      	ldr	r3, [r7, #12]
 801c142:	2200      	movs	r2, #0
 801c144:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = useDoubleBuffering;
 801c146:	4a0a      	ldr	r2, [pc, #40]	; (801c170 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x164>)
 801c148:	797b      	ldrb	r3, [r7, #5]
 801c14a:	7013      	strb	r3, [r2, #0]
        USE_ANIMATION_STORAGE = useAnimationStorage;
 801c14c:	4a09      	ldr	r2, [pc, #36]	; (801c174 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x168>)
 801c14e:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c152:	7013      	strb	r3, [r2, #0]
    }
 801c154:	bf00      	nop
 801c156:	3718      	adds	r7, #24
 801c158:	46bd      	mov	sp, r7
 801c15a:	bd80      	pop	{r7, pc}
 801c15c:	2000a320 	.word	0x2000a320
 801c160:	2000a322 	.word	0x2000a322
 801c164:	08022c08 	.word	0x08022c08
 801c168:	080249b4 	.word	0x080249b4
 801c16c:	08022c28 	.word	0x08022c28
 801c170:	2000a32a 	.word	0x2000a32a
 801c174:	2000a32b 	.word	0x2000a32b

0801c178 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 801c178:	b580      	push	{r7, lr}
 801c17a:	b084      	sub	sp, #16
 801c17c:	af00      	add	r7, sp, #0
 801c17e:	60f8      	str	r0, [r7, #12]
 801c180:	60b9      	str	r1, [r7, #8]
 801c182:	607a      	str	r2, [r7, #4]
 801c184:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801c186:	68bb      	ldr	r3, [r7, #8]
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d106      	bne.n	801c19a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 801c18c:	4b11      	ldr	r3, [pc, #68]	; (801c1d4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801c18e:	4a12      	ldr	r2, [pc, #72]	; (801c1d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 801c190:	f44f 7143 	mov.w	r1, #780	; 0x30c
 801c194:	4811      	ldr	r0, [pc, #68]	; (801c1dc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 801c196:	f005 f80f 	bl	80211b8 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801c19a:	68fb      	ldr	r3, [r7, #12]
 801c19c:	68ba      	ldr	r2, [r7, #8]
 801c19e:	639a      	str	r2, [r3, #56]	; 0x38
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 801c1a0:	68fb      	ldr	r3, [r7, #12]
 801c1a2:	687a      	ldr	r2, [r7, #4]
 801c1a4:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801c1a6:	68fb      	ldr	r3, [r7, #12]
 801c1a8:	683a      	ldr	r2, [r7, #0]
 801c1aa:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	bf14      	ite	ne
 801c1b2:	2301      	movne	r3, #1
 801c1b4:	2300      	moveq	r3, #0
 801c1b6:	b2da      	uxtb	r2, r3
 801c1b8:	4b09      	ldr	r3, [pc, #36]	; (801c1e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 801c1ba:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 801c1bc:	683b      	ldr	r3, [r7, #0]
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	bf14      	ite	ne
 801c1c2:	2301      	movne	r3, #1
 801c1c4:	2300      	moveq	r3, #0
 801c1c6:	b2da      	uxtb	r2, r3
 801c1c8:	4b06      	ldr	r3, [pc, #24]	; (801c1e4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 801c1ca:	701a      	strb	r2, [r3, #0]
    }
 801c1cc:	bf00      	nop
 801c1ce:	3710      	adds	r7, #16
 801c1d0:	46bd      	mov	sp, r7
 801c1d2:	bd80      	pop	{r7, pc}
 801c1d4:	08022c74 	.word	0x08022c74
 801c1d8:	08024964 	.word	0x08024964
 801c1dc:	08022c28 	.word	0x08022c28
 801c1e0:	2000a32a 	.word	0x2000a32a
 801c1e4:	2000a32b 	.word	0x2000a32b

0801c1e8 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 801c1e8:	b580      	push	{r7, lr}
 801c1ea:	b082      	sub	sp, #8
 801c1ec:	af00      	add	r7, sp, #0
 801c1ee:	6078      	str	r0, [r7, #4]
 801c1f0:	460b      	mov	r3, r1
 801c1f2:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	d004      	beq.n	801c206 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c200:	887a      	ldrh	r2, [r7, #2]
 801c202:	4610      	mov	r0, r2
 801c204:	4798      	blx	r3
        }
    }
 801c206:	bf00      	nop
 801c208:	3708      	adds	r7, #8
 801c20a:	46bd      	mov	sp, r7
 801c20c:	bd80      	pop	{r7, pc}
	...

0801c210 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 801c210:	b480      	push	{r7}
 801c212:	b083      	sub	sp, #12
 801c214:	af00      	add	r7, sp, #0
 801c216:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c224:	429a      	cmp	r2, r3
 801c226:	d017      	beq.n	801c258 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 801c228:	4b1a      	ldr	r3, [pc, #104]	; (801c294 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801c22a:	781b      	ldrb	r3, [r3, #0]
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	d12a      	bne.n	801c286 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801c230:	4b19      	ldr	r3, [pc, #100]	; (801c298 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801c232:	881a      	ldrh	r2, [r3, #0]
 801c234:	4b19      	ldr	r3, [pc, #100]	; (801c29c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801c236:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 801c238:	4b19      	ldr	r3, [pc, #100]	; (801c2a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801c23a:	881a      	ldrh	r2, [r3, #0]
 801c23c:	4b19      	ldr	r3, [pc, #100]	; (801c2a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801c23e:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 801c240:	4b16      	ldr	r3, [pc, #88]	; (801c29c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801c242:	881a      	ldrh	r2, [r3, #0]
 801c244:	4b16      	ldr	r3, [pc, #88]	; (801c2a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801c246:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 801c248:	4b16      	ldr	r3, [pc, #88]	; (801c2a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801c24a:	881a      	ldrh	r2, [r3, #0]
 801c24c:	4b12      	ldr	r3, [pc, #72]	; (801c298 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801c24e:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 801c250:	4b10      	ldr	r3, [pc, #64]	; (801c294 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801c252:	2201      	movs	r2, #1
 801c254:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801c256:	e016      	b.n	801c286 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 801c258:	4b0e      	ldr	r3, [pc, #56]	; (801c294 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801c25a:	781b      	ldrb	r3, [r3, #0]
 801c25c:	2b00      	cmp	r3, #0
 801c25e:	d012      	beq.n	801c286 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 801c260:	4b0f      	ldr	r3, [pc, #60]	; (801c2a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801c262:	881a      	ldrh	r2, [r3, #0]
 801c264:	4b0d      	ldr	r3, [pc, #52]	; (801c29c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801c266:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 801c268:	4b0b      	ldr	r3, [pc, #44]	; (801c298 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801c26a:	881a      	ldrh	r2, [r3, #0]
 801c26c:	4b0d      	ldr	r3, [pc, #52]	; (801c2a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801c26e:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 801c270:	4b0c      	ldr	r3, [pc, #48]	; (801c2a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801c272:	881a      	ldrh	r2, [r3, #0]
 801c274:	4b0a      	ldr	r3, [pc, #40]	; (801c2a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801c276:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 801c278:	4b08      	ldr	r3, [pc, #32]	; (801c29c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801c27a:	881a      	ldrh	r2, [r3, #0]
 801c27c:	4b06      	ldr	r3, [pc, #24]	; (801c298 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801c27e:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 801c280:	4b04      	ldr	r3, [pc, #16]	; (801c294 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801c282:	2200      	movs	r2, #0
 801c284:	701a      	strb	r2, [r3, #0]
    }
 801c286:	bf00      	nop
 801c288:	370c      	adds	r7, #12
 801c28a:	46bd      	mov	sp, r7
 801c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c290:	4770      	bx	lr
 801c292:	bf00      	nop
 801c294:	2000a324 	.word	0x2000a324
 801c298:	2000a320 	.word	0x2000a320
 801c29c:	2000a326 	.word	0x2000a326
 801c2a0:	2000a322 	.word	0x2000a322
 801c2a4:	2000a328 	.word	0x2000a328

0801c2a8 <__NVIC_EnableIRQ>:
{
 801c2a8:	b480      	push	{r7}
 801c2aa:	b083      	sub	sp, #12
 801c2ac:	af00      	add	r7, sp, #0
 801c2ae:	4603      	mov	r3, r0
 801c2b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c2b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	db0d      	blt.n	801c2d6 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801c2ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c2be:	b2db      	uxtb	r3, r3
 801c2c0:	f003 021f 	and.w	r2, r3, #31
 801c2c4:	4907      	ldr	r1, [pc, #28]	; (801c2e4 <__NVIC_EnableIRQ+0x3c>)
 801c2c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c2ca:	095b      	lsrs	r3, r3, #5
 801c2cc:	2001      	movs	r0, #1
 801c2ce:	fa00 f202 	lsl.w	r2, r0, r2
 801c2d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801c2d6:	bf00      	nop
 801c2d8:	370c      	adds	r7, #12
 801c2da:	46bd      	mov	sp, r7
 801c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2e0:	4770      	bx	lr
 801c2e2:	bf00      	nop
 801c2e4:	e000e100 	.word	0xe000e100

0801c2e8 <__NVIC_DisableIRQ>:
{
 801c2e8:	b480      	push	{r7}
 801c2ea:	b083      	sub	sp, #12
 801c2ec:	af00      	add	r7, sp, #0
 801c2ee:	4603      	mov	r3, r0
 801c2f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c2f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	db12      	blt.n	801c320 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801c2fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c2fe:	b2db      	uxtb	r3, r3
 801c300:	f003 021f 	and.w	r2, r3, #31
 801c304:	4909      	ldr	r1, [pc, #36]	; (801c32c <__NVIC_DisableIRQ+0x44>)
 801c306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c30a:	095b      	lsrs	r3, r3, #5
 801c30c:	2001      	movs	r0, #1
 801c30e:	fa00 f202 	lsl.w	r2, r0, r2
 801c312:	3320      	adds	r3, #32
 801c314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801c318:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801c31c:	f3bf 8f6f 	isb	sy
}
 801c320:	bf00      	nop
 801c322:	370c      	adds	r7, #12
 801c324:	46bd      	mov	sp, r7
 801c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c32a:	4770      	bx	lr
 801c32c:	e000e100 	.word	0xe000e100

0801c330 <__NVIC_SetPriority>:
{
 801c330:	b480      	push	{r7}
 801c332:	b083      	sub	sp, #12
 801c334:	af00      	add	r7, sp, #0
 801c336:	4603      	mov	r3, r0
 801c338:	6039      	str	r1, [r7, #0]
 801c33a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c33c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c340:	2b00      	cmp	r3, #0
 801c342:	db0c      	blt.n	801c35e <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c344:	683b      	ldr	r3, [r7, #0]
 801c346:	b2db      	uxtb	r3, r3
 801c348:	4a0e      	ldr	r2, [pc, #56]	; (801c384 <__NVIC_SetPriority+0x54>)
 801c34a:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801c34e:	4608      	mov	r0, r1
 801c350:	011b      	lsls	r3, r3, #4
 801c352:	b2d9      	uxtb	r1, r3
 801c354:	1813      	adds	r3, r2, r0
 801c356:	460a      	mov	r2, r1
 801c358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801c35c:	e00c      	b.n	801c378 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c35e:	683b      	ldr	r3, [r7, #0]
 801c360:	b2da      	uxtb	r2, r3
 801c362:	4909      	ldr	r1, [pc, #36]	; (801c388 <__NVIC_SetPriority+0x58>)
 801c364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c368:	b2db      	uxtb	r3, r3
 801c36a:	f003 030f 	and.w	r3, r3, #15
 801c36e:	3b04      	subs	r3, #4
 801c370:	0112      	lsls	r2, r2, #4
 801c372:	b2d2      	uxtb	r2, r2
 801c374:	440b      	add	r3, r1
 801c376:	761a      	strb	r2, [r3, #24]
}
 801c378:	bf00      	nop
 801c37a:	370c      	adds	r7, #12
 801c37c:	46bd      	mov	sp, r7
 801c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c382:	4770      	bx	lr
 801c384:	e000e100 	.word	0xe000e100
 801c388:	e000ed00 	.word	0xe000ed00

0801c38c <_ZN10STM32F7HAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801c38c:	b580      	push	{r7, lr}
 801c38e:	b082      	sub	sp, #8
 801c390:	af00      	add	r7, sp, #0
 801c392:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	4618      	mov	r0, r3
 801c398:	f000 fa8b 	bl	801c8b2 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 801c39c:	bf00      	nop
 801c39e:	3708      	adds	r7, #8
 801c3a0:	46bd      	mov	sp, r7
 801c3a2:	bd80      	pop	{r7, pc}

0801c3a4 <_ZNK10STM32F7HAL17getTFTFrameBufferEv>:
/* USER CODE END user includes */

extern LTDC_HandleTypeDef hltdc;

uint16_t* STM32F7HAL::getTFTFrameBuffer() const
{
 801c3a4:	b480      	push	{r7}
 801c3a6:	b083      	sub	sp, #12
 801c3a8:	af00      	add	r7, sp, #0
 801c3aa:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 801c3ac:	4b03      	ldr	r3, [pc, #12]	; (801c3bc <_ZNK10STM32F7HAL17getTFTFrameBufferEv+0x18>)
 801c3ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801c3b0:	4618      	mov	r0, r3
 801c3b2:	370c      	adds	r7, #12
 801c3b4:	46bd      	mov	sp, r7
 801c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3ba:	4770      	bx	lr
 801c3bc:	40016884 	.word	0x40016884

0801c3c0 <_ZN10STM32F7HAL17setTFTFrameBufferEPt>:

void STM32F7HAL::setTFTFrameBuffer(uint16_t* adr)
{
 801c3c0:	b480      	push	{r7}
 801c3c2:	b083      	sub	sp, #12
 801c3c4:	af00      	add	r7, sp, #0
 801c3c6:	6078      	str	r0, [r7, #4]
 801c3c8:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 801c3ca:	4a06      	ldr	r2, [pc, #24]	; (801c3e4 <_ZN10STM32F7HAL17setTFTFrameBufferEPt+0x24>)
 801c3cc:	683b      	ldr	r3, [r7, #0]
 801c3ce:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 801c3d0:	4b05      	ldr	r3, [pc, #20]	; (801c3e8 <_ZN10STM32F7HAL17setTFTFrameBufferEPt+0x28>)
 801c3d2:	2201      	movs	r2, #1
 801c3d4:	625a      	str	r2, [r3, #36]	; 0x24
}
 801c3d6:	bf00      	nop
 801c3d8:	370c      	adds	r7, #12
 801c3da:	46bd      	mov	sp, r7
 801c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3e0:	4770      	bx	lr
 801c3e2:	bf00      	nop
 801c3e4:	40016884 	.word	0x40016884
 801c3e8:	40016800 	.word	0x40016800

0801c3ec <_ZN10STM32F7HAL17getTFTCurrentLineEv>:

uint16_t STM32F7HAL::getTFTCurrentLine()
{
 801c3ec:	b480      	push	{r7}
 801c3ee:	b085      	sub	sp, #20
 801c3f0:	af00      	add	r7, sp, #0
 801c3f2:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 801c3f4:	4b0d      	ldr	r3, [pc, #52]	; (801c42c <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x40>)
 801c3f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c3f8:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 801c3fa:	4b0c      	ldr	r3, [pc, #48]	; (801c42c <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x40>)
 801c3fc:	68db      	ldr	r3, [r3, #12]
 801c3fe:	b29b      	uxth	r3, r3
 801c400:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c404:	b29b      	uxth	r3, r3
 801c406:	3301      	adds	r3, #1
 801c408:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 801c40a:	89fa      	ldrh	r2, [r7, #14]
 801c40c:	89bb      	ldrh	r3, [r7, #12]
 801c40e:	429a      	cmp	r2, r3
 801c410:	d201      	bcs.n	801c416 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 801c412:	2300      	movs	r3, #0
 801c414:	e003      	b.n	801c41e <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 801c416:	89fa      	ldrh	r2, [r7, #14]
 801c418:	89bb      	ldrh	r3, [r7, #12]
 801c41a:	1ad3      	subs	r3, r2, r3
 801c41c:	b29b      	uxth	r3, r3
    }
}
 801c41e:	4618      	mov	r0, r3
 801c420:	3714      	adds	r7, #20
 801c422:	46bd      	mov	sp, r7
 801c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c428:	4770      	bx	lr
 801c42a:	bf00      	nop
 801c42c:	40016800 	.word	0x40016800

0801c430 <_ZN10STM32F7HAL19configureInterruptsEv>:

void STM32F7HAL::configureInterrupts()
{
 801c430:	b580      	push	{r7, lr}
 801c432:	b082      	sub	sp, #8
 801c434:	af00      	add	r7, sp, #0
 801c436:	6078      	str	r0, [r7, #4]
    // These two priorities MUST be EQUAL, and MUST be functionally lower than RTOS scheduler interrupts.
    NVIC_SetPriority(DMA2D_IRQn, 9);
 801c438:	2109      	movs	r1, #9
 801c43a:	205a      	movs	r0, #90	; 0x5a
 801c43c:	f7ff ff78 	bl	801c330 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 801c440:	2109      	movs	r1, #9
 801c442:	2058      	movs	r0, #88	; 0x58
 801c444:	f7ff ff74 	bl	801c330 <__NVIC_SetPriority>
}
 801c448:	bf00      	nop
 801c44a:	3708      	adds	r7, #8
 801c44c:	46bd      	mov	sp, r7
 801c44e:	bd80      	pop	{r7, pc}

0801c450 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;

/* Enable LCD line interrupt, when entering video (active) area */
void STM32F7HAL::enableLCDControllerInterrupt()
{
 801c450:	b580      	push	{r7, lr}
 801c452:	b082      	sub	sp, #8
 801c454:	af00      	add	r7, sp, #0
 801c456:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 801c458:	4b12      	ldr	r3, [pc, #72]	; (801c4a4 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x54>)
 801c45a:	68db      	ldr	r3, [r3, #12]
 801c45c:	b29b      	uxth	r3, r3
 801c45e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c462:	b29b      	uxth	r3, r3
 801c464:	3b01      	subs	r3, #1
 801c466:	b29a      	uxth	r2, r3
 801c468:	4b0f      	ldr	r3, [pc, #60]	; (801c4a8 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x58>)
 801c46a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801c46c:	4b0d      	ldr	r3, [pc, #52]	; (801c4a4 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x54>)
 801c46e:	691b      	ldr	r3, [r3, #16]
 801c470:	b29b      	uxth	r3, r3
 801c472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c476:	b29b      	uxth	r3, r3
 801c478:	3b01      	subs	r3, #1
 801c47a:	b29a      	uxth	r2, r3
 801c47c:	4b0b      	ldr	r3, [pc, #44]	; (801c4ac <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x5c>)
 801c47e:	801a      	strh	r2, [r3, #0]

    HAL_LTDC_ProgramLineEvent(&hltdc, lcd_int_active_line);
 801c480:	4b09      	ldr	r3, [pc, #36]	; (801c4a8 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x58>)
 801c482:	881b      	ldrh	r3, [r3, #0]
 801c484:	4619      	mov	r1, r3
 801c486:	480a      	ldr	r0, [pc, #40]	; (801c4b0 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 801c488:	f7e9 f9de 	bl	8005848 <HAL_LTDC_ProgramLineEvent>
    __HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_LI|LTDC_IT_FU); /* Enable line and FIFO underrun interrupts */
 801c48c:	4b08      	ldr	r3, [pc, #32]	; (801c4b0 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 801c48e:	681b      	ldr	r3, [r3, #0]
 801c490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c492:	4b07      	ldr	r3, [pc, #28]	; (801c4b0 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 801c494:	681b      	ldr	r3, [r3, #0]
 801c496:	f042 0203 	orr.w	r2, r2, #3
 801c49a:	635a      	str	r2, [r3, #52]	; 0x34
}
 801c49c:	bf00      	nop
 801c49e:	3708      	adds	r7, #8
 801c4a0:	46bd      	mov	sp, r7
 801c4a2:	bd80      	pop	{r7, pc}
 801c4a4:	40016800 	.word	0x40016800
 801c4a8:	2000a2da 	.word	0x2000a2da
 801c4ac:	2000a2dc 	.word	0x2000a2dc
 801c4b0:	2000a1a8 	.word	0x2000a1a8

0801c4b4 <_ZN10STM32F7HAL17disableInterruptsEv>:

void STM32F7HAL::disableInterrupts()
{
 801c4b4:	b580      	push	{r7, lr}
 801c4b6:	b082      	sub	sp, #8
 801c4b8:	af00      	add	r7, sp, #0
 801c4ba:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(LTDC_IRQn);
 801c4bc:	2058      	movs	r0, #88	; 0x58
 801c4be:	f7ff ff13 	bl	801c2e8 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(DMA2D_IRQn);
 801c4c2:	205a      	movs	r0, #90	; 0x5a
 801c4c4:	f7ff ff10 	bl	801c2e8 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_ER_IRQn);
 801c4c8:	2059      	movs	r0, #89	; 0x59
 801c4ca:	f7ff ff0d 	bl	801c2e8 <__NVIC_DisableIRQ>
}
 801c4ce:	bf00      	nop
 801c4d0:	3708      	adds	r7, #8
 801c4d2:	46bd      	mov	sp, r7
 801c4d4:	bd80      	pop	{r7, pc}

0801c4d6 <_ZN10STM32F7HAL16enableInterruptsEv>:

void STM32F7HAL::enableInterrupts()
{
 801c4d6:	b580      	push	{r7, lr}
 801c4d8:	b082      	sub	sp, #8
 801c4da:	af00      	add	r7, sp, #0
 801c4dc:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(LTDC_IRQn);
 801c4de:	2058      	movs	r0, #88	; 0x58
 801c4e0:	f7ff fee2 	bl	801c2a8 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(DMA2D_IRQn);
 801c4e4:	205a      	movs	r0, #90	; 0x5a
 801c4e6:	f7ff fedf 	bl	801c2a8 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_ER_IRQn);
 801c4ea:	2059      	movs	r0, #89	; 0x59
 801c4ec:	f7ff fedc 	bl	801c2a8 <__NVIC_EnableIRQ>
}
 801c4f0:	bf00      	nop
 801c4f2:	3708      	adds	r7, #8
 801c4f4:	46bd      	mov	sp, r7
 801c4f6:	bd80      	pop	{r7, pc}

0801c4f8 <_ZN10STM32F7HAL16flushFrameBufferERKN8touchgfx4RectE>:

void STM32F7HAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801c4f8:	b580      	push	{r7, lr}
 801c4fa:	b082      	sub	sp, #8
 801c4fc:	af00      	add	r7, sp, #0
 801c4fe:	6078      	str	r0, [r7, #4]
 801c500:	6039      	str	r1, [r7, #0]
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // the CPU to read back the latest pixels produced by the h/w accelerator
    // thus we have to both flush and invalidate the Dcache prior to letting
    // DMA2D accessing it. That's done using SCB_CleanInvalidateDCache().
    HAL::flushFrameBuffer(rect);
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	6839      	ldr	r1, [r7, #0]
 801c506:	4618      	mov	r0, r3
 801c508:	f000 f9d9 	bl	801c8be <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 801c50c:	bf00      	nop
 801c50e:	3708      	adds	r7, #8
 801c510:	46bd      	mov	sp, r7
 801c512:	bd80      	pop	{r7, pc}

0801c514 <HAL_LTDC_LineEventCallback>:

extern "C"
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
 801c514:	b580      	push	{r7, lr}
 801c516:	b082      	sub	sp, #8
 801c518:	af00      	add	r7, sp, #0
 801c51a:	6078      	str	r0, [r7, #4]
    if (LTDC->LIPCR == lcd_int_active_line)
 801c51c:	4b1a      	ldr	r3, [pc, #104]	; (801c588 <HAL_LTDC_LineEventCallback+0x74>)
 801c51e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c520:	4a1a      	ldr	r2, [pc, #104]	; (801c58c <HAL_LTDC_LineEventCallback+0x78>)
 801c522:	8812      	ldrh	r2, [r2, #0]
 801c524:	4293      	cmp	r3, r2
 801c526:	bf0c      	ite	eq
 801c528:	2301      	moveq	r3, #1
 801c52a:	2300      	movne	r3, #0
 801c52c:	b2db      	uxtb	r3, r3
 801c52e:	2b00      	cmp	r3, #0
 801c530:	d017      	beq.n	801c562 <HAL_LTDC_LineEventCallback+0x4e>
    {
        //entering active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801c532:	4b17      	ldr	r3, [pc, #92]	; (801c590 <HAL_LTDC_LineEventCallback+0x7c>)
 801c534:	881b      	ldrh	r3, [r3, #0]
 801c536:	4619      	mov	r1, r3
 801c538:	6878      	ldr	r0, [r7, #4]
 801c53a:	f7e9 f985 	bl	8005848 <HAL_LTDC_ProgramLineEvent>
        HAL::getInstance()->vSync();
 801c53e:	f7f0 fc6f 	bl	800ce20 <_ZN8touchgfx3HAL11getInstanceEv>
 801c542:	4603      	mov	r3, r0
 801c544:	4618      	mov	r0, r3
 801c546:	f7ff fd32 	bl	801bfae <_ZN8touchgfx3HAL5vSyncEv>
        OSWrappers::signalVSync();
 801c54a:	f7f1 fd73 	bl	800e034 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
        // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
        // Note: task will also swap when it wakes up, but that operation is guarded and will not have
        // any effect if already swapped.
        HAL::getInstance()->swapFrameBuffers();
 801c54e:	f7f0 fc67 	bl	800ce20 <_ZN8touchgfx3HAL11getInstanceEv>
 801c552:	4603      	mov	r3, r0
 801c554:	4618      	mov	r0, r3
 801c556:	f000 fd5f 	bl	801d018 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        GPIO::set(GPIO::VSYNC_FREQ);
 801c55a:	2000      	movs	r0, #0
 801c55c:	f7fe fdd0 	bl	801b100 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
        //exiting active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
        GPIO::clear(GPIO::VSYNC_FREQ);
        HAL::getInstance()->frontPorchEntered();
    }
}
 801c560:	e00e      	b.n	801c580 <HAL_LTDC_LineEventCallback+0x6c>
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801c562:	4b0a      	ldr	r3, [pc, #40]	; (801c58c <HAL_LTDC_LineEventCallback+0x78>)
 801c564:	881b      	ldrh	r3, [r3, #0]
 801c566:	4619      	mov	r1, r3
 801c568:	6878      	ldr	r0, [r7, #4]
 801c56a:	f7e9 f96d 	bl	8005848 <HAL_LTDC_ProgramLineEvent>
        GPIO::clear(GPIO::VSYNC_FREQ);
 801c56e:	2000      	movs	r0, #0
 801c570:	f7fe fdd1 	bl	801b116 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        HAL::getInstance()->frontPorchEntered();
 801c574:	f7f0 fc54 	bl	800ce20 <_ZN8touchgfx3HAL11getInstanceEv>
 801c578:	4603      	mov	r3, r0
 801c57a:	4618      	mov	r0, r3
 801c57c:	f7ff fcf8 	bl	801bf70 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
}
 801c580:	bf00      	nop
 801c582:	3708      	adds	r7, #8
 801c584:	46bd      	mov	sp, r7
 801c586:	bd80      	pop	{r7, pc}
 801c588:	40016800 	.word	0x40016800
 801c58c:	2000a2da 	.word	0x2000a2da
 801c590:	2000a2dc 	.word	0x2000a2dc

0801c594 <_ZN8touchgfx22STM32F7Instrumentation4initEv>:
namespace touchgfx
{
static TIM_HandleTypeDef htim7;

void STM32F7Instrumentation::init()
{
 801c594:	b580      	push	{r7, lr}
 801c596:	b08e      	sub	sp, #56	; 0x38
 801c598:	af00      	add	r7, sp, #0
 801c59a:	6078      	str	r0, [r7, #4]
   RCC_ClkInitTypeDef clkconfig;
    uint32_t uwTimclock, uwAPB1Prescaler = 0U;
 801c59c:	2300      	movs	r3, #0
 801c59e:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t pFLatency;

    __TIM2_CLK_ENABLE();
 801c5a0:	4b33      	ldr	r3, [pc, #204]	; (801c670 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xdc>)
 801c5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c5a4:	4a32      	ldr	r2, [pc, #200]	; (801c670 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xdc>)
 801c5a6:	f043 0301 	orr.w	r3, r3, #1
 801c5aa:	6413      	str	r3, [r2, #64]	; 0x40
 801c5ac:	4b30      	ldr	r3, [pc, #192]	; (801c670 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xdc>)
 801c5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c5b0:	f003 0301 	and.w	r3, r3, #1
 801c5b4:	60bb      	str	r3, [r7, #8]
 801c5b6:	68bb      	ldr	r3, [r7, #8]

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801c5b8:	f107 030c 	add.w	r3, r7, #12
 801c5bc:	2200      	movs	r2, #0
 801c5be:	601a      	str	r2, [r3, #0]
 801c5c0:	605a      	str	r2, [r3, #4]
 801c5c2:	609a      	str	r2, [r3, #8]
  htim7.Instance = TIM7;
 801c5c4:	4b2b      	ldr	r3, [pc, #172]	; (801c674 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xe0>)
 801c5c6:	4a2c      	ldr	r2, [pc, #176]	; (801c678 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xe4>)
 801c5c8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 801c5ca:	4b2a      	ldr	r3, [pc, #168]	; (801c674 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xe0>)
 801c5cc:	2200      	movs	r2, #0
 801c5ce:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801c5d0:	4b28      	ldr	r3, [pc, #160]	; (801c674 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xe0>)
 801c5d2:	2200      	movs	r2, #0
 801c5d4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 801c5d6:	4b27      	ldr	r3, [pc, #156]	; (801c674 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xe0>)
 801c5d8:	2200      	movs	r2, #0
 801c5da:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801c5dc:	4b25      	ldr	r3, [pc, #148]	; (801c674 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xe0>)
 801c5de:	2200      	movs	r2, #0
 801c5e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801c5e2:	4824      	ldr	r0, [pc, #144]	; (801c674 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xe0>)
 801c5e4:	f7ec fd86 	bl	80090f4 <HAL_TIM_Base_Init>
 801c5e8:	4603      	mov	r3, r0
 801c5ea:	2b00      	cmp	r3, #0
 801c5ec:	bf14      	ite	ne
 801c5ee:	2301      	movne	r3, #1
 801c5f0:	2300      	moveq	r3, #0
 801c5f2:	b2db      	uxtb	r3, r3
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	d001      	beq.n	801c5fc <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x68>
  {
    Error_Handler( );
 801c5f8:	f7f5 fc26 	bl	8011e48 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801c5fc:	2300      	movs	r3, #0
 801c5fe:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801c600:	2300      	movs	r3, #0
 801c602:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 801c604:	f107 030c 	add.w	r3, r7, #12
 801c608:	4619      	mov	r1, r3
 801c60a:	481a      	ldr	r0, [pc, #104]	; (801c674 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xe0>)
 801c60c:	f7ed fcce 	bl	8009fac <HAL_TIMEx_MasterConfigSynchronization>
 801c610:	4603      	mov	r3, r0
 801c612:	2b00      	cmp	r3, #0
 801c614:	bf14      	ite	ne
 801c616:	2301      	movne	r3, #1
 801c618:	2300      	moveq	r3, #0
 801c61a:	b2db      	uxtb	r3, r3
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d001      	beq.n	801c624 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x90>
  {
    Error_Handler( );
 801c620:	f7f5 fc12 	bl	8011e48 <Error_Handler>
  }

    /* Get clock configuration */
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801c624:	f107 0218 	add.w	r2, r7, #24
 801c628:	f107 031c 	add.w	r3, r7, #28
 801c62c:	4611      	mov	r1, r2
 801c62e:	4618      	mov	r0, r3
 801c630:	f7ea f84a 	bl	80066c8 <HAL_RCC_GetClockConfig>

    /* TIM2 is on APB1 bus */
    uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 801c634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c636:	633b      	str	r3, [r7, #48]	; 0x30

    if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 801c638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	d103      	bne.n	801c646 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xb2>
        uwTimclock = HAL_RCC_GetPCLK1Freq();
 801c63e:	f7ea f81b 	bl	8006678 <HAL_RCC_GetPCLK1Freq>
 801c642:	6378      	str	r0, [r7, #52]	; 0x34
 801c644:	e004      	b.n	801c650 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xbc>
    else
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 801c646:	f7ea f817 	bl	8006678 <HAL_RCC_GetPCLK1Freq>
 801c64a:	4603      	mov	r3, r0
 801c64c:	005b      	lsls	r3, r3, #1
 801c64e:	637b      	str	r3, [r7, #52]	; 0x34

    m_sysclkRatio = HAL_RCC_GetHCLKFreq() / uwTimclock;
 801c650:	f7ea f806 	bl	8006660 <HAL_RCC_GetHCLKFreq>
 801c654:	4602      	mov	r2, r0
 801c656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c658:	fbb2 f2f3 	udiv	r2, r2, r3
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	60da      	str	r2, [r3, #12]

    HAL_TIM_Base_Start(&htim7);
 801c660:	4804      	ldr	r0, [pc, #16]	; (801c674 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xe0>)
 801c662:	f7ec fd73 	bl	800914c <HAL_TIM_Base_Start>
}
 801c666:	bf00      	nop
 801c668:	3738      	adds	r7, #56	; 0x38
 801c66a:	46bd      	mov	sp, r7
 801c66c:	bd80      	pop	{r7, pc}
 801c66e:	bf00      	nop
 801c670:	40023800 	.word	0x40023800
 801c674:	2000a2e0 	.word	0x2000a2e0
 801c678:	40001400 	.word	0x40001400

0801c67c <_ZN8touchgfx22STM32F7Instrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int STM32F7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
 801c67c:	b480      	push	{r7}
 801c67e:	b085      	sub	sp, #20
 801c680:	af00      	add	r7, sp, #0
 801c682:	60f8      	str	r0, [r7, #12]
 801c684:	60b9      	str	r1, [r7, #8]
 801c686:	607a      	str	r2, [r7, #4]
 801c688:	603b      	str	r3, [r7, #0]
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 801c68a:	687a      	ldr	r2, [r7, #4]
 801c68c:	68bb      	ldr	r3, [r7, #8]
 801c68e:	1ad2      	subs	r2, r2, r3
 801c690:	683b      	ldr	r3, [r7, #0]
 801c692:	085b      	lsrs	r3, r3, #1
 801c694:	441a      	add	r2, r3
 801c696:	683b      	ldr	r3, [r7, #0]
 801c698:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801c69c:	4618      	mov	r0, r3
 801c69e:	3714      	adds	r7, #20
 801c6a0:	46bd      	mov	sp, r7
 801c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6a6:	4770      	bx	lr

0801c6a8 <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv>:

unsigned int STM32F7Instrumentation::getCPUCycles()
{
 801c6a8:	b480      	push	{r7}
 801c6aa:	b083      	sub	sp, #12
 801c6ac:	af00      	add	r7, sp, #0
 801c6ae:	6078      	str	r0, [r7, #4]
    return __HAL_TIM_GET_COUNTER(&htim7) * m_sysclkRatio;
 801c6b0:	4b06      	ldr	r3, [pc, #24]	; (801c6cc <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv+0x24>)
 801c6b2:	681b      	ldr	r3, [r3, #0]
 801c6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c6b6:	687a      	ldr	r2, [r7, #4]
 801c6b8:	68d2      	ldr	r2, [r2, #12]
 801c6ba:	fb02 f303 	mul.w	r3, r2, r3
}
 801c6be:	4618      	mov	r0, r3
 801c6c0:	370c      	adds	r7, #12
 801c6c2:	46bd      	mov	sp, r7
 801c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6c8:	4770      	bx	lr
 801c6ca:	bf00      	nop
 801c6cc:	2000a2e0 	.word	0x2000a2e0

0801c6d0 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb>:

void STM32F7Instrumentation::setMCUActive(bool active)
{
 801c6d0:	b580      	push	{r7, lr}
 801c6d2:	b082      	sub	sp, #8
 801c6d4:	af00      	add	r7, sp, #0
 801c6d6:	6078      	str	r0, [r7, #4]
 801c6d8:	460b      	mov	r3, r1
 801c6da:	70fb      	strb	r3, [r7, #3]
    if (active) //idle task sched out
 801c6dc:	78fb      	ldrb	r3, [r7, #3]
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	d00f      	beq.n	801c702 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0x32>
    {
        cc_consumed += getCPUCycles() - cc_in;
 801c6e2:	687b      	ldr	r3, [r7, #4]
 801c6e4:	681b      	ldr	r3, [r3, #0]
 801c6e6:	3310      	adds	r3, #16
 801c6e8:	681b      	ldr	r3, [r3, #0]
 801c6ea:	6878      	ldr	r0, [r7, #4]
 801c6ec:	4798      	blx	r3
 801c6ee:	4602      	mov	r2, r0
 801c6f0:	687b      	ldr	r3, [r7, #4]
 801c6f2:	689b      	ldr	r3, [r3, #8]
 801c6f4:	1ad2      	subs	r2, r2, r3
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	685b      	ldr	r3, [r3, #4]
 801c6fa:	441a      	add	r2, r3
 801c6fc:	687b      	ldr	r3, [r7, #4]
 801c6fe:	605a      	str	r2, [r3, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 801c700:	e008      	b.n	801c714 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0x44>
        cc_in = getCPUCycles();
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	681b      	ldr	r3, [r3, #0]
 801c706:	3310      	adds	r3, #16
 801c708:	681b      	ldr	r3, [r3, #0]
 801c70a:	6878      	ldr	r0, [r7, #4]
 801c70c:	4798      	blx	r3
 801c70e:	4602      	mov	r2, r0
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	609a      	str	r2, [r3, #8]
}
 801c714:	bf00      	nop
 801c716:	3708      	adds	r7, #8
 801c718:	46bd      	mov	sp, r7
 801c71a:	bd80      	pop	{r7, pc}

0801c71c <_ZN8touchgfx22STM32F7TouchController4initEv>:
}

using namespace touchgfx;

void STM32F7TouchController::init()
{
 801c71c:	b590      	push	{r4, r7, lr}
 801c71e:	b083      	sub	sp, #12
 801c720:	af00      	add	r7, sp, #0
 801c722:	6078      	str	r0, [r7, #4]
 /* USER CODE BEGIN F4TouchController_init */

    /* Add code for touch controller Initialization */
    BSP_TS_Init(LCD_GetXSize(), LCD_GetYSize());
 801c724:	f7fe f998 	bl	801aa58 <LCD_GetXSize>
 801c728:	4603      	mov	r3, r0
 801c72a:	b29c      	uxth	r4, r3
 801c72c:	f7fe f99d 	bl	801aa6a <LCD_GetYSize>
 801c730:	4603      	mov	r3, r0
 801c732:	b29b      	uxth	r3, r3
 801c734:	4619      	mov	r1, r3
 801c736:	4620      	mov	r0, r4
 801c738:	f7e4 fd4e 	bl	80011d8 <BSP_TS_Init>

/* USER CODE END F4TouchController_init */
}
 801c73c:	bf00      	nop
 801c73e:	370c      	adds	r7, #12
 801c740:	46bd      	mov	sp, r7
 801c742:	bd90      	pop	{r4, r7, pc}

0801c744 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_>:

bool STM32F7TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 801c744:	b580      	push	{r7, lr}
 801c746:	b090      	sub	sp, #64	; 0x40
 801c748:	af00      	add	r7, sp, #0
 801c74a:	60f8      	str	r0, [r7, #12]
 801c74c:	60b9      	str	r1, [r7, #8]
 801c74e:	607a      	str	r2, [r7, #4]
/* USER CODE BEGIN  F4TouchController_sampleTouch  */
    TS_StateTypeDef state = { 0 };
 801c750:	f107 0314 	add.w	r3, r7, #20
 801c754:	222c      	movs	r2, #44	; 0x2c
 801c756:	2100      	movs	r1, #0
 801c758:	4618      	mov	r0, r3
 801c75a:	f004 fda2 	bl	80212a2 <memset>
    BSP_TS_GetState(&state);
 801c75e:	f107 0314 	add.w	r3, r7, #20
 801c762:	4618      	mov	r0, r3
 801c764:	f7e4 fd78 	bl	8001258 <BSP_TS_GetState>
    if (state.touchDetected)
 801c768:	7d3b      	ldrb	r3, [r7, #20]
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	d009      	beq.n	801c782 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_+0x3e>
    {
        x = state.touchX[0];
 801c76e:	8afb      	ldrh	r3, [r7, #22]
 801c770:	461a      	mov	r2, r3
 801c772:	68bb      	ldr	r3, [r7, #8]
 801c774:	601a      	str	r2, [r3, #0]
        y = state.touchY[0];
 801c776:	8c3b      	ldrh	r3, [r7, #32]
 801c778:	461a      	mov	r2, r3
 801c77a:	687b      	ldr	r3, [r7, #4]
 801c77c:	601a      	str	r2, [r3, #0]

        return true;
 801c77e:	2301      	movs	r3, #1
 801c780:	e000      	b.n	801c784 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_+0x40>
    }
    return false;
 801c782:	2300      	movs	r3, #0

/* USER CODE END F4TouchController_sampleTouch  */
}
 801c784:	4618      	mov	r0, r3
 801c786:	3740      	adds	r7, #64	; 0x40
 801c788:	46bd      	mov	sp, r7
 801c78a:	bd80      	pop	{r7, pc}

0801c78c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801c78c:	8880      	ldrh	r0, [r0, #4]
 801c78e:	4770      	bx	lr

0801c790 <_ZN8touchgfx17AbstractPartition5clearEv>:
 801c790:	2300      	movs	r3, #0
 801c792:	8083      	strh	r3, [r0, #4]
 801c794:	4770      	bx	lr
	...

0801c798 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801c798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c79a:	6803      	ldr	r3, [r0, #0]
 801c79c:	460e      	mov	r6, r1
 801c79e:	2100      	movs	r1, #0
 801c7a0:	4604      	mov	r4, r0
 801c7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7a4:	4798      	blx	r3
 801c7a6:	4605      	mov	r5, r0
 801c7a8:	6823      	ldr	r3, [r4, #0]
 801c7aa:	4620      	mov	r0, r4
 801c7ac:	1b75      	subs	r5, r6, r5
 801c7ae:	6a1b      	ldr	r3, [r3, #32]
 801c7b0:	b2ad      	uxth	r5, r5
 801c7b2:	4798      	blx	r3
 801c7b4:	88a3      	ldrh	r3, [r4, #4]
 801c7b6:	fbb5 f0f0 	udiv	r0, r5, r0
 801c7ba:	4298      	cmp	r0, r3
 801c7bc:	b285      	uxth	r5, r0
 801c7be:	db05      	blt.n	801c7cc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x34>
 801c7c0:	4b0e      	ldr	r3, [pc, #56]	; (801c7fc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801c7c2:	211e      	movs	r1, #30
 801c7c4:	4a0e      	ldr	r2, [pc, #56]	; (801c800 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801c7c6:	480f      	ldr	r0, [pc, #60]	; (801c804 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801c7c8:	f004 fcf6 	bl	80211b8 <__assert_func>
 801c7cc:	6823      	ldr	r3, [r4, #0]
 801c7ce:	2100      	movs	r1, #0
 801c7d0:	4620      	mov	r0, r4
 801c7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7d4:	4798      	blx	r3
 801c7d6:	4607      	mov	r7, r0
 801c7d8:	6823      	ldr	r3, [r4, #0]
 801c7da:	4620      	mov	r0, r4
 801c7dc:	1bf6      	subs	r6, r6, r7
 801c7de:	6a1b      	ldr	r3, [r3, #32]
 801c7e0:	b2b6      	uxth	r6, r6
 801c7e2:	4798      	blx	r3
 801c7e4:	fbb6 f3f0 	udiv	r3, r6, r0
 801c7e8:	fb03 6610 	mls	r6, r3, r0, r6
 801c7ec:	b11e      	cbz	r6, 801c7f6 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5e>
 801c7ee:	4b06      	ldr	r3, [pc, #24]	; (801c808 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x70>)
 801c7f0:	211f      	movs	r1, #31
 801c7f2:	4a03      	ldr	r2, [pc, #12]	; (801c800 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801c7f4:	e7e7      	b.n	801c7c6 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2e>
 801c7f6:	4628      	mov	r0, r5
 801c7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c7fa:	bf00      	nop
 801c7fc:	08024a48 	.word	0x08024a48
 801c800:	08024bb6 	.word	0x08024bb6
 801c804:	08024a5d 	.word	0x08024a5d
 801c808:	08024a8b 	.word	0x08024a8b

0801c80c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801c80c:	b538      	push	{r3, r4, r5, lr}
 801c80e:	6803      	ldr	r3, [r0, #0]
 801c810:	460d      	mov	r5, r1
 801c812:	4604      	mov	r4, r0
 801c814:	6a1b      	ldr	r3, [r3, #32]
 801c816:	4798      	blx	r3
 801c818:	4285      	cmp	r5, r0
 801c81a:	d905      	bls.n	801c828 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 801c81c:	4b0c      	ldr	r3, [pc, #48]	; (801c850 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801c81e:	212f      	movs	r1, #47	; 0x2f
 801c820:	4a0c      	ldr	r2, [pc, #48]	; (801c854 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801c822:	480d      	ldr	r0, [pc, #52]	; (801c858 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 801c824:	f004 fcc8 	bl	80211b8 <__assert_func>
 801c828:	6823      	ldr	r3, [r4, #0]
 801c82a:	4620      	mov	r0, r4
 801c82c:	88a5      	ldrh	r5, [r4, #4]
 801c82e:	69db      	ldr	r3, [r3, #28]
 801c830:	4798      	blx	r3
 801c832:	4285      	cmp	r5, r0
 801c834:	db03      	blt.n	801c83e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801c836:	4b09      	ldr	r3, [pc, #36]	; (801c85c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801c838:	2130      	movs	r1, #48	; 0x30
 801c83a:	4a06      	ldr	r2, [pc, #24]	; (801c854 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801c83c:	e7f1      	b.n	801c822 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801c83e:	6823      	ldr	r3, [r4, #0]
 801c840:	4620      	mov	r0, r4
 801c842:	88a1      	ldrh	r1, [r4, #4]
 801c844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c846:	4798      	blx	r3
 801c848:	88a3      	ldrh	r3, [r4, #4]
 801c84a:	3301      	adds	r3, #1
 801c84c:	80a3      	strh	r3, [r4, #4]
 801c84e:	bd38      	pop	{r3, r4, r5, pc}
 801c850:	08024b05 	.word	0x08024b05
 801c854:	08024bf9 	.word	0x08024bf9
 801c858:	08024a5d 	.word	0x08024a5d
 801c85c:	08024b1c 	.word	0x08024b1c

0801c860 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801c860:	b570      	push	{r4, r5, r6, lr}
 801c862:	6803      	ldr	r3, [r0, #0]
 801c864:	4616      	mov	r6, r2
 801c866:	4604      	mov	r4, r0
 801c868:	460d      	mov	r5, r1
 801c86a:	6a1b      	ldr	r3, [r3, #32]
 801c86c:	4798      	blx	r3
 801c86e:	4286      	cmp	r6, r0
 801c870:	d905      	bls.n	801c87e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801c872:	4b06      	ldr	r3, [pc, #24]	; (801c88c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 801c874:	2139      	movs	r1, #57	; 0x39
 801c876:	4a06      	ldr	r2, [pc, #24]	; (801c890 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801c878:	4806      	ldr	r0, [pc, #24]	; (801c894 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801c87a:	f004 fc9d 	bl	80211b8 <__assert_func>
 801c87e:	6823      	ldr	r3, [r4, #0]
 801c880:	4629      	mov	r1, r5
 801c882:	4620      	mov	r0, r4
 801c884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c886:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c88a:	4718      	bx	r3
 801c88c:	08024b05 	.word	0x08024b05
 801c890:	08024b6c 	.word	0x08024b6c
 801c894:	08024a5d 	.word	0x08024a5d

0801c898 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801c898:	4770      	bx	lr
	...

0801c89c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801c89c:	4a02      	ldr	r2, [pc, #8]	; (801c8a8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801c89e:	6002      	str	r2, [r0, #0]
 801c8a0:	2200      	movs	r2, #0
 801c8a2:	8082      	strh	r2, [r0, #4]
 801c8a4:	4770      	bx	lr
 801c8a6:	bf00      	nop
 801c8a8:	08024b40 	.word	0x08024b40

0801c8ac <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 801c8ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801c8b0:	4770      	bx	lr

0801c8b2 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801c8b2:	2301      	movs	r3, #1
 801c8b4:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 801c8b8:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 801c8bc:	4770      	bx	lr

0801c8be <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801c8be:	2301      	movs	r3, #1
 801c8c0:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 801c8c4:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 801c8c8:	4770      	bx	lr

0801c8ca <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801c8ca:	6843      	ldr	r3, [r0, #4]
 801c8cc:	2201      	movs	r2, #1
 801c8ce:	725a      	strb	r2, [r3, #9]
 801c8d0:	6840      	ldr	r0, [r0, #4]
 801c8d2:	6803      	ldr	r3, [r0, #0]
 801c8d4:	691b      	ldr	r3, [r3, #16]
 801c8d6:	4718      	bx	r3

0801c8d8 <_ZN8touchgfx3HAL8flushDMAEv>:
 801c8d8:	6840      	ldr	r0, [r0, #4]
 801c8da:	6803      	ldr	r3, [r0, #0]
 801c8dc:	689b      	ldr	r3, [r3, #8]
 801c8de:	4718      	bx	r3

0801c8e0 <_ZN8touchgfx3HAL17registerTextCacheEPtt>:
 801c8e0:	4770      	bx	lr

0801c8e2 <_ZN8touchgfx3HAL15cacheTextStringEPKt>:
 801c8e2:	4608      	mov	r0, r1
 801c8e4:	4770      	bx	lr

0801c8e6 <_ZN8touchgfx3HAL22blitSetTransparencyKeyEt>:
 801c8e6:	4770      	bx	lr

0801c8e8 <_ZN8touchgfx3HAL10beginFrameEv>:
 801c8e8:	4b04      	ldr	r3, [pc, #16]	; (801c8fc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801c8ea:	781b      	ldrb	r3, [r3, #0]
 801c8ec:	b123      	cbz	r3, 801c8f8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801c8ee:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
 801c8f2:	f080 0001 	eor.w	r0, r0, #1
 801c8f6:	4770      	bx	lr
 801c8f8:	2001      	movs	r0, #1
 801c8fa:	4770      	bx	lr
 801c8fc:	2000a32a 	.word	0x2000a32a

0801c900 <_ZN8touchgfx3HAL8endFrameEv>:
 801c900:	b510      	push	{r4, lr}
 801c902:	4604      	mov	r4, r0
 801c904:	6840      	ldr	r0, [r0, #4]
 801c906:	6803      	ldr	r3, [r0, #0]
 801c908:	689b      	ldr	r3, [r3, #8]
 801c90a:	4798      	blx	r3
 801c90c:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801c910:	b113      	cbz	r3, 801c918 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801c912:	2301      	movs	r3, #1
 801c914:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 801c918:	bd10      	pop	{r4, pc}

0801c91a <_ZN8touchgfx3HAL9taskEntryEv>:
 801c91a:	b508      	push	{r3, lr}
 801c91c:	6803      	ldr	r3, [r0, #0]
 801c91e:	4604      	mov	r4, r0
 801c920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c922:	4798      	blx	r3
 801c924:	6823      	ldr	r3, [r4, #0]
 801c926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c928:	4620      	mov	r0, r4
 801c92a:	4798      	blx	r3
 801c92c:	f7f1 fba8 	bl	800e080 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801c930:	6823      	ldr	r3, [r4, #0]
 801c932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c934:	e7f8      	b.n	801c928 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801c938 <_ZN8touchgfx3HAL4tickEv>:
 801c938:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801c93a:	6803      	ldr	r3, [r0, #0]
 801c93c:	4604      	mov	r4, r0
 801c93e:	4d5d      	ldr	r5, [pc, #372]	; (801cab4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801c940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c944:	4798      	blx	r3
 801c946:	2800      	cmp	r0, #0
 801c948:	f000 8092 	beq.w	801ca70 <_ZN8touchgfx3HAL4tickEv+0x138>
 801c94c:	2001      	movs	r0, #1
 801c94e:	2600      	movs	r6, #0
 801c950:	f7fe fbd6 	bl	801b100 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801c954:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 801c958:	f884 6047 	strb.w	r6, [r4, #71]	; 0x47
 801c95c:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 801c960:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
 801c964:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
 801c968:	b133      	cbz	r3, 801c978 <_ZN8touchgfx3HAL4tickEv+0x40>
 801c96a:	6823      	ldr	r3, [r4, #0]
 801c96c:	4620      	mov	r0, r4
 801c96e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801c972:	4798      	blx	r3
 801c974:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
 801c978:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801c97c:	2601      	movs	r6, #1
 801c97e:	6862      	ldr	r2, [r4, #4]
 801c980:	f083 0301 	eor.w	r3, r3, #1
 801c984:	702e      	strb	r6, [r5, #0]
 801c986:	7253      	strb	r3, [r2, #9]
 801c988:	f001 fb00 	bl	801df8c <_ZN8touchgfx11Application11getInstanceEv>
 801c98c:	6803      	ldr	r3, [r0, #0]
 801c98e:	4631      	mov	r1, r6
 801c990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c992:	4798      	blx	r3
 801c994:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 801c998:	b90b      	cbnz	r3, 801c99e <_ZN8touchgfx3HAL4tickEv+0x66>
 801c99a:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
 801c99e:	f001 faf5 	bl	801df8c <_ZN8touchgfx11Application11getInstanceEv>
 801c9a2:	6803      	ldr	r3, [r0, #0]
 801c9a4:	695b      	ldr	r3, [r3, #20]
 801c9a6:	4798      	blx	r3
 801c9a8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801c9aa:	6803      	ldr	r3, [r0, #0]
 801c9ac:	691b      	ldr	r3, [r3, #16]
 801c9ae:	4798      	blx	r3
 801c9b0:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 801c9b4:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 801c9b8:	3b01      	subs	r3, #1
 801c9ba:	b2db      	uxtb	r3, r3
 801c9bc:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 801c9c0:	b10a      	cbz	r2, 801c9c6 <_ZN8touchgfx3HAL4tickEv+0x8e>
 801c9c2:	2b00      	cmp	r3, #0
 801c9c4:	d1eb      	bne.n	801c99e <_ZN8touchgfx3HAL4tickEv+0x66>
 801c9c6:	4a3c      	ldr	r2, [pc, #240]	; (801cab8 <_ZN8touchgfx3HAL4tickEv+0x180>)
 801c9c8:	f994 1054 	ldrsb.w	r1, [r4, #84]	; 0x54
 801c9cc:	7813      	ldrb	r3, [r2, #0]
 801c9ce:	3301      	adds	r3, #1
 801c9d0:	b25b      	sxtb	r3, r3
 801c9d2:	4299      	cmp	r1, r3
 801c9d4:	7013      	strb	r3, [r2, #0]
 801c9d6:	dc10      	bgt.n	801c9fa <_ZN8touchgfx3HAL4tickEv+0xc2>
 801c9d8:	2300      	movs	r3, #0
 801c9da:	68e0      	ldr	r0, [r4, #12]
 801c9dc:	a902      	add	r1, sp, #8
 801c9de:	7013      	strb	r3, [r2, #0]
 801c9e0:	aa03      	add	r2, sp, #12
 801c9e2:	6803      	ldr	r3, [r0, #0]
 801c9e4:	68db      	ldr	r3, [r3, #12]
 801c9e6:	4798      	blx	r3
 801c9e8:	6823      	ldr	r3, [r4, #0]
 801c9ea:	2800      	cmp	r0, #0
 801c9ec:	d04c      	beq.n	801ca88 <_ZN8touchgfx3HAL4tickEv+0x150>
 801c9ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c9f2:	4620      	mov	r0, r4
 801c9f4:	9a03      	ldr	r2, [sp, #12]
 801c9f6:	9902      	ldr	r1, [sp, #8]
 801c9f8:	4798      	blx	r3
 801c9fa:	2300      	movs	r3, #0
 801c9fc:	6960      	ldr	r0, [r4, #20]
 801c9fe:	f88d 3007 	strb.w	r3, [sp, #7]
 801ca02:	b130      	cbz	r0, 801ca12 <_ZN8touchgfx3HAL4tickEv+0xda>
 801ca04:	6803      	ldr	r3, [r0, #0]
 801ca06:	f10d 0107 	add.w	r1, sp, #7
 801ca0a:	68db      	ldr	r3, [r3, #12]
 801ca0c:	4798      	blx	r3
 801ca0e:	2800      	cmp	r0, #0
 801ca10:	d149      	bne.n	801caa6 <_ZN8touchgfx3HAL4tickEv+0x16e>
 801ca12:	f104 0018 	add.w	r0, r4, #24
 801ca16:	f004 fb05 	bl	8021024 <_ZN8touchgfx8Gestures4tickEv>
 801ca1a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 801ca1e:	b30b      	cbz	r3, 801ca64 <_ZN8touchgfx3HAL4tickEv+0x12c>
 801ca20:	6920      	ldr	r0, [r4, #16]
 801ca22:	6803      	ldr	r3, [r0, #0]
 801ca24:	691b      	ldr	r3, [r3, #16]
 801ca26:	4798      	blx	r3
 801ca28:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801ca2a:	4606      	mov	r6, r0
 801ca2c:	b903      	cbnz	r3, 801ca30 <_ZN8touchgfx3HAL4tickEv+0xf8>
 801ca2e:	6620      	str	r0, [r4, #96]	; 0x60
 801ca30:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801ca32:	4a22      	ldr	r2, [pc, #136]	; (801cabc <_ZN8touchgfx3HAL4tickEv+0x184>)
 801ca34:	1af3      	subs	r3, r6, r3
 801ca36:	4293      	cmp	r3, r2
 801ca38:	d914      	bls.n	801ca64 <_ZN8touchgfx3HAL4tickEv+0x12c>
 801ca3a:	6920      	ldr	r0, [r4, #16]
 801ca3c:	6803      	ldr	r3, [r0, #0]
 801ca3e:	699b      	ldr	r3, [r3, #24]
 801ca40:	4798      	blx	r3
 801ca42:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801ca44:	2264      	movs	r2, #100	; 0x64
 801ca46:	1af3      	subs	r3, r6, r3
 801ca48:	fbb3 f3f2 	udiv	r3, r3, r2
 801ca4c:	fbb0 f0f3 	udiv	r0, r0, r3
 801ca50:	2800      	cmp	r0, #0
 801ca52:	dc1e      	bgt.n	801ca92 <_ZN8touchgfx3HAL4tickEv+0x15a>
 801ca54:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
 801ca58:	6920      	ldr	r0, [r4, #16]
 801ca5a:	2100      	movs	r1, #0
 801ca5c:	6803      	ldr	r3, [r0, #0]
 801ca5e:	69db      	ldr	r3, [r3, #28]
 801ca60:	4798      	blx	r3
 801ca62:	6626      	str	r6, [r4, #96]	; 0x60
 801ca64:	f001 fa92 	bl	801df8c <_ZN8touchgfx11Application11getInstanceEv>
 801ca68:	6803      	ldr	r3, [r0, #0]
 801ca6a:	2100      	movs	r1, #0
 801ca6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ca6e:	4798      	blx	r3
 801ca70:	6823      	ldr	r3, [r4, #0]
 801ca72:	4620      	mov	r0, r4
 801ca74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ca78:	4798      	blx	r3
 801ca7a:	2001      	movs	r0, #1
 801ca7c:	f7fe fb4b 	bl	801b116 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801ca80:	2300      	movs	r3, #0
 801ca82:	702b      	strb	r3, [r5, #0]
 801ca84:	b004      	add	sp, #16
 801ca86:	bd70      	pop	{r4, r5, r6, pc}
 801ca88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801ca8c:	4620      	mov	r0, r4
 801ca8e:	4798      	blx	r3
 801ca90:	e7b3      	b.n	801c9fa <_ZN8touchgfx3HAL4tickEv+0xc2>
 801ca92:	2863      	cmp	r0, #99	; 0x63
 801ca94:	bfcb      	itete	gt
 801ca96:	2300      	movgt	r3, #0
 801ca98:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801ca9c:	f884 3055 	strbgt.w	r3, [r4, #85]	; 0x55
 801caa0:	f884 0055 	strble.w	r0, [r4, #85]	; 0x55
 801caa4:	e7d8      	b.n	801ca58 <_ZN8touchgfx3HAL4tickEv+0x120>
 801caa6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801caa8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801caac:	6803      	ldr	r3, [r0, #0]
 801caae:	68db      	ldr	r3, [r3, #12]
 801cab0:	4798      	blx	r3
 801cab2:	e7ae      	b.n	801ca12 <_ZN8touchgfx3HAL4tickEv+0xda>
 801cab4:	2000a330 	.word	0x2000a330
 801cab8:	2000a331 	.word	0x2000a331
 801cabc:	05f5e100 	.word	0x05f5e100

0801cac0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801cac0:	f7f1 ba7e 	b.w	800dfc0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801cac4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801cac4:	6481      	str	r1, [r0, #72]	; 0x48
 801cac6:	3018      	adds	r0, #24
 801cac8:	f004 baaa 	b.w	8021020 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801cacc <_ZN8touchgfx3HAL5touchEll>:
 801cacc:	b530      	push	{r4, r5, lr}
 801cace:	b085      	sub	sp, #20
 801cad0:	4604      	mov	r4, r0
 801cad2:	a802      	add	r0, sp, #8
 801cad4:	9102      	str	r1, [sp, #8]
 801cad6:	9203      	str	r2, [sp, #12]
 801cad8:	f001 f888 	bl	801dbec <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801cadc:	a903      	add	r1, sp, #12
 801cade:	a802      	add	r0, sp, #8
 801cae0:	f001 f8d2 	bl	801dc88 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801cae4:	f894 105b 	ldrb.w	r1, [r4, #91]	; 0x5b
 801cae8:	9d02      	ldr	r5, [sp, #8]
 801caea:	f104 0018 	add.w	r0, r4, #24
 801caee:	9b03      	ldr	r3, [sp, #12]
 801caf0:	b179      	cbz	r1, 801cb12 <_ZN8touchgfx3HAL5touchEll+0x46>
 801caf2:	b29b      	uxth	r3, r3
 801caf4:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 801caf8:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 801cafc:	9300      	str	r3, [sp, #0]
 801cafe:	b2ab      	uxth	r3, r5
 801cb00:	f004 fa9e 	bl	8021040 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801cb04:	b118      	cbz	r0, 801cb0e <_ZN8touchgfx3HAL5touchEll+0x42>
 801cb06:	9b02      	ldr	r3, [sp, #8]
 801cb08:	64e3      	str	r3, [r4, #76]	; 0x4c
 801cb0a:	9b03      	ldr	r3, [sp, #12]
 801cb0c:	6523      	str	r3, [r4, #80]	; 0x50
 801cb0e:	b005      	add	sp, #20
 801cb10:	bd30      	pop	{r4, r5, pc}
 801cb12:	b29b      	uxth	r3, r3
 801cb14:	b2aa      	uxth	r2, r5
 801cb16:	f004 fad7 	bl	80210c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801cb1a:	2301      	movs	r3, #1
 801cb1c:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 801cb20:	e7f1      	b.n	801cb06 <_ZN8touchgfx3HAL5touchEll+0x3a>

0801cb22 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801cb22:	b530      	push	{r4, r5, lr}
 801cb24:	2b00      	cmp	r3, #0
 801cb26:	d04e      	beq.n	801cbc6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801cb28:	ea81 0002 	eor.w	r0, r1, r2
 801cb2c:	07c0      	lsls	r0, r0, #31
 801cb2e:	d508      	bpl.n	801cb42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801cb30:	3a01      	subs	r2, #1
 801cb32:	440b      	add	r3, r1
 801cb34:	4299      	cmp	r1, r3
 801cb36:	d046      	beq.n	801cbc6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801cb38:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801cb3c:	f801 0b01 	strb.w	r0, [r1], #1
 801cb40:	e7f8      	b.n	801cb34 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801cb42:	07d5      	lsls	r5, r2, #31
 801cb44:	bf42      	ittt	mi
 801cb46:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801cb4a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801cb4e:	f801 0b01 	strbmi.w	r0, [r1], #1
 801cb52:	2b01      	cmp	r3, #1
 801cb54:	d915      	bls.n	801cb82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801cb56:	ea81 0002 	eor.w	r0, r1, r2
 801cb5a:	0784      	lsls	r4, r0, #30
 801cb5c:	d01f      	beq.n	801cb9e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x7c>
 801cb5e:	1e95      	subs	r5, r2, #2
 801cb60:	460c      	mov	r4, r1
 801cb62:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 801cb66:	f824 0b02 	strh.w	r0, [r4], #2
 801cb6a:	1b18      	subs	r0, r3, r4
 801cb6c:	4408      	add	r0, r1
 801cb6e:	2801      	cmp	r0, #1
 801cb70:	d8f7      	bhi.n	801cb62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x40>
 801cb72:	1e98      	subs	r0, r3, #2
 801cb74:	f003 0301 	and.w	r3, r3, #1
 801cb78:	f020 0001 	bic.w	r0, r0, #1
 801cb7c:	3002      	adds	r0, #2
 801cb7e:	4401      	add	r1, r0
 801cb80:	4402      	add	r2, r0
 801cb82:	3a01      	subs	r2, #1
 801cb84:	440b      	add	r3, r1
 801cb86:	4299      	cmp	r1, r3
 801cb88:	d01d      	beq.n	801cbc6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801cb8a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801cb8e:	f801 0b01 	strb.w	r0, [r1], #1
 801cb92:	e7f8      	b.n	801cb86 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x64>
 801cb94:	f855 4f04 	ldr.w	r4, [r5, #4]!
 801cb98:	f840 4b04 	str.w	r4, [r0], #4
 801cb9c:	e008      	b.n	801cbb0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801cb9e:	0790      	lsls	r0, r2, #30
 801cba0:	d004      	beq.n	801cbac <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8a>
 801cba2:	f832 0b02 	ldrh.w	r0, [r2], #2
 801cba6:	3b02      	subs	r3, #2
 801cba8:	f821 0b02 	strh.w	r0, [r1], #2
 801cbac:	1f15      	subs	r5, r2, #4
 801cbae:	4608      	mov	r0, r1
 801cbb0:	1a1c      	subs	r4, r3, r0
 801cbb2:	440c      	add	r4, r1
 801cbb4:	2c03      	cmp	r4, #3
 801cbb6:	d8ed      	bhi.n	801cb94 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x72>
 801cbb8:	f023 0003 	bic.w	r0, r3, #3
 801cbbc:	f003 0303 	and.w	r3, r3, #3
 801cbc0:	4402      	add	r2, r0
 801cbc2:	4401      	add	r1, r0
 801cbc4:	e7dd      	b.n	801cb82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801cbc6:	2001      	movs	r0, #1
 801cbc8:	bd30      	pop	{r4, r5, pc}

0801cbca <_ZN8touchgfx3HAL7noTouchEv>:
 801cbca:	b510      	push	{r4, lr}
 801cbcc:	f890 305b 	ldrb.w	r3, [r0, #91]	; 0x5b
 801cbd0:	4604      	mov	r4, r0
 801cbd2:	b153      	cbz	r3, 801cbea <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801cbd4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 801cbd8:	2101      	movs	r1, #1
 801cbda:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 801cbde:	3018      	adds	r0, #24
 801cbe0:	f004 fa72 	bl	80210c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801cbe4:	2300      	movs	r3, #0
 801cbe6:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 801cbea:	bd10      	pop	{r4, pc}

0801cbec <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801cbec:	4b07      	ldr	r3, [pc, #28]	; (801cc0c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801cbee:	b510      	push	{r4, lr}
 801cbf0:	781b      	ldrb	r3, [r3, #0]
 801cbf2:	4604      	mov	r4, r0
 801cbf4:	b12b      	cbz	r3, 801cc02 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x16>
 801cbf6:	6803      	ldr	r3, [r0, #0]
 801cbf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cbfa:	4798      	blx	r3
 801cbfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801cbfe:	4283      	cmp	r3, r0
 801cc00:	d001      	beq.n	801cc06 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801cc02:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801cc04:	bd10      	pop	{r4, pc}
 801cc06:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801cc08:	bd10      	pop	{r4, pc}
 801cc0a:	bf00      	nop
 801cc0c:	2000a32a 	.word	0x2000a32a

0801cc10 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801cc10:	4b0a      	ldr	r3, [pc, #40]	; (801cc3c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x2c>)
 801cc12:	b510      	push	{r4, lr}
 801cc14:	781b      	ldrb	r3, [r3, #0]
 801cc16:	4604      	mov	r4, r0
 801cc18:	b12b      	cbz	r3, 801cc26 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x16>
 801cc1a:	f7f1 f9c3 	bl	800dfa4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801cc1e:	4620      	mov	r0, r4
 801cc20:	f7ff ffe4 	bl	801cbec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801cc24:	bd10      	pop	{r4, pc}
 801cc26:	6840      	ldr	r0, [r0, #4]
 801cc28:	f000 fb3e 	bl	801d2a8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801cc2c:	2800      	cmp	r0, #0
 801cc2e:	d0f4      	beq.n	801cc1a <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 801cc30:	6862      	ldr	r2, [r4, #4]
 801cc32:	7a53      	ldrb	r3, [r2, #9]
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	d0fc      	beq.n	801cc32 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801cc38:	e7ef      	b.n	801cc1a <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 801cc3a:	bf00      	nop
 801cc3c:	2000a32a 	.word	0x2000a32a

0801cc40 <_ZN8touchgfx3HAL10initializeEv>:
 801cc40:	b510      	push	{r4, lr}
 801cc42:	4604      	mov	r4, r0
 801cc44:	f7f1 f98a 	bl	800df5c <_ZN8touchgfx10OSWrappers10initializeEv>
 801cc48:	6860      	ldr	r0, [r4, #4]
 801cc4a:	6803      	ldr	r3, [r0, #0]
 801cc4c:	68db      	ldr	r3, [r3, #12]
 801cc4e:	4798      	blx	r3
 801cc50:	68e0      	ldr	r0, [r4, #12]
 801cc52:	6803      	ldr	r3, [r0, #0]
 801cc54:	689b      	ldr	r3, [r3, #8]
 801cc56:	4798      	blx	r3
 801cc58:	6823      	ldr	r3, [r4, #0]
 801cc5a:	4620      	mov	r0, r4
 801cc5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cc5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc62:	4718      	bx	r3

0801cc64 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801cc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc66:	461d      	mov	r5, r3
 801cc68:	4b0b      	ldr	r3, [pc, #44]	; (801cc98 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801cc6a:	4617      	mov	r7, r2
 801cc6c:	460e      	mov	r6, r1
 801cc6e:	681b      	ldr	r3, [r3, #0]
 801cc70:	6898      	ldr	r0, [r3, #8]
 801cc72:	6803      	ldr	r3, [r0, #0]
 801cc74:	6a1b      	ldr	r3, [r3, #32]
 801cc76:	4798      	blx	r3
 801cc78:	4b08      	ldr	r3, [pc, #32]	; (801cc9c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x38>)
 801cc7a:	2810      	cmp	r0, #16
 801cc7c:	bf15      	itete	ne
 801cc7e:	881c      	ldrhne	r4, [r3, #0]
 801cc80:	8818      	ldrheq	r0, [r3, #0]
 801cc82:	fb07 6204 	mlane	r2, r7, r4, r6
 801cc86:	fb07 6200 	mlaeq	r2, r7, r0, r6
 801cc8a:	bf16      	itet	ne
 801cc8c:	eb02 0242 	addne.w	r2, r2, r2, lsl #1
 801cc90:	eb05 0042 	addeq.w	r0, r5, r2, lsl #1
 801cc94:	18a8      	addne	r0, r5, r2
 801cc96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc98:	2000a32c 	.word	0x2000a32c
 801cc9c:	2000a326 	.word	0x2000a326

0801cca0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 801cca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cca4:	b088      	sub	sp, #32
 801cca6:	4698      	mov	r8, r3
 801cca8:	4617      	mov	r7, r2
 801ccaa:	2200      	movs	r2, #0
 801ccac:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801ccb0:	4604      	mov	r4, r0
 801ccb2:	9206      	str	r2, [sp, #24]
 801ccb4:	2bff      	cmp	r3, #255	; 0xff
 801ccb6:	f88d 301c 	strb.w	r3, [sp, #28]
 801ccba:	4b1d      	ldr	r3, [pc, #116]	; (801cd30 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x90>)
 801ccbc:	bf0c      	ite	eq
 801ccbe:	2201      	moveq	r2, #1
 801ccc0:	2204      	movne	r2, #4
 801ccc2:	881b      	ldrh	r3, [r3, #0]
 801ccc4:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801ccc8:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801cccc:	9201      	str	r2, [sp, #4]
 801ccce:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801ccd2:	9102      	str	r1, [sp, #8]
 801ccd4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ccd8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ccdc:	f8ad 6010 	strh.w	r6, [sp, #16]
 801cce0:	f8ad 5012 	strh.w	r5, [sp, #18]
 801cce4:	f7ff ff82 	bl	801cbec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801cce8:	4642      	mov	r2, r8
 801ccea:	4603      	mov	r3, r0
 801ccec:	4639      	mov	r1, r7
 801ccee:	4620      	mov	r0, r4
 801ccf0:	f7ff ffb8 	bl	801cc64 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801ccf4:	9003      	str	r0, [sp, #12]
 801ccf6:	b106      	cbz	r6, 801ccfa <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x5a>
 801ccf8:	b935      	cbnz	r5, 801cd08 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x68>
 801ccfa:	4b0e      	ldr	r3, [pc, #56]	; (801cd34 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x94>)
 801ccfc:	f240 1143 	movw	r1, #323	; 0x143
 801cd00:	4a0d      	ldr	r2, [pc, #52]	; (801cd38 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x98>)
 801cd02:	480e      	ldr	r0, [pc, #56]	; (801cd3c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x9c>)
 801cd04:	f004 fa58 	bl	80211b8 <__assert_func>
 801cd08:	6823      	ldr	r3, [r4, #0]
 801cd0a:	4620      	mov	r0, r4
 801cd0c:	9d01      	ldr	r5, [sp, #4]
 801cd0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cd10:	4798      	blx	r3
 801cd12:	4228      	tst	r0, r5
 801cd14:	d104      	bne.n	801cd20 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x80>
 801cd16:	4b0a      	ldr	r3, [pc, #40]	; (801cd40 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0xa0>)
 801cd18:	f44f 71a2 	mov.w	r1, #324	; 0x144
 801cd1c:	4a06      	ldr	r2, [pc, #24]	; (801cd38 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x98>)
 801cd1e:	e7f0      	b.n	801cd02 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x62>
 801cd20:	6860      	ldr	r0, [r4, #4]
 801cd22:	a901      	add	r1, sp, #4
 801cd24:	6803      	ldr	r3, [r0, #0]
 801cd26:	685b      	ldr	r3, [r3, #4]
 801cd28:	4798      	blx	r3
 801cd2a:	b008      	add	sp, #32
 801cd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd30:	2000a326 	.word	0x2000a326
 801cd34:	08024ca5 	.word	0x08024ca5
 801cd38:	08024f53 	.word	0x08024f53
 801cd3c:	08024cdd 	.word	0x08024cdd
 801cd40:	08024d03 	.word	0x08024d03

0801cd44 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801cd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd48:	4698      	mov	r8, r3
 801cd4a:	b088      	sub	sp, #32
 801cd4c:	2300      	movs	r3, #0
 801cd4e:	4617      	mov	r7, r2
 801cd50:	4604      	mov	r4, r0
 801cd52:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801cd56:	9306      	str	r3, [sp, #24]
 801cd58:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801cd5c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801cd60:	9301      	str	r3, [sp, #4]
 801cd62:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801cd66:	9102      	str	r1, [sp, #8]
 801cd68:	f8ad 3014 	strh.w	r3, [sp, #20]
 801cd6c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801cd70:	f8ad 6010 	strh.w	r6, [sp, #16]
 801cd74:	f88d 301c 	strb.w	r3, [sp, #28]
 801cd78:	f8ad 5012 	strh.w	r5, [sp, #18]
 801cd7c:	f7ff ff36 	bl	801cbec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801cd80:	4642      	mov	r2, r8
 801cd82:	4603      	mov	r3, r0
 801cd84:	4639      	mov	r1, r7
 801cd86:	4620      	mov	r0, r4
 801cd88:	f7ff ff6c 	bl	801cc64 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801cd8c:	4b11      	ldr	r3, [pc, #68]	; (801cdd4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x90>)
 801cd8e:	9003      	str	r0, [sp, #12]
 801cd90:	881b      	ldrh	r3, [r3, #0]
 801cd92:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cd96:	b106      	cbz	r6, 801cd9a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x56>
 801cd98:	b935      	cbnz	r5, 801cda8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x64>
 801cd9a:	4b0f      	ldr	r3, [pc, #60]	; (801cdd8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x94>)
 801cd9c:	f240 1153 	movw	r1, #339	; 0x153
 801cda0:	4a0e      	ldr	r2, [pc, #56]	; (801cddc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x98>)
 801cda2:	480f      	ldr	r0, [pc, #60]	; (801cde0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x9c>)
 801cda4:	f004 fa08 	bl	80211b8 <__assert_func>
 801cda8:	6823      	ldr	r3, [r4, #0]
 801cdaa:	4620      	mov	r0, r4
 801cdac:	9d01      	ldr	r5, [sp, #4]
 801cdae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cdb0:	4798      	blx	r3
 801cdb2:	4228      	tst	r0, r5
 801cdb4:	d104      	bne.n	801cdc0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x7c>
 801cdb6:	4b0b      	ldr	r3, [pc, #44]	; (801cde4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa0>)
 801cdb8:	f44f 71aa 	mov.w	r1, #340	; 0x154
 801cdbc:	4a07      	ldr	r2, [pc, #28]	; (801cddc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x98>)
 801cdbe:	e7f0      	b.n	801cda2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x5e>
 801cdc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cdc2:	a901      	add	r1, sp, #4
 801cdc4:	6860      	ldr	r0, [r4, #4]
 801cdc6:	9306      	str	r3, [sp, #24]
 801cdc8:	6803      	ldr	r3, [r0, #0]
 801cdca:	685b      	ldr	r3, [r3, #4]
 801cdcc:	4798      	blx	r3
 801cdce:	b008      	add	sp, #32
 801cdd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cdd4:	2000a326 	.word	0x2000a326
 801cdd8:	08024ca5 	.word	0x08024ca5
 801cddc:	08024df0 	.word	0x08024df0
 801cde0:	08024cdd 	.word	0x08024cdd
 801cde4:	08024d03 	.word	0x08024d03

0801cde8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801cde8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cdec:	b088      	sub	sp, #32
 801cdee:	4698      	mov	r8, r3
 801cdf0:	4617      	mov	r7, r2
 801cdf2:	2200      	movs	r2, #0
 801cdf4:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801cdf8:	4604      	mov	r4, r0
 801cdfa:	9206      	str	r2, [sp, #24]
 801cdfc:	2bff      	cmp	r3, #255	; 0xff
 801cdfe:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801ce02:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801ce06:	bf0c      	ite	eq
 801ce08:	2220      	moveq	r2, #32
 801ce0a:	2240      	movne	r2, #64	; 0x40
 801ce0c:	9102      	str	r1, [sp, #8]
 801ce0e:	9201      	str	r2, [sp, #4]
 801ce10:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801ce14:	f88d 301c 	strb.w	r3, [sp, #28]
 801ce18:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ce1c:	f8ad 6010 	strh.w	r6, [sp, #16]
 801ce20:	f8ad 5012 	strh.w	r5, [sp, #18]
 801ce24:	f7ff fee2 	bl	801cbec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801ce28:	4642      	mov	r2, r8
 801ce2a:	4603      	mov	r3, r0
 801ce2c:	4639      	mov	r1, r7
 801ce2e:	4620      	mov	r0, r4
 801ce30:	f7ff ff18 	bl	801cc64 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801ce34:	4b10      	ldr	r3, [pc, #64]	; (801ce78 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x90>)
 801ce36:	9003      	str	r0, [sp, #12]
 801ce38:	881b      	ldrh	r3, [r3, #0]
 801ce3a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ce3e:	b106      	cbz	r6, 801ce42 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x5a>
 801ce40:	b935      	cbnz	r5, 801ce50 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x68>
 801ce42:	4b0e      	ldr	r3, [pc, #56]	; (801ce7c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x94>)
 801ce44:	f44f 71b3 	mov.w	r1, #358	; 0x166
 801ce48:	4a0d      	ldr	r2, [pc, #52]	; (801ce80 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x98>)
 801ce4a:	480e      	ldr	r0, [pc, #56]	; (801ce84 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x9c>)
 801ce4c:	f004 f9b4 	bl	80211b8 <__assert_func>
 801ce50:	6823      	ldr	r3, [r4, #0]
 801ce52:	4620      	mov	r0, r4
 801ce54:	9d01      	ldr	r5, [sp, #4]
 801ce56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ce58:	4798      	blx	r3
 801ce5a:	4228      	tst	r0, r5
 801ce5c:	d104      	bne.n	801ce68 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x80>
 801ce5e:	4b0a      	ldr	r3, [pc, #40]	; (801ce88 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0xa0>)
 801ce60:	f240 1167 	movw	r1, #359	; 0x167
 801ce64:	4a06      	ldr	r2, [pc, #24]	; (801ce80 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x98>)
 801ce66:	e7f0      	b.n	801ce4a <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x62>
 801ce68:	6860      	ldr	r0, [r4, #4]
 801ce6a:	a901      	add	r1, sp, #4
 801ce6c:	6803      	ldr	r3, [r0, #0]
 801ce6e:	685b      	ldr	r3, [r3, #4]
 801ce70:	4798      	blx	r3
 801ce72:	b008      	add	sp, #32
 801ce74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce78:	2000a326 	.word	0x2000a326
 801ce7c:	08024ca5 	.word	0x08024ca5
 801ce80:	08024e94 	.word	0x08024e94
 801ce84:	08024cdd 	.word	0x08024cdd
 801ce88:	08024d03 	.word	0x08024d03

0801ce8c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801ce8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ce90:	b089      	sub	sp, #36	; 0x24
 801ce92:	4699      	mov	r9, r3
 801ce94:	4604      	mov	r4, r0
 801ce96:	2500      	movs	r5, #0
 801ce98:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801ce9c:	4690      	mov	r8, r2
 801ce9e:	460f      	mov	r7, r1
 801cea0:	9506      	str	r5, [sp, #24]
 801cea2:	2eff      	cmp	r6, #255	; 0xff
 801cea4:	9502      	str	r5, [sp, #8]
 801cea6:	bf0c      	ite	eq
 801cea8:	2302      	moveq	r3, #2
 801ceaa:	2308      	movne	r3, #8
 801ceac:	9301      	str	r3, [sp, #4]
 801ceae:	f7ff fe9d 	bl	801cbec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801ceb2:	464a      	mov	r2, r9
 801ceb4:	4603      	mov	r3, r0
 801ceb6:	4641      	mov	r1, r8
 801ceb8:	4620      	mov	r0, r4
 801ceba:	f7ff fed3 	bl	801cc64 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801cebe:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801cec2:	f8ad 5014 	strh.w	r5, [sp, #20]
 801cec6:	f8ad 3010 	strh.w	r3, [sp, #16]
 801ceca:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801cece:	9d01      	ldr	r5, [sp, #4]
 801ced0:	f8ad 3012 	strh.w	r3, [sp, #18]
 801ced4:	4b0e      	ldr	r3, [pc, #56]	; (801cf10 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x84>)
 801ced6:	9003      	str	r0, [sp, #12]
 801ced8:	4620      	mov	r0, r4
 801ceda:	881b      	ldrh	r3, [r3, #0]
 801cedc:	9706      	str	r7, [sp, #24]
 801cede:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cee2:	6823      	ldr	r3, [r4, #0]
 801cee4:	f88d 601c 	strb.w	r6, [sp, #28]
 801cee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ceea:	4798      	blx	r3
 801ceec:	4228      	tst	r0, r5
 801ceee:	d106      	bne.n	801cefe <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x72>
 801cef0:	4b08      	ldr	r3, [pc, #32]	; (801cf14 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x88>)
 801cef2:	f240 1179 	movw	r1, #377	; 0x179
 801cef6:	4a08      	ldr	r2, [pc, #32]	; (801cf18 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x8c>)
 801cef8:	4808      	ldr	r0, [pc, #32]	; (801cf1c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x90>)
 801cefa:	f004 f95d 	bl	80211b8 <__assert_func>
 801cefe:	6860      	ldr	r0, [r4, #4]
 801cf00:	a901      	add	r1, sp, #4
 801cf02:	6803      	ldr	r3, [r0, #0]
 801cf04:	685b      	ldr	r3, [r3, #4]
 801cf06:	4798      	blx	r3
 801cf08:	b009      	add	sp, #36	; 0x24
 801cf0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cf0e:	bf00      	nop
 801cf10:	2000a326 	.word	0x2000a326
 801cf14:	08024d03 	.word	0x08024d03
 801cf18:	08024fca 	.word	0x08024fca
 801cf1c:	08024cdd 	.word	0x08024cdd

0801cf20 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801cf20:	4b1d      	ldr	r3, [pc, #116]	; (801cf98 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x78>)
 801cf22:	b570      	push	{r4, r5, r6, lr}
 801cf24:	b08a      	sub	sp, #40	; 0x28
 801cf26:	781b      	ldrb	r3, [r3, #0]
 801cf28:	4604      	mov	r4, r0
 801cf2a:	e88d 0006 	stmia.w	sp, {r1, r2}
 801cf2e:	b933      	cbnz	r3, 801cf3e <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x1e>
 801cf30:	4b1a      	ldr	r3, [pc, #104]	; (801cf9c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x7c>)
 801cf32:	f240 1185 	movw	r1, #389	; 0x185
 801cf36:	4a1a      	ldr	r2, [pc, #104]	; (801cfa0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801cf38:	481a      	ldr	r0, [pc, #104]	; (801cfa4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x84>)
 801cf3a:	f004 f93d 	bl	80211b8 <__assert_func>
 801cf3e:	2300      	movs	r3, #0
 801cf40:	f8bd 5000 	ldrh.w	r5, [sp]
 801cf44:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801cf48:	9308      	str	r3, [sp, #32]
 801cf4a:	2301      	movs	r3, #1
 801cf4c:	9303      	str	r3, [sp, #12]
 801cf4e:	6803      	ldr	r3, [r0, #0]
 801cf50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf52:	4798      	blx	r3
 801cf54:	4632      	mov	r2, r6
 801cf56:	4603      	mov	r3, r0
 801cf58:	4629      	mov	r1, r5
 801cf5a:	4620      	mov	r0, r4
 801cf5c:	f7ff fe82 	bl	801cc64 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801cf60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cf62:	9004      	str	r0, [sp, #16]
 801cf64:	a903      	add	r1, sp, #12
 801cf66:	9305      	str	r3, [sp, #20]
 801cf68:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801cf6c:	6860      	ldr	r0, [r4, #4]
 801cf6e:	f8ad 3018 	strh.w	r3, [sp, #24]
 801cf72:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801cf76:	f8ad 301a 	strh.w	r3, [sp, #26]
 801cf7a:	4b0b      	ldr	r3, [pc, #44]	; (801cfa8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x88>)
 801cf7c:	881b      	ldrh	r3, [r3, #0]
 801cf7e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801cf82:	f8ad 301e 	strh.w	r3, [sp, #30]
 801cf86:	23ff      	movs	r3, #255	; 0xff
 801cf88:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801cf8c:	6803      	ldr	r3, [r0, #0]
 801cf8e:	685b      	ldr	r3, [r3, #4]
 801cf90:	4798      	blx	r3
 801cf92:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cf94:	b00a      	add	sp, #40	; 0x28
 801cf96:	bd70      	pop	{r4, r5, r6, pc}
 801cf98:	2000a32b 	.word	0x2000a32b
 801cf9c:	08024c37 	.word	0x08024c37
 801cfa0:	08024f0d 	.word	0x08024f0d
 801cfa4:	08024cdd 	.word	0x08024cdd
 801cfa8:	2000a326 	.word	0x2000a326

0801cfac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801cfac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cfae:	461d      	mov	r5, r3
 801cfb0:	b08b      	sub	sp, #44	; 0x2c
 801cfb2:	2300      	movs	r3, #0
 801cfb4:	4604      	mov	r4, r0
 801cfb6:	9308      	str	r3, [sp, #32]
 801cfb8:	2301      	movs	r3, #1
 801cfba:	9303      	str	r3, [sp, #12]
 801cfbc:	6803      	ldr	r3, [r0, #0]
 801cfbe:	e88d 0006 	stmia.w	sp, {r1, r2}
 801cfc2:	f8bd 6000 	ldrh.w	r6, [sp]
 801cfc6:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801cfca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cfcc:	4798      	blx	r3
 801cfce:	463a      	mov	r2, r7
 801cfd0:	4603      	mov	r3, r0
 801cfd2:	4631      	mov	r1, r6
 801cfd4:	4620      	mov	r0, r4
 801cfd6:	f7ff fe45 	bl	801cc64 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801cfda:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801cfde:	9004      	str	r0, [sp, #16]
 801cfe0:	a903      	add	r1, sp, #12
 801cfe2:	f8ad 3018 	strh.w	r3, [sp, #24]
 801cfe6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801cfea:	6860      	ldr	r0, [r4, #4]
 801cfec:	f8ad 301a 	strh.w	r3, [sp, #26]
 801cff0:	4b08      	ldr	r3, [pc, #32]	; (801d014 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x68>)
 801cff2:	9505      	str	r5, [sp, #20]
 801cff4:	881b      	ldrh	r3, [r3, #0]
 801cff6:	f8ad 301c 	strh.w	r3, [sp, #28]
 801cffa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cffc:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d000:	23ff      	movs	r3, #255	; 0xff
 801d002:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801d006:	6803      	ldr	r3, [r0, #0]
 801d008:	685b      	ldr	r3, [r3, #4]
 801d00a:	4798      	blx	r3
 801d00c:	4628      	mov	r0, r5
 801d00e:	b00b      	add	sp, #44	; 0x2c
 801d010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d012:	bf00      	nop
 801d014:	2000a326 	.word	0x2000a326

0801d018 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801d018:	b570      	push	{r4, r5, r6, lr}
 801d01a:	f890 305a 	ldrb.w	r3, [r0, #90]	; 0x5a
 801d01e:	4604      	mov	r4, r0
 801d020:	b19b      	cbz	r3, 801d04a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801d022:	2002      	movs	r0, #2
 801d024:	f7fe f882 	bl	801b12c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801d028:	2300      	movs	r3, #0
 801d02a:	4620      	mov	r0, r4
 801d02c:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 801d030:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d034:	6823      	ldr	r3, [r4, #0]
 801d036:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 801d03a:	f7ff fdd7 	bl	801cbec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801d03e:	4601      	mov	r1, r0
 801d040:	4620      	mov	r0, r4
 801d042:	462b      	mov	r3, r5
 801d044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d048:	4718      	bx	r3
 801d04a:	bd70      	pop	{r4, r5, r6, pc}

0801d04c <_ZN8touchgfx3HAL12setMCUActiveEb>:
 801d04c:	b570      	push	{r4, r5, r6, lr}
 801d04e:	4605      	mov	r5, r0
 801d050:	460c      	mov	r4, r1
 801d052:	2003      	movs	r0, #3
 801d054:	b149      	cbz	r1, 801d06a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 801d056:	f7fe f853 	bl	801b100 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801d05a:	6928      	ldr	r0, [r5, #16]
 801d05c:	b168      	cbz	r0, 801d07a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801d05e:	6803      	ldr	r3, [r0, #0]
 801d060:	2101      	movs	r1, #1
 801d062:	695b      	ldr	r3, [r3, #20]
 801d064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d068:	4718      	bx	r3
 801d06a:	f7fe f854 	bl	801b116 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801d06e:	6928      	ldr	r0, [r5, #16]
 801d070:	b118      	cbz	r0, 801d07a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801d072:	6803      	ldr	r3, [r0, #0]
 801d074:	4621      	mov	r1, r4
 801d076:	695b      	ldr	r3, [r3, #20]
 801d078:	e7f4      	b.n	801d064 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801d07a:	bd70      	pop	{r4, r5, r6, pc}

0801d07c <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801d07c:	4770      	bx	lr

0801d07e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801d07e:	68c2      	ldr	r2, [r0, #12]
 801d080:	6900      	ldr	r0, [r0, #16]
 801d082:	1a13      	subs	r3, r2, r0
 801d084:	4258      	negs	r0, r3
 801d086:	4158      	adcs	r0, r3
 801d088:	4770      	bx	lr

0801d08a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801d08a:	68c2      	ldr	r2, [r0, #12]
 801d08c:	6903      	ldr	r3, [r0, #16]
 801d08e:	1a9b      	subs	r3, r3, r2
 801d090:	2b00      	cmp	r3, #0
 801d092:	bfdc      	itt	le
 801d094:	6882      	ldrle	r2, [r0, #8]
 801d096:	189b      	addle	r3, r3, r2
 801d098:	2b01      	cmp	r3, #1
 801d09a:	bfcc      	ite	gt
 801d09c:	2000      	movgt	r0, #0
 801d09e:	2001      	movle	r0, #1
 801d0a0:	4770      	bx	lr

0801d0a2 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801d0a2:	6902      	ldr	r2, [r0, #16]
 801d0a4:	6843      	ldr	r3, [r0, #4]
 801d0a6:	201c      	movs	r0, #28
 801d0a8:	fb00 3002 	mla	r0, r0, r2, r3
 801d0ac:	4770      	bx	lr

0801d0ae <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801d0ae:	6803      	ldr	r3, [r0, #0]
 801d0b0:	691b      	ldr	r3, [r3, #16]
 801d0b2:	4718      	bx	r3

0801d0b4 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801d0b4:	4770      	bx	lr

0801d0b6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801d0b6:	4770      	bx	lr

0801d0b8 <_ZN8touchgfx13DMA_Interface7executeEv>:
 801d0b8:	2301      	movs	r3, #1
 801d0ba:	b570      	push	{r4, r5, r6, lr}
 801d0bc:	7203      	strb	r3, [r0, #8]
 801d0be:	4604      	mov	r4, r0
 801d0c0:	6840      	ldr	r0, [r0, #4]
 801d0c2:	6803      	ldr	r3, [r0, #0]
 801d0c4:	699b      	ldr	r3, [r3, #24]
 801d0c6:	4798      	blx	r3
 801d0c8:	6803      	ldr	r3, [r0, #0]
 801d0ca:	4605      	mov	r5, r0
 801d0cc:	2b08      	cmp	r3, #8
 801d0ce:	d01e      	beq.n	801d10e <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 801d0d0:	d80b      	bhi.n	801d0ea <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801d0d2:	2b02      	cmp	r3, #2
 801d0d4:	d027      	beq.n	801d126 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801d0d6:	2b04      	cmp	r3, #4
 801d0d8:	d011      	beq.n	801d0fe <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801d0da:	2b01      	cmp	r3, #1
 801d0dc:	d028      	beq.n	801d130 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801d0de:	4b17      	ldr	r3, [pc, #92]	; (801d13c <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 801d0e0:	218d      	movs	r1, #141	; 0x8d
 801d0e2:	4a17      	ldr	r2, [pc, #92]	; (801d140 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 801d0e4:	4817      	ldr	r0, [pc, #92]	; (801d144 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 801d0e6:	f004 f867 	bl	80211b8 <__assert_func>
 801d0ea:	2b40      	cmp	r3, #64	; 0x40
 801d0ec:	d020      	beq.n	801d130 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801d0ee:	d801      	bhi.n	801d0f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801d0f0:	2b20      	cmp	r3, #32
 801d0f2:	e7f3      	b.n	801d0dc <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801d0f4:	2b80      	cmp	r3, #128	; 0x80
 801d0f6:	d01b      	beq.n	801d130 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801d0f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d0fc:	e7ee      	b.n	801d0dc <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801d0fe:	6823      	ldr	r3, [r4, #0]
 801d100:	7e01      	ldrb	r1, [r0, #24]
 801d102:	4620      	mov	r0, r4
 801d104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d106:	4798      	blx	r3
 801d108:	6823      	ldr	r3, [r4, #0]
 801d10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d10c:	e006      	b.n	801d11c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801d10e:	6823      	ldr	r3, [r4, #0]
 801d110:	7e01      	ldrb	r1, [r0, #24]
 801d112:	4620      	mov	r0, r4
 801d114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d116:	4798      	blx	r3
 801d118:	6823      	ldr	r3, [r4, #0]
 801d11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d11c:	4629      	mov	r1, r5
 801d11e:	4620      	mov	r0, r4
 801d120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d124:	4718      	bx	r3
 801d126:	6823      	ldr	r3, [r4, #0]
 801d128:	4620      	mov	r0, r4
 801d12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d12c:	4798      	blx	r3
 801d12e:	e7f3      	b.n	801d118 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 801d130:	6823      	ldr	r3, [r4, #0]
 801d132:	4620      	mov	r0, r4
 801d134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d136:	4798      	blx	r3
 801d138:	e7e6      	b.n	801d108 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801d13a:	bf00      	nop
 801d13c:	08025035 	.word	0x08025035
 801d140:	08025140 	.word	0x08025140
 801d144:	0802505a 	.word	0x0802505a

0801d148 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801d148:	b570      	push	{r4, r5, r6, lr}
 801d14a:	4604      	mov	r4, r0
 801d14c:	460e      	mov	r6, r1
 801d14e:	6860      	ldr	r0, [r4, #4]
 801d150:	6803      	ldr	r3, [r0, #0]
 801d152:	685b      	ldr	r3, [r3, #4]
 801d154:	4798      	blx	r3
 801d156:	2800      	cmp	r0, #0
 801d158:	d1f9      	bne.n	801d14e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801d15a:	4d0b      	ldr	r5, [pc, #44]	; (801d188 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 801d15c:	6828      	ldr	r0, [r5, #0]
 801d15e:	6803      	ldr	r3, [r0, #0]
 801d160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d162:	4798      	blx	r3
 801d164:	f7f0 ff3a 	bl	800dfdc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801d168:	6860      	ldr	r0, [r4, #4]
 801d16a:	4631      	mov	r1, r6
 801d16c:	6803      	ldr	r3, [r0, #0]
 801d16e:	689b      	ldr	r3, [r3, #8]
 801d170:	4798      	blx	r3
 801d172:	6823      	ldr	r3, [r4, #0]
 801d174:	4620      	mov	r0, r4
 801d176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d178:	4798      	blx	r3
 801d17a:	6828      	ldr	r0, [r5, #0]
 801d17c:	6803      	ldr	r3, [r0, #0]
 801d17e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d184:	4718      	bx	r3
 801d186:	bf00      	nop
 801d188:	2000a32c 	.word	0x2000a32c

0801d18c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801d18c:	b508      	push	{r3, lr}
 801d18e:	f7f0 ff09 	bl	800dfa4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801d192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801d196:	f7f0 bf13 	b.w	800dfc0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801d19a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801d19a:	b570      	push	{r4, r5, r6, lr}
 801d19c:	4604      	mov	r4, r0
 801d19e:	6840      	ldr	r0, [r0, #4]
 801d1a0:	6803      	ldr	r3, [r0, #0]
 801d1a2:	681b      	ldr	r3, [r3, #0]
 801d1a4:	4798      	blx	r3
 801d1a6:	4605      	mov	r5, r0
 801d1a8:	b908      	cbnz	r0, 801d1ae <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>
 801d1aa:	7a23      	ldrb	r3, [r4, #8]
 801d1ac:	b973      	cbnz	r3, 801d1cc <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x32>
 801d1ae:	6860      	ldr	r0, [r4, #4]
 801d1b0:	6803      	ldr	r3, [r0, #0]
 801d1b2:	681b      	ldr	r3, [r3, #0]
 801d1b4:	4798      	blx	r3
 801d1b6:	b928      	cbnz	r0, 801d1c4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x2a>
 801d1b8:	6823      	ldr	r3, [r4, #0]
 801d1ba:	4620      	mov	r0, r4
 801d1bc:	6a1b      	ldr	r3, [r3, #32]
 801d1be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d1c2:	4718      	bx	r3
 801d1c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d1c8:	f7f0 bf14 	b.w	800dff4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
 801d1cc:	6860      	ldr	r0, [r4, #4]
 801d1ce:	6803      	ldr	r3, [r0, #0]
 801d1d0:	695b      	ldr	r3, [r3, #20]
 801d1d2:	4798      	blx	r3
 801d1d4:	7225      	strb	r5, [r4, #8]
 801d1d6:	e7ea      	b.n	801d1ae <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>

0801d1d8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801d1d8:	b510      	push	{r4, lr}
 801d1da:	68c3      	ldr	r3, [r0, #12]
 801d1dc:	6902      	ldr	r2, [r0, #16]
 801d1de:	1ad2      	subs	r2, r2, r3
 801d1e0:	2a00      	cmp	r2, #0
 801d1e2:	bfdc      	itt	le
 801d1e4:	6884      	ldrle	r4, [r0, #8]
 801d1e6:	1912      	addle	r2, r2, r4
 801d1e8:	2a01      	cmp	r2, #1
 801d1ea:	dd17      	ble.n	801d21c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x44>
 801d1ec:	6842      	ldr	r2, [r0, #4]
 801d1ee:	241c      	movs	r4, #28
 801d1f0:	fb04 2303 	mla	r3, r4, r3, r2
 801d1f4:	f101 0218 	add.w	r2, r1, #24
 801d1f8:	f851 4b04 	ldr.w	r4, [r1], #4
 801d1fc:	4291      	cmp	r1, r2
 801d1fe:	f843 4b04 	str.w	r4, [r3], #4
 801d202:	d1f9      	bne.n	801d1f8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801d204:	780a      	ldrb	r2, [r1, #0]
 801d206:	701a      	strb	r2, [r3, #0]
 801d208:	68c3      	ldr	r3, [r0, #12]
 801d20a:	6882      	ldr	r2, [r0, #8]
 801d20c:	f3bf 8f5b 	dmb	ish
 801d210:	3301      	adds	r3, #1
 801d212:	4293      	cmp	r3, r2
 801d214:	bfa8      	it	ge
 801d216:	1a9b      	subge	r3, r3, r2
 801d218:	60c3      	str	r3, [r0, #12]
 801d21a:	bd10      	pop	{r4, pc}
 801d21c:	4b02      	ldr	r3, [pc, #8]	; (801d228 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 801d21e:	213b      	movs	r1, #59	; 0x3b
 801d220:	4a02      	ldr	r2, [pc, #8]	; (801d22c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801d222:	4803      	ldr	r0, [pc, #12]	; (801d230 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801d224:	f003 ffc8 	bl	80211b8 <__assert_func>
 801d228:	08025080 	.word	0x08025080
 801d22c:	08025170 	.word	0x08025170
 801d230:	0802505a 	.word	0x0802505a

0801d234 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801d234:	b510      	push	{r4, lr}
 801d236:	6803      	ldr	r3, [r0, #0]
 801d238:	4604      	mov	r4, r0
 801d23a:	681b      	ldr	r3, [r3, #0]
 801d23c:	4798      	blx	r3
 801d23e:	b128      	cbz	r0, 801d24c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801d240:	4b07      	ldr	r3, [pc, #28]	; (801d260 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801d242:	2141      	movs	r1, #65	; 0x41
 801d244:	4a07      	ldr	r2, [pc, #28]	; (801d264 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801d246:	4808      	ldr	r0, [pc, #32]	; (801d268 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801d248:	f003 ffb6 	bl	80211b8 <__assert_func>
 801d24c:	6923      	ldr	r3, [r4, #16]
 801d24e:	68a2      	ldr	r2, [r4, #8]
 801d250:	f3bf 8f5b 	dmb	ish
 801d254:	3301      	adds	r3, #1
 801d256:	4293      	cmp	r3, r2
 801d258:	bfa8      	it	ge
 801d25a:	1a9b      	subge	r3, r3, r2
 801d25c:	6123      	str	r3, [r4, #16]
 801d25e:	bd10      	pop	{r4, pc}
 801d260:	080250a3 	.word	0x080250a3
 801d264:	080251be 	.word	0x080251be
 801d268:	0802505a 	.word	0x0802505a

0801d26c <_ZN8touchgfx13DMA_Interface5startEv>:
 801d26c:	b510      	push	{r4, lr}
 801d26e:	4604      	mov	r4, r0
 801d270:	6840      	ldr	r0, [r0, #4]
 801d272:	6803      	ldr	r3, [r0, #0]
 801d274:	681b      	ldr	r3, [r3, #0]
 801d276:	4798      	blx	r3
 801d278:	b948      	cbnz	r0, 801d28e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801d27a:	7a63      	ldrb	r3, [r4, #9]
 801d27c:	b13b      	cbz	r3, 801d28e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801d27e:	7a23      	ldrb	r3, [r4, #8]
 801d280:	b92b      	cbnz	r3, 801d28e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801d282:	6823      	ldr	r3, [r4, #0]
 801d284:	4620      	mov	r0, r4
 801d286:	6a1b      	ldr	r3, [r3, #32]
 801d288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d28c:	4718      	bx	r3
 801d28e:	bd10      	pop	{r4, pc}

0801d290 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801d290:	b510      	push	{r4, lr}
 801d292:	6082      	str	r2, [r0, #8]
 801d294:	2200      	movs	r2, #0
 801d296:	4c03      	ldr	r4, [pc, #12]	; (801d2a4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801d298:	6041      	str	r1, [r0, #4]
 801d29a:	6004      	str	r4, [r0, #0]
 801d29c:	60c2      	str	r2, [r0, #12]
 801d29e:	6102      	str	r2, [r0, #16]
 801d2a0:	bd10      	pop	{r4, pc}
 801d2a2:	bf00      	nop
 801d2a4:	08025124 	.word	0x08025124

0801d2a8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801d2a8:	6840      	ldr	r0, [r0, #4]
 801d2aa:	6803      	ldr	r3, [r0, #0]
 801d2ac:	681b      	ldr	r3, [r3, #0]
 801d2ae:	4718      	bx	r3

0801d2b0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801d2b0:	b538      	push	{r3, r4, r5, lr}
 801d2b2:	4604      	mov	r4, r0
 801d2b4:	2500      	movs	r5, #0
 801d2b6:	9804      	ldr	r0, [sp, #16]
 801d2b8:	7223      	strb	r3, [r4, #8]
 801d2ba:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d2be:	8025      	strh	r5, [r4, #0]
 801d2c0:	60e5      	str	r5, [r4, #12]
 801d2c2:	82e5      	strh	r5, [r4, #22]
 801d2c4:	8325      	strh	r5, [r4, #24]
 801d2c6:	8365      	strh	r5, [r4, #26]
 801d2c8:	83a5      	strh	r5, [r4, #28]
 801d2ca:	83e5      	strh	r5, [r4, #30]
 801d2cc:	8425      	strh	r5, [r4, #32]
 801d2ce:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 801d2d2:	6061      	str	r1, [r4, #4]
 801d2d4:	7263      	strb	r3, [r4, #9]
 801d2d6:	6120      	str	r0, [r4, #16]
 801d2d8:	82a2      	strh	r2, [r4, #20]
 801d2da:	6803      	ldr	r3, [r0, #0]
 801d2dc:	695b      	ldr	r3, [r3, #20]
 801d2de:	4798      	blx	r3
 801d2e0:	4605      	mov	r5, r0
 801d2e2:	b330      	cbz	r0, 801d332 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x82>
 801d2e4:	6920      	ldr	r0, [r4, #16]
 801d2e6:	4629      	mov	r1, r5
 801d2e8:	6803      	ldr	r3, [r0, #0]
 801d2ea:	68db      	ldr	r3, [r3, #12]
 801d2ec:	4798      	blx	r3
 801d2ee:	60e0      	str	r0, [r4, #12]
 801d2f0:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801d2f4:	4602      	mov	r2, r0
 801d2f6:	7a81      	ldrb	r1, [r0, #10]
 801d2f8:	2b00      	cmp	r3, #0
 801d2fa:	bfb4      	ite	lt
 801d2fc:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801d300:	2300      	movge	r3, #0
 801d302:	430b      	orrs	r3, r1
 801d304:	8423      	strh	r3, [r4, #32]
 801d306:	7a63      	ldrb	r3, [r4, #9]
 801d308:	2b04      	cmp	r3, #4
 801d30a:	d112      	bne.n	801d332 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x82>
 801d30c:	6920      	ldr	r0, [r4, #16]
 801d30e:	4629      	mov	r1, r5
 801d310:	6803      	ldr	r3, [r0, #0]
 801d312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d314:	4798      	blx	r3
 801d316:	68e2      	ldr	r2, [r4, #12]
 801d318:	f992 300d 	ldrsb.w	r3, [r2, #13]
 801d31c:	7a91      	ldrb	r1, [r2, #10]
 801d31e:	2b00      	cmp	r3, #0
 801d320:	bfb4      	ite	lt
 801d322:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801d326:	2300      	movge	r3, #0
 801d328:	430b      	orrs	r3, r1
 801d32a:	4418      	add	r0, r3
 801d32c:	8c23      	ldrh	r3, [r4, #32]
 801d32e:	4418      	add	r0, r3
 801d330:	8420      	strh	r0, [r4, #32]
 801d332:	4620      	mov	r0, r4
 801d334:	bd38      	pop	{r3, r4, r5, pc}

0801d336 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801d336:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d33a:	2600      	movs	r6, #0
 801d33c:	4682      	mov	sl, r0
 801d33e:	460f      	mov	r7, r1
 801d340:	4693      	mov	fp, r2
 801d342:	46b1      	mov	r9, r6
 801d344:	46b0      	mov	r8, r6
 801d346:	9301      	str	r3, [sp, #4]
 801d348:	455e      	cmp	r6, fp
 801d34a:	da26      	bge.n	801d39a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 801d34c:	9901      	ldr	r1, [sp, #4]
 801d34e:	4650      	mov	r0, sl
 801d350:	f001 ff38 	bl	801f1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d354:	4605      	mov	r5, r0
 801d356:	b300      	cbz	r0, 801d39a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 801d358:	280a      	cmp	r0, #10
 801d35a:	d01e      	beq.n	801d39a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 801d35c:	683b      	ldr	r3, [r7, #0]
 801d35e:	4601      	mov	r1, r0
 801d360:	4638      	mov	r0, r7
 801d362:	68db      	ldr	r3, [r3, #12]
 801d364:	4798      	blx	r3
 801d366:	4602      	mov	r2, r0
 801d368:	b1a0      	cbz	r0, 801d394 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5e>
 801d36a:	7a83      	ldrb	r3, [r0, #10]
 801d36c:	4649      	mov	r1, r9
 801d36e:	8885      	ldrh	r5, [r0, #4]
 801d370:	9300      	str	r3, [sp, #0]
 801d372:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801d376:	4638      	mov	r0, r7
 801d378:	2b00      	cmp	r3, #0
 801d37a:	683b      	ldr	r3, [r7, #0]
 801d37c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d37e:	bfb4      	ite	lt
 801d380:	f44f 7480 	movlt.w	r4, #256	; 0x100
 801d384:	2400      	movge	r4, #0
 801d386:	4798      	blx	r3
 801d388:	9b00      	ldr	r3, [sp, #0]
 801d38a:	431c      	orrs	r4, r3
 801d38c:	4404      	add	r4, r0
 801d38e:	44a0      	add	r8, r4
 801d390:	fa1f f888 	uxth.w	r8, r8
 801d394:	3601      	adds	r6, #1
 801d396:	46a9      	mov	r9, r5
 801d398:	e7d6      	b.n	801d348 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x12>
 801d39a:	4640      	mov	r0, r8
 801d39c:	b003      	add	sp, #12
 801d39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d3a2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801d3a2:	2a02      	cmp	r2, #2
 801d3a4:	b530      	push	{r4, r5, lr}
 801d3a6:	d011      	beq.n	801d3cc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801d3a8:	2a03      	cmp	r2, #3
 801d3aa:	d01c      	beq.n	801d3e6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801d3ac:	2a01      	cmp	r2, #1
 801d3ae:	d128      	bne.n	801d402 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x60>
 801d3b0:	888b      	ldrh	r3, [r1, #4]
 801d3b2:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801d3b6:	8801      	ldrh	r1, [r0, #0]
 801d3b8:	1a9b      	subs	r3, r3, r2
 801d3ba:	8844      	ldrh	r4, [r0, #2]
 801d3bc:	1a5b      	subs	r3, r3, r1
 801d3be:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801d3c2:	8004      	strh	r4, [r0, #0]
 801d3c4:	8043      	strh	r3, [r0, #2]
 801d3c6:	8081      	strh	r1, [r0, #4]
 801d3c8:	80c2      	strh	r2, [r0, #6]
 801d3ca:	bd30      	pop	{r4, r5, pc}
 801d3cc:	88cb      	ldrh	r3, [r1, #6]
 801d3ce:	88c2      	ldrh	r2, [r0, #6]
 801d3d0:	1a9b      	subs	r3, r3, r2
 801d3d2:	8842      	ldrh	r2, [r0, #2]
 801d3d4:	1a9b      	subs	r3, r3, r2
 801d3d6:	888a      	ldrh	r2, [r1, #4]
 801d3d8:	8881      	ldrh	r1, [r0, #4]
 801d3da:	8043      	strh	r3, [r0, #2]
 801d3dc:	1a52      	subs	r2, r2, r1
 801d3de:	8801      	ldrh	r1, [r0, #0]
 801d3e0:	1a52      	subs	r2, r2, r1
 801d3e2:	8002      	strh	r2, [r0, #0]
 801d3e4:	bd30      	pop	{r4, r5, pc}
 801d3e6:	88cb      	ldrh	r3, [r1, #6]
 801d3e8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801d3ec:	8841      	ldrh	r1, [r0, #2]
 801d3ee:	1a9b      	subs	r3, r3, r2
 801d3f0:	f9b0 5000 	ldrsh.w	r5, [r0]
 801d3f4:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801d3f8:	1a5b      	subs	r3, r3, r1
 801d3fa:	8045      	strh	r5, [r0, #2]
 801d3fc:	8082      	strh	r2, [r0, #4]
 801d3fe:	8003      	strh	r3, [r0, #0]
 801d400:	80c4      	strh	r4, [r0, #6]
 801d402:	bd30      	pop	{r4, r5, pc}

0801d404 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>:
 801d404:	b570      	push	{r4, r5, r6, lr}
 801d406:	b086      	sub	sp, #24
 801d408:	ad02      	add	r5, sp, #8
 801d40a:	e885 0006 	stmia.w	r5, {r1, r2}
 801d40e:	461a      	mov	r2, r3
 801d410:	ab0c      	add	r3, sp, #48	; 0x30
 801d412:	9305      	str	r3, [sp, #20]
 801d414:	4b0a      	ldr	r3, [pc, #40]	; (801d440 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz+0x3c>)
 801d416:	685c      	ldr	r4, [r3, #4]
 801d418:	f014 0f01 	tst.w	r4, #1
 801d41c:	ea4f 0464 	mov.w	r4, r4, asr #1
 801d420:	bf1c      	itt	ne
 801d422:	681b      	ldrne	r3, [r3, #0]
 801d424:	5901      	ldrne	r1, [r0, r4]
 801d426:	4420      	add	r0, r4
 801d428:	bf0c      	ite	eq
 801d42a:	681e      	ldreq	r6, [r3, #0]
 801d42c:	58ce      	ldrne	r6, [r1, r3]
 801d42e:	4629      	mov	r1, r5
 801d430:	9b05      	ldr	r3, [sp, #20]
 801d432:	9301      	str	r3, [sp, #4]
 801d434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d436:	9300      	str	r3, [sp, #0]
 801d438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d43a:	47b0      	blx	r6
 801d43c:	b006      	add	sp, #24
 801d43e:	bd70      	pop	{r4, r5, r6, pc}
 801d440:	20000040 	.word	0x20000040

0801d444 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801d444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d448:	b097      	sub	sp, #92	; 0x5c
 801d44a:	9112      	str	r1, [sp, #72]	; 0x48
 801d44c:	9313      	str	r3, [sp, #76]	; 0x4c
 801d44e:	9921      	ldr	r1, [sp, #132]	; 0x84
 801d450:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d452:	8809      	ldrh	r1, [r1, #0]
 801d454:	889b      	ldrh	r3, [r3, #4]
 801d456:	9f22      	ldr	r7, [sp, #136]	; 0x88
 801d458:	440b      	add	r3, r1
 801d45a:	920f      	str	r2, [sp, #60]	; 0x3c
 801d45c:	f89d 2098 	ldrb.w	r2, [sp, #152]	; 0x98
 801d460:	b21b      	sxth	r3, r3
 801d462:	900e      	str	r0, [sp, #56]	; 0x38
 801d464:	f89d a08c 	ldrb.w	sl, [sp, #140]	; 0x8c
 801d468:	930d      	str	r3, [sp, #52]	; 0x34
 801d46a:	683b      	ldr	r3, [r7, #0]
 801d46c:	7a59      	ldrb	r1, [r3, #9]
 801d46e:	7a1b      	ldrb	r3, [r3, #8]
 801d470:	9111      	str	r1, [sp, #68]	; 0x44
 801d472:	9310      	str	r3, [sp, #64]	; 0x40
 801d474:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d476:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d47a:	2a00      	cmp	r2, #0
 801d47c:	d04b      	beq.n	801d516 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd2>
 801d47e:	7c3b      	ldrb	r3, [r7, #16]
 801d480:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801d482:	2b04      	cmp	r3, #4
 801d484:	bf0c      	ite	eq
 801d486:	2302      	moveq	r3, #2
 801d488:	2301      	movne	r3, #1
 801d48a:	4413      	add	r3, r2
 801d48c:	2500      	movs	r5, #0
 801d48e:	930c      	str	r3, [sp, #48]	; 0x30
 801d490:	46a9      	mov	r9, r5
 801d492:	462c      	mov	r4, r5
 801d494:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d496:	4599      	cmp	r9, r3
 801d498:	da6a      	bge.n	801d570 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12c>
 801d49a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d49c:	4599      	cmp	r9, r3
 801d49e:	db3c      	blt.n	801d51a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801d4a0:	6838      	ldr	r0, [r7, #0]
 801d4a2:	6803      	ldr	r3, [r0, #0]
 801d4a4:	695b      	ldr	r3, [r3, #20]
 801d4a6:	4798      	blx	r3
 801d4a8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801d4ac:	4680      	mov	r8, r0
 801d4ae:	4298      	cmp	r0, r3
 801d4b0:	d045      	beq.n	801d53e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801d4b2:	f242 030b 	movw	r3, #8203	; 0x200b
 801d4b6:	4298      	cmp	r0, r3
 801d4b8:	d041      	beq.n	801d53e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801d4ba:	2800      	cmp	r0, #0
 801d4bc:	d057      	beq.n	801d56e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801d4be:	280a      	cmp	r0, #10
 801d4c0:	d055      	beq.n	801d56e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801d4c2:	6838      	ldr	r0, [r7, #0]
 801d4c4:	aa15      	add	r2, sp, #84	; 0x54
 801d4c6:	4641      	mov	r1, r8
 801d4c8:	6803      	ldr	r3, [r0, #0]
 801d4ca:	f8d3 b008 	ldr.w	fp, [r3, #8]
 801d4ce:	f10d 0353 	add.w	r3, sp, #83	; 0x53
 801d4d2:	47d8      	blx	fp
 801d4d4:	4683      	mov	fp, r0
 801d4d6:	b328      	cbz	r0, 801d524 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xe0>
 801d4d8:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 801d4dc:	f1ba 0f00 	cmp.w	sl, #0
 801d4e0:	d031      	beq.n	801d546 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x102>
 801d4e2:	f99b 200d 	ldrsb.w	r2, [fp, #13]
 801d4e6:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801d4ea:	2a00      	cmp	r2, #0
 801d4ec:	bfb4      	ite	lt
 801d4ee:	f44f 7580 	movlt.w	r5, #256	; 0x100
 801d4f2:	2500      	movge	r5, #0
 801d4f4:	f1ba 0f01 	cmp.w	sl, #1
 801d4f8:	ea45 0503 	orr.w	r5, r5, r3
 801d4fc:	d125      	bne.n	801d54a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x106>
 801d4fe:	1b76      	subs	r6, r6, r5
 801d500:	2c00      	cmp	r4, #0
 801d502:	d147      	bne.n	801d594 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801d504:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d506:	19ab      	adds	r3, r5, r6
 801d508:	4413      	add	r3, r2
 801d50a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d50c:	f9b2 2000 	ldrsh.w	r2, [r2]
 801d510:	4293      	cmp	r3, r2
 801d512:	da4a      	bge.n	801d5aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 801d514:	e02b      	b.n	801d56e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801d516:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d518:	e7b8      	b.n	801d48c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801d51a:	4651      	mov	r1, sl
 801d51c:	9824      	ldr	r0, [sp, #144]	; 0x90
 801d51e:	f001 fe51 	bl	801f1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d522:	e7c1      	b.n	801d4a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x64>
 801d524:	6838      	ldr	r0, [r7, #0]
 801d526:	6803      	ldr	r3, [r0, #0]
 801d528:	691b      	ldr	r3, [r3, #16]
 801d52a:	4798      	blx	r3
 801d52c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801d530:	4298      	cmp	r0, r3
 801d532:	d004      	beq.n	801d53e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801d534:	f242 030b 	movw	r3, #8203	; 0x200b
 801d538:	4298      	cmp	r0, r3
 801d53a:	bf18      	it	ne
 801d53c:	2500      	movne	r5, #0
 801d53e:	f109 0901 	add.w	r9, r9, #1
 801d542:	4644      	mov	r4, r8
 801d544:	e7a6      	b.n	801d494 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 801d546:	442e      	add	r6, r5
 801d548:	e7cb      	b.n	801d4e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x9e>
 801d54a:	2c00      	cmp	r4, #0
 801d54c:	f000 80a6 	beq.w	801d69c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 801d550:	f1ba 0f00 	cmp.w	sl, #0
 801d554:	d11e      	bne.n	801d594 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801d556:	6838      	ldr	r0, [r7, #0]
 801d558:	465a      	mov	r2, fp
 801d55a:	4621      	mov	r1, r4
 801d55c:	6803      	ldr	r3, [r0, #0]
 801d55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d560:	4798      	blx	r3
 801d562:	4406      	add	r6, r0
 801d564:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d566:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d568:	1af3      	subs	r3, r6, r3
 801d56a:	4293      	cmp	r3, r2
 801d56c:	dd1d      	ble.n	801d5aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 801d56e:	4644      	mov	r4, r8
 801d570:	2c00      	cmp	r4, #0
 801d572:	f000 8091 	beq.w	801d698 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 801d576:	2c0a      	cmp	r4, #10
 801d578:	f000 8087 	beq.w	801d68a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x246>
 801d57c:	f109 0901 	add.w	r9, r9, #1
 801d580:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d582:	4599      	cmp	r9, r3
 801d584:	f280 8082 	bge.w	801d68c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x248>
 801d588:	4651      	mov	r1, sl
 801d58a:	9824      	ldr	r0, [sp, #144]	; 0x90
 801d58c:	f001 fe1a 	bl	801f1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d590:	4604      	mov	r4, r0
 801d592:	e7ed      	b.n	801d570 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12c>
 801d594:	6838      	ldr	r0, [r7, #0]
 801d596:	465a      	mov	r2, fp
 801d598:	4621      	mov	r1, r4
 801d59a:	6803      	ldr	r3, [r0, #0]
 801d59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d59e:	4798      	blx	r3
 801d5a0:	f1ba 0f01 	cmp.w	sl, #1
 801d5a4:	eba6 0600 	sub.w	r6, r6, r0
 801d5a8:	d0ac      	beq.n	801d504 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xc0>
 801d5aa:	f89b 300d 	ldrb.w	r3, [fp, #13]
 801d5ae:	f99b 2009 	ldrsb.w	r2, [fp, #9]
 801d5b2:	f013 0f08 	tst.w	r3, #8
 801d5b6:	f89b 1006 	ldrb.w	r1, [fp, #6]
 801d5ba:	4432      	add	r2, r6
 801d5bc:	9821      	ldr	r0, [sp, #132]	; 0x84
 801d5be:	bf14      	ite	ne
 801d5c0:	f44f 7380 	movne.w	r3, #256	; 0x100
 801d5c4:	2300      	moveq	r3, #0
 801d5c6:	f9b0 4000 	ldrsh.w	r4, [r0]
 801d5ca:	430b      	orrs	r3, r1
 801d5cc:	4413      	add	r3, r2
 801d5ce:	42a3      	cmp	r3, r4
 801d5d0:	dbb5      	blt.n	801d53e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801d5d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d5d4:	429a      	cmp	r2, r3
 801d5d6:	dab2      	bge.n	801d53e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801d5d8:	6838      	ldr	r0, [r7, #0]
 801d5da:	42b4      	cmp	r4, r6
 801d5dc:	6803      	ldr	r3, [r0, #0]
 801d5de:	bfcc      	ite	gt
 801d5e0:	1ba4      	subgt	r4, r4, r6
 801d5e2:	2400      	movle	r4, #0
 801d5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d5e6:	bfc8      	it	gt
 801d5e8:	b2a4      	uxthgt	r4, r4
 801d5ea:	4798      	blx	r3
 801d5ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d5ee:	4a2e      	ldr	r2, [pc, #184]	; (801d6a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x264>)
 801d5f0:	4418      	add	r0, r3
 801d5f2:	f89b 300d 	ldrb.w	r3, [fp, #13]
 801d5f6:	f89b e008 	ldrb.w	lr, [fp, #8]
 801d5fa:	f013 0f40 	tst.w	r3, #64	; 0x40
 801d5fe:	bf14      	ite	ne
 801d600:	4611      	movne	r1, r2
 801d602:	2100      	moveq	r1, #0
 801d604:	f013 0f20 	tst.w	r3, #32
 801d608:	ea41 010e 	orr.w	r1, r1, lr
 801d60c:	bf14      	ite	ne
 801d60e:	f44f 7280 	movne.w	r2, #256	; 0x100
 801d612:	2200      	moveq	r2, #0
 801d614:	430a      	orrs	r2, r1
 801d616:	9921      	ldr	r1, [sp, #132]	; 0x84
 801d618:	1a80      	subs	r0, r0, r2
 801d61a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801d61e:	b280      	uxth	r0, r0
 801d620:	b202      	sxth	r2, r0
 801d622:	428a      	cmp	r2, r1
 801d624:	da2f      	bge.n	801d686 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x242>
 801d626:	f013 0f10 	tst.w	r3, #16
 801d62a:	f89b e007 	ldrb.w	lr, [fp, #7]
 801d62e:	bf14      	ite	ne
 801d630:	f44f 7380 	movne.w	r3, #256	; 0x100
 801d634:	2300      	moveq	r3, #0
 801d636:	ea43 030e 	orr.w	r3, r3, lr
 801d63a:	441a      	add	r2, r3
 801d63c:	4291      	cmp	r1, r2
 801d63e:	f73f af7e 	bgt.w	801d53e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801d642:	1a08      	subs	r0, r1, r0
 801d644:	460a      	mov	r2, r1
 801d646:	b280      	uxth	r0, r0
 801d648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d64a:	6819      	ldr	r1, [r3, #0]
 801d64c:	79bb      	ldrb	r3, [r7, #6]
 801d64e:	930a      	str	r3, [sp, #40]	; 0x28
 801d650:	7bbb      	ldrb	r3, [r7, #14]
 801d652:	9309      	str	r3, [sp, #36]	; 0x24
 801d654:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 801d658:	9308      	str	r3, [sp, #32]
 801d65a:	68bb      	ldr	r3, [r7, #8]
 801d65c:	9402      	str	r4, [sp, #8]
 801d65e:	4434      	add	r4, r6
 801d660:	9307      	str	r3, [sp, #28]
 801d662:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d664:	b224      	sxth	r4, r4
 801d666:	9003      	str	r0, [sp, #12]
 801d668:	9306      	str	r3, [sp, #24]
 801d66a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d66c:	f8cd b014 	str.w	fp, [sp, #20]
 801d670:	9304      	str	r3, [sp, #16]
 801d672:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d674:	9201      	str	r2, [sp, #4]
 801d676:	9400      	str	r4, [sp, #0]
 801d678:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d67a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d67c:	681a      	ldr	r2, [r3, #0]
 801d67e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d680:	685b      	ldr	r3, [r3, #4]
 801d682:	47a0      	blx	r4
 801d684:	e75b      	b.n	801d53e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801d686:	2000      	movs	r0, #0
 801d688:	e7de      	b.n	801d648 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x204>
 801d68a:	240a      	movs	r4, #10
 801d68c:	fab4 f084 	clz	r0, r4
 801d690:	0940      	lsrs	r0, r0, #5
 801d692:	b017      	add	sp, #92	; 0x5c
 801d694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d698:	2400      	movs	r4, #0
 801d69a:	e7f7      	b.n	801d68c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x248>
 801d69c:	f1ba 0f00 	cmp.w	sl, #0
 801d6a0:	f43f af60 	beq.w	801d564 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x120>
 801d6a4:	e781      	b.n	801d5aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 801d6a6:	bf00      	nop
 801d6a8:	fffffe00 	.word	0xfffffe00

0801d6ac <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801d6ac:	b530      	push	{r4, r5, lr}
 801d6ae:	8ac4      	ldrh	r4, [r0, #22]
 801d6b0:	8b45      	ldrh	r5, [r0, #26]
 801d6b2:	8343      	strh	r3, [r0, #26]
 801d6b4:	442c      	add	r4, r5
 801d6b6:	1ae4      	subs	r4, r4, r3
 801d6b8:	8b83      	ldrh	r3, [r0, #28]
 801d6ba:	82c4      	strh	r4, [r0, #22]
 801d6bc:	8b04      	ldrh	r4, [r0, #24]
 801d6be:	4422      	add	r2, r4
 801d6c0:	440c      	add	r4, r1
 801d6c2:	1a59      	subs	r1, r3, r1
 801d6c4:	83c2      	strh	r2, [r0, #30]
 801d6c6:	8304      	strh	r4, [r0, #24]
 801d6c8:	8381      	strh	r1, [r0, #28]
 801d6ca:	bd30      	pop	{r4, r5, pc}

0801d6cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801d6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6d0:	f890 b009 	ldrb.w	fp, [r0, #9]
 801d6d4:	b085      	sub	sp, #20
 801d6d6:	4604      	mov	r4, r0
 801d6d8:	460f      	mov	r7, r1
 801d6da:	f1ab 0303 	sub.w	r3, fp, #3
 801d6de:	b331      	cbz	r1, 801d72e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x62>
 801d6e0:	2b01      	cmp	r3, #1
 801d6e2:	d922      	bls.n	801d72a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 801d6e4:	f10b 32ff 	add.w	r2, fp, #4294967295
 801d6e8:	f1d2 0a00 	rsbs	sl, r2, #0
 801d6ec:	eb4a 0a02 	adc.w	sl, sl, r2
 801d6f0:	f1ab 0302 	sub.w	r3, fp, #2
 801d6f4:	2500      	movs	r5, #0
 801d6f6:	f1d3 0b00 	rsbs	fp, r3, #0
 801d6fa:	9501      	str	r5, [sp, #4]
 801d6fc:	eb4b 0b03 	adc.w	fp, fp, r3
 801d700:	2600      	movs	r6, #0
 801d702:	82e6      	strh	r6, [r4, #22]
 801d704:	8326      	strh	r6, [r4, #24]
 801d706:	7a21      	ldrb	r1, [r4, #8]
 801d708:	6860      	ldr	r0, [r4, #4]
 801d70a:	f8b4 9000 	ldrh.w	r9, [r4]
 801d70e:	f001 fd59 	bl	801f1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d712:	4601      	mov	r1, r0
 801d714:	8020      	strh	r0, [r4, #0]
 801d716:	b9c8      	cbnz	r0, 801d74c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x80>
 801d718:	8ba2      	ldrh	r2, [r4, #28]
 801d71a:	2300      	movs	r3, #0
 801d71c:	4611      	mov	r1, r2
 801d71e:	4620      	mov	r0, r4
 801d720:	b005      	add	sp, #20
 801d722:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d726:	f7ff bfc1 	b.w	801d6ac <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801d72a:	468a      	mov	sl, r1
 801d72c:	e7e0      	b.n	801d6f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x24>
 801d72e:	2b01      	cmp	r3, #1
 801d730:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d734:	468a      	mov	sl, r1
 801d736:	bf8c      	ite	hi
 801d738:	2300      	movhi	r3, #0
 801d73a:	2301      	movls	r3, #1
 801d73c:	f1bb 0f01 	cmp.w	fp, #1
 801d740:	468b      	mov	fp, r1
 801d742:	9301      	str	r3, [sp, #4]
 801d744:	bf8c      	ite	hi
 801d746:	2500      	movhi	r5, #0
 801d748:	2501      	movls	r5, #1
 801d74a:	e7d9      	b.n	801d700 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x34>
 801d74c:	8b63      	ldrh	r3, [r4, #26]
 801d74e:	280a      	cmp	r0, #10
 801d750:	f103 0301 	add.w	r3, r3, #1
 801d754:	8363      	strh	r3, [r4, #26]
 801d756:	d0df      	beq.n	801d718 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 801d758:	6920      	ldr	r0, [r4, #16]
 801d75a:	6803      	ldr	r3, [r0, #0]
 801d75c:	68db      	ldr	r3, [r3, #12]
 801d75e:	4798      	blx	r3
 801d760:	4602      	mov	r2, r0
 801d762:	2800      	cmp	r0, #0
 801d764:	d0cf      	beq.n	801d706 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801d766:	8883      	ldrh	r3, [r0, #4]
 801d768:	f8b4 801c 	ldrh.w	r8, [r4, #28]
 801d76c:	2b20      	cmp	r3, #32
 801d76e:	8023      	strh	r3, [r4, #0]
 801d770:	d103      	bne.n	801d77a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xae>
 801d772:	f1b9 0f20 	cmp.w	r9, #32
 801d776:	bf18      	it	ne
 801d778:	4646      	movne	r6, r8
 801d77a:	7a93      	ldrb	r3, [r2, #10]
 801d77c:	4649      	mov	r1, r9
 801d77e:	6920      	ldr	r0, [r4, #16]
 801d780:	9302      	str	r3, [sp, #8]
 801d782:	f992 300d 	ldrsb.w	r3, [r2, #13]
 801d786:	2b00      	cmp	r3, #0
 801d788:	bfb4      	ite	lt
 801d78a:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801d78e:	2300      	movge	r3, #0
 801d790:	9303      	str	r3, [sp, #12]
 801d792:	6803      	ldr	r3, [r0, #0]
 801d794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d796:	4798      	blx	r3
 801d798:	9b03      	ldr	r3, [sp, #12]
 801d79a:	9a02      	ldr	r2, [sp, #8]
 801d79c:	8aa1      	ldrh	r1, [r4, #20]
 801d79e:	431a      	orrs	r2, r3
 801d7a0:	8b23      	ldrh	r3, [r4, #24]
 801d7a2:	4402      	add	r2, r0
 801d7a4:	8ba0      	ldrh	r0, [r4, #28]
 801d7a6:	4402      	add	r2, r0
 801d7a8:	b292      	uxth	r2, r2
 801d7aa:	83a2      	strh	r2, [r4, #28]
 801d7ac:	4413      	add	r3, r2
 801d7ae:	b327      	cbz	r7, 801d7fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12e>
 801d7b0:	f1ba 0f00 	cmp.w	sl, #0
 801d7b4:	d105      	bne.n	801d7c2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf6>
 801d7b6:	f1bb 0f00 	cmp.w	fp, #0
 801d7ba:	d00f      	beq.n	801d7dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x110>
 801d7bc:	8820      	ldrh	r0, [r4, #0]
 801d7be:	2820      	cmp	r0, #32
 801d7c0:	d10c      	bne.n	801d7dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x110>
 801d7c2:	8c20      	ldrh	r0, [r4, #32]
 801d7c4:	4418      	add	r0, r3
 801d7c6:	4281      	cmp	r1, r0
 801d7c8:	da02      	bge.n	801d7d0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x104>
 801d7ca:	8ae0      	ldrh	r0, [r4, #22]
 801d7cc:	2800      	cmp	r0, #0
 801d7ce:	d13a      	bne.n	801d846 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x17a>
 801d7d0:	2300      	movs	r3, #0
 801d7d2:	4611      	mov	r1, r2
 801d7d4:	4620      	mov	r0, r4
 801d7d6:	f7ff ff69 	bl	801d6ac <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801d7da:	e794      	b.n	801d706 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801d7dc:	428b      	cmp	r3, r1
 801d7de:	dd92      	ble.n	801d706 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801d7e0:	8ae3      	ldrh	r3, [r4, #22]
 801d7e2:	2b00      	cmp	r3, #0
 801d7e4:	d08f      	beq.n	801d706 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801d7e6:	2301      	movs	r3, #1
 801d7e8:	8c22      	ldrh	r2, [r4, #32]
 801d7ea:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801d7ee:	8be3      	ldrh	r3, [r4, #30]
 801d7f0:	4413      	add	r3, r2
 801d7f2:	83e3      	strh	r3, [r4, #30]
 801d7f4:	b005      	add	sp, #20
 801d7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7fa:	428b      	cmp	r3, r1
 801d7fc:	dd17      	ble.n	801d82e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x162>
 801d7fe:	9b01      	ldr	r3, [sp, #4]
 801d800:	b113      	cbz	r3, 801d808 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x13c>
 801d802:	2301      	movs	r3, #1
 801d804:	4642      	mov	r2, r8
 801d806:	e789      	b.n	801d71c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 801d808:	2d00      	cmp	r5, #0
 801d80a:	f43f af7c 	beq.w	801d706 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801d80e:	8823      	ldrh	r3, [r4, #0]
 801d810:	2b20      	cmp	r3, #32
 801d812:	f43f af78 	beq.w	801d706 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801d816:	f1b9 0f20 	cmp.w	r9, #32
 801d81a:	d103      	bne.n	801d824 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x158>
 801d81c:	2301      	movs	r3, #1
 801d81e:	4632      	mov	r2, r6
 801d820:	4641      	mov	r1, r8
 801d822:	e77c      	b.n	801d71e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801d824:	8ae3      	ldrh	r3, [r4, #22]
 801d826:	2b00      	cmp	r3, #0
 801d828:	f43f af6d 	beq.w	801d706 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801d82c:	e7e2      	b.n	801d7f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x128>
 801d82e:	8823      	ldrh	r3, [r4, #0]
 801d830:	2b20      	cmp	r3, #32
 801d832:	f43f af68 	beq.w	801d706 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801d836:	f1b9 0f20 	cmp.w	r9, #32
 801d83a:	f47f af64 	bne.w	801d706 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801d83e:	2301      	movs	r3, #1
 801d840:	4632      	mov	r2, r6
 801d842:	4641      	mov	r1, r8
 801d844:	e7c6      	b.n	801d7d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x108>
 801d846:	428b      	cmp	r3, r1
 801d848:	f77f af5d 	ble.w	801d706 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801d84c:	e7cb      	b.n	801d7e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x11a>

0801d84e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801d84e:	b570      	push	{r4, r5, r6, lr}
 801d850:	4606      	mov	r6, r0
 801d852:	b08c      	sub	sp, #48	; 0x30
 801d854:	4615      	mov	r5, r2
 801d856:	b191      	cbz	r1, 801d87e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 801d858:	2401      	movs	r4, #1
 801d85a:	9101      	str	r1, [sp, #4]
 801d85c:	9300      	str	r3, [sp, #0]
 801d85e:	4601      	mov	r1, r0
 801d860:	4613      	mov	r3, r2
 801d862:	a803      	add	r0, sp, #12
 801d864:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801d868:	f7ff fd22 	bl	801d2b0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801d86c:	2100      	movs	r1, #0
 801d86e:	a803      	add	r0, sp, #12
 801d870:	f7ff ff2c 	bl	801d6cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801d874:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801d878:	b173      	cbz	r3, 801d898 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801d87a:	3401      	adds	r4, #1
 801d87c:	e7f6      	b.n	801d86c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 801d87e:	2401      	movs	r4, #1
 801d880:	4611      	mov	r1, r2
 801d882:	f001 fc9f 	bl	801f1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d886:	280a      	cmp	r0, #10
 801d888:	4629      	mov	r1, r5
 801d88a:	4630      	mov	r0, r6
 801d88c:	bf08      	it	eq
 801d88e:	3401      	addeq	r4, #1
 801d890:	f001 fc98 	bl	801f1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d894:	2800      	cmp	r0, #0
 801d896:	d1f6      	bne.n	801d886 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801d898:	b2a0      	uxth	r0, r4
 801d89a:	b00c      	add	sp, #48	; 0x30
 801d89c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d8a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801d8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8a4:	b0ab      	sub	sp, #172	; 0xac
 801d8a6:	4689      	mov	r9, r1
 801d8a8:	461c      	mov	r4, r3
 801d8aa:	f8dd a0d0 	ldr.w	sl, [sp, #208]	; 0xd0
 801d8ae:	9009      	str	r0, [sp, #36]	; 0x24
 801d8b0:	f1ba 0f00 	cmp.w	sl, #0
 801d8b4:	f000 80ac 	beq.w	801da10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801d8b8:	681b      	ldr	r3, [r3, #0]
 801d8ba:	2b00      	cmp	r3, #0
 801d8bc:	f000 80a8 	beq.w	801da10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801d8c0:	7ba3      	ldrb	r3, [r4, #14]
 801d8c2:	2b00      	cmp	r3, #0
 801d8c4:	f000 80a4 	beq.w	801da10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801d8c8:	6810      	ldr	r0, [r2, #0]
 801d8ca:	ab0b      	add	r3, sp, #44	; 0x2c
 801d8cc:	6851      	ldr	r1, [r2, #4]
 801d8ce:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
 801d8d2:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
 801d8d6:	c303      	stmia	r3!, {r0, r1}
 801d8d8:	f9b9 1004 	ldrsh.w	r1, [r9, #4]
 801d8dc:	2300      	movs	r3, #0
 801d8de:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801d8e2:	a80b      	add	r0, sp, #44	; 0x2c
 801d8e4:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
 801d8e8:	a90d      	add	r1, sp, #52	; 0x34
 801d8ea:	79a2      	ldrb	r2, [r4, #6]
 801d8ec:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801d8f0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801d8f4:	f7ff fd55 	bl	801d3a2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801d8f8:	a90d      	add	r1, sp, #52	; 0x34
 801d8fa:	79a2      	ldrb	r2, [r4, #6]
 801d8fc:	4608      	mov	r0, r1
 801d8fe:	f7ff fd50 	bl	801d3a2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801d902:	4640      	mov	r0, r8
 801d904:	f001 fca4 	bl	801f250 <_ZN8touchgfx12TextProviderC1Ev>
 801d908:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801d90a:	4651      	mov	r1, sl
 801d90c:	4640      	mov	r0, r8
 801d90e:	f001 fca8 	bl	801f262 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801d912:	a815      	add	r0, sp, #84	; 0x54
 801d914:	f001 fc9c 	bl	801f250 <_ZN8touchgfx12TextProviderC1Ev>
 801d918:	7927      	ldrb	r7, [r4, #4]
 801d91a:	b127      	cbz	r7, 801d926 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x86>
 801d91c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801d91e:	4651      	mov	r1, sl
 801d920:	a815      	add	r0, sp, #84	; 0x54
 801d922:	f001 fc9e 	bl	801f262 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801d926:	6820      	ldr	r0, [r4, #0]
 801d928:	89a5      	ldrh	r5, [r4, #12]
 801d92a:	6803      	ldr	r3, [r0, #0]
 801d92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d92e:	4798      	blx	r3
 801d930:	4405      	add	r5, r0
 801d932:	a81b      	add	r0, sp, #108	; 0x6c
 801d934:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801d938:	f001 fc8a 	bl	801f250 <_ZN8touchgfx12TextProviderC1Ev>
 801d93c:	7c23      	ldrb	r3, [r4, #16]
 801d93e:	fb96 f6f5 	sdiv	r6, r6, r5
 801d942:	b123      	cbz	r3, 801d94e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xae>
 801d944:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801d946:	4651      	mov	r1, sl
 801d948:	a81b      	add	r0, sp, #108	; 0x6c
 801d94a:	f001 fc8a 	bl	801f262 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801d94e:	7c21      	ldrb	r1, [r4, #16]
 801d950:	a821      	add	r0, sp, #132	; 0x84
 801d952:	7963      	ldrb	r3, [r4, #5]
 801d954:	9101      	str	r1, [sp, #4]
 801d956:	6821      	ldr	r1, [r4, #0]
 801d958:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801d95c:	9100      	str	r1, [sp, #0]
 801d95e:	a91b      	add	r1, sp, #108	; 0x6c
 801d960:	f7ff fca6 	bl	801d2b0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801d964:	7c23      	ldrb	r3, [r4, #16]
 801d966:	bb03      	cbnz	r3, 801d9aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x10a>
 801d968:	fa1f fa85 	uxth.w	sl, r5
 801d96c:	2e00      	cmp	r6, #0
 801d96e:	dd52      	ble.n	801da16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 801d970:	7961      	ldrb	r1, [r4, #5]
 801d972:	4640      	mov	r0, r8
 801d974:	f001 fc26 	bl	801f1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d978:	4683      	mov	fp, r0
 801d97a:	b11f      	cbz	r7, 801d984 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xe4>
 801d97c:	7961      	ldrb	r1, [r4, #5]
 801d97e:	a815      	add	r0, sp, #84	; 0x54
 801d980:	f001 fc20 	bl	801f1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d984:	f1bb 0f00 	cmp.w	fp, #0
 801d988:	d042      	beq.n	801da10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801d98a:	f1bb 0f0a 	cmp.w	fp, #10
 801d98e:	d1ed      	bne.n	801d96c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xcc>
 801d990:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801d994:	3e01      	subs	r6, #1
 801d996:	4453      	add	r3, sl
 801d998:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801d99c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801d9a0:	eba3 030a 	sub.w	r3, r3, sl
 801d9a4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d9a8:	e7e0      	b.n	801d96c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xcc>
 801d9aa:	006b      	lsls	r3, r5, #1
 801d9ac:	fa1f fa85 	uxth.w	sl, r5
 801d9b0:	9308      	str	r3, [sp, #32]
 801d9b2:	2e00      	cmp	r6, #0
 801d9b4:	dd2f      	ble.n	801da16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 801d9b6:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801d9ba:	a821      	add	r0, sp, #132	; 0x84
 801d9bc:	9b08      	ldr	r3, [sp, #32]
 801d9be:	428b      	cmp	r3, r1
 801d9c0:	bfd4      	ite	le
 801d9c2:	2100      	movle	r1, #0
 801d9c4:	2101      	movgt	r1, #1
 801d9c6:	f7ff fe81 	bl	801d6cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801d9ca:	f8bd b09a 	ldrh.w	fp, [sp, #154]	; 0x9a
 801d9ce:	f1bb 0f00 	cmp.w	fp, #0
 801d9d2:	d00d      	beq.n	801d9f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x150>
 801d9d4:	7961      	ldrb	r1, [r4, #5]
 801d9d6:	4640      	mov	r0, r8
 801d9d8:	f001 fbf4 	bl	801f1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d9dc:	b11f      	cbz	r7, 801d9e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x146>
 801d9de:	7961      	ldrb	r1, [r4, #5]
 801d9e0:	a815      	add	r0, sp, #84	; 0x54
 801d9e2:	f001 fbef 	bl	801f1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d9e6:	f10b 33ff 	add.w	r3, fp, #4294967295
 801d9ea:	fa1f fb83 	uxth.w	fp, r3
 801d9ee:	e7ee      	b.n	801d9ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801d9f0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801d9f4:	3e01      	subs	r6, #1
 801d9f6:	4453      	add	r3, sl
 801d9f8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801d9fc:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801da00:	eba3 030a 	sub.w	r3, r3, sl
 801da04:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801da08:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 801da0c:	2b00      	cmp	r3, #0
 801da0e:	d1d0      	bne.n	801d9b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x112>
 801da10:	b02b      	add	sp, #172	; 0xac
 801da12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da16:	4b40      	ldr	r3, [pc, #256]	; (801db18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x278>)
 801da18:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 801da1c:	f04f 0a02 	mov.w	sl, #2
 801da20:	6818      	ldr	r0, [r3, #0]
 801da22:	6803      	ldr	r3, [r0, #0]
 801da24:	6a1b      	ldr	r3, [r3, #32]
 801da26:	4798      	blx	r3
 801da28:	4606      	mov	r6, r0
 801da2a:	7c23      	ldrb	r3, [r4, #16]
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	d067      	beq.n	801db00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801da30:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801da34:	a821      	add	r0, sp, #132	; 0x84
 801da36:	458b      	cmp	fp, r1
 801da38:	bfd4      	ite	le
 801da3a:	2100      	movle	r1, #0
 801da3c:	2101      	movgt	r1, #1
 801da3e:	f7ff fe45 	bl	801d6cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801da42:	2f00      	cmp	r7, #0
 801da44:	d055      	beq.n	801daf2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801da46:	7c23      	ldrb	r3, [r4, #16]
 801da48:	2b00      	cmp	r3, #0
 801da4a:	d05b      	beq.n	801db04 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x264>
 801da4c:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 801da50:	7922      	ldrb	r2, [r4, #4]
 801da52:	2a01      	cmp	r2, #1
 801da54:	d145      	bne.n	801dae2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801da56:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 801da5a:	1ac0      	subs	r0, r0, r3
 801da5c:	fb90 f0fa 	sdiv	r0, r0, sl
 801da60:	b200      	sxth	r0, r0
 801da62:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801da66:	4418      	add	r0, r3
 801da68:	7c23      	ldrb	r3, [r4, #16]
 801da6a:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 801da6e:	2b00      	cmp	r3, #0
 801da70:	d043      	beq.n	801dafa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 801da72:	f8bd 209a 	ldrh.w	r2, [sp, #154]	; 0x9a
 801da76:	9205      	str	r2, [sp, #20]
 801da78:	2200      	movs	r2, #0
 801da7a:	f89d 10a6 	ldrb.w	r1, [sp, #166]	; 0xa6
 801da7e:	9203      	str	r2, [sp, #12]
 801da80:	aa0b      	add	r2, sp, #44	; 0x2c
 801da82:	9106      	str	r1, [sp, #24]
 801da84:	4631      	mov	r1, r6
 801da86:	9201      	str	r2, [sp, #4]
 801da88:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 801da8c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801da90:	9200      	str	r2, [sp, #0]
 801da92:	464a      	mov	r2, r9
 801da94:	f8cd 8010 	str.w	r8, [sp, #16]
 801da98:	9402      	str	r4, [sp, #8]
 801da9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801da9c:	f7ff fcd2 	bl	801d444 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801daa0:	b9c8      	cbnz	r0, 801dad6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801daa2:	b2aa      	uxth	r2, r5
 801daa4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801daa8:	4611      	mov	r1, r2
 801daaa:	4413      	add	r3, r2
 801daac:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801dab0:	b21b      	sxth	r3, r3
 801dab2:	1a52      	subs	r2, r2, r1
 801dab4:	7c21      	ldrb	r1, [r4, #16]
 801dab6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801daba:	b212      	sxth	r2, r2
 801dabc:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801dac0:	b109      	cbz	r1, 801dac6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x226>
 801dac2:	4295      	cmp	r5, r2
 801dac4:	dc07      	bgt.n	801dad6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801dac6:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801daca:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801dace:	440a      	add	r2, r1
 801dad0:	b212      	sxth	r2, r2
 801dad2:	4293      	cmp	r3, r2
 801dad4:	dda9      	ble.n	801da2a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18a>
 801dad6:	4b10      	ldr	r3, [pc, #64]	; (801db18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x278>)
 801dad8:	6818      	ldr	r0, [r3, #0]
 801dada:	6803      	ldr	r3, [r0, #0]
 801dadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dade:	4798      	blx	r3
 801dae0:	e796      	b.n	801da10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801dae2:	2a02      	cmp	r2, #2
 801dae4:	d107      	bne.n	801daf6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801dae6:	7be2      	ldrb	r2, [r4, #15]
 801dae8:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 801daec:	1a80      	subs	r0, r0, r2
 801daee:	1ac0      	subs	r0, r0, r3
 801daf0:	e7b6      	b.n	801da60 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c0>
 801daf2:	7be0      	ldrb	r0, [r4, #15]
 801daf4:	e7b5      	b.n	801da62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>
 801daf6:	2000      	movs	r0, #0
 801daf8:	e7b3      	b.n	801da62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>
 801dafa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801dafe:	e7ba      	b.n	801da76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801db00:	2f00      	cmp	r7, #0
 801db02:	d0f6      	beq.n	801daf2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801db04:	2300      	movs	r3, #0
 801db06:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801db0a:	6821      	ldr	r1, [r4, #0]
 801db0c:	a815      	add	r0, sp, #84	; 0x54
 801db0e:	f7ff fc12 	bl	801d336 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801db12:	b203      	sxth	r3, r0
 801db14:	e79c      	b.n	801da50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b0>
 801db16:	bf00      	nop
 801db18:	2000a32c 	.word	0x2000a32c

0801db1c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801db1c:	2b02      	cmp	r3, #2
 801db1e:	d00e      	beq.n	801db3e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801db20:	2b03      	cmp	r3, #3
 801db22:	d012      	beq.n	801db4a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2e>
 801db24:	2b01      	cmp	r3, #1
 801db26:	d003      	beq.n	801db30 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801db28:	f9b0 2000 	ldrsh.w	r2, [r0]
 801db2c:	1850      	adds	r0, r2, r1
 801db2e:	4770      	bx	lr
 801db30:	8803      	ldrh	r3, [r0, #0]
 801db32:	8880      	ldrh	r0, [r0, #4]
 801db34:	4418      	add	r0, r3
 801db36:	b200      	sxth	r0, r0
 801db38:	1a80      	subs	r0, r0, r2
 801db3a:	3801      	subs	r0, #1
 801db3c:	4770      	bx	lr
 801db3e:	8803      	ldrh	r3, [r0, #0]
 801db40:	8880      	ldrh	r0, [r0, #4]
 801db42:	4418      	add	r0, r3
 801db44:	b200      	sxth	r0, r0
 801db46:	1a40      	subs	r0, r0, r1
 801db48:	e7f7      	b.n	801db3a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801db4a:	f9b0 0000 	ldrsh.w	r0, [r0]
 801db4e:	4410      	add	r0, r2
 801db50:	4770      	bx	lr

0801db52 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801db52:	2b02      	cmp	r3, #2
 801db54:	d008      	beq.n	801db68 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801db56:	2b03      	cmp	r3, #3
 801db58:	d00d      	beq.n	801db76 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801db5a:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801db5e:	2b01      	cmp	r3, #1
 801db60:	bf14      	ite	ne
 801db62:	1880      	addne	r0, r0, r2
 801db64:	1840      	addeq	r0, r0, r1
 801db66:	4770      	bx	lr
 801db68:	8843      	ldrh	r3, [r0, #2]
 801db6a:	88c0      	ldrh	r0, [r0, #6]
 801db6c:	4418      	add	r0, r3
 801db6e:	b200      	sxth	r0, r0
 801db70:	1a80      	subs	r0, r0, r2
 801db72:	3801      	subs	r0, #1
 801db74:	4770      	bx	lr
 801db76:	8843      	ldrh	r3, [r0, #2]
 801db78:	88c0      	ldrh	r0, [r0, #6]
 801db7a:	4418      	add	r0, r3
 801db7c:	b200      	sxth	r0, r0
 801db7e:	1a40      	subs	r0, r0, r1
 801db80:	e7f7      	b.n	801db72 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

0801db82 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801db82:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db84:	f8dd c014 	ldr.w	ip, [sp, #20]
 801db88:	1e05      	subs	r5, r0, #0
 801db8a:	f04f 0601 	mov.w	r6, #1
 801db8e:	9c06      	ldr	r4, [sp, #24]
 801db90:	bfba      	itte	lt
 801db92:	f04f 37ff 	movlt.w	r7, #4294967295
 801db96:	426d      	neglt	r5, r5
 801db98:	2701      	movge	r7, #1
 801db9a:	f1bc 0f00 	cmp.w	ip, #0
 801db9e:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801dba2:	bfbc      	itt	lt
 801dba4:	f1cc 0c00 	rsblt	ip, ip, #0
 801dba8:	427f      	neglt	r7, r7
 801dbaa:	2c00      	cmp	r4, #0
 801dbac:	fa4c f001 	asr.w	r0, ip, r1
 801dbb0:	fa06 f101 	lsl.w	r1, r6, r1
 801dbb4:	bfbc      	itt	lt
 801dbb6:	4264      	neglt	r4, r4
 801dbb8:	427f      	neglt	r7, r7
 801dbba:	3901      	subs	r1, #1
 801dbbc:	ea01 010c 	and.w	r1, r1, ip
 801dbc0:	434d      	muls	r5, r1
 801dbc2:	f8de 1000 	ldr.w	r1, [lr]
 801dbc6:	fb03 1300 	mla	r3, r3, r0, r1
 801dbca:	fb95 f1f4 	sdiv	r1, r5, r4
 801dbce:	fb04 5511 	mls	r5, r4, r1, r5
 801dbd2:	441d      	add	r5, r3
 801dbd4:	fb95 f3f4 	sdiv	r3, r5, r4
 801dbd8:	4419      	add	r1, r3
 801dbda:	fb04 5413 	mls	r4, r4, r3, r5
 801dbde:	fb02 1000 	mla	r0, r2, r0, r1
 801dbe2:	f8ce 4000 	str.w	r4, [lr]
 801dbe6:	4378      	muls	r0, r7
 801dbe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801dbec <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801dbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dbf0:	4c24      	ldr	r4, [pc, #144]	; (801dc84 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801dbf2:	b086      	sub	sp, #24
 801dbf4:	4605      	mov	r5, r0
 801dbf6:	6807      	ldr	r7, [r0, #0]
 801dbf8:	69a3      	ldr	r3, [r4, #24]
 801dbfa:	b92b      	cbnz	r3, 801dc08 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801dbfc:	6840      	ldr	r0, [r0, #4]
 801dbfe:	602f      	str	r7, [r5, #0]
 801dc00:	6068      	str	r0, [r5, #4]
 801dc02:	b006      	add	sp, #24
 801dc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc08:	f04f 0802 	mov.w	r8, #2
 801dc0c:	68a2      	ldr	r2, [r4, #8]
 801dc0e:	ae06      	add	r6, sp, #24
 801dc10:	6820      	ldr	r0, [r4, #0]
 801dc12:	fb93 f1f8 	sdiv	r1, r3, r8
 801dc16:	440a      	add	r2, r1
 801dc18:	69e1      	ldr	r1, [r4, #28]
 801dc1a:	f846 2d04 	str.w	r2, [r6, #-4]!
 801dc1e:	9301      	str	r3, [sp, #4]
 801dc20:	9700      	str	r7, [sp, #0]
 801dc22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801dc24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801dc26:	9602      	str	r6, [sp, #8]
 801dc28:	f7ff ffab 	bl	801db82 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801dc2c:	69a3      	ldr	r3, [r4, #24]
 801dc2e:	4607      	mov	r7, r0
 801dc30:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801dc32:	9301      	str	r3, [sp, #4]
 801dc34:	686b      	ldr	r3, [r5, #4]
 801dc36:	6a21      	ldr	r1, [r4, #32]
 801dc38:	9300      	str	r3, [sp, #0]
 801dc3a:	9602      	str	r6, [sp, #8]
 801dc3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dc3e:	6860      	ldr	r0, [r4, #4]
 801dc40:	f7ff ff9f 	bl	801db82 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801dc44:	69a2      	ldr	r2, [r4, #24]
 801dc46:	6963      	ldr	r3, [r4, #20]
 801dc48:	4407      	add	r7, r0
 801dc4a:	9201      	str	r2, [sp, #4]
 801dc4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801dc4e:	9602      	str	r6, [sp, #8]
 801dc50:	68e0      	ldr	r0, [r4, #12]
 801dc52:	fb92 f8f8 	sdiv	r8, r2, r8
 801dc56:	4443      	add	r3, r8
 801dc58:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801dc5a:	9305      	str	r3, [sp, #20]
 801dc5c:	682b      	ldr	r3, [r5, #0]
 801dc5e:	9300      	str	r3, [sp, #0]
 801dc60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801dc62:	f7ff ff8e 	bl	801db82 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801dc66:	69a3      	ldr	r3, [r4, #24]
 801dc68:	4680      	mov	r8, r0
 801dc6a:	9602      	str	r6, [sp, #8]
 801dc6c:	9301      	str	r3, [sp, #4]
 801dc6e:	686b      	ldr	r3, [r5, #4]
 801dc70:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801dc72:	9300      	str	r3, [sp, #0]
 801dc74:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801dc76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801dc78:	6920      	ldr	r0, [r4, #16]
 801dc7a:	f7ff ff82 	bl	801db82 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801dc7e:	4440      	add	r0, r8
 801dc80:	e7bd      	b.n	801dbfe <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801dc82:	bf00      	nop
 801dc84:	2000a334 	.word	0x2000a334

0801dc88 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801dc88:	4b07      	ldr	r3, [pc, #28]	; (801dca8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801dc8a:	b510      	push	{r4, lr}
 801dc8c:	781b      	ldrb	r3, [r3, #0]
 801dc8e:	2b01      	cmp	r3, #1
 801dc90:	d108      	bne.n	801dca4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801dc92:	4b06      	ldr	r3, [pc, #24]	; (801dcac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801dc94:	880c      	ldrh	r4, [r1, #0]
 801dc96:	881b      	ldrh	r3, [r3, #0]
 801dc98:	f9b0 2000 	ldrsh.w	r2, [r0]
 801dc9c:	3b01      	subs	r3, #1
 801dc9e:	1b1b      	subs	r3, r3, r4
 801dca0:	8003      	strh	r3, [r0, #0]
 801dca2:	800a      	strh	r2, [r1, #0]
 801dca4:	bd10      	pop	{r4, pc}
 801dca6:	bf00      	nop
 801dca8:	2000a324 	.word	0x2000a324
 801dcac:	2000a328 	.word	0x2000a328

0801dcb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801dcb0:	4b07      	ldr	r3, [pc, #28]	; (801dcd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801dcb2:	b510      	push	{r4, lr}
 801dcb4:	781b      	ldrb	r3, [r3, #0]
 801dcb6:	2b01      	cmp	r3, #1
 801dcb8:	d108      	bne.n	801dccc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801dcba:	f9b1 3000 	ldrsh.w	r3, [r1]
 801dcbe:	f9b0 4000 	ldrsh.w	r4, [r0]
 801dcc2:	8003      	strh	r3, [r0, #0]
 801dcc4:	8893      	ldrh	r3, [r2, #4]
 801dcc6:	3b01      	subs	r3, #1
 801dcc8:	1b1b      	subs	r3, r3, r4
 801dcca:	800b      	strh	r3, [r1, #0]
 801dccc:	bd10      	pop	{r4, pc}
 801dcce:	bf00      	nop
 801dcd0:	2000a324 	.word	0x2000a324

0801dcd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801dcd4:	4b0a      	ldr	r3, [pc, #40]	; (801dd00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x2c>)
 801dcd6:	b513      	push	{r0, r1, r4, lr}
 801dcd8:	f9b3 4000 	ldrsh.w	r4, [r3]
 801dcdc:	4b09      	ldr	r3, [pc, #36]	; (801dd04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x30>)
 801dcde:	f8ad 4004 	strh.w	r4, [sp, #4]
 801dce2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801dce6:	2300      	movs	r3, #0
 801dce8:	f8ad 2006 	strh.w	r2, [sp, #6]
 801dcec:	466a      	mov	r2, sp
 801dcee:	f8ad 3000 	strh.w	r3, [sp]
 801dcf2:	f8ad 3002 	strh.w	r3, [sp, #2]
 801dcf6:	f7ff ffdb 	bl	801dcb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801dcfa:	b002      	add	sp, #8
 801dcfc:	bd10      	pop	{r4, pc}
 801dcfe:	bf00      	nop
 801dd00:	2000a320 	.word	0x2000a320
 801dd04:	2000a322 	.word	0x2000a322

0801dd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801dd08:	4b0a      	ldr	r3, [pc, #40]	; (801dd34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801dd0a:	460a      	mov	r2, r1
 801dd0c:	b510      	push	{r4, lr}
 801dd0e:	781b      	ldrb	r3, [r3, #0]
 801dd10:	2b01      	cmp	r3, #1
 801dd12:	d10d      	bne.n	801dd30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801dd14:	8881      	ldrh	r1, [r0, #4]
 801dd16:	8803      	ldrh	r3, [r0, #0]
 801dd18:	440b      	add	r3, r1
 801dd1a:	4601      	mov	r1, r0
 801dd1c:	3b01      	subs	r3, #1
 801dd1e:	f821 3b02 	strh.w	r3, [r1], #2
 801dd22:	f7ff ffc5 	bl	801dcb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801dd26:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801dd2a:	88c2      	ldrh	r2, [r0, #6]
 801dd2c:	80c3      	strh	r3, [r0, #6]
 801dd2e:	8082      	strh	r2, [r0, #4]
 801dd30:	bd10      	pop	{r4, pc}
 801dd32:	bf00      	nop
 801dd34:	2000a324 	.word	0x2000a324

0801dd38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801dd38:	4b0a      	ldr	r3, [pc, #40]	; (801dd64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801dd3a:	b507      	push	{r0, r1, r2, lr}
 801dd3c:	f9b3 1000 	ldrsh.w	r1, [r3]
 801dd40:	4b09      	ldr	r3, [pc, #36]	; (801dd68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x30>)
 801dd42:	f8ad 1004 	strh.w	r1, [sp, #4]
 801dd46:	4669      	mov	r1, sp
 801dd48:	f9b3 2000 	ldrsh.w	r2, [r3]
 801dd4c:	2300      	movs	r3, #0
 801dd4e:	f8ad 2006 	strh.w	r2, [sp, #6]
 801dd52:	f8ad 3000 	strh.w	r3, [sp]
 801dd56:	f8ad 3002 	strh.w	r3, [sp, #2]
 801dd5a:	f7ff ffd5 	bl	801dd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dd5e:	b003      	add	sp, #12
 801dd60:	f85d fb04 	ldr.w	pc, [sp], #4
 801dd64:	2000a320 	.word	0x2000a320
 801dd68:	2000a322 	.word	0x2000a322

0801dd6c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801dd6c:	4b03      	ldr	r3, [pc, #12]	; (801dd7c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801dd6e:	6818      	ldr	r0, [r3, #0]
 801dd70:	b110      	cbz	r0, 801dd78 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801dd72:	6803      	ldr	r3, [r0, #0]
 801dd74:	699b      	ldr	r3, [r3, #24]
 801dd76:	4718      	bx	r3
 801dd78:	4770      	bx	lr
 801dd7a:	bf00      	nop
 801dd7c:	2000a380 	.word	0x2000a380

0801dd80 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801dd80:	4770      	bx	lr
	...

0801dd84 <_ZN8touchgfx11Application4drawEv>:
 801dd84:	4b0b      	ldr	r3, [pc, #44]	; (801ddb4 <_ZN8touchgfx11Application4drawEv+0x30>)
 801dd86:	b507      	push	{r0, r1, r2, lr}
 801dd88:	f9b3 1000 	ldrsh.w	r1, [r3]
 801dd8c:	4b0a      	ldr	r3, [pc, #40]	; (801ddb8 <_ZN8touchgfx11Application4drawEv+0x34>)
 801dd8e:	f8ad 1004 	strh.w	r1, [sp, #4]
 801dd92:	4669      	mov	r1, sp
 801dd94:	f9b3 2000 	ldrsh.w	r2, [r3]
 801dd98:	2300      	movs	r3, #0
 801dd9a:	f8ad 3000 	strh.w	r3, [sp]
 801dd9e:	f8ad 3002 	strh.w	r3, [sp, #2]
 801dda2:	6803      	ldr	r3, [r0, #0]
 801dda4:	f8ad 2006 	strh.w	r2, [sp, #6]
 801dda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ddaa:	4798      	blx	r3
 801ddac:	b003      	add	sp, #12
 801ddae:	f85d fb04 	ldr.w	pc, [sp], #4
 801ddb2:	bf00      	nop
 801ddb4:	2000a320 	.word	0x2000a320
 801ddb8:	2000a322 	.word	0x2000a322

0801ddbc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801ddbc:	4b03      	ldr	r3, [pc, #12]	; (801ddcc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801ddbe:	6818      	ldr	r0, [r3, #0]
 801ddc0:	b110      	cbz	r0, 801ddc8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801ddc2:	6803      	ldr	r3, [r0, #0]
 801ddc4:	69db      	ldr	r3, [r3, #28]
 801ddc6:	4718      	bx	r3
 801ddc8:	4770      	bx	lr
 801ddca:	bf00      	nop
 801ddcc:	2000a380 	.word	0x2000a380

0801ddd0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801ddd0:	4b03      	ldr	r3, [pc, #12]	; (801dde0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801ddd2:	6818      	ldr	r0, [r3, #0]
 801ddd4:	b110      	cbz	r0, 801dddc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801ddd6:	6803      	ldr	r3, [r0, #0]
 801ddd8:	6a1b      	ldr	r3, [r3, #32]
 801ddda:	4718      	bx	r3
 801dddc:	4770      	bx	lr
 801ddde:	bf00      	nop
 801dde0:	2000a380 	.word	0x2000a380

0801dde4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801dde4:	4b03      	ldr	r3, [pc, #12]	; (801ddf4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801dde6:	6818      	ldr	r0, [r3, #0]
 801dde8:	b110      	cbz	r0, 801ddf0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801ddea:	6803      	ldr	r3, [r0, #0]
 801ddec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ddee:	4718      	bx	r3
 801ddf0:	4770      	bx	lr
 801ddf2:	bf00      	nop
 801ddf4:	2000a380 	.word	0x2000a380

0801ddf8 <_ZN8touchgfx11Application15handleTickEventEv>:
 801ddf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ddfc:	4d3d      	ldr	r5, [pc, #244]	; (801def4 <_ZN8touchgfx11Application15handleTickEventEv+0xfc>)
 801ddfe:	4604      	mov	r4, r0
 801de00:	6828      	ldr	r0, [r5, #0]
 801de02:	2800      	cmp	r0, #0
 801de04:	d047      	beq.n	801de96 <_ZN8touchgfx11Application15handleTickEventEv+0x9e>
 801de06:	7a03      	ldrb	r3, [r0, #8]
 801de08:	2b00      	cmp	r3, #0
 801de0a:	d144      	bne.n	801de96 <_ZN8touchgfx11Application15handleTickEventEv+0x9e>
 801de0c:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801de10:	6803      	ldr	r3, [r0, #0]
 801de12:	689b      	ldr	r3, [r3, #8]
 801de14:	e03c      	b.n	801de90 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801de16:	3b01      	subs	r3, #1
 801de18:	f04f 0c00 	mov.w	ip, #0
 801de1c:	1c5a      	adds	r2, r3, #1
 801de1e:	d031      	beq.n	801de84 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801de20:	18e2      	adds	r2, r4, r3
 801de22:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
 801de26:	bb59      	cbnz	r1, 801de80 <_ZN8touchgfx11Application15handleTickEventEv+0x88>
 801de28:	b298      	uxth	r0, r3
 801de2a:	1d25      	adds	r5, r4, #4
 801de2c:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 801de30:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801de34:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
 801de38:	428a      	cmp	r2, r1
 801de3a:	dd14      	ble.n	801de66 <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 801de3c:	682e      	ldr	r6, [r5, #0]
 801de3e:	45b0      	cmp	r8, r6
 801de40:	d106      	bne.n	801de50 <_ZN8touchgfx11Application15handleTickEventEv+0x58>
 801de42:	46ae      	mov	lr, r5
 801de44:	460e      	mov	r6, r1
 801de46:	2e1e      	cmp	r6, #30
 801de48:	dd05      	ble.n	801de56 <_ZN8touchgfx11Application15handleTickEventEv+0x5e>
 801de4a:	3a01      	subs	r2, #1
 801de4c:	f8a4 2084 	strh.w	r2, [r4, #132]	; 0x84
 801de50:	3101      	adds	r1, #1
 801de52:	3504      	adds	r5, #4
 801de54:	e7ee      	b.n	801de34 <_ZN8touchgfx11Application15handleTickEventEv+0x3c>
 801de56:	3601      	adds	r6, #1
 801de58:	f8de 7004 	ldr.w	r7, [lr, #4]
 801de5c:	42b2      	cmp	r2, r6
 801de5e:	f84e 7b04 	str.w	r7, [lr], #4
 801de62:	dcf0      	bgt.n	801de46 <_ZN8touchgfx11Application15handleTickEventEv+0x4e>
 801de64:	e7f1      	b.n	801de4a <_ZN8touchgfx11Application15handleTickEventEv+0x52>
 801de66:	4290      	cmp	r0, r2
 801de68:	da07      	bge.n	801de7a <_ZN8touchgfx11Application15handleTickEventEv+0x82>
 801de6a:	1821      	adds	r1, r4, r0
 801de6c:	3001      	adds	r0, #1
 801de6e:	f891 5089 	ldrb.w	r5, [r1, #137]	; 0x89
 801de72:	b280      	uxth	r0, r0
 801de74:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801de78:	e7f5      	b.n	801de66 <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 801de7a:	4422      	add	r2, r4
 801de7c:	f882 c088 	strb.w	ip, [r2, #136]	; 0x88
 801de80:	3b01      	subs	r3, #1
 801de82:	e7cb      	b.n	801de1c <_ZN8touchgfx11Application15handleTickEventEv+0x24>
 801de84:	4b1c      	ldr	r3, [pc, #112]	; (801def8 <_ZN8touchgfx11Application15handleTickEventEv+0x100>)
 801de86:	6818      	ldr	r0, [r3, #0]
 801de88:	2800      	cmp	r0, #0
 801de8a:	d031      	beq.n	801def0 <_ZN8touchgfx11Application15handleTickEventEv+0xf8>
 801de8c:	6803      	ldr	r3, [r0, #0]
 801de8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801de94:	4718      	bx	r3
 801de96:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801de9a:	b913      	cbnz	r3, 801dea2 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801de9c:	b108      	cbz	r0, 801dea2 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801de9e:	7a03      	ldrb	r3, [r0, #8]
 801dea0:	b9a3      	cbnz	r3, 801decc <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801dea2:	eba4 0584 	sub.w	r5, r4, r4, lsl #2
 801dea6:	f104 0788 	add.w	r7, r4, #136	; 0x88
 801deaa:	2600      	movs	r6, #0
 801deac:	f5a5 7508 	sub.w	r5, r5, #544	; 0x220
 801deb0:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801deb4:	429e      	cmp	r6, r3
 801deb6:	daae      	bge.n	801de16 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801deb8:	f817 3b01 	ldrb.w	r3, [r7], #1
 801debc:	b123      	cbz	r3, 801dec8 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801debe:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 801dec2:	6803      	ldr	r3, [r0, #0]
 801dec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dec6:	4798      	blx	r3
 801dec8:	3601      	adds	r6, #1
 801deca:	e7f1      	b.n	801deb0 <_ZN8touchgfx11Application15handleTickEventEv+0xb8>
 801decc:	4b0a      	ldr	r3, [pc, #40]	; (801def8 <_ZN8touchgfx11Application15handleTickEventEv+0x100>)
 801dece:	6818      	ldr	r0, [r3, #0]
 801ded0:	b110      	cbz	r0, 801ded8 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801ded2:	6803      	ldr	r3, [r0, #0]
 801ded4:	691b      	ldr	r3, [r3, #16]
 801ded6:	4798      	blx	r3
 801ded8:	6828      	ldr	r0, [r5, #0]
 801deda:	6803      	ldr	r3, [r0, #0]
 801dedc:	68db      	ldr	r3, [r3, #12]
 801dede:	4798      	blx	r3
 801dee0:	6823      	ldr	r3, [r4, #0]
 801dee2:	4620      	mov	r0, r4
 801dee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dee6:	4798      	blx	r3
 801dee8:	2301      	movs	r3, #1
 801deea:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801deee:	e7d8      	b.n	801dea2 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801def0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801def4:	2000a384 	.word	0x2000a384
 801def8:	2000a380 	.word	0x2000a380

0801defc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801defc:	b570      	push	{r4, r5, r6, lr}
 801defe:	4606      	mov	r6, r0
 801df00:	460c      	mov	r4, r1
 801df02:	b929      	cbnz	r1, 801df10 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801df04:	4b0c      	ldr	r3, [pc, #48]	; (801df38 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801df06:	2161      	movs	r1, #97	; 0x61
 801df08:	4a0c      	ldr	r2, [pc, #48]	; (801df3c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801df0a:	480d      	ldr	r0, [pc, #52]	; (801df40 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801df0c:	f003 f954 	bl	80211b8 <__assert_func>
 801df10:	2300      	movs	r3, #0
 801df12:	4d0c      	ldr	r5, [pc, #48]	; (801df44 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801df14:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801df18:	6828      	ldr	r0, [r5, #0]
 801df1a:	b110      	cbz	r0, 801df22 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801df1c:	6803      	ldr	r3, [r0, #0]
 801df1e:	695b      	ldr	r3, [r3, #20]
 801df20:	4798      	blx	r3
 801df22:	602c      	str	r4, [r5, #0]
 801df24:	4620      	mov	r0, r4
 801df26:	6823      	ldr	r3, [r4, #0]
 801df28:	68db      	ldr	r3, [r3, #12]
 801df2a:	4798      	blx	r3
 801df2c:	6833      	ldr	r3, [r6, #0]
 801df2e:	4630      	mov	r0, r6
 801df30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801df32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801df36:	4718      	bx	r3
 801df38:	080251ee 	.word	0x080251ee
 801df3c:	080252e0 	.word	0x080252e0
 801df40:	080251f8 	.word	0x080251f8
 801df44:	2000a380 	.word	0x2000a380

0801df48 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801df48:	b570      	push	{r4, r5, r6, lr}
 801df4a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801df4e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801df52:	42ac      	cmp	r4, r5
 801df54:	db18      	blt.n	801df88 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801df56:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801df5a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801df5e:	429a      	cmp	r2, r3
 801df60:	db12      	blt.n	801df88 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801df62:	8886      	ldrh	r6, [r0, #4]
 801df64:	4435      	add	r5, r6
 801df66:	888e      	ldrh	r6, [r1, #4]
 801df68:	4434      	add	r4, r6
 801df6a:	b22d      	sxth	r5, r5
 801df6c:	b224      	sxth	r4, r4
 801df6e:	42a5      	cmp	r5, r4
 801df70:	db0a      	blt.n	801df88 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801df72:	88c0      	ldrh	r0, [r0, #6]
 801df74:	4418      	add	r0, r3
 801df76:	88cb      	ldrh	r3, [r1, #6]
 801df78:	441a      	add	r2, r3
 801df7a:	b200      	sxth	r0, r0
 801df7c:	b212      	sxth	r2, r2
 801df7e:	4290      	cmp	r0, r2
 801df80:	bfb4      	ite	lt
 801df82:	2000      	movlt	r0, #0
 801df84:	2001      	movge	r0, #1
 801df86:	bd70      	pop	{r4, r5, r6, pc}
 801df88:	2000      	movs	r0, #0
 801df8a:	bd70      	pop	{r4, r5, r6, pc}

0801df8c <_ZN8touchgfx11Application11getInstanceEv>:
 801df8c:	4b01      	ldr	r3, [pc, #4]	; (801df94 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801df8e:	6818      	ldr	r0, [r3, #0]
 801df90:	4770      	bx	lr
 801df92:	bf00      	nop
 801df94:	2000a388 	.word	0x2000a388

0801df98 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801df98:	b538      	push	{r3, r4, r5, lr}
 801df9a:	2400      	movs	r4, #0
 801df9c:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801dfa0:	b2a2      	uxth	r2, r4
 801dfa2:	429a      	cmp	r2, r3
 801dfa4:	da0e      	bge.n	801dfc4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801dfa6:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 801dfaa:	3401      	adds	r4, #1
 801dfac:	686d      	ldr	r5, [r5, #4]
 801dfae:	428d      	cmp	r5, r1
 801dfb0:	d1f6      	bne.n	801dfa0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x8>
 801dfb2:	4410      	add	r0, r2
 801dfb4:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801dfb8:	2bff      	cmp	r3, #255	; 0xff
 801dfba:	d016      	beq.n	801dfea <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x52>
 801dfbc:	3301      	adds	r3, #1
 801dfbe:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801dfc2:	bd38      	pop	{r3, r4, r5, pc}
 801dfc4:	2b1f      	cmp	r3, #31
 801dfc6:	dd06      	ble.n	801dfd6 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x3e>
 801dfc8:	4b08      	ldr	r3, [pc, #32]	; (801dfec <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x54>)
 801dfca:	f44f 7190 	mov.w	r1, #288	; 0x120
 801dfce:	4a08      	ldr	r2, [pc, #32]	; (801dff0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801dfd0:	4808      	ldr	r0, [pc, #32]	; (801dff4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801dfd2:	f003 f8f1 	bl	80211b8 <__assert_func>
 801dfd6:	18c2      	adds	r2, r0, r3
 801dfd8:	2401      	movs	r4, #1
 801dfda:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801dfde:	191a      	adds	r2, r3, r4
 801dfe0:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801dfe4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801dfe8:	6041      	str	r1, [r0, #4]
 801dfea:	bd38      	pop	{r3, r4, r5, pc}
 801dfec:	08025222 	.word	0x08025222
 801dff0:	08025324 	.word	0x08025324
 801dff4:	080251f8 	.word	0x080251f8

0801dff8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801dff8:	b530      	push	{r4, r5, lr}
 801dffa:	f8b0 5084 	ldrh.w	r5, [r0, #132]	; 0x84
 801dffe:	2400      	movs	r4, #0
 801e000:	b2a3      	uxth	r3, r4
 801e002:	42ab      	cmp	r3, r5
 801e004:	da0e      	bge.n	801e024 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x2c>
 801e006:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 801e00a:	6852      	ldr	r2, [r2, #4]
 801e00c:	428a      	cmp	r2, r1
 801e00e:	d107      	bne.n	801e020 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801e010:	4403      	add	r3, r0
 801e012:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801e016:	b11a      	cbz	r2, 801e020 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801e018:	3a01      	subs	r2, #1
 801e01a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 801e01e:	bd30      	pop	{r4, r5, pc}
 801e020:	3401      	adds	r4, #1
 801e022:	e7ed      	b.n	801e000 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x8>
 801e024:	bd30      	pop	{r4, r5, pc}

0801e026 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801e026:	2300      	movs	r3, #0
 801e028:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801e02c:	30a8      	adds	r0, #168	; 0xa8
 801e02e:	f820 3c24 	strh.w	r3, [r0, #-36]
 801e032:	f802 3b01 	strb.w	r3, [r2], #1
 801e036:	4282      	cmp	r2, r0
 801e038:	d1fb      	bne.n	801e032 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801e03a:	4770      	bx	lr

0801e03c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801e03c:	4603      	mov	r3, r0
 801e03e:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801e042:	2200      	movs	r2, #0
 801e044:	801a      	strh	r2, [r3, #0]
 801e046:	3308      	adds	r3, #8
 801e048:	f823 2c06 	strh.w	r2, [r3, #-6]
 801e04c:	f823 2c04 	strh.w	r2, [r3, #-4]
 801e050:	f823 2c02 	strh.w	r2, [r3, #-2]
 801e054:	428b      	cmp	r3, r1
 801e056:	d1f5      	bne.n	801e044 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801e058:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801e05c:	4770      	bx	lr
	...

0801e060 <_ZN8touchgfx11ApplicationC1Ev>:
 801e060:	b570      	push	{r4, r5, r6, lr}
 801e062:	4b16      	ldr	r3, [pc, #88]	; (801e0bc <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801e064:	2500      	movs	r5, #0
 801e066:	4604      	mov	r4, r0
 801e068:	30a8      	adds	r0, #168	; 0xa8
 801e06a:	f840 3ca8 	str.w	r3, [r0, #-168]
 801e06e:	f820 5c24 	strh.w	r5, [r0, #-36]
 801e072:	f7ff ffe3 	bl	801e03c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801e076:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801e07a:	f7ff ffdf 	bl	801e03c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801e07e:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801e082:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801e086:	490e      	ldr	r1, [pc, #56]	; (801e0c0 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801e088:	480e      	ldr	r0, [pc, #56]	; (801e0c4 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801e08a:	f002 ff93 	bl	8020fb4 <CRC_Lock>
 801e08e:	4e0e      	ldr	r6, [pc, #56]	; (801e0c8 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801e090:	4b0e      	ldr	r3, [pc, #56]	; (801e0cc <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801e092:	b158      	cbz	r0, 801e0ac <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801e094:	801d      	strh	r5, [r3, #0]
 801e096:	2300      	movs	r3, #0
 801e098:	4a0d      	ldr	r2, [pc, #52]	; (801e0d0 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801e09a:	4620      	mov	r0, r4
 801e09c:	6013      	str	r3, [r2, #0]
 801e09e:	4a0d      	ldr	r2, [pc, #52]	; (801e0d4 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801e0a0:	6033      	str	r3, [r6, #0]
 801e0a2:	6013      	str	r3, [r2, #0]
 801e0a4:	f7ff ffbf 	bl	801e026 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801e0a8:	4620      	mov	r0, r4
 801e0aa:	bd70      	pop	{r4, r5, r6, pc}
 801e0ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e0b0:	2002      	movs	r0, #2
 801e0b2:	801a      	strh	r2, [r3, #0]
 801e0b4:	6030      	str	r0, [r6, #0]
 801e0b6:	f000 fe7d 	bl	801edb4 <_ZN8touchgfx6Screen4drawEv>
 801e0ba:	e7ec      	b.n	801e096 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801e0bc:	080252ac 	.word	0x080252ac
 801e0c0:	b5e8b5cd 	.word	0xb5e8b5cd
 801e0c4:	f407a5c2 	.word	0xf407a5c2
 801e0c8:	2000a380 	.word	0x2000a380
 801e0cc:	20000056 	.word	0x20000056
 801e0d0:	2000a388 	.word	0x2000a388
 801e0d4:	2000a384 	.word	0x2000a384

0801e0d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801e0d8:	2300      	movs	r3, #0
 801e0da:	8003      	strh	r3, [r0, #0]
 801e0dc:	8043      	strh	r3, [r0, #2]
 801e0de:	8083      	strh	r3, [r0, #4]
 801e0e0:	80c3      	strh	r3, [r0, #6]
 801e0e2:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801e0e6:	429a      	cmp	r2, r3
 801e0e8:	b530      	push	{r4, r5, lr}
 801e0ea:	da12      	bge.n	801e112 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801e0ec:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801e0f0:	3b01      	subs	r3, #1
 801e0f2:	6825      	ldr	r5, [r4, #0]
 801e0f4:	b29b      	uxth	r3, r3
 801e0f6:	6005      	str	r5, [r0, #0]
 801e0f8:	429a      	cmp	r2, r3
 801e0fa:	6865      	ldr	r5, [r4, #4]
 801e0fc:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801e100:	6045      	str	r5, [r0, #4]
 801e102:	da06      	bge.n	801e112 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801e104:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801e108:	681d      	ldr	r5, [r3, #0]
 801e10a:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801e10e:	685d      	ldr	r5, [r3, #4]
 801e110:	6065      	str	r5, [r4, #4]
 801e112:	bd30      	pop	{r4, r5, pc}

0801e114 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801e114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e116:	e88d 0006 	stmia.w	sp, {r1, r2}
 801e11a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801e11e:	4604      	mov	r4, r0
 801e120:	466b      	mov	r3, sp
 801e122:	2a07      	cmp	r2, #7
 801e124:	dd06      	ble.n	801e134 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801e126:	4b09      	ldr	r3, [pc, #36]	; (801e14c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801e128:	f240 11f9 	movw	r1, #505	; 0x1f9
 801e12c:	4a08      	ldr	r2, [pc, #32]	; (801e150 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801e12e:	4809      	ldr	r0, [pc, #36]	; (801e154 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801e130:	f003 f842 	bl	80211b8 <__assert_func>
 801e134:	1c51      	adds	r1, r2, #1
 801e136:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801e13a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801e13e:	cb03      	ldmia	r3!, {r0, r1}
 801e140:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801e144:	6069      	str	r1, [r5, #4]
 801e146:	b003      	add	sp, #12
 801e148:	bd30      	pop	{r4, r5, pc}
 801e14a:	bf00      	nop
 801e14c:	0802524a 	.word	0x0802524a
 801e150:	08025369 	.word	0x08025369
 801e154:	08025279 	.word	0x08025279

0801e158 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801e158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e15c:	b089      	sub	sp, #36	; 0x24
 801e15e:	4606      	mov	r6, r0
 801e160:	4668      	mov	r0, sp
 801e162:	466c      	mov	r4, sp
 801e164:	e88d 0006 	stmia.w	sp, {r1, r2}
 801e168:	f7ed ff94 	bl	800c094 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e16c:	bbb0      	cbnz	r0, 801e1dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801e16e:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801e172:	b1fd      	cbz	r5, 801e1b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801e174:	3d01      	subs	r5, #1
 801e176:	af04      	add	r7, sp, #16
 801e178:	f04f 090a 	mov.w	r9, #10
 801e17c:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801e180:	ab02      	add	r3, sp, #8
 801e182:	fa1f f885 	uxth.w	r8, r5
 801e186:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801e18a:	6851      	ldr	r1, [r2, #4]
 801e18c:	c303      	stmia	r3!, {r0, r1}
 801e18e:	4621      	mov	r1, r4
 801e190:	a802      	add	r0, sp, #8
 801e192:	f7ff fed9 	bl	801df48 <_ZNK8touchgfx4Rect8includesERKS0_>
 801e196:	bb08      	cbnz	r0, 801e1dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801e198:	a902      	add	r1, sp, #8
 801e19a:	4620      	mov	r0, r4
 801e19c:	f7ff fed4 	bl	801df48 <_ZNK8touchgfx4Rect8includesERKS0_>
 801e1a0:	b1f8      	cbz	r0, 801e1e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801e1a2:	4642      	mov	r2, r8
 801e1a4:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801e1a8:	a806      	add	r0, sp, #24
 801e1aa:	f7ff ff95 	bl	801e0d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e1ae:	f115 35ff 	adds.w	r5, r5, #4294967295
 801e1b2:	d2e3      	bcs.n	801e17c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801e1b4:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801e1b8:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801e1bc:	2b08      	cmp	r3, #8
 801e1be:	d108      	bne.n	801e1d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801e1c0:	4629      	mov	r1, r5
 801e1c2:	a806      	add	r0, sp, #24
 801e1c4:	2207      	movs	r2, #7
 801e1c6:	f7ff ff87 	bl	801e0d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e1ca:	a906      	add	r1, sp, #24
 801e1cc:	4620      	mov	r0, r4
 801e1ce:	f7ed fed5 	bl	800bf7c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e1d2:	4628      	mov	r0, r5
 801e1d4:	e894 0006 	ldmia.w	r4, {r1, r2}
 801e1d8:	f7ff ff9c 	bl	801e114 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801e1dc:	b009      	add	sp, #36	; 0x24
 801e1de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e1e2:	4621      	mov	r1, r4
 801e1e4:	a802      	add	r0, sp, #8
 801e1e6:	f7ed fe06 	bl	800bdf6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e1ea:	b150      	cbz	r0, 801e202 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801e1ec:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801e1f0:	a806      	add	r0, sp, #24
 801e1f2:	4642      	mov	r2, r8
 801e1f4:	f7ff ff70 	bl	801e0d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e1f8:	a902      	add	r1, sp, #8
 801e1fa:	4620      	mov	r0, r4
 801e1fc:	f7ed febe 	bl	800bf7c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e200:	e7d5      	b.n	801e1ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801e202:	e894 0003 	ldmia.w	r4, {r0, r1}
 801e206:	e887 0003 	stmia.w	r7, {r0, r1}
 801e20a:	a902      	add	r1, sp, #8
 801e20c:	4638      	mov	r0, r7
 801e20e:	f7ed feb5 	bl	800bf7c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e212:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801e216:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801e21a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801e21e:	fb13 f302 	smulbb	r3, r3, r2
 801e222:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801e226:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801e22a:	fb11 f102 	smulbb	r1, r1, r2
 801e22e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801e232:	fb09 f303 	mul.w	r3, r9, r3
 801e236:	fb12 1100 	smlabb	r1, r2, r0, r1
 801e23a:	220b      	movs	r2, #11
 801e23c:	434a      	muls	r2, r1
 801e23e:	4293      	cmp	r3, r2
 801e240:	dab5      	bge.n	801e1ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801e242:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801e246:	a806      	add	r0, sp, #24
 801e248:	4642      	mov	r2, r8
 801e24a:	f7ff ff45 	bl	801e0d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e24e:	e897 0003 	ldmia.w	r7, {r0, r1}
 801e252:	e884 0003 	stmia.w	r4, {r0, r1}
 801e256:	e7aa      	b.n	801e1ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801e258 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801e258:	4b1b      	ldr	r3, [pc, #108]	; (801e2c8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x70>)
 801e25a:	b530      	push	{r4, r5, lr}
 801e25c:	460c      	mov	r4, r1
 801e25e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e262:	4b1a      	ldr	r3, [pc, #104]	; (801e2cc <_ZN8touchgfx11Application4drawERNS_4RectE+0x74>)
 801e264:	b085      	sub	sp, #20
 801e266:	4605      	mov	r5, r0
 801e268:	6820      	ldr	r0, [r4, #0]
 801e26a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e26e:	2300      	movs	r3, #0
 801e270:	f8ad 1004 	strh.w	r1, [sp, #4]
 801e274:	f8ad 3000 	strh.w	r3, [sp]
 801e278:	6861      	ldr	r1, [r4, #4]
 801e27a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801e27e:	ab02      	add	r3, sp, #8
 801e280:	f8ad 2006 	strh.w	r2, [sp, #6]
 801e284:	c303      	stmia	r3!, {r0, r1}
 801e286:	4669      	mov	r1, sp
 801e288:	a802      	add	r0, sp, #8
 801e28a:	f7ed fdfb 	bl	800be84 <_ZN8touchgfx4RectaNERKS0_>
 801e28e:	ab02      	add	r3, sp, #8
 801e290:	cb03      	ldmia	r3!, {r0, r1}
 801e292:	4b0f      	ldr	r3, [pc, #60]	; (801e2d0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801e294:	6020      	str	r0, [r4, #0]
 801e296:	6818      	ldr	r0, [r3, #0]
 801e298:	6061      	str	r1, [r4, #4]
 801e29a:	b138      	cbz	r0, 801e2ac <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 801e29c:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801e2a0:	b133      	cbz	r3, 801e2b0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x58>
 801e2a2:	6821      	ldr	r1, [r4, #0]
 801e2a4:	4628      	mov	r0, r5
 801e2a6:	6862      	ldr	r2, [r4, #4]
 801e2a8:	f7ff ff56 	bl	801e158 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801e2ac:	b005      	add	sp, #20
 801e2ae:	bd30      	pop	{r4, r5, pc}
 801e2b0:	6803      	ldr	r3, [r0, #0]
 801e2b2:	4621      	mov	r1, r4
 801e2b4:	689b      	ldr	r3, [r3, #8]
 801e2b6:	4798      	blx	r3
 801e2b8:	4b06      	ldr	r3, [pc, #24]	; (801e2d4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801e2ba:	4621      	mov	r1, r4
 801e2bc:	6818      	ldr	r0, [r3, #0]
 801e2be:	6803      	ldr	r3, [r0, #0]
 801e2c0:	695b      	ldr	r3, [r3, #20]
 801e2c2:	4798      	blx	r3
 801e2c4:	e7f2      	b.n	801e2ac <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 801e2c6:	bf00      	nop
 801e2c8:	2000a320 	.word	0x2000a320
 801e2cc:	2000a322 	.word	0x2000a322
 801e2d0:	2000a380 	.word	0x2000a380
 801e2d4:	2000a32c 	.word	0x2000a32c

0801e2d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801e2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e2dc:	4604      	mov	r4, r0
 801e2de:	b096      	sub	sp, #88	; 0x58
 801e2e0:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801e2e4:	b129      	cbz	r1, 801e2f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801e2e6:	2300      	movs	r3, #0
 801e2e8:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801e2ec:	b016      	add	sp, #88	; 0x58
 801e2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e2f2:	f8b0 30e8 	ldrh.w	r3, [r0, #232]	; 0xe8
 801e2f6:	2b00      	cmp	r3, #0
 801e2f8:	d0f8      	beq.n	801e2ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801e2fa:	4f6e      	ldr	r7, [pc, #440]	; (801e4b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1dc>)
 801e2fc:	a805      	add	r0, sp, #20
 801e2fe:	f7ff fe9d 	bl	801e03c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801e302:	883d      	ldrh	r5, [r7, #0]
 801e304:	462e      	mov	r6, r5
 801e306:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801e30a:	429e      	cmp	r6, r3
 801e30c:	db10      	blt.n	801e330 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x58>
 801e30e:	462e      	mov	r6, r5
 801e310:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801e314:	429e      	cmp	r6, r3
 801e316:	da17      	bge.n	801e348 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801e318:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801e31c:	3601      	adds	r6, #1
 801e31e:	4620      	mov	r0, r4
 801e320:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801e324:	b2b6      	uxth	r6, r6
 801e326:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801e32a:	f7ff ff15 	bl	801e158 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801e32e:	e7ef      	b.n	801e310 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38>
 801e330:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801e334:	3601      	adds	r6, #1
 801e336:	a805      	add	r0, sp, #20
 801e338:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801e33c:	b2b6      	uxth	r6, r6
 801e33e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801e342:	f7ff fee7 	bl	801e114 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801e346:	e7de      	b.n	801e306 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e>
 801e348:	4e5b      	ldr	r6, [pc, #364]	; (801e4b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e0>)
 801e34a:	6833      	ldr	r3, [r6, #0]
 801e34c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801e350:	2b01      	cmp	r3, #1
 801e352:	f040 8094 	bne.w	801e47e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 801e356:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801e35a:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801e35e:	f04f 0900 	mov.w	r9, #0
 801e362:	33aa      	adds	r3, #170	; 0xaa
 801e364:	42a8      	cmp	r0, r5
 801e366:	f103 0308 	add.w	r3, r3, #8
 801e36a:	dd0a      	ble.n	801e382 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xaa>
 801e36c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801e370:	3501      	adds	r5, #1
 801e372:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801e376:	440a      	add	r2, r1
 801e378:	b212      	sxth	r2, r2
 801e37a:	4591      	cmp	r9, r2
 801e37c:	bfb8      	it	lt
 801e37e:	4691      	movlt	r9, r2
 801e380:	e7f0      	b.n	801e364 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x8c>
 801e382:	4b4e      	ldr	r3, [pc, #312]	; (801e4bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e4>)
 801e384:	f8df 813c 	ldr.w	r8, [pc, #316]	; 801e4c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ec>
 801e388:	881d      	ldrh	r5, [r3, #0]
 801e38a:	2300      	movs	r3, #0
 801e38c:	08ed      	lsrs	r5, r5, #3
 801e38e:	f8ad 3004 	strh.w	r3, [sp, #4]
 801e392:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e396:	2d01      	cmp	r5, #1
 801e398:	f8ad 3008 	strh.w	r3, [sp, #8]
 801e39c:	f8ad 300a 	strh.w	r3, [sp, #10]
 801e3a0:	bfb8      	it	lt
 801e3a2:	2501      	movlt	r5, #1
 801e3a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801e3a8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801e3ac:	6830      	ldr	r0, [r6, #0]
 801e3ae:	4413      	add	r3, r2
 801e3b0:	b21b      	sxth	r3, r3
 801e3b2:	4599      	cmp	r9, r3
 801e3b4:	6803      	ldr	r3, [r0, #0]
 801e3b6:	dd45      	ble.n	801e444 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16c>
 801e3b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e3bc:	4798      	blx	r3
 801e3be:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801e3c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801e3c6:	4413      	add	r3, r2
 801e3c8:	b21b      	sxth	r3, r3
 801e3ca:	18ea      	adds	r2, r5, r3
 801e3cc:	4290      	cmp	r0, r2
 801e3ce:	da6d      	bge.n	801e4ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d4>
 801e3d0:	4581      	cmp	r9, r0
 801e3d2:	dd6b      	ble.n	801e4ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d4>
 801e3d4:	4298      	cmp	r0, r3
 801e3d6:	da01      	bge.n	801e3dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x104>
 801e3d8:	2b00      	cmp	r3, #0
 801e3da:	dc69      	bgt.n	801e4b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d8>
 801e3dc:	6830      	ldr	r0, [r6, #0]
 801e3de:	2101      	movs	r1, #1
 801e3e0:	6803      	ldr	r3, [r0, #0]
 801e3e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e3e4:	4798      	blx	r3
 801e3e6:	e7dd      	b.n	801e3a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801e3e8:	4548      	cmp	r0, r9
 801e3ea:	bfa8      	it	ge
 801e3ec:	4648      	movge	r0, r9
 801e3ee:	f9b8 2000 	ldrsh.w	r2, [r8]
 801e3f2:	2100      	movs	r1, #0
 801e3f4:	1ac0      	subs	r0, r0, r3
 801e3f6:	f8b7 a000 	ldrh.w	sl, [r7]
 801e3fa:	f8ad 1004 	strh.w	r1, [sp, #4]
 801e3fe:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e402:	f8ad 2008 	strh.w	r2, [sp, #8]
 801e406:	f8ad 000a 	strh.w	r0, [sp, #10]
 801e40a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801e40e:	459a      	cmp	sl, r3
 801e410:	dac8      	bge.n	801e3a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801e412:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801e416:	ab03      	add	r3, sp, #12
 801e418:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801e41c:	6851      	ldr	r1, [r2, #4]
 801e41e:	c303      	stmia	r3!, {r0, r1}
 801e420:	a803      	add	r0, sp, #12
 801e422:	a901      	add	r1, sp, #4
 801e424:	f7ed fd2e 	bl	800be84 <_ZN8touchgfx4RectaNERKS0_>
 801e428:	a803      	add	r0, sp, #12
 801e42a:	f7ed fe33 	bl	800c094 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e42e:	b920      	cbnz	r0, 801e43a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x162>
 801e430:	6823      	ldr	r3, [r4, #0]
 801e432:	a903      	add	r1, sp, #12
 801e434:	4620      	mov	r0, r4
 801e436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e438:	4798      	blx	r3
 801e43a:	f10a 0a01 	add.w	sl, sl, #1
 801e43e:	fa1f fa8a 	uxth.w	sl, sl
 801e442:	e7e2      	b.n	801e40a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801e444:	69db      	ldr	r3, [r3, #28]
 801e446:	4798      	blx	r3
 801e448:	4b1d      	ldr	r3, [pc, #116]	; (801e4c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e8>)
 801e44a:	781b      	ldrb	r3, [r3, #0]
 801e44c:	2b00      	cmp	r3, #0
 801e44e:	f43f af4d 	beq.w	801e2ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801e452:	2300      	movs	r3, #0
 801e454:	883d      	ldrh	r5, [r7, #0]
 801e456:	34ea      	adds	r4, #234	; 0xea
 801e458:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801e45c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801e460:	429d      	cmp	r5, r3
 801e462:	f6bf af43 	bge.w	801e2ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801e466:	ab16      	add	r3, sp, #88	; 0x58
 801e468:	4620      	mov	r0, r4
 801e46a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801e46e:	3501      	adds	r5, #1
 801e470:	3b44      	subs	r3, #68	; 0x44
 801e472:	b2ad      	uxth	r5, r5
 801e474:	e893 0006 	ldmia.w	r3, {r1, r2}
 801e478:	f7ff fe4c 	bl	801e114 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801e47c:	e7ee      	b.n	801e45c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x184>
 801e47e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801e482:	429d      	cmp	r5, r3
 801e484:	dae0      	bge.n	801e448 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801e486:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801e48a:	ab03      	add	r3, sp, #12
 801e48c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801e490:	6851      	ldr	r1, [r2, #4]
 801e492:	c303      	stmia	r3!, {r0, r1}
 801e494:	a803      	add	r0, sp, #12
 801e496:	f7ed fdfd 	bl	800c094 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e49a:	b920      	cbnz	r0, 801e4a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801e49c:	6823      	ldr	r3, [r4, #0]
 801e49e:	a903      	add	r1, sp, #12
 801e4a0:	4620      	mov	r0, r4
 801e4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e4a4:	4798      	blx	r3
 801e4a6:	3501      	adds	r5, #1
 801e4a8:	b2ad      	uxth	r5, r5
 801e4aa:	e7e8      	b.n	801e47e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 801e4ac:	4298      	cmp	r0, r3
 801e4ae:	da9b      	bge.n	801e3e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x110>
 801e4b0:	4648      	mov	r0, r9
 801e4b2:	e79c      	b.n	801e3ee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x116>
 801e4b4:	20000056 	.word	0x20000056
 801e4b8:	2000a32c 	.word	0x2000a32c
 801e4bc:	2000a322 	.word	0x2000a322
 801e4c0:	2000a32a 	.word	0x2000a32a
 801e4c4:	2000a320 	.word	0x2000a320

0801e4c8 <_ZNK8touchgfx4Font8getGlyphEt>:
 801e4c8:	b513      	push	{r0, r1, r4, lr}
 801e4ca:	2200      	movs	r2, #0
 801e4cc:	ab02      	add	r3, sp, #8
 801e4ce:	9201      	str	r2, [sp, #4]
 801e4d0:	f803 2d05 	strb.w	r2, [r3, #-5]!
 801e4d4:	6802      	ldr	r2, [r0, #0]
 801e4d6:	6894      	ldr	r4, [r2, #8]
 801e4d8:	aa01      	add	r2, sp, #4
 801e4da:	47a0      	blx	r4
 801e4dc:	b002      	add	sp, #8
 801e4de:	bd10      	pop	{r4, pc}

0801e4e0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
 801e4e0:	8940      	ldrh	r0, [r0, #10]
 801e4e2:	4770      	bx	lr

0801e4e4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
 801e4e4:	8980      	ldrh	r0, [r0, #12]
 801e4e6:	4770      	bx	lr

0801e4e8 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801e4e8:	8880      	ldrh	r0, [r0, #4]
 801e4ea:	4770      	bx	lr

0801e4ec <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801e4ec:	7983      	ldrb	r3, [r0, #6]
 801e4ee:	8880      	ldrh	r0, [r0, #4]
 801e4f0:	4418      	add	r0, r3
 801e4f2:	b280      	uxth	r0, r0
 801e4f4:	4770      	bx	lr

0801e4f6 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
 801e4f6:	79c0      	ldrb	r0, [r0, #7]
 801e4f8:	4770      	bx	lr

0801e4fa <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 801e4fa:	2000      	movs	r0, #0
 801e4fc:	4770      	bx	lr

0801e4fe <_ZNK8touchgfx4Font12getCharWidthEt>:
 801e4fe:	b508      	push	{r3, lr}
 801e500:	6803      	ldr	r3, [r0, #0]
 801e502:	68db      	ldr	r3, [r3, #12]
 801e504:	4798      	blx	r3
 801e506:	b140      	cbz	r0, 801e51a <_ZNK8touchgfx4Font12getCharWidthEt+0x1c>
 801e508:	f990 200d 	ldrsb.w	r2, [r0, #13]
 801e50c:	7a83      	ldrb	r3, [r0, #10]
 801e50e:	2a00      	cmp	r2, #0
 801e510:	bfb4      	ite	lt
 801e512:	f44f 7080 	movlt.w	r0, #256	; 0x100
 801e516:	2000      	movge	r0, #0
 801e518:	4318      	orrs	r0, r3
 801e51a:	bd08      	pop	{r3, pc}

0801e51c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801e51c:	b40e      	push	{r1, r2, r3}
 801e51e:	b533      	push	{r0, r1, r4, r5, lr}
 801e520:	ab05      	add	r3, sp, #20
 801e522:	f853 2b04 	ldr.w	r2, [r3], #4
 801e526:	9301      	str	r3, [sp, #4]
 801e528:	4b0a      	ldr	r3, [pc, #40]	; (801e554 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801e52a:	685c      	ldr	r4, [r3, #4]
 801e52c:	f014 0f01 	tst.w	r4, #1
 801e530:	ea4f 0464 	mov.w	r4, r4, asr #1
 801e534:	bf1c      	itt	ne
 801e536:	681b      	ldrne	r3, [r3, #0]
 801e538:	5901      	ldrne	r1, [r0, r4]
 801e53a:	4420      	add	r0, r4
 801e53c:	bf0c      	ite	eq
 801e53e:	681d      	ldreq	r5, [r3, #0]
 801e540:	58cd      	ldrne	r5, [r1, r3]
 801e542:	2100      	movs	r1, #0
 801e544:	9b01      	ldr	r3, [sp, #4]
 801e546:	47a8      	blx	r5
 801e548:	b002      	add	sp, #8
 801e54a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e54e:	b003      	add	sp, #12
 801e550:	4770      	bx	lr
 801e552:	bf00      	nop
 801e554:	20000038 	.word	0x20000038

0801e558 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801e558:	b40c      	push	{r2, r3}
 801e55a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e55c:	ab06      	add	r3, sp, #24
 801e55e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e562:	9301      	str	r3, [sp, #4]
 801e564:	4b09      	ldr	r3, [pc, #36]	; (801e58c <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801e566:	685c      	ldr	r4, [r3, #4]
 801e568:	f014 0f01 	tst.w	r4, #1
 801e56c:	ea4f 0464 	mov.w	r4, r4, asr #1
 801e570:	bf1c      	itt	ne
 801e572:	681b      	ldrne	r3, [r3, #0]
 801e574:	5905      	ldrne	r5, [r0, r4]
 801e576:	4420      	add	r0, r4
 801e578:	bf0c      	ite	eq
 801e57a:	681d      	ldreq	r5, [r3, #0]
 801e57c:	58ed      	ldrne	r5, [r5, r3]
 801e57e:	9b01      	ldr	r3, [sp, #4]
 801e580:	47a8      	blx	r5
 801e582:	b003      	add	sp, #12
 801e584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e588:	b002      	add	sp, #8
 801e58a:	4770      	bx	lr
 801e58c:	20000038 	.word	0x20000038

0801e590 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801e590:	b40e      	push	{r1, r2, r3}
 801e592:	b510      	push	{r4, lr}
 801e594:	b089      	sub	sp, #36	; 0x24
 801e596:	ab0b      	add	r3, sp, #44	; 0x2c
 801e598:	a802      	add	r0, sp, #8
 801e59a:	f853 4b04 	ldr.w	r4, [r3], #4
 801e59e:	9301      	str	r3, [sp, #4]
 801e5a0:	f000 fe56 	bl	801f250 <_ZN8touchgfx12TextProviderC1Ev>
 801e5a4:	4621      	mov	r1, r4
 801e5a6:	9a01      	ldr	r2, [sp, #4]
 801e5a8:	a802      	add	r0, sp, #8
 801e5aa:	2401      	movs	r4, #1
 801e5ac:	f000 fe59 	bl	801f262 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801e5b0:	a802      	add	r0, sp, #8
 801e5b2:	f000 fdfd 	bl	801f1b0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801e5b6:	b138      	cbz	r0, 801e5c8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x38>
 801e5b8:	280a      	cmp	r0, #10
 801e5ba:	a802      	add	r0, sp, #8
 801e5bc:	bf04      	itt	eq
 801e5be:	3401      	addeq	r4, #1
 801e5c0:	b224      	sxtheq	r4, r4
 801e5c2:	f000 fdf5 	bl	801f1b0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801e5c6:	e7f6      	b.n	801e5b6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x26>
 801e5c8:	b2a0      	uxth	r0, r4
 801e5ca:	b009      	add	sp, #36	; 0x24
 801e5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e5d0:	b003      	add	sp, #12
 801e5d2:	4770      	bx	lr

0801e5d4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801e5d4:	b40e      	push	{r1, r2, r3}
 801e5d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5d8:	b088      	sub	sp, #32
 801e5da:	4604      	mov	r4, r0
 801e5dc:	2600      	movs	r6, #0
 801e5de:	ab0d      	add	r3, sp, #52	; 0x34
 801e5e0:	a802      	add	r0, sp, #8
 801e5e2:	f853 5b04 	ldr.w	r5, [r3], #4
 801e5e6:	9301      	str	r3, [sp, #4]
 801e5e8:	f000 fe32 	bl	801f250 <_ZN8touchgfx12TextProviderC1Ev>
 801e5ec:	4629      	mov	r1, r5
 801e5ee:	9a01      	ldr	r2, [sp, #4]
 801e5f0:	a802      	add	r0, sp, #8
 801e5f2:	4d1f      	ldr	r5, [pc, #124]	; (801e670 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x9c>)
 801e5f4:	f000 fe35 	bl	801f262 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801e5f8:	2100      	movs	r1, #0
 801e5fa:	a802      	add	r0, sp, #8
 801e5fc:	f000 fde2 	bl	801f1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e600:	b378      	cbz	r0, 801e662 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801e602:	280a      	cmp	r0, #10
 801e604:	d028      	beq.n	801e658 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 801e606:	6823      	ldr	r3, [r4, #0]
 801e608:	4601      	mov	r1, r0
 801e60a:	4620      	mov	r0, r4
 801e60c:	68db      	ldr	r3, [r3, #12]
 801e60e:	4798      	blx	r3
 801e610:	b310      	cbz	r0, 801e658 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 801e612:	7b41      	ldrb	r1, [r0, #13]
 801e614:	f890 e008 	ldrb.w	lr, [r0, #8]
 801e618:	f011 0f40 	tst.w	r1, #64	; 0x40
 801e61c:	88a3      	ldrh	r3, [r4, #4]
 801e61e:	79c0      	ldrb	r0, [r0, #7]
 801e620:	bf14      	ite	ne
 801e622:	462f      	movne	r7, r5
 801e624:	2700      	moveq	r7, #0
 801e626:	f011 0f20 	tst.w	r1, #32
 801e62a:	ea47 070e 	orr.w	r7, r7, lr
 801e62e:	bf14      	ite	ne
 801e630:	f44f 7280 	movne.w	r2, #256	; 0x100
 801e634:	2200      	moveq	r2, #0
 801e636:	f011 0f10 	tst.w	r1, #16
 801e63a:	ea42 0207 	orr.w	r2, r2, r7
 801e63e:	eba3 0302 	sub.w	r3, r3, r2
 801e642:	bf14      	ite	ne
 801e644:	f44f 7280 	movne.w	r2, #256	; 0x100
 801e648:	2200      	moveq	r2, #0
 801e64a:	4302      	orrs	r2, r0
 801e64c:	fa12 f383 	uxtah	r3, r2, r3
 801e650:	b29b      	uxth	r3, r3
 801e652:	42b3      	cmp	r3, r6
 801e654:	bfc8      	it	gt
 801e656:	b21e      	sxthgt	r6, r3
 801e658:	2100      	movs	r1, #0
 801e65a:	a802      	add	r0, sp, #8
 801e65c:	f000 fdb2 	bl	801f1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e660:	e7ce      	b.n	801e600 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x2c>
 801e662:	b2b0      	uxth	r0, r6
 801e664:	b008      	add	sp, #32
 801e666:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e66a:	b003      	add	sp, #12
 801e66c:	4770      	bx	lr
 801e66e:	bf00      	nop
 801e670:	fffffe00 	.word	0xfffffe00

0801e674 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801e674:	b40e      	push	{r1, r2, r3}
 801e676:	b530      	push	{r4, r5, lr}
 801e678:	b088      	sub	sp, #32
 801e67a:	4605      	mov	r5, r0
 801e67c:	ab0b      	add	r3, sp, #44	; 0x2c
 801e67e:	a802      	add	r0, sp, #8
 801e680:	f853 4b04 	ldr.w	r4, [r3], #4
 801e684:	9301      	str	r3, [sp, #4]
 801e686:	f000 fde3 	bl	801f250 <_ZN8touchgfx12TextProviderC1Ev>
 801e68a:	4621      	mov	r1, r4
 801e68c:	9a01      	ldr	r2, [sp, #4]
 801e68e:	a802      	add	r0, sp, #8
 801e690:	24ff      	movs	r4, #255	; 0xff
 801e692:	f000 fde6 	bl	801f262 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801e696:	2100      	movs	r1, #0
 801e698:	a802      	add	r0, sp, #8
 801e69a:	f000 fd93 	bl	801f1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e69e:	b1a0      	cbz	r0, 801e6ca <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x56>
 801e6a0:	280a      	cmp	r0, #10
 801e6a2:	d00d      	beq.n	801e6c0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801e6a4:	682b      	ldr	r3, [r5, #0]
 801e6a6:	4601      	mov	r1, r0
 801e6a8:	4628      	mov	r0, r5
 801e6aa:	68db      	ldr	r3, [r3, #12]
 801e6ac:	4798      	blx	r3
 801e6ae:	b138      	cbz	r0, 801e6c0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801e6b0:	792b      	ldrb	r3, [r5, #4]
 801e6b2:	7a02      	ldrb	r2, [r0, #8]
 801e6b4:	1a9b      	subs	r3, r3, r2
 801e6b6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801e6ba:	429c      	cmp	r4, r3
 801e6bc:	bfa8      	it	ge
 801e6be:	461c      	movge	r4, r3
 801e6c0:	2100      	movs	r1, #0
 801e6c2:	a802      	add	r0, sp, #8
 801e6c4:	f000 fd7e 	bl	801f1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e6c8:	e7e9      	b.n	801e69e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x2a>
 801e6ca:	4620      	mov	r0, r4
 801e6cc:	b008      	add	sp, #32
 801e6ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e6d2:	b003      	add	sp, #12
 801e6d4:	4770      	bx	lr

0801e6d6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801e6d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6da:	f04f 0a00 	mov.w	sl, #0
 801e6de:	b087      	sub	sp, #28
 801e6e0:	4614      	mov	r4, r2
 801e6e2:	461d      	mov	r5, r3
 801e6e4:	4606      	mov	r6, r0
 801e6e6:	4657      	mov	r7, sl
 801e6e8:	4668      	mov	r0, sp
 801e6ea:	46d1      	mov	r9, sl
 801e6ec:	4688      	mov	r8, r1
 801e6ee:	f000 fdaf 	bl	801f250 <_ZN8touchgfx12TextProviderC1Ev>
 801e6f2:	462a      	mov	r2, r5
 801e6f4:	4621      	mov	r1, r4
 801e6f6:	4668      	mov	r0, sp
 801e6f8:	f000 fdb3 	bl	801f262 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801e6fc:	4641      	mov	r1, r8
 801e6fe:	4668      	mov	r0, sp
 801e700:	f000 fd60 	bl	801f1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e704:	4605      	mov	r5, r0
 801e706:	b108      	cbz	r0, 801e70c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x36>
 801e708:	280a      	cmp	r0, #10
 801e70a:	d107      	bne.n	801e71c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801e70c:	45b9      	cmp	r9, r7
 801e70e:	dd00      	ble.n	801e712 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x3c>
 801e710:	464f      	mov	r7, r9
 801e712:	f04f 0900 	mov.w	r9, #0
 801e716:	e01e      	b.n	801e756 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x80>
 801e718:	46aa      	mov	sl, r5
 801e71a:	e7ef      	b.n	801e6fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x26>
 801e71c:	6833      	ldr	r3, [r6, #0]
 801e71e:	4601      	mov	r1, r0
 801e720:	4630      	mov	r0, r6
 801e722:	68db      	ldr	r3, [r3, #12]
 801e724:	4798      	blx	r3
 801e726:	4602      	mov	r2, r0
 801e728:	2800      	cmp	r0, #0
 801e72a:	d0f5      	beq.n	801e718 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x42>
 801e72c:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801e730:	4651      	mov	r1, sl
 801e732:	f890 b00a 	ldrb.w	fp, [r0, #10]
 801e736:	2b00      	cmp	r3, #0
 801e738:	6833      	ldr	r3, [r6, #0]
 801e73a:	8885      	ldrh	r5, [r0, #4]
 801e73c:	4630      	mov	r0, r6
 801e73e:	bfb4      	ite	lt
 801e740:	f44f 7480 	movlt.w	r4, #256	; 0x100
 801e744:	2400      	movge	r4, #0
 801e746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e748:	ea44 040b 	orr.w	r4, r4, fp
 801e74c:	4798      	blx	r3
 801e74e:	4404      	add	r4, r0
 801e750:	444c      	add	r4, r9
 801e752:	fa1f f984 	uxth.w	r9, r4
 801e756:	2d00      	cmp	r5, #0
 801e758:	d1de      	bne.n	801e718 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x42>
 801e75a:	4638      	mov	r0, r7
 801e75c:	b007      	add	sp, #28
 801e75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e762 <_ZNK8touchgfx8Drawable7getTypeEv>:
 801e762:	2000      	movs	r0, #0
 801e764:	4770      	bx	lr

0801e766 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801e766:	b513      	push	{r0, r1, r4, lr}
 801e768:	1d01      	adds	r1, r0, #4
 801e76a:	4603      	mov	r3, r0
 801e76c:	c903      	ldmia	r1, {r0, r1}
 801e76e:	e88d 0003 	stmia.w	sp, {r0, r1}
 801e772:	2100      	movs	r1, #0
 801e774:	4618      	mov	r0, r3
 801e776:	f8ad 1000 	strh.w	r1, [sp]
 801e77a:	f8ad 1002 	strh.w	r1, [sp, #2]
 801e77e:	6819      	ldr	r1, [r3, #0]
 801e780:	690c      	ldr	r4, [r1, #16]
 801e782:	4669      	mov	r1, sp
 801e784:	47a0      	blx	r4
 801e786:	b002      	add	sp, #8
 801e788:	bd10      	pop	{r4, pc}

0801e78a <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801e78a:	b538      	push	{r3, r4, r5, lr}
 801e78c:	680b      	ldr	r3, [r1, #0]
 801e78e:	460c      	mov	r4, r1
 801e790:	4605      	mov	r5, r0
 801e792:	68db      	ldr	r3, [r3, #12]
 801e794:	4798      	blx	r3
 801e796:	6823      	ldr	r3, [r4, #0]
 801e798:	4620      	mov	r0, r4
 801e79a:	4629      	mov	r1, r5
 801e79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e79e:	4798      	blx	r3
 801e7a0:	4628      	mov	r0, r5
 801e7a2:	bd38      	pop	{r3, r4, r5, pc}

0801e7a4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801e7a4:	b410      	push	{r4}
 801e7a6:	880a      	ldrh	r2, [r1, #0]
 801e7a8:	8884      	ldrh	r4, [r0, #4]
 801e7aa:	4422      	add	r2, r4
 801e7ac:	800a      	strh	r2, [r1, #0]
 801e7ae:	884a      	ldrh	r2, [r1, #2]
 801e7b0:	88c4      	ldrh	r4, [r0, #6]
 801e7b2:	4422      	add	r2, r4
 801e7b4:	804a      	strh	r2, [r1, #2]
 801e7b6:	6940      	ldr	r0, [r0, #20]
 801e7b8:	b120      	cbz	r0, 801e7c4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801e7ba:	6803      	ldr	r3, [r0, #0]
 801e7bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e7c2:	4718      	bx	r3
 801e7c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e7c8:	4770      	bx	lr

0801e7ca <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801e7ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e7cc:	460b      	mov	r3, r1
 801e7ce:	b085      	sub	sp, #20
 801e7d0:	4604      	mov	r4, r0
 801e7d2:	b901      	cbnz	r1, 801e7d6 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801e7d4:	b1f2      	cbz	r2, 801e814 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4a>
 801e7d6:	1d27      	adds	r7, r4, #4
 801e7d8:	ad02      	add	r5, sp, #8
 801e7da:	e897 0003 	ldmia.w	r7, {r0, r1}
 801e7de:	e88d 0003 	stmia.w	sp, {r0, r1}
 801e7e2:	88e1      	ldrh	r1, [r4, #6]
 801e7e4:	4620      	mov	r0, r4
 801e7e6:	440a      	add	r2, r1
 801e7e8:	88a1      	ldrh	r1, [r4, #4]
 801e7ea:	4419      	add	r1, r3
 801e7ec:	6823      	ldr	r3, [r4, #0]
 801e7ee:	b212      	sxth	r2, r2
 801e7f0:	b209      	sxth	r1, r1
 801e7f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e7f4:	4798      	blx	r3
 801e7f6:	e897 0003 	ldmia.w	r7, {r0, r1}
 801e7fa:	e885 0003 	stmia.w	r5, {r0, r1}
 801e7fe:	6960      	ldr	r0, [r4, #20]
 801e800:	b150      	cbz	r0, 801e818 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4e>
 801e802:	6803      	ldr	r3, [r0, #0]
 801e804:	4669      	mov	r1, sp
 801e806:	691b      	ldr	r3, [r3, #16]
 801e808:	4798      	blx	r3
 801e80a:	6960      	ldr	r0, [r4, #20]
 801e80c:	6803      	ldr	r3, [r0, #0]
 801e80e:	691b      	ldr	r3, [r3, #16]
 801e810:	4629      	mov	r1, r5
 801e812:	4798      	blx	r3
 801e814:	b005      	add	sp, #20
 801e816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e818:	f7ff fbb8 	bl	801df8c <_ZN8touchgfx11Application11getInstanceEv>
 801e81c:	6803      	ldr	r3, [r0, #0]
 801e81e:	4669      	mov	r1, sp
 801e820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e822:	4798      	blx	r3
 801e824:	f7ff fbb2 	bl	801df8c <_ZN8touchgfx11Application11getInstanceEv>
 801e828:	6803      	ldr	r3, [r0, #0]
 801e82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e82c:	e7f0      	b.n	801e810 <_ZN8touchgfx8Drawable12moveRelativeEss+0x46>

0801e82e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801e82e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e830:	8882      	ldrh	r2, [r0, #4]
 801e832:	4605      	mov	r5, r0
 801e834:	880b      	ldrh	r3, [r1, #0]
 801e836:	460c      	mov	r4, r1
 801e838:	4413      	add	r3, r2
 801e83a:	800b      	strh	r3, [r1, #0]
 801e83c:	884b      	ldrh	r3, [r1, #2]
 801e83e:	88c2      	ldrh	r2, [r0, #6]
 801e840:	4413      	add	r3, r2
 801e842:	4602      	mov	r2, r0
 801e844:	804b      	strh	r3, [r1, #2]
 801e846:	466b      	mov	r3, sp
 801e848:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801e84c:	6851      	ldr	r1, [r2, #4]
 801e84e:	c303      	stmia	r3!, {r0, r1}
 801e850:	4621      	mov	r1, r4
 801e852:	4668      	mov	r0, sp
 801e854:	f7ed fb16 	bl	800be84 <_ZN8touchgfx4RectaNERKS0_>
 801e858:	466b      	mov	r3, sp
 801e85a:	cb03      	ldmia	r3!, {r0, r1}
 801e85c:	6020      	str	r0, [r4, #0]
 801e85e:	6061      	str	r1, [r4, #4]
 801e860:	6968      	ldr	r0, [r5, #20]
 801e862:	b128      	cbz	r0, 801e870 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801e864:	6803      	ldr	r3, [r0, #0]
 801e866:	691b      	ldr	r3, [r3, #16]
 801e868:	4621      	mov	r1, r4
 801e86a:	4798      	blx	r3
 801e86c:	b003      	add	sp, #12
 801e86e:	bd30      	pop	{r4, r5, pc}
 801e870:	f7ff fb8c 	bl	801df8c <_ZN8touchgfx11Application11getInstanceEv>
 801e874:	6803      	ldr	r3, [r0, #0]
 801e876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e878:	e7f6      	b.n	801e868 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801e87a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801e87a:	b570      	push	{r4, r5, r6, lr}
 801e87c:	8882      	ldrh	r2, [r0, #4]
 801e87e:	460c      	mov	r4, r1
 801e880:	880b      	ldrh	r3, [r1, #0]
 801e882:	4605      	mov	r5, r0
 801e884:	4413      	add	r3, r2
 801e886:	800b      	strh	r3, [r1, #0]
 801e888:	884b      	ldrh	r3, [r1, #2]
 801e88a:	88c2      	ldrh	r2, [r0, #6]
 801e88c:	4413      	add	r3, r2
 801e88e:	804b      	strh	r3, [r1, #2]
 801e890:	1d01      	adds	r1, r0, #4
 801e892:	4620      	mov	r0, r4
 801e894:	f7ed faf6 	bl	800be84 <_ZN8touchgfx4RectaNERKS0_>
 801e898:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801e89c:	b163      	cbz	r3, 801e8b8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801e89e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801e8a2:	b933      	cbnz	r3, 801e8b2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x38>
 801e8a4:	bd70      	pop	{r4, r5, r6, pc}
 801e8a6:	6803      	ldr	r3, [r0, #0]
 801e8a8:	4621      	mov	r1, r4
 801e8aa:	6a1b      	ldr	r3, [r3, #32]
 801e8ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e8b0:	4718      	bx	r3
 801e8b2:	6968      	ldr	r0, [r5, #20]
 801e8b4:	2800      	cmp	r0, #0
 801e8b6:	d1f6      	bne.n	801e8a6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x2c>
 801e8b8:	bd70      	pop	{r4, r5, r6, pc}

0801e8ba <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801e8ba:	b510      	push	{r4, lr}
 801e8bc:	2300      	movs	r3, #0
 801e8be:	4604      	mov	r4, r0
 801e8c0:	4608      	mov	r0, r1
 801e8c2:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801e8c6:	8023      	strh	r3, [r4, #0]
 801e8c8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801e8cc:	8063      	strh	r3, [r4, #2]
 801e8ce:	6803      	ldr	r3, [r0, #0]
 801e8d0:	80a1      	strh	r1, [r4, #4]
 801e8d2:	4621      	mov	r1, r4
 801e8d4:	80e2      	strh	r2, [r4, #6]
 801e8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e8d8:	4798      	blx	r3
 801e8da:	4620      	mov	r0, r4
 801e8dc:	bd10      	pop	{r4, pc}
	...

0801e8e0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt>:
 801e8e0:	b510      	push	{r4, lr}
 801e8e2:	8083      	strh	r3, [r0, #4]
 801e8e4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801e8e8:	6101      	str	r1, [r0, #16]
 801e8ea:	7183      	strb	r3, [r0, #6]
 801e8ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801e8f0:	8282      	strh	r2, [r0, #20]
 801e8f2:	71c3      	strb	r3, [r0, #7]
 801e8f4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801e8f8:	7203      	strb	r3, [r0, #8]
 801e8fa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e8fe:	7243      	strb	r3, [r0, #9]
 801e900:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801e904:	8143      	strh	r3, [r0, #10]
 801e906:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801e90a:	8183      	strh	r3, [r0, #12]
 801e90c:	4b01      	ldr	r3, [pc, #4]	; (801e914 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt+0x34>)
 801e90e:	6003      	str	r3, [r0, #0]
 801e910:	bd10      	pop	{r4, pc}
 801e912:	bf00      	nop
 801e914:	0802548c 	.word	0x0802548c

0801e918 <_ZNK8touchgfx9ConstFont4findEt>:
 801e918:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e91a:	8a84      	ldrh	r4, [r0, #20]
 801e91c:	2500      	movs	r5, #0
 801e91e:	260e      	movs	r6, #14
 801e920:	3c01      	subs	r4, #1
 801e922:	42a5      	cmp	r5, r4
 801e924:	dc0c      	bgt.n	801e940 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801e926:	192a      	adds	r2, r5, r4
 801e928:	6903      	ldr	r3, [r0, #16]
 801e92a:	1052      	asrs	r2, r2, #1
 801e92c:	fb06 3302 	mla	r3, r6, r2, r3
 801e930:	889f      	ldrh	r7, [r3, #4]
 801e932:	42b9      	cmp	r1, r7
 801e934:	da01      	bge.n	801e93a <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801e936:	1e54      	subs	r4, r2, #1
 801e938:	e7f3      	b.n	801e922 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801e93a:	dd02      	ble.n	801e942 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801e93c:	1c55      	adds	r5, r2, #1
 801e93e:	e7f0      	b.n	801e922 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801e940:	2300      	movs	r3, #0
 801e942:	4618      	mov	r0, r3
 801e944:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e946 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801e946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e948:	4605      	mov	r5, r0
 801e94a:	4617      	mov	r7, r2
 801e94c:	461e      	mov	r6, r3
 801e94e:	f7ff ffe3 	bl	801e918 <_ZNK8touchgfx9ConstFont4findEt>
 801e952:	b9e0      	cbnz	r0, 801e98e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801e954:	b911      	cbnz	r1, 801e95c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801e956:	2400      	movs	r4, #0
 801e958:	4620      	mov	r0, r4
 801e95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e95c:	290a      	cmp	r1, #10
 801e95e:	d0fa      	beq.n	801e956 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801e960:	682b      	ldr	r3, [r5, #0]
 801e962:	4628      	mov	r0, r5
 801e964:	691b      	ldr	r3, [r3, #16]
 801e966:	4798      	blx	r3
 801e968:	4601      	mov	r1, r0
 801e96a:	4628      	mov	r0, r5
 801e96c:	f7ff ffd4 	bl	801e918 <_ZNK8touchgfx9ConstFont4findEt>
 801e970:	4604      	mov	r4, r0
 801e972:	2800      	cmp	r0, #0
 801e974:	d0ef      	beq.n	801e956 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801e976:	682b      	ldr	r3, [r5, #0]
 801e978:	4621      	mov	r1, r4
 801e97a:	4628      	mov	r0, r5
 801e97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e97e:	4798      	blx	r3
 801e980:	6038      	str	r0, [r7, #0]
 801e982:	682b      	ldr	r3, [r5, #0]
 801e984:	4628      	mov	r0, r5
 801e986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e988:	4798      	blx	r3
 801e98a:	7030      	strb	r0, [r6, #0]
 801e98c:	e7e4      	b.n	801e958 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801e98e:	4604      	mov	r4, r0
 801e990:	e7f1      	b.n	801e976 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801e992 <_ZN8touchgfx6memsetEPvhm>:
 801e992:	4402      	add	r2, r0
 801e994:	4290      	cmp	r0, r2
 801e996:	d002      	beq.n	801e99e <_ZN8touchgfx6memsetEPvhm+0xc>
 801e998:	f800 1b01 	strb.w	r1, [r0], #1
 801e99c:	e7fa      	b.n	801e994 <_ZN8touchgfx6memsetEPvhm+0x2>
 801e99e:	4770      	bx	lr

0801e9a0 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801e9a0:	2002      	movs	r0, #2
 801e9a2:	4770      	bx	lr

0801e9a4 <_ZN8touchgfx12GestureEventD1Ev>:
 801e9a4:	4770      	bx	lr

0801e9a6 <_ZN8touchgfx12GestureEventD0Ev>:
 801e9a6:	b510      	push	{r4, lr}
 801e9a8:	4604      	mov	r4, r0
 801e9aa:	210c      	movs	r1, #12
 801e9ac:	f002 fbe7 	bl	802117e <_ZdlPvj>
 801e9b0:	4620      	mov	r0, r4
 801e9b2:	bd10      	pop	{r4, pc}

0801e9b4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801e9b4:	b530      	push	{r4, r5, lr}
 801e9b6:	460d      	mov	r5, r1
 801e9b8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801e9ba:	b087      	sub	sp, #28
 801e9bc:	4604      	mov	r4, r0
 801e9be:	b301      	cbz	r1, 801ea02 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801e9c0:	a801      	add	r0, sp, #4
 801e9c2:	f7ff ff7a 	bl	801e8ba <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e9c6:	892a      	ldrh	r2, [r5, #8]
 801e9c8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801e9cc:	7928      	ldrb	r0, [r5, #4]
 801e9ce:	1ad2      	subs	r2, r2, r3
 801e9d0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801e9d2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801e9d6:	441a      	add	r2, r3
 801e9d8:	896b      	ldrh	r3, [r5, #10]
 801e9da:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801e9de:	f88d 0010 	strb.w	r0, [sp, #16]
 801e9e2:	1b5b      	subs	r3, r3, r5
 801e9e4:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801e9e6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e9e8:	442b      	add	r3, r5
 801e9ea:	4d07      	ldr	r5, [pc, #28]	; (801ea08 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801e9ec:	f8ad 1012 	strh.w	r1, [sp, #18]
 801e9f0:	a903      	add	r1, sp, #12
 801e9f2:	9503      	str	r5, [sp, #12]
 801e9f4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e9f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e9fc:	6803      	ldr	r3, [r0, #0]
 801e9fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ea00:	4798      	blx	r3
 801ea02:	b007      	add	sp, #28
 801ea04:	bd30      	pop	{r4, r5, pc}
 801ea06:	bf00      	nop
 801ea08:	080254d8 	.word	0x080254d8

0801ea0c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801ea0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ea0e:	460c      	mov	r4, r1
 801ea10:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801ea12:	b089      	sub	sp, #36	; 0x24
 801ea14:	4605      	mov	r5, r0
 801ea16:	2900      	cmp	r1, #0
 801ea18:	d053      	beq.n	801eac2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb6>
 801ea1a:	4668      	mov	r0, sp
 801ea1c:	f7ff ff4d 	bl	801e8ba <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ea20:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801ea22:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801ea24:	4668      	mov	r0, sp
 801ea26:	8922      	ldrh	r2, [r4, #8]
 801ea28:	88e1      	ldrh	r1, [r4, #6]
 801ea2a:	443a      	add	r2, r7
 801ea2c:	4431      	add	r1, r6
 801ea2e:	b212      	sxth	r2, r2
 801ea30:	b209      	sxth	r1, r1
 801ea32:	f7ed f9b1 	bl	800bd98 <_ZNK8touchgfx4Rect9intersectEss>
 801ea36:	b1c8      	cbz	r0, 801ea6c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801ea38:	89a2      	ldrh	r2, [r4, #12]
 801ea3a:	4668      	mov	r0, sp
 801ea3c:	8961      	ldrh	r1, [r4, #10]
 801ea3e:	443a      	add	r2, r7
 801ea40:	4431      	add	r1, r6
 801ea42:	b212      	sxth	r2, r2
 801ea44:	b209      	sxth	r1, r1
 801ea46:	f7ed f9a7 	bl	800bd98 <_ZNK8touchgfx4Rect9intersectEss>
 801ea4a:	b978      	cbnz	r0, 801ea6c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801ea4c:	4b1e      	ldr	r3, [pc, #120]	; (801eac8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801ea4e:	a904      	add	r1, sp, #16
 801ea50:	f8ad 0016 	strh.w	r0, [sp, #22]
 801ea54:	9304      	str	r3, [sp, #16]
 801ea56:	2302      	movs	r3, #2
 801ea58:	f8ad 0018 	strh.w	r0, [sp, #24]
 801ea5c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ea60:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801ea62:	f88d 3014 	strb.w	r3, [sp, #20]
 801ea66:	6803      	ldr	r3, [r0, #0]
 801ea68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ea6a:	4798      	blx	r3
 801ea6c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801ea6e:	a802      	add	r0, sp, #8
 801ea70:	f7ff ff23 	bl	801e8ba <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ea74:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801ea78:	88e0      	ldrh	r0, [r4, #6]
 801ea7a:	8961      	ldrh	r1, [r4, #10]
 801ea7c:	f8b5 e034 	ldrh.w	lr, [r5, #52]	; 0x34
 801ea80:	1a80      	subs	r0, r0, r2
 801ea82:	f8bd c00a 	ldrh.w	ip, [sp, #10]
 801ea86:	1a89      	subs	r1, r1, r2
 801ea88:	8923      	ldrh	r3, [r4, #8]
 801ea8a:	4470      	add	r0, lr
 801ea8c:	89a2      	ldrh	r2, [r4, #12]
 801ea8e:	4471      	add	r1, lr
 801ea90:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801ea92:	eba3 030c 	sub.w	r3, r3, ip
 801ea96:	eba2 020c 	sub.w	r2, r2, ip
 801ea9a:	f8ad 0016 	strh.w	r0, [sp, #22]
 801ea9e:	7927      	ldrb	r7, [r4, #4]
 801eaa0:	4433      	add	r3, r6
 801eaa2:	4432      	add	r2, r6
 801eaa4:	4c09      	ldr	r4, [pc, #36]	; (801eacc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801eaa6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801eaa8:	f8ad 101a 	strh.w	r1, [sp, #26]
 801eaac:	a904      	add	r1, sp, #16
 801eaae:	9404      	str	r4, [sp, #16]
 801eab0:	f88d 7014 	strb.w	r7, [sp, #20]
 801eab4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801eab8:	f8ad 201c 	strh.w	r2, [sp, #28]
 801eabc:	6803      	ldr	r3, [r0, #0]
 801eabe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801eac0:	4798      	blx	r3
 801eac2:	b009      	add	sp, #36	; 0x24
 801eac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eac6:	bf00      	nop
 801eac8:	08022e80 	.word	0x08022e80
 801eacc:	08022e6c 	.word	0x08022e6c

0801ead0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801ead0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ead4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801ead6:	b0a1      	sub	sp, #132	; 0x84
 801ead8:	4604      	mov	r4, r0
 801eada:	460d      	mov	r5, r1
 801eadc:	790b      	ldrb	r3, [r1, #4]
 801eade:	b16a      	cbz	r2, 801eafc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801eae0:	b963      	cbnz	r3, 801eafc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801eae2:	b021      	add	sp, #132	; 0x84
 801eae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eae8:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801eaec:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801eaf0:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801eaf4:	1d20      	adds	r0, r4, #4
 801eaf6:	f7ed fda3 	bl	800c640 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801eafa:	e0a2      	b.n	801ec42 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 801eafc:	2b00      	cmp	r3, #0
 801eafe:	f040 80a0 	bne.w	801ec42 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 801eb02:	4a66      	ldr	r2, [pc, #408]	; (801ec9c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1cc>)
 801eb04:	6812      	ldr	r2, [r2, #0]
 801eb06:	f892 b045 	ldrb.w	fp, [r2, #69]	; 0x45
 801eb0a:	86a3      	strh	r3, [r4, #52]	; 0x34
 801eb0c:	f1bb 0f03 	cmp.w	fp, #3
 801eb10:	86e3      	strh	r3, [r4, #54]	; 0x36
 801eb12:	dde9      	ble.n	801eae8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x18>
 801eb14:	f1bb 0f0c 	cmp.w	fp, #12
 801eb18:	6323      	str	r3, [r4, #48]	; 0x30
 801eb1a:	f04f 0303 	mov.w	r3, #3
 801eb1e:	f04f 0600 	mov.w	r6, #0
 801eb22:	bfd8      	it	le
 801eb24:	f10b 32ff 	addle.w	r2, fp, #4294967295
 801eb28:	495d      	ldr	r1, [pc, #372]	; (801eca0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d0>)
 801eb2a:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 801eb2e:	f04f 0a01 	mov.w	sl, #1
 801eb32:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
 801eb36:	bfd8      	it	le
 801eb38:	fb92 f3f3 	sdivle	r3, r2, r3
 801eb3c:	9300      	str	r3, [sp, #0]
 801eb3e:	4b59      	ldr	r3, [pc, #356]	; (801eca4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d4>)
 801eb40:	f9b3 2000 	ldrsh.w	r2, [r3]
 801eb44:	4b58      	ldr	r3, [pc, #352]	; (801eca8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d8>)
 801eb46:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801eb4a:	2248      	movs	r2, #72	; 0x48
 801eb4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801eb50:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801eb54:	ab0e      	add	r3, sp, #56	; 0x38
 801eb56:	4618      	mov	r0, r3
 801eb58:	f002 fb98 	bl	802128c <memcpy>
 801eb5c:	f04f 32ff 	mov.w	r2, #4294967295
 801eb60:	f8cd b008 	str.w	fp, [sp, #8]
 801eb64:	9206      	str	r2, [sp, #24]
 801eb66:	9007      	str	r0, [sp, #28]
 801eb68:	9a00      	ldr	r2, [sp, #0]
 801eb6a:	9b02      	ldr	r3, [sp, #8]
 801eb6c:	fb93 f3f2 	sdiv	r3, r3, r2
 801eb70:	f10a 32ff 	add.w	r2, sl, #4294967295
 801eb74:	b29b      	uxth	r3, r3
 801eb76:	9201      	str	r2, [sp, #4]
 801eb78:	9a07      	ldr	r2, [sp, #28]
 801eb7a:	9303      	str	r3, [sp, #12]
 801eb7c:	eb02 07ca 	add.w	r7, r2, sl, lsl #3
 801eb80:	3f04      	subs	r7, #4
 801eb82:	2300      	movs	r3, #0
 801eb84:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801eb88:	f8b5 8006 	ldrh.w	r8, [r5, #6]
 801eb8c:	a80a      	add	r0, sp, #40	; 0x28
 801eb8e:	9309      	str	r3, [sp, #36]	; 0x24
 801eb90:	f857 3c04 	ldr.w	r3, [r7, #-4]
 801eb94:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 801eb98:	fb13 f302 	smulbb	r3, r3, r2
 801eb9c:	b29b      	uxth	r3, r3
 801eb9e:	9304      	str	r3, [sp, #16]
 801eba0:	683b      	ldr	r3, [r7, #0]
 801eba2:	fb13 f302 	smulbb	r3, r3, r2
 801eba6:	b29b      	uxth	r3, r3
 801eba8:	9305      	str	r3, [sp, #20]
 801ebaa:	9b04      	ldr	r3, [sp, #16]
 801ebac:	4498      	add	r8, r3
 801ebae:	9b05      	ldr	r3, [sp, #20]
 801ebb0:	4499      	add	r9, r3
 801ebb2:	fa0f f888 	sxth.w	r8, r8
 801ebb6:	fa0f f989 	sxth.w	r9, r9
 801ebba:	4641      	mov	r1, r8
 801ebbc:	464a      	mov	r2, r9
 801ebbe:	f7ed f8eb 	bl	800bd98 <_ZNK8touchgfx4Rect9intersectEss>
 801ebc2:	b380      	cbz	r0, 801ec26 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801ebc4:	4641      	mov	r1, r8
 801ebc6:	ab09      	add	r3, sp, #36	; 0x24
 801ebc8:	464a      	mov	r2, r9
 801ebca:	1d20      	adds	r0, r4, #4
 801ebcc:	f7ed fd38 	bl	800c640 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801ebd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ebd2:	b341      	cbz	r1, 801ec26 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801ebd4:	42b1      	cmp	r1, r6
 801ebd6:	d026      	beq.n	801ec26 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801ebd8:	a80c      	add	r0, sp, #48	; 0x30
 801ebda:	f7ff fe6e 	bl	801e8ba <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ebde:	2002      	movs	r0, #2
 801ebe0:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801ebe4:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801ebe8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801ebec:	fb92 f2f0 	sdiv	r2, r2, r0
 801ebf0:	440a      	add	r2, r1
 801ebf2:	1a99      	subs	r1, r3, r2
 801ebf4:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801ebf8:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801ebfc:	fb93 f3f0 	sdiv	r3, r3, r0
 801ec00:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801ec04:	4403      	add	r3, r0
 801ec06:	1ad3      	subs	r3, r2, r3
 801ec08:	9a06      	ldr	r2, [sp, #24]
 801ec0a:	435b      	muls	r3, r3
 801ec0c:	fb01 3301 	mla	r3, r1, r1, r3
 801ec10:	4293      	cmp	r3, r2
 801ec12:	d208      	bcs.n	801ec26 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801ec14:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ec18:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801ec1a:	86a2      	strh	r2, [r4, #52]	; 0x34
 801ec1c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801ec20:	6326      	str	r6, [r4, #48]	; 0x30
 801ec22:	86e2      	strh	r2, [r4, #54]	; 0x36
 801ec24:	9306      	str	r3, [sp, #24]
 801ec26:	9b01      	ldr	r3, [sp, #4]
 801ec28:	3710      	adds	r7, #16
 801ec2a:	3302      	adds	r3, #2
 801ec2c:	2b08      	cmp	r3, #8
 801ec2e:	9301      	str	r3, [sp, #4]
 801ec30:	dda7      	ble.n	801eb82 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xb2>
 801ec32:	9b02      	ldr	r3, [sp, #8]
 801ec34:	f10a 0a01 	add.w	sl, sl, #1
 801ec38:	445b      	add	r3, fp
 801ec3a:	9302      	str	r3, [sp, #8]
 801ec3c:	9b00      	ldr	r3, [sp, #0]
 801ec3e:	4553      	cmp	r3, sl
 801ec40:	da92      	bge.n	801eb68 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x98>
 801ec42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801ec44:	2900      	cmp	r1, #0
 801ec46:	f43f af4c 	beq.w	801eae2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801ec4a:	a80c      	add	r0, sp, #48	; 0x30
 801ec4c:	2600      	movs	r6, #0
 801ec4e:	f7ff fe34 	bl	801e8ba <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ec52:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801ec56:	88ea      	ldrh	r2, [r5, #6]
 801ec58:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801ec5c:	1ad2      	subs	r2, r2, r3
 801ec5e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801ec60:	7929      	ldrb	r1, [r5, #4]
 801ec62:	441a      	add	r2, r3
 801ec64:	892b      	ldrh	r3, [r5, #8]
 801ec66:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801ec6a:	a90e      	add	r1, sp, #56	; 0x38
 801ec6c:	1a1b      	subs	r3, r3, r0
 801ec6e:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801ec70:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801ec74:	4403      	add	r3, r0
 801ec76:	480d      	ldr	r0, [pc, #52]	; (801ecac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1dc>)
 801ec78:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801ec7c:	900e      	str	r0, [sp, #56]	; 0x38
 801ec7e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ec80:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801ec84:	6803      	ldr	r3, [r0, #0]
 801ec86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ec88:	4798      	blx	r3
 801ec8a:	792b      	ldrb	r3, [r5, #4]
 801ec8c:	2b00      	cmp	r3, #0
 801ec8e:	f43f af28 	beq.w	801eae2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801ec92:	6326      	str	r6, [r4, #48]	; 0x30
 801ec94:	86a6      	strh	r6, [r4, #52]	; 0x34
 801ec96:	86e6      	strh	r6, [r4, #54]	; 0x36
 801ec98:	e723      	b.n	801eae2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801ec9a:	bf00      	nop
 801ec9c:	2000a32c 	.word	0x2000a32c
 801eca0:	08022cac 	.word	0x08022cac
 801eca4:	2000a320 	.word	0x2000a320
 801eca8:	2000a322 	.word	0x2000a322
 801ecac:	08022e80 	.word	0x08022e80

0801ecb0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801ecb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ecb2:	4604      	mov	r4, r0
 801ecb4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801ecb8:	3201      	adds	r2, #1
 801ecba:	d114      	bne.n	801ece6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x36>
 801ecbc:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 801ecc0:	2200      	movs	r2, #0
 801ecc2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801ecc6:	6803      	ldr	r3, [r0, #0]
 801ecc8:	f8ad 1006 	strh.w	r1, [sp, #6]
 801eccc:	4669      	mov	r1, sp
 801ecce:	f8ad 2000 	strh.w	r2, [sp]
 801ecd2:	f8ad 2002 	strh.w	r2, [sp, #2]
 801ecd6:	f8ad 5004 	strh.w	r5, [sp, #4]
 801ecda:	6a1b      	ldr	r3, [r3, #32]
 801ecdc:	4798      	blx	r3
 801ecde:	e89d 0003 	ldmia.w	sp, {r0, r1}
 801ece2:	e884 0003 	stmia.w	r4, {r0, r1}
 801ece6:	4620      	mov	r0, r4
 801ece8:	b003      	add	sp, #12
 801ecea:	bd30      	pop	{r4, r5, pc}

0801ecec <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801ecec:	b513      	push	{r0, r1, r4, lr}
 801ecee:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801ecf2:	4604      	mov	r4, r0
 801ecf4:	3301      	adds	r3, #1
 801ecf6:	d109      	bne.n	801ed0c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801ecf8:	4601      	mov	r1, r0
 801ecfa:	4668      	mov	r0, sp
 801ecfc:	f7ff fddd 	bl	801e8ba <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ed00:	f8bd 3000 	ldrh.w	r3, [sp]
 801ed04:	8423      	strh	r3, [r4, #32]
 801ed06:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ed0a:	8463      	strh	r3, [r4, #34]	; 0x22
 801ed0c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801ed10:	b002      	add	sp, #8
 801ed12:	bd10      	pop	{r4, pc}

0801ed14 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801ed14:	b513      	push	{r0, r1, r4, lr}
 801ed16:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801ed1a:	4604      	mov	r4, r0
 801ed1c:	3301      	adds	r3, #1
 801ed1e:	d109      	bne.n	801ed34 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801ed20:	4601      	mov	r1, r0
 801ed22:	4668      	mov	r0, sp
 801ed24:	f7ff fdc9 	bl	801e8ba <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ed28:	f8bd 3000 	ldrh.w	r3, [sp]
 801ed2c:	8423      	strh	r3, [r4, #32]
 801ed2e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ed32:	8463      	strh	r3, [r4, #34]	; 0x22
 801ed34:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801ed38:	b002      	add	sp, #8
 801ed3a:	bd10      	pop	{r4, pc}

0801ed3c <_ZN8touchgfx6ScreenC1Ev>:
 801ed3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed3e:	4605      	mov	r5, r0
 801ed40:	4b18      	ldr	r3, [pc, #96]	; (801eda4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801ed42:	2200      	movs	r2, #0
 801ed44:	4918      	ldr	r1, [pc, #96]	; (801eda8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801ed46:	f845 3b04 	str.w	r3, [r5], #4
 801ed4a:	2301      	movs	r3, #1
 801ed4c:	8102      	strh	r2, [r0, #8]
 801ed4e:	4604      	mov	r4, r0
 801ed50:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801ed54:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801ed58:	4b14      	ldr	r3, [pc, #80]	; (801edac <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801ed5a:	8142      	strh	r2, [r0, #10]
 801ed5c:	f9b3 7000 	ldrsh.w	r7, [r3]
 801ed60:	4b13      	ldr	r3, [pc, #76]	; (801edb0 <_ZN8touchgfx6ScreenC1Ev+0x74>)
 801ed62:	8182      	strh	r2, [r0, #12]
 801ed64:	81c2      	strh	r2, [r0, #14]
 801ed66:	8202      	strh	r2, [r0, #16]
 801ed68:	8242      	strh	r2, [r0, #18]
 801ed6a:	8282      	strh	r2, [r0, #20]
 801ed6c:	82c2      	strh	r2, [r0, #22]
 801ed6e:	6182      	str	r2, [r0, #24]
 801ed70:	61c2      	str	r2, [r0, #28]
 801ed72:	6202      	str	r2, [r0, #32]
 801ed74:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801ed78:	62c2      	str	r2, [r0, #44]	; 0x2c
 801ed7a:	6302      	str	r2, [r0, #48]	; 0x30
 801ed7c:	8682      	strh	r2, [r0, #52]	; 0x34
 801ed7e:	86c2      	strh	r2, [r0, #54]	; 0x36
 801ed80:	f9b3 6000 	ldrsh.w	r6, [r3]
 801ed84:	6041      	str	r1, [r0, #4]
 801ed86:	4611      	mov	r1, r2
 801ed88:	4628      	mov	r0, r5
 801ed8a:	f7ed fa2c 	bl	800c1e6 <_ZN8touchgfx8Drawable5setXYEss>
 801ed8e:	4639      	mov	r1, r7
 801ed90:	4628      	mov	r0, r5
 801ed92:	f7ed fa46 	bl	800c222 <_ZN8touchgfx8Drawable8setWidthEs>
 801ed96:	4628      	mov	r0, r5
 801ed98:	4631      	mov	r1, r6
 801ed9a:	f7ed fa51 	bl	800c240 <_ZN8touchgfx8Drawable9setHeightEs>
 801ed9e:	4620      	mov	r0, r4
 801eda0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eda2:	bf00      	nop
 801eda4:	080254ec 	.word	0x080254ec
 801eda8:	08022d1c 	.word	0x08022d1c
 801edac:	2000a320 	.word	0x2000a320
 801edb0:	2000a322 	.word	0x2000a322

0801edb4 <_ZN8touchgfx6Screen4drawEv>:
 801edb4:	4b0b      	ldr	r3, [pc, #44]	; (801ede4 <_ZN8touchgfx6Screen4drawEv+0x30>)
 801edb6:	b507      	push	{r0, r1, r2, lr}
 801edb8:	f9b3 1000 	ldrsh.w	r1, [r3]
 801edbc:	4b0a      	ldr	r3, [pc, #40]	; (801ede8 <_ZN8touchgfx6Screen4drawEv+0x34>)
 801edbe:	f8ad 1004 	strh.w	r1, [sp, #4]
 801edc2:	4669      	mov	r1, sp
 801edc4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801edc8:	2300      	movs	r3, #0
 801edca:	f8ad 3000 	strh.w	r3, [sp]
 801edce:	f8ad 3002 	strh.w	r3, [sp, #2]
 801edd2:	6803      	ldr	r3, [r0, #0]
 801edd4:	f8ad 2006 	strh.w	r2, [sp, #6]
 801edd8:	689b      	ldr	r3, [r3, #8]
 801edda:	4798      	blx	r3
 801eddc:	b003      	add	sp, #12
 801edde:	f85d fb04 	ldr.w	pc, [sp], #4
 801ede2:	bf00      	nop
 801ede4:	2000a320 	.word	0x2000a320
 801ede8:	2000a322 	.word	0x2000a322

0801edec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801edec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edf0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801edf4:	b087      	sub	sp, #28
 801edf6:	4681      	mov	r9, r0
 801edf8:	460c      	mov	r4, r1
 801edfa:	4615      	mov	r5, r2
 801edfc:	b16b      	cbz	r3, 801ee1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801edfe:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801ee02:	b153      	cbz	r3, 801ee1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801ee04:	4628      	mov	r0, r5
 801ee06:	f7ff ff53 	bl	801ecb0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ee0a:	4621      	mov	r1, r4
 801ee0c:	f7ec fff3 	bl	800bdf6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ee10:	69eb      	ldr	r3, [r5, #28]
 801ee12:	b928      	cbnz	r0, 801ee20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801ee14:	461d      	mov	r5, r3
 801ee16:	2b00      	cmp	r3, #0
 801ee18:	d1f4      	bne.n	801ee04 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801ee1a:	b007      	add	sp, #28
 801ee1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee20:	ae02      	add	r6, sp, #8
 801ee22:	2b00      	cmp	r3, #0
 801ee24:	d04a      	beq.n	801eebc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801ee26:	682b      	ldr	r3, [r5, #0]
 801ee28:	4629      	mov	r1, r5
 801ee2a:	4668      	mov	r0, sp
 801ee2c:	68db      	ldr	r3, [r3, #12]
 801ee2e:	4798      	blx	r3
 801ee30:	4628      	mov	r0, r5
 801ee32:	f7ff ff5b 	bl	801ecec <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801ee36:	f8bd 7000 	ldrh.w	r7, [sp]
 801ee3a:	4407      	add	r7, r0
 801ee3c:	4628      	mov	r0, r5
 801ee3e:	f7ff ff69 	bl	801ed14 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801ee42:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ee46:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801ee4a:	b23f      	sxth	r7, r7
 801ee4c:	4418      	add	r0, r3
 801ee4e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801ee52:	4621      	mov	r1, r4
 801ee54:	f8ad 200c 	strh.w	r2, [sp, #12]
 801ee58:	f8ad 000a 	strh.w	r0, [sp, #10]
 801ee5c:	4630      	mov	r0, r6
 801ee5e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ee62:	f8ad 7008 	strh.w	r7, [sp, #8]
 801ee66:	f7ed f80d 	bl	800be84 <_ZN8touchgfx4RectaNERKS0_>
 801ee6a:	4628      	mov	r0, r5
 801ee6c:	f7ff ff20 	bl	801ecb0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ee70:	ab04      	add	r3, sp, #16
 801ee72:	4602      	mov	r2, r0
 801ee74:	e896 0003 	ldmia.w	r6, {r0, r1}
 801ee78:	e883 0003 	stmia.w	r3, {r0, r1}
 801ee7c:	4611      	mov	r1, r2
 801ee7e:	4618      	mov	r0, r3
 801ee80:	f7ed f800 	bl	800be84 <_ZN8touchgfx4RectaNERKS0_>
 801ee84:	f9bd b010 	ldrsh.w	fp, [sp, #16]
 801ee88:	f9b4 2000 	ldrsh.w	r2, [r4]
 801ee8c:	f9bd a012 	ldrsh.w	sl, [sp, #18]
 801ee90:	455a      	cmp	r2, fp
 801ee92:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801ee96:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801ee9a:	f040 8096 	bne.w	801efca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801ee9e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801eea2:	4553      	cmp	r3, sl
 801eea4:	f040 8091 	bne.w	801efca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801eea8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801eeac:	4543      	cmp	r3, r8
 801eeae:	f040 808c 	bne.w	801efca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801eeb2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801eeb6:	42bb      	cmp	r3, r7
 801eeb8:	f040 8087 	bne.w	801efca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801eebc:	4628      	mov	r0, r5
 801eebe:	f7ff fef7 	bl	801ecb0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801eec2:	6861      	ldr	r1, [r4, #4]
 801eec4:	4602      	mov	r2, r0
 801eec6:	4633      	mov	r3, r6
 801eec8:	6820      	ldr	r0, [r4, #0]
 801eeca:	c303      	stmia	r3!, {r0, r1}
 801eecc:	4611      	mov	r1, r2
 801eece:	4630      	mov	r0, r6
 801eed0:	f7ec ffd8 	bl	800be84 <_ZN8touchgfx4RectaNERKS0_>
 801eed4:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801eed8:	2b00      	cmp	r3, #0
 801eeda:	d09e      	beq.n	801ee1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801eedc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801eee0:	2b00      	cmp	r3, #0
 801eee2:	d09a      	beq.n	801ee1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801eee4:	4628      	mov	r0, r5
 801eee6:	f7ff ff01 	bl	801ecec <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801eeea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801eeee:	1a18      	subs	r0, r3, r0
 801eef0:	f8ad 0008 	strh.w	r0, [sp, #8]
 801eef4:	4628      	mov	r0, r5
 801eef6:	f7ff ff0d 	bl	801ed14 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801eefa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801eefe:	4631      	mov	r1, r6
 801ef00:	1a18      	subs	r0, r3, r0
 801ef02:	f8ad 000a 	strh.w	r0, [sp, #10]
 801ef06:	4628      	mov	r0, r5
 801ef08:	682b      	ldr	r3, [r5, #0]
 801ef0a:	689b      	ldr	r3, [r3, #8]
 801ef0c:	4798      	blx	r3
 801ef0e:	e784      	b.n	801ee1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801ef10:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801ef14:	4553      	cmp	r3, sl
 801ef16:	da10      	bge.n	801ef3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x14e>
 801ef18:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ef1c:	4648      	mov	r0, r9
 801ef1e:	f8ad 300a 	strh.w	r3, [sp, #10]
 801ef22:	ebaa 0303 	sub.w	r3, sl, r3
 801ef26:	f8ad 100c 	strh.w	r1, [sp, #12]
 801ef2a:	4631      	mov	r1, r6
 801ef2c:	f8ad 2008 	strh.w	r2, [sp, #8]
 801ef30:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ef34:	69ea      	ldr	r2, [r5, #28]
 801ef36:	f7ff ff59 	bl	801edec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ef3a:	f9b4 3000 	ldrsh.w	r3, [r4]
 801ef3e:	455b      	cmp	r3, fp
 801ef40:	da0e      	bge.n	801ef60 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x174>
 801ef42:	f8ad 3008 	strh.w	r3, [sp, #8]
 801ef46:	ebab 0303 	sub.w	r3, fp, r3
 801ef4a:	f8ad a00a 	strh.w	sl, [sp, #10]
 801ef4e:	4631      	mov	r1, r6
 801ef50:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ef54:	4648      	mov	r0, r9
 801ef56:	f8ad 700e 	strh.w	r7, [sp, #14]
 801ef5a:	69ea      	ldr	r2, [r5, #28]
 801ef5c:	f7ff ff46 	bl	801edec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ef60:	8822      	ldrh	r2, [r4, #0]
 801ef62:	44d8      	add	r8, fp
 801ef64:	88a3      	ldrh	r3, [r4, #4]
 801ef66:	fa1f f888 	uxth.w	r8, r8
 801ef6a:	4413      	add	r3, r2
 801ef6c:	fa0f f288 	sxth.w	r2, r8
 801ef70:	b29b      	uxth	r3, r3
 801ef72:	b219      	sxth	r1, r3
 801ef74:	4291      	cmp	r1, r2
 801ef76:	dd0e      	ble.n	801ef96 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801ef78:	eba3 0308 	sub.w	r3, r3, r8
 801ef7c:	f8ad 2008 	strh.w	r2, [sp, #8]
 801ef80:	f8ad a00a 	strh.w	sl, [sp, #10]
 801ef84:	4631      	mov	r1, r6
 801ef86:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ef8a:	4648      	mov	r0, r9
 801ef8c:	f8ad 700e 	strh.w	r7, [sp, #14]
 801ef90:	69ea      	ldr	r2, [r5, #28]
 801ef92:	f7ff ff2b 	bl	801edec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ef96:	88e2      	ldrh	r2, [r4, #6]
 801ef98:	4457      	add	r7, sl
 801ef9a:	8863      	ldrh	r3, [r4, #2]
 801ef9c:	b2bf      	uxth	r7, r7
 801ef9e:	4413      	add	r3, r2
 801efa0:	b23a      	sxth	r2, r7
 801efa2:	b29b      	uxth	r3, r3
 801efa4:	b219      	sxth	r1, r3
 801efa6:	428a      	cmp	r2, r1
 801efa8:	da88      	bge.n	801eebc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801efaa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801efae:	1bdb      	subs	r3, r3, r7
 801efb0:	f9b4 0000 	ldrsh.w	r0, [r4]
 801efb4:	f8ad 100c 	strh.w	r1, [sp, #12]
 801efb8:	4631      	mov	r1, r6
 801efba:	f8ad 0008 	strh.w	r0, [sp, #8]
 801efbe:	f8ad 200a 	strh.w	r2, [sp, #10]
 801efc2:	f8ad 300e 	strh.w	r3, [sp, #14]
 801efc6:	69ea      	ldr	r2, [r5, #28]
 801efc8:	e006      	b.n	801efd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1ec>
 801efca:	f1b8 0f00 	cmp.w	r8, #0
 801efce:	d001      	beq.n	801efd4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1e8>
 801efd0:	2f00      	cmp	r7, #0
 801efd2:	d19d      	bne.n	801ef10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x124>
 801efd4:	69ea      	ldr	r2, [r5, #28]
 801efd6:	4621      	mov	r1, r4
 801efd8:	4648      	mov	r0, r9
 801efda:	f7ff ff07 	bl	801edec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801efde:	e76d      	b.n	801eebc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>

0801efe0 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE>:
 801efe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801efe2:	2300      	movs	r3, #0
 801efe4:	aa02      	add	r2, sp, #8
 801efe6:	4604      	mov	r4, r0
 801efe8:	3004      	adds	r0, #4
 801efea:	f842 3d04 	str.w	r3, [r2, #-4]!
 801efee:	460d      	mov	r5, r1
 801eff0:	f7ed fc27 	bl	800c842 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801eff4:	9a01      	ldr	r2, [sp, #4]
 801eff6:	b11a      	cbz	r2, 801f000 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE+0x20>
 801eff8:	4629      	mov	r1, r5
 801effa:	4620      	mov	r0, r4
 801effc:	f7ff fef6 	bl	801edec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f000:	b003      	add	sp, #12
 801f002:	bd30      	pop	{r4, r5, pc}

0801f004 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801f004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f006:	4602      	mov	r2, r0
 801f008:	4604      	mov	r4, r0
 801f00a:	460d      	mov	r5, r1
 801f00c:	466b      	mov	r3, sp
 801f00e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801f012:	6851      	ldr	r1, [r2, #4]
 801f014:	c303      	stmia	r3!, {r0, r1}
 801f016:	4629      	mov	r1, r5
 801f018:	4668      	mov	r0, sp
 801f01a:	f7ec ff33 	bl	800be84 <_ZN8touchgfx4RectaNERKS0_>
 801f01e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801f022:	4669      	mov	r1, sp
 801f024:	b123      	cbz	r3, 801f030 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801f026:	4620      	mov	r0, r4
 801f028:	f7ff ffda 	bl	801efe0 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE>
 801f02c:	b003      	add	sp, #12
 801f02e:	bd30      	pop	{r4, r5, pc}
 801f030:	1d20      	adds	r0, r4, #4
 801f032:	f7ed fa9a 	bl	800c56a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801f036:	e7f9      	b.n	801f02c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801f038 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801f038:	460b      	mov	r3, r1
 801f03a:	680a      	ldr	r2, [r1, #0]
 801f03c:	1d01      	adds	r1, r0, #4
 801f03e:	6952      	ldr	r2, [r2, #20]
 801f040:	4618      	mov	r0, r3
 801f042:	4710      	bx	r2

0801f044 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 801f044:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f048:	b082      	sub	sp, #8
 801f04a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f052:	bfcc      	ite	gt
 801f054:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 801f058:	ee30 0a67 	vsuble.f32	s0, s0, s15
 801f05c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801f060:	edcd 7a01 	vstr	s15, [sp, #4]
 801f064:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 801f068:	b002      	add	sp, #8
 801f06a:	4770      	bx	lr

0801f06c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801f06c:	b510      	push	{r4, lr}
 801f06e:	4298      	cmp	r0, r3
 801f070:	eb01 0402 	add.w	r4, r1, r2
 801f074:	b224      	sxth	r4, r4
 801f076:	da1f      	bge.n	801f0b8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801f078:	b1f3      	cbz	r3, 801f0b8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801f07a:	ee07 0a90 	vmov	s15, r0
 801f07e:	ee06 1a10 	vmov	s12, r1
 801f082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f086:	ee07 3a90 	vmov	s15, r3
 801f08a:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 801f08e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f096:	ee06 2a90 	vmov	s13, r2
 801f09a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f09e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f0a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f0a6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801f0aa:	eea7 7a86 	vfma.f32	s14, s15, s12
 801f0ae:	eea6 0a87 	vfma.f32	s0, s13, s14
 801f0b2:	f7ff ffc7 	bl	801f044 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801f0b6:	4604      	mov	r4, r0
 801f0b8:	4620      	mov	r0, r4
 801f0ba:	bd10      	pop	{r4, pc}

0801f0bc <_ZNK8touchgfx17InternalFlashFont12getPixelDataEPKNS_9GlyphNodeE>:
 801f0bc:	680b      	ldr	r3, [r1, #0]
 801f0be:	6980      	ldr	r0, [r0, #24]
 801f0c0:	4418      	add	r0, r3
 801f0c2:	4770      	bx	lr

0801f0c4 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE>:
 801f0c4:	b530      	push	{r4, r5, lr}
 801f0c6:	b19a      	cbz	r2, 801f0f0 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801f0c8:	7b13      	ldrb	r3, [r2, #12]
 801f0ca:	b18b      	cbz	r3, 801f0f0 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801f0cc:	7ad2      	ldrb	r2, [r2, #11]
 801f0ce:	b294      	uxth	r4, r2
 801f0d0:	4413      	add	r3, r2
 801f0d2:	429c      	cmp	r4, r3
 801f0d4:	da0c      	bge.n	801f0f0 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801f0d6:	69c2      	ldr	r2, [r0, #28]
 801f0d8:	eb02 0584 	add.w	r5, r2, r4, lsl #2
 801f0dc:	f832 2024 	ldrh.w	r2, [r2, r4, lsl #2]
 801f0e0:	428a      	cmp	r2, r1
 801f0e2:	d102      	bne.n	801f0ea <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x26>
 801f0e4:	f995 0002 	ldrsb.w	r0, [r5, #2]
 801f0e8:	bd30      	pop	{r4, r5, pc}
 801f0ea:	3401      	adds	r4, #1
 801f0ec:	b2a4      	uxth	r4, r4
 801f0ee:	e7f0      	b.n	801f0d2 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0xe>
 801f0f0:	2000      	movs	r0, #0
 801f0f2:	bd30      	pop	{r4, r5, pc}

0801f0f4 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>:
 801f0f4:	b530      	push	{r4, r5, lr}
 801f0f6:	b087      	sub	sp, #28
 801f0f8:	4604      	mov	r4, r0
 801f0fa:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 801f0fe:	9505      	str	r5, [sp, #20]
 801f100:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801f104:	9504      	str	r5, [sp, #16]
 801f106:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801f10a:	9503      	str	r5, [sp, #12]
 801f10c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801f110:	9502      	str	r5, [sp, #8]
 801f112:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 801f116:	9501      	str	r5, [sp, #4]
 801f118:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 801f11c:	9500      	str	r5, [sp, #0]
 801f11e:	f7ff fbdf 	bl	801e8e0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt>
 801f122:	4b04      	ldr	r3, [pc, #16]	; (801f134 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt+0x40>)
 801f124:	4620      	mov	r0, r4
 801f126:	6023      	str	r3, [r4, #0]
 801f128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f12a:	61a3      	str	r3, [r4, #24]
 801f12c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f12e:	61e3      	str	r3, [r4, #28]
 801f130:	b007      	add	sp, #28
 801f132:	bd30      	pop	{r4, r5, pc}
 801f134:	08025520 	.word	0x08025520

0801f138 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801f138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f13a:	4604      	mov	r4, r0
 801f13c:	4d1b      	ldr	r5, [pc, #108]	; (801f1ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x74>)
 801f13e:	2700      	movs	r7, #0
 801f140:	2601      	movs	r6, #1
 801f142:	6863      	ldr	r3, [r4, #4]
 801f144:	b93b      	cbnz	r3, 801f156 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x1e>
 801f146:	6821      	ldr	r1, [r4, #0]
 801f148:	2900      	cmp	r1, #0
 801f14a:	d02c      	beq.n	801f1a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801f14c:	6828      	ldr	r0, [r5, #0]
 801f14e:	6803      	ldr	r3, [r0, #0]
 801f150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f152:	4798      	blx	r3
 801f154:	6060      	str	r0, [r4, #4]
 801f156:	7c23      	ldrb	r3, [r4, #16]
 801f158:	b16b      	cbz	r3, 801f176 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x3e>
 801f15a:	68e3      	ldr	r3, [r4, #12]
 801f15c:	b12b      	cbz	r3, 801f16a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801f15e:	881a      	ldrh	r2, [r3, #0]
 801f160:	b11a      	cbz	r2, 801f16a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801f162:	1c9a      	adds	r2, r3, #2
 801f164:	60e2      	str	r2, [r4, #12]
 801f166:	8818      	ldrh	r0, [r3, #0]
 801f168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f16a:	6828      	ldr	r0, [r5, #0]
 801f16c:	7427      	strb	r7, [r4, #16]
 801f16e:	6803      	ldr	r3, [r0, #0]
 801f170:	6821      	ldr	r1, [r4, #0]
 801f172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f174:	4798      	blx	r3
 801f176:	6863      	ldr	r3, [r4, #4]
 801f178:	881a      	ldrh	r2, [r3, #0]
 801f17a:	b1a2      	cbz	r2, 801f1a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801f17c:	2a02      	cmp	r2, #2
 801f17e:	f103 0202 	add.w	r2, r3, #2
 801f182:	6062      	str	r2, [r4, #4]
 801f184:	d1ef      	bne.n	801f166 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2e>
 801f186:	6828      	ldr	r0, [r5, #0]
 801f188:	6803      	ldr	r3, [r0, #0]
 801f18a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801f18c:	68a3      	ldr	r3, [r4, #8]
 801f18e:	1d19      	adds	r1, r3, #4
 801f190:	60a1      	str	r1, [r4, #8]
 801f192:	6819      	ldr	r1, [r3, #0]
 801f194:	4790      	blx	r2
 801f196:	60e0      	str	r0, [r4, #12]
 801f198:	2800      	cmp	r0, #0
 801f19a:	d0d2      	beq.n	801f142 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801f19c:	8803      	ldrh	r3, [r0, #0]
 801f19e:	2b00      	cmp	r3, #0
 801f1a0:	d0cf      	beq.n	801f142 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801f1a2:	7426      	strb	r6, [r4, #16]
 801f1a4:	e7cd      	b.n	801f142 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801f1a6:	2000      	movs	r0, #0
 801f1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f1aa:	bf00      	nop
 801f1ac:	2000a32c 	.word	0x2000a32c

0801f1b0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801f1b0:	b538      	push	{r3, r4, r5, lr}
 801f1b2:	8a83      	ldrh	r3, [r0, #20]
 801f1b4:	4604      	mov	r4, r0
 801f1b6:	8a45      	ldrh	r5, [r0, #18]
 801f1b8:	8243      	strh	r3, [r0, #18]
 801f1ba:	f7ff ffbd 	bl	801f138 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801f1be:	82a0      	strh	r0, [r4, #20]
 801f1c0:	4628      	mov	r0, r5
 801f1c2:	bd38      	pop	{r3, r4, r5, pc}

0801f1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801f1c4:	b570      	push	{r4, r5, r6, lr}
 801f1c6:	460e      	mov	r6, r1
 801f1c8:	4605      	mov	r5, r0
 801f1ca:	f7ff fff1 	bl	801f1b0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801f1ce:	4a0d      	ldr	r2, [pc, #52]	; (801f204 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>)
 801f1d0:	4601      	mov	r1, r0
 801f1d2:	6814      	ldr	r4, [r2, #0]
 801f1d4:	4613      	mov	r3, r2
 801f1d6:	b914      	cbnz	r4, 801f1de <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1a>
 801f1d8:	6852      	ldr	r2, [r2, #4]
 801f1da:	07d2      	lsls	r2, r2, #31
 801f1dc:	d510      	bpl.n	801f200 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x3c>
 801f1de:	6858      	ldr	r0, [r3, #4]
 801f1e0:	f105 0212 	add.w	r2, r5, #18
 801f1e4:	f010 0f01 	tst.w	r0, #1
 801f1e8:	ea4f 0060 	mov.w	r0, r0, asr #1
 801f1ec:	bf18      	it	ne
 801f1ee:	582b      	ldrne	r3, [r5, r0]
 801f1f0:	4428      	add	r0, r5
 801f1f2:	bf18      	it	ne
 801f1f4:	591c      	ldrne	r4, [r3, r4]
 801f1f6:	4633      	mov	r3, r6
 801f1f8:	46a4      	mov	ip, r4
 801f1fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f1fe:	4760      	bx	ip
 801f200:	bd70      	pop	{r4, r5, r6, pc}
 801f202:	bf00      	nop
 801f204:	20008f00 	.word	0x20008f00

0801f208 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801f208:	2300      	movs	r3, #0
 801f20a:	b510      	push	{r4, lr}
 801f20c:	4604      	mov	r4, r0
 801f20e:	6043      	str	r3, [r0, #4]
 801f210:	60c3      	str	r3, [r0, #12]
 801f212:	7403      	strb	r3, [r0, #16]
 801f214:	f7ff ff90 	bl	801f138 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801f218:	8260      	strh	r0, [r4, #18]
 801f21a:	4620      	mov	r0, r4
 801f21c:	f7ff ff8c 	bl	801f138 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801f220:	4a0a      	ldr	r2, [pc, #40]	; (801f24c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x44>)
 801f222:	82a0      	strh	r0, [r4, #20]
 801f224:	6813      	ldr	r3, [r2, #0]
 801f226:	4611      	mov	r1, r2
 801f228:	b913      	cbnz	r3, 801f230 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x28>
 801f22a:	6852      	ldr	r2, [r2, #4]
 801f22c:	07d2      	lsls	r2, r2, #31
 801f22e:	d50c      	bpl.n	801f24a <_ZN8touchgfx12TextProvider18initializeInternalEv+0x42>
 801f230:	6848      	ldr	r0, [r1, #4]
 801f232:	f010 0f01 	tst.w	r0, #1
 801f236:	ea4f 0060 	mov.w	r0, r0, asr #1
 801f23a:	bf18      	it	ne
 801f23c:	5822      	ldrne	r2, [r4, r0]
 801f23e:	4420      	add	r0, r4
 801f240:	bf18      	it	ne
 801f242:	58d3      	ldrne	r3, [r2, r3]
 801f244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f248:	4718      	bx	r3
 801f24a:	bd10      	pop	{r4, pc}
 801f24c:	20008ef8 	.word	0x20008ef8

0801f250 <_ZN8touchgfx12TextProviderC1Ev>:
 801f250:	2300      	movs	r3, #0
 801f252:	b510      	push	{r4, lr}
 801f254:	4604      	mov	r4, r0
 801f256:	6003      	str	r3, [r0, #0]
 801f258:	6043      	str	r3, [r0, #4]
 801f25a:	f7ff ffd5 	bl	801f208 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801f25e:	4620      	mov	r0, r4
 801f260:	bd10      	pop	{r4, pc}

0801f262 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>:
 801f262:	6082      	str	r2, [r0, #8]
 801f264:	6001      	str	r1, [r0, #0]
 801f266:	f7ff bfcf 	b.w	801f208 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801f26a <_ZN8touchgfx7Unicode6strlenEPKt>:
 801f26a:	4602      	mov	r2, r0
 801f26c:	b148      	cbz	r0, 801f282 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801f26e:	2300      	movs	r3, #0
 801f270:	b298      	uxth	r0, r3
 801f272:	3301      	adds	r3, #1
 801f274:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801f278:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801f27c:	2900      	cmp	r1, #0
 801f27e:	d1f7      	bne.n	801f270 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801f280:	4770      	bx	lr
 801f282:	4770      	bx	lr

0801f284 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801f284:	b140      	cbz	r0, 801f298 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801f286:	4602      	mov	r2, r0
 801f288:	1a13      	subs	r3, r2, r0
 801f28a:	f812 1b01 	ldrb.w	r1, [r2], #1
 801f28e:	b29b      	uxth	r3, r3
 801f290:	2900      	cmp	r1, #0
 801f292:	d1f9      	bne.n	801f288 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801f294:	4618      	mov	r0, r3
 801f296:	4770      	bx	lr
 801f298:	4603      	mov	r3, r0
 801f29a:	e7fb      	b.n	801f294 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801f29c <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801f29c:	b530      	push	{r4, r5, lr}
 801f29e:	b169      	cbz	r1, 801f2bc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x20>
 801f2a0:	b168      	cbz	r0, 801f2be <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x22>
 801f2a2:	1e85      	subs	r5, r0, #2
 801f2a4:	460b      	mov	r3, r1
 801f2a6:	1a58      	subs	r0, r3, r1
 801f2a8:	b280      	uxth	r0, r0
 801f2aa:	4290      	cmp	r0, r2
 801f2ac:	da07      	bge.n	801f2be <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x22>
 801f2ae:	f813 4b01 	ldrb.w	r4, [r3], #1
 801f2b2:	f825 4f02 	strh.w	r4, [r5, #2]!
 801f2b6:	2c00      	cmp	r4, #0
 801f2b8:	d1f5      	bne.n	801f2a6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801f2ba:	bd30      	pop	{r4, r5, pc}
 801f2bc:	4608      	mov	r0, r1
 801f2be:	bd30      	pop	{r4, r5, pc}

0801f2c0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>:
 801f2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f2c2:	460f      	mov	r7, r1
 801f2c4:	b08b      	sub	sp, #44	; 0x2c
 801f2c6:	2100      	movs	r1, #0
 801f2c8:	ad01      	add	r5, sp, #4
 801f2ca:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801f2ce:	211f      	movs	r1, #31
 801f2d0:	fbb0 f6f3 	udiv	r6, r0, r3
 801f2d4:	fb03 0416 	mls	r4, r3, r6, r0
 801f2d8:	4630      	mov	r0, r6
 801f2da:	2c09      	cmp	r4, #9
 801f2dc:	bfd4      	ite	le
 801f2de:	3430      	addle	r4, #48	; 0x30
 801f2e0:	3457      	addgt	r4, #87	; 0x57
 801f2e2:	b2e4      	uxtb	r4, r4
 801f2e4:	554c      	strb	r4, [r1, r5]
 801f2e6:	1e4c      	subs	r4, r1, #1
 801f2e8:	b92e      	cbnz	r6, 801f2f6 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0+0x36>
 801f2ea:	4429      	add	r1, r5
 801f2ec:	4638      	mov	r0, r7
 801f2ee:	f7ff ffd5 	bl	801f29c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801f2f2:	b00b      	add	sp, #44	; 0x2c
 801f2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f2f6:	4621      	mov	r1, r4
 801f2f8:	e7ea      	b.n	801f2d0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0+0x10>

0801f2fa <_ZN8touchgfx7Unicode4itoaElPtti>:
 801f2fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f2fc:	4606      	mov	r6, r0
 801f2fe:	b08b      	sub	sp, #44	; 0x2c
 801f300:	4608      	mov	r0, r1
 801f302:	b341      	cbz	r1, 801f356 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801f304:	1e99      	subs	r1, r3, #2
 801f306:	290e      	cmp	r1, #14
 801f308:	d825      	bhi.n	801f356 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801f30a:	2100      	movs	r1, #0
 801f30c:	4634      	mov	r4, r6
 801f30e:	251f      	movs	r5, #31
 801f310:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801f314:	1e69      	subs	r1, r5, #1
 801f316:	f10d 0e04 	add.w	lr, sp, #4
 801f31a:	fb94 f7f3 	sdiv	r7, r4, r3
 801f31e:	fb03 4417 	mls	r4, r3, r7, r4
 801f322:	448e      	add	lr, r1
 801f324:	2c00      	cmp	r4, #0
 801f326:	bfb8      	it	lt
 801f328:	4264      	neglt	r4, r4
 801f32a:	2c09      	cmp	r4, #9
 801f32c:	bfd4      	ite	le
 801f32e:	3430      	addle	r4, #48	; 0x30
 801f330:	3457      	addgt	r4, #87	; 0x57
 801f332:	b2e4      	uxtb	r4, r4
 801f334:	f88e 4001 	strb.w	r4, [lr, #1]
 801f338:	463c      	mov	r4, r7
 801f33a:	b977      	cbnz	r7, 801f35a <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801f33c:	2e00      	cmp	r6, #0
 801f33e:	da05      	bge.n	801f34c <_ZN8touchgfx7Unicode4itoaElPtti+0x52>
 801f340:	ab0a      	add	r3, sp, #40	; 0x28
 801f342:	4419      	add	r1, r3
 801f344:	232d      	movs	r3, #45	; 0x2d
 801f346:	f801 3c24 	strb.w	r3, [r1, #-36]
 801f34a:	1ea9      	subs	r1, r5, #2
 801f34c:	3101      	adds	r1, #1
 801f34e:	ab01      	add	r3, sp, #4
 801f350:	4419      	add	r1, r3
 801f352:	f7ff ffa3 	bl	801f29c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801f356:	b00b      	add	sp, #44	; 0x2c
 801f358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f35a:	460d      	mov	r5, r1
 801f35c:	e7da      	b.n	801f314 <_ZN8touchgfx7Unicode4itoaElPtti+0x1a>

0801f35e <_ZN8touchgfx7Unicode4atoiEPKt>:
 801f35e:	b510      	push	{r4, lr}
 801f360:	b158      	cbz	r0, 801f37a <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801f362:	1e82      	subs	r2, r0, #2
 801f364:	210a      	movs	r1, #10
 801f366:	2000      	movs	r0, #0
 801f368:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801f36c:	3b30      	subs	r3, #48	; 0x30
 801f36e:	b29c      	uxth	r4, r3
 801f370:	2c09      	cmp	r4, #9
 801f372:	d802      	bhi.n	801f37a <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801f374:	fb01 3000 	mla	r0, r1, r0, r3
 801f378:	e7f6      	b.n	801f368 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801f37a:	bd10      	pop	{r4, pc}

0801f37c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801f37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f380:	b085      	sub	sp, #20
 801f382:	f8d0 8000 	ldr.w	r8, [r0]
 801f386:	468a      	mov	sl, r1
 801f388:	461c      	mov	r4, r3
 801f38a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801f38e:	4681      	mov	r9, r0
 801f390:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801f394:	4640      	mov	r0, r8
 801f396:	9203      	str	r2, [sp, #12]
 801f398:	9301      	str	r3, [sp, #4]
 801f39a:	9102      	str	r1, [sp, #8]
 801f39c:	f7ff ff65 	bl	801f26a <_ZN8touchgfx7Unicode6strlenEPKt>
 801f3a0:	9a03      	ldr	r2, [sp, #12]
 801f3a2:	f1ba 0f00 	cmp.w	sl, #0
 801f3a6:	bf0c      	ite	eq
 801f3a8:	4603      	moveq	r3, r0
 801f3aa:	1c43      	addne	r3, r0, #1
 801f3ac:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801f3b0:	8812      	ldrh	r2, [r2, #0]
 801f3b2:	b29b      	uxth	r3, r3
 801f3b4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801f3b6:	2a69      	cmp	r2, #105	; 0x69
 801f3b8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f3ba:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801f3bc:	9902      	ldr	r1, [sp, #8]
 801f3be:	d004      	beq.n	801f3ca <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 801f3c0:	d852      	bhi.n	801f468 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801f3c2:	2a58      	cmp	r2, #88	; 0x58
 801f3c4:	d001      	beq.n	801f3ca <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 801f3c6:	2a64      	cmp	r2, #100	; 0x64
 801f3c8:	d159      	bne.n	801f47e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x102>
 801f3ca:	b19c      	cbz	r4, 801f3f4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 801f3cc:	b956      	cbnz	r6, 801f3e4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x68>
 801f3ce:	2801      	cmp	r0, #1
 801f3d0:	d108      	bne.n	801f3e4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x68>
 801f3d2:	f8b8 2000 	ldrh.w	r2, [r8]
 801f3d6:	2a30      	cmp	r2, #48	; 0x30
 801f3d8:	bf02      	ittt	eq
 801f3da:	f108 0202 	addeq.w	r2, r8, #2
 801f3de:	4630      	moveq	r0, r6
 801f3e0:	f8c9 2000 	streq.w	r2, [r9]
 801f3e4:	429e      	cmp	r6, r3
 801f3e6:	dd4c      	ble.n	801f482 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x106>
 801f3e8:	b2b6      	uxth	r6, r6
 801f3ea:	1af4      	subs	r4, r6, r3
 801f3ec:	4633      	mov	r3, r6
 801f3ee:	b2a4      	uxth	r4, r4
 801f3f0:	f04f 0b00 	mov.w	fp, #0
 801f3f4:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801f3f8:	9a01      	ldr	r2, [sp, #4]
 801f3fa:	3e01      	subs	r6, #1
 801f3fc:	b162      	cbz	r2, 801f418 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 801f3fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f400:	4293      	cmp	r3, r2
 801f402:	da09      	bge.n	801f418 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 801f404:	1ad2      	subs	r2, r2, r3
 801f406:	b292      	uxth	r2, r2
 801f408:	b939      	cbnz	r1, 801f41a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>
 801f40a:	f1bb 0f00 	cmp.w	fp, #0
 801f40e:	d050      	beq.n	801f4b2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x136>
 801f410:	2800      	cmp	r0, #0
 801f412:	d04e      	beq.n	801f4b2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x136>
 801f414:	4414      	add	r4, r2
 801f416:	b2a4      	uxth	r4, r4
 801f418:	2200      	movs	r2, #0
 801f41a:	682b      	ldr	r3, [r5, #0]
 801f41c:	42b3      	cmp	r3, r6
 801f41e:	da07      	bge.n	801f430 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb4>
 801f420:	f1ba 0f00 	cmp.w	sl, #0
 801f424:	d004      	beq.n	801f430 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb4>
 801f426:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801f42a:	682b      	ldr	r3, [r5, #0]
 801f42c:	3301      	adds	r3, #1
 801f42e:	602b      	str	r3, [r5, #0]
 801f430:	f04f 0e30 	mov.w	lr, #48	; 0x30
 801f434:	b124      	cbz	r4, 801f440 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xc4>
 801f436:	6829      	ldr	r1, [r5, #0]
 801f438:	3c01      	subs	r4, #1
 801f43a:	428e      	cmp	r6, r1
 801f43c:	b2a4      	uxth	r4, r4
 801f43e:	dc22      	bgt.n	801f486 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x10a>
 801f440:	b140      	cbz	r0, 801f454 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd8>
 801f442:	f8d9 3000 	ldr.w	r3, [r9]
 801f446:	8819      	ldrh	r1, [r3, #0]
 801f448:	b121      	cbz	r1, 801f454 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd8>
 801f44a:	6829      	ldr	r1, [r5, #0]
 801f44c:	3801      	subs	r0, #1
 801f44e:	428e      	cmp	r6, r1
 801f450:	b280      	uxth	r0, r0
 801f452:	dc1e      	bgt.n	801f492 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801f454:	2020      	movs	r0, #32
 801f456:	b122      	cbz	r2, 801f462 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe6>
 801f458:	6829      	ldr	r1, [r5, #0]
 801f45a:	3a01      	subs	r2, #1
 801f45c:	428e      	cmp	r6, r1
 801f45e:	b292      	uxth	r2, r2
 801f460:	dc21      	bgt.n	801f4a6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x12a>
 801f462:	b005      	add	sp, #20
 801f464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f468:	2a73      	cmp	r2, #115	; 0x73
 801f46a:	d003      	beq.n	801f474 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf8>
 801f46c:	2a78      	cmp	r2, #120	; 0x78
 801f46e:	d0ac      	beq.n	801f3ca <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 801f470:	2a6f      	cmp	r2, #111	; 0x6f
 801f472:	e7a9      	b.n	801f3c8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4c>
 801f474:	2c00      	cmp	r4, #0
 801f476:	d0bd      	beq.n	801f3f4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 801f478:	4286      	cmp	r6, r0
 801f47a:	da00      	bge.n	801f47e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x102>
 801f47c:	b2b0      	uxth	r0, r6
 801f47e:	2400      	movs	r4, #0
 801f480:	e7b8      	b.n	801f3f4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 801f482:	2400      	movs	r4, #0
 801f484:	e7b4      	b.n	801f3f0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x74>
 801f486:	f827 e011 	strh.w	lr, [r7, r1, lsl #1]
 801f48a:	682b      	ldr	r3, [r5, #0]
 801f48c:	3301      	adds	r3, #1
 801f48e:	602b      	str	r3, [r5, #0]
 801f490:	e7d0      	b.n	801f434 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb8>
 801f492:	1c9c      	adds	r4, r3, #2
 801f494:	f8c9 4000 	str.w	r4, [r9]
 801f498:	881b      	ldrh	r3, [r3, #0]
 801f49a:	f827 3011 	strh.w	r3, [r7, r1, lsl #1]
 801f49e:	682b      	ldr	r3, [r5, #0]
 801f4a0:	3301      	adds	r3, #1
 801f4a2:	602b      	str	r3, [r5, #0]
 801f4a4:	e7cc      	b.n	801f440 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xc4>
 801f4a6:	f827 0011 	strh.w	r0, [r7, r1, lsl #1]
 801f4aa:	682b      	ldr	r3, [r5, #0]
 801f4ac:	3301      	adds	r3, #1
 801f4ae:	602b      	str	r3, [r5, #0]
 801f4b0:	e7d1      	b.n	801f456 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xda>
 801f4b2:	2a00      	cmp	r2, #0
 801f4b4:	d0b1      	beq.n	801f41a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>
 801f4b6:	f04f 0e20 	mov.w	lr, #32
 801f4ba:	6829      	ldr	r1, [r5, #0]
 801f4bc:	3a01      	subs	r2, #1
 801f4be:	42b1      	cmp	r1, r6
 801f4c0:	b292      	uxth	r2, r2
 801f4c2:	daa9      	bge.n	801f418 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 801f4c4:	f827 e011 	strh.w	lr, [r7, r1, lsl #1]
 801f4c8:	682b      	ldr	r3, [r5, #0]
 801f4ca:	3301      	adds	r3, #1
 801f4cc:	602b      	str	r3, [r5, #0]
 801f4ce:	2a00      	cmp	r2, #0
 801f4d0:	d1f3      	bne.n	801f4ba <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x13e>
 801f4d2:	e7a2      	b.n	801f41a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>

0801f4d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801f4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f4d8:	f8dd e018 	ldr.w	lr, [sp, #24]
 801f4dc:	4604      	mov	r4, r0
 801f4de:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801f4e2:	2000      	movs	r0, #0
 801f4e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801f4e6:	f04f 0801 	mov.w	r8, #1
 801f4ea:	9f08      	ldr	r7, [sp, #32]
 801f4ec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801f4ee:	8008      	strh	r0, [r1, #0]
 801f4f0:	7010      	strb	r0, [r2, #0]
 801f4f2:	7018      	strb	r0, [r3, #0]
 801f4f4:	f88e 0000 	strb.w	r0, [lr]
 801f4f8:	f88c 0000 	strb.w	r0, [ip]
 801f4fc:	7030      	strb	r0, [r6, #0]
 801f4fe:	6820      	ldr	r0, [r4, #0]
 801f500:	8800      	ldrh	r0, [r0, #0]
 801f502:	b190      	cbz	r0, 801f52a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x56>
 801f504:	282b      	cmp	r0, #43	; 0x2b
 801f506:	d001      	beq.n	801f50c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x38>
 801f508:	2820      	cmp	r0, #32
 801f50a:	d104      	bne.n	801f516 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x42>
 801f50c:	8008      	strh	r0, [r1, #0]
 801f50e:	6820      	ldr	r0, [r4, #0]
 801f510:	3002      	adds	r0, #2
 801f512:	6020      	str	r0, [r4, #0]
 801f514:	e7f3      	b.n	801f4fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x2a>
 801f516:	282d      	cmp	r0, #45	; 0x2d
 801f518:	d102      	bne.n	801f520 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x4c>
 801f51a:	f882 8000 	strb.w	r8, [r2]
 801f51e:	e7f6      	b.n	801f50e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3a>
 801f520:	2823      	cmp	r0, #35	; 0x23
 801f522:	d102      	bne.n	801f52a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x56>
 801f524:	f883 8000 	strb.w	r8, [r3]
 801f528:	e7f1      	b.n	801f50e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3a>
 801f52a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801f52e:	2b09      	cmp	r3, #9
 801f530:	d901      	bls.n	801f536 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x62>
 801f532:	282a      	cmp	r0, #42	; 0x2a
 801f534:	d114      	bne.n	801f560 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x8c>
 801f536:	2201      	movs	r2, #1
 801f538:	f88c 2000 	strb.w	r2, [ip]
 801f53c:	6823      	ldr	r3, [r4, #0]
 801f53e:	8819      	ldrh	r1, [r3, #0]
 801f540:	2930      	cmp	r1, #48	; 0x30
 801f542:	bf02      	ittt	eq
 801f544:	3302      	addeq	r3, #2
 801f546:	6023      	streq	r3, [r4, #0]
 801f548:	f88e 2000 	strbeq.w	r2, [lr]
 801f54c:	6820      	ldr	r0, [r4, #0]
 801f54e:	8803      	ldrh	r3, [r0, #0]
 801f550:	2b2a      	cmp	r3, #42	; 0x2a
 801f552:	d11e      	bne.n	801f592 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xbe>
 801f554:	f04f 33ff 	mov.w	r3, #4294967295
 801f558:	603b      	str	r3, [r7, #0]
 801f55a:	6823      	ldr	r3, [r4, #0]
 801f55c:	3302      	adds	r3, #2
 801f55e:	6023      	str	r3, [r4, #0]
 801f560:	6823      	ldr	r3, [r4, #0]
 801f562:	881b      	ldrh	r3, [r3, #0]
 801f564:	2b2e      	cmp	r3, #46	; 0x2e
 801f566:	d112      	bne.n	801f58e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801f568:	2301      	movs	r3, #1
 801f56a:	7033      	strb	r3, [r6, #0]
 801f56c:	6823      	ldr	r3, [r4, #0]
 801f56e:	1c98      	adds	r0, r3, #2
 801f570:	6020      	str	r0, [r4, #0]
 801f572:	885b      	ldrh	r3, [r3, #2]
 801f574:	2b2a      	cmp	r3, #42	; 0x2a
 801f576:	d118      	bne.n	801f5aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>
 801f578:	f04f 33ff 	mov.w	r3, #4294967295
 801f57c:	602b      	str	r3, [r5, #0]
 801f57e:	6823      	ldr	r3, [r4, #0]
 801f580:	3302      	adds	r3, #2
 801f582:	6023      	str	r3, [r4, #0]
 801f584:	682b      	ldr	r3, [r5, #0]
 801f586:	2b06      	cmp	r3, #6
 801f588:	bfa8      	it	ge
 801f58a:	2306      	movge	r3, #6
 801f58c:	602b      	str	r3, [r5, #0]
 801f58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f592:	f7ff fee4 	bl	801f35e <_ZN8touchgfx7Unicode4atoiEPKt>
 801f596:	6038      	str	r0, [r7, #0]
 801f598:	6822      	ldr	r2, [r4, #0]
 801f59a:	8813      	ldrh	r3, [r2, #0]
 801f59c:	3b30      	subs	r3, #48	; 0x30
 801f59e:	b29b      	uxth	r3, r3
 801f5a0:	2b09      	cmp	r3, #9
 801f5a2:	d8dd      	bhi.n	801f560 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x8c>
 801f5a4:	3202      	adds	r2, #2
 801f5a6:	6022      	str	r2, [r4, #0]
 801f5a8:	e7f6      	b.n	801f598 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc4>
 801f5aa:	f7ff fed8 	bl	801f35e <_ZN8touchgfx7Unicode4atoiEPKt>
 801f5ae:	6028      	str	r0, [r5, #0]
 801f5b0:	6822      	ldr	r2, [r4, #0]
 801f5b2:	8813      	ldrh	r3, [r2, #0]
 801f5b4:	3b30      	subs	r3, #48	; 0x30
 801f5b6:	b29b      	uxth	r3, r3
 801f5b8:	2b09      	cmp	r3, #9
 801f5ba:	d8e3      	bhi.n	801f584 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb0>
 801f5bc:	3202      	adds	r2, #2
 801f5be:	6022      	str	r2, [r4, #0]
 801f5c0:	e7f6      	b.n	801f5b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xdc>
	...

0801f5c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801f5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5c8:	b0a3      	sub	sp, #140	; 0x8c
 801f5ca:	2500      	movs	r5, #0
 801f5cc:	4606      	mov	r6, r0
 801f5ce:	4689      	mov	r9, r1
 801f5d0:	af11      	add	r7, sp, #68	; 0x44
 801f5d2:	9209      	str	r2, [sp, #36]	; 0x24
 801f5d4:	4629      	mov	r1, r5
 801f5d6:	2242      	movs	r2, #66	; 0x42
 801f5d8:	4638      	mov	r0, r7
 801f5da:	461c      	mov	r4, r3
 801f5dc:	950d      	str	r5, [sp, #52]	; 0x34
 801f5de:	f7ff f9d8 	bl	801e992 <_ZN8touchgfx6memsetEPvhm>
 801f5e2:	b116      	cbz	r6, 801f5ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26>
 801f5e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f5e6:	b921      	cbnz	r1, 801f5f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2e>
 801f5e8:	8031      	strh	r1, [r6, #0]
 801f5ea:	4630      	mov	r0, r6
 801f5ec:	b023      	add	sp, #140	; 0x8c
 801f5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5f2:	f8df a250 	ldr.w	sl, [pc, #592]	; 801f844 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x280>
 801f5f6:	f109 3bff 	add.w	fp, r9, #4294967295
 801f5fa:	f8da 0000 	ldr.w	r0, [sl]
 801f5fe:	6803      	ldr	r3, [r0, #0]
 801f600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f602:	4798      	blx	r3
 801f604:	9009      	str	r0, [sp, #36]	; 0x24
 801f606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f608:	881a      	ldrh	r2, [r3, #0]
 801f60a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f60c:	2a00      	cmp	r2, #0
 801f60e:	f000 80c2 	beq.w	801f796 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d2>
 801f612:	459b      	cmp	fp, r3
 801f614:	f340 80bf 	ble.w	801f796 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d2>
 801f618:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801f61c:	f8b8 2000 	ldrh.w	r2, [r8]
 801f620:	2a00      	cmp	r2, #0
 801f622:	d0f0      	beq.n	801f606 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 801f624:	2a25      	cmp	r2, #37	; 0x25
 801f626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f628:	f000 80b9 	beq.w	801f79e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1da>
 801f62c:	459b      	cmp	fp, r3
 801f62e:	f340 80b6 	ble.w	801f79e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1da>
 801f632:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801f636:	f108 0202 	add.w	r2, r8, #2
 801f63a:	3301      	adds	r3, #1
 801f63c:	9209      	str	r2, [sp, #36]	; 0x24
 801f63e:	930d      	str	r3, [sp, #52]	; 0x34
 801f640:	e7ea      	b.n	801f618 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x54>
 801f642:	3b63      	subs	r3, #99	; 0x63
 801f644:	2b01      	cmp	r3, #1
 801f646:	f200 80f2 	bhi.w	801f82e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26a>
 801f64a:	9710      	str	r7, [sp, #64]	; 0x40
 801f64c:	8813      	ldrh	r3, [r2, #0]
 801f64e:	2b69      	cmp	r3, #105	; 0x69
 801f650:	d068      	beq.n	801f724 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x160>
 801f652:	d81c      	bhi.n	801f68e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xca>
 801f654:	2b63      	cmp	r3, #99	; 0x63
 801f656:	d031      	beq.n	801f6bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf8>
 801f658:	2b64      	cmp	r3, #100	; 0x64
 801f65a:	d063      	beq.n	801f724 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x160>
 801f65c:	2b58      	cmp	r3, #88	; 0x58
 801f65e:	f000 8082 	beq.w	801f766 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a2>
 801f662:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801f666:	46a0      	mov	r8, r4
 801f668:	e02f      	b.n	801f6ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801f66a:	2b73      	cmp	r3, #115	; 0x73
 801f66c:	d0ed      	beq.n	801f64a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801f66e:	d803      	bhi.n	801f678 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb4>
 801f670:	2b6f      	cmp	r3, #111	; 0x6f
 801f672:	f040 80dc 	bne.w	801f82e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26a>
 801f676:	e7e8      	b.n	801f64a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801f678:	2b75      	cmp	r3, #117	; 0x75
 801f67a:	d0e6      	beq.n	801f64a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801f67c:	2b78      	cmp	r3, #120	; 0x78
 801f67e:	e7f8      	b.n	801f672 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xae>
 801f680:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f682:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801f686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f688:	3302      	adds	r3, #2
 801f68a:	9309      	str	r3, [sp, #36]	; 0x24
 801f68c:	e7bb      	b.n	801f606 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 801f68e:	2b73      	cmp	r3, #115	; 0x73
 801f690:	d037      	beq.n	801f702 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x13e>
 801f692:	d808      	bhi.n	801f6a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe2>
 801f694:	2b6f      	cmp	r3, #111	; 0x6f
 801f696:	d1e4      	bne.n	801f662 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801f698:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f69a:	f104 0804 	add.w	r8, r4, #4
 801f69e:	2308      	movs	r3, #8
 801f6a0:	eba9 0202 	sub.w	r2, r9, r2
 801f6a4:	e059      	b.n	801f75a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x196>
 801f6a6:	2b75      	cmp	r3, #117	; 0x75
 801f6a8:	d051      	beq.n	801f74e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x18a>
 801f6aa:	2b78      	cmp	r3, #120	; 0x78
 801f6ac:	d1d9      	bne.n	801f662 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801f6ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f6b0:	f104 0804 	add.w	r8, r4, #4
 801f6b4:	2310      	movs	r3, #16
 801f6b6:	eba9 0202 	sub.w	r2, r9, r2
 801f6ba:	e04e      	b.n	801f75a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x196>
 801f6bc:	7823      	ldrb	r3, [r4, #0]
 801f6be:	f104 0804 	add.w	r8, r4, #4
 801f6c2:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801f6c6:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801f6ca:	aa0d      	add	r2, sp, #52	; 0x34
 801f6cc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801f6d0:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801f6d4:	a810      	add	r0, sp, #64	; 0x40
 801f6d6:	9205      	str	r2, [sp, #20]
 801f6d8:	4644      	mov	r4, r8
 801f6da:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801f6de:	9607      	str	r6, [sp, #28]
 801f6e0:	9204      	str	r2, [sp, #16]
 801f6e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f6e4:	f8cd 9018 	str.w	r9, [sp, #24]
 801f6e8:	9203      	str	r2, [sp, #12]
 801f6ea:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801f6ee:	9202      	str	r2, [sp, #8]
 801f6f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f6f2:	9201      	str	r2, [sp, #4]
 801f6f4:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801f6f8:	9200      	str	r2, [sp, #0]
 801f6fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f6fc:	f7ff fe3e 	bl	801f37c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801f700:	e7c1      	b.n	801f686 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xc2>
 801f702:	f8da 0000 	ldr.w	r0, [sl]
 801f706:	f104 0804 	add.w	r8, r4, #4
 801f70a:	6821      	ldr	r1, [r4, #0]
 801f70c:	6803      	ldr	r3, [r0, #0]
 801f70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f710:	4798      	blx	r3
 801f712:	9010      	str	r0, [sp, #64]	; 0x40
 801f714:	f8da 0000 	ldr.w	r0, [sl]
 801f718:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f71a:	6803      	ldr	r3, [r0, #0]
 801f71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f71e:	4798      	blx	r3
 801f720:	9009      	str	r0, [sp, #36]	; 0x24
 801f722:	e7d2      	b.n	801f6ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801f724:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f726:	230a      	movs	r3, #10
 801f728:	4639      	mov	r1, r7
 801f72a:	6820      	ldr	r0, [r4, #0]
 801f72c:	eba9 0202 	sub.w	r2, r9, r2
 801f730:	f104 0804 	add.w	r8, r4, #4
 801f734:	b292      	uxth	r2, r2
 801f736:	f7ff fde0 	bl	801f2fa <_ZN8touchgfx7Unicode4itoaElPtti>
 801f73a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801f73e:	2b2d      	cmp	r3, #45	; 0x2d
 801f740:	d1c3      	bne.n	801f6ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801f742:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801f746:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f748:	3302      	adds	r3, #2
 801f74a:	9310      	str	r3, [sp, #64]	; 0x40
 801f74c:	e7bd      	b.n	801f6ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801f74e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f750:	f104 0804 	add.w	r8, r4, #4
 801f754:	230a      	movs	r3, #10
 801f756:	eba9 0202 	sub.w	r2, r9, r2
 801f75a:	b292      	uxth	r2, r2
 801f75c:	4639      	mov	r1, r7
 801f75e:	6820      	ldr	r0, [r4, #0]
 801f760:	f7ff fdae 	bl	801f2c0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>
 801f764:	e7b1      	b.n	801f6ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801f766:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f768:	2310      	movs	r3, #16
 801f76a:	4639      	mov	r1, r7
 801f76c:	6820      	ldr	r0, [r4, #0]
 801f76e:	eba9 0202 	sub.w	r2, r9, r2
 801f772:	f104 0804 	add.w	r8, r4, #4
 801f776:	b292      	uxth	r2, r2
 801f778:	f7ff fda2 	bl	801f2c0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>
 801f77c:	463a      	mov	r2, r7
 801f77e:	8813      	ldrh	r3, [r2, #0]
 801f780:	2b00      	cmp	r3, #0
 801f782:	d0a2      	beq.n	801f6ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801f784:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801f788:	3202      	adds	r2, #2
 801f78a:	2919      	cmp	r1, #25
 801f78c:	bf9c      	itt	ls
 801f78e:	3b20      	subls	r3, #32
 801f790:	f822 3c02 	strhls.w	r3, [r2, #-2]
 801f794:	e7f3      	b.n	801f77e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1ba>
 801f796:	2200      	movs	r2, #0
 801f798:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801f79c:	e725      	b.n	801f5ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26>
 801f79e:	459b      	cmp	fp, r3
 801f7a0:	f77f af31 	ble.w	801f606 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 801f7a4:	f108 0302 	add.w	r3, r8, #2
 801f7a8:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801f7ac:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801f7b0:	a809      	add	r0, sp, #36	; 0x24
 801f7b2:	9309      	str	r3, [sp, #36]	; 0x24
 801f7b4:	ab0f      	add	r3, sp, #60	; 0x3c
 801f7b6:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801f7ba:	9304      	str	r3, [sp, #16]
 801f7bc:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801f7c0:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801f7c4:	9303      	str	r3, [sp, #12]
 801f7c6:	ab0e      	add	r3, sp, #56	; 0x38
 801f7c8:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801f7cc:	9302      	str	r3, [sp, #8]
 801f7ce:	ab0c      	add	r3, sp, #48	; 0x30
 801f7d0:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801f7d4:	9301      	str	r3, [sp, #4]
 801f7d6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801f7da:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801f7de:	9300      	str	r3, [sp, #0]
 801f7e0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801f7e4:	950e      	str	r5, [sp, #56]	; 0x38
 801f7e6:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801f7ea:	950f      	str	r5, [sp, #60]	; 0x3c
 801f7ec:	f7ff fe72 	bl	801f4d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801f7f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f7f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f7f4:	2b00      	cmp	r3, #0
 801f7f6:	bfbf      	itttt	lt
 801f7f8:	6823      	ldrlt	r3, [r4, #0]
 801f7fa:	3404      	addlt	r4, #4
 801f7fc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801f800:	930e      	strlt	r3, [sp, #56]	; 0x38
 801f802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f804:	2b00      	cmp	r3, #0
 801f806:	bfbf      	itttt	lt
 801f808:	6823      	ldrlt	r3, [r4, #0]
 801f80a:	3404      	addlt	r4, #4
 801f80c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801f810:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801f812:	8813      	ldrh	r3, [r2, #0]
 801f814:	2b69      	cmp	r3, #105	; 0x69
 801f816:	f43f af18 	beq.w	801f64a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801f81a:	f63f af26 	bhi.w	801f66a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa6>
 801f81e:	2b58      	cmp	r3, #88	; 0x58
 801f820:	f43f af13 	beq.w	801f64a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801f824:	f63f af0d 	bhi.w	801f642 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x7e>
 801f828:	2b25      	cmp	r3, #37	; 0x25
 801f82a:	f43f af29 	beq.w	801f680 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xbc>
 801f82e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f830:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 801f834:	f8b8 2000 	ldrh.w	r2, [r8]
 801f838:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801f83c:	3301      	adds	r3, #1
 801f83e:	930d      	str	r3, [sp, #52]	; 0x34
 801f840:	e721      	b.n	801f686 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xc2>
 801f842:	bf00      	nop
 801f844:	2000a32c 	.word	0x2000a32c

0801f848 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801f848:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f84a:	4605      	mov	r5, r0
 801f84c:	b0a1      	sub	sp, #132	; 0x84
 801f84e:	4610      	mov	r0, r2
 801f850:	460e      	mov	r6, r1
 801f852:	4614      	mov	r4, r2
 801f854:	461f      	mov	r7, r3
 801f856:	f7ff fd15 	bl	801f284 <_ZN8touchgfx7Unicode6strlenEPKc>
 801f85a:	283f      	cmp	r0, #63	; 0x3f
 801f85c:	dd06      	ble.n	801f86c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801f85e:	4b0a      	ldr	r3, [pc, #40]	; (801f888 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801f860:	f240 11b9 	movw	r1, #441	; 0x1b9
 801f864:	4a09      	ldr	r2, [pc, #36]	; (801f88c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801f866:	480a      	ldr	r0, [pc, #40]	; (801f890 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801f868:	f001 fca6 	bl	80211b8 <__assert_func>
 801f86c:	4621      	mov	r1, r4
 801f86e:	2240      	movs	r2, #64	; 0x40
 801f870:	4668      	mov	r0, sp
 801f872:	f7ff fd13 	bl	801f29c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801f876:	463b      	mov	r3, r7
 801f878:	466a      	mov	r2, sp
 801f87a:	4631      	mov	r1, r6
 801f87c:	4628      	mov	r0, r5
 801f87e:	f7ff fea1 	bl	801f5c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801f882:	b021      	add	sp, #132	; 0x84
 801f884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f886:	bf00      	nop
 801f888:	08025564 	.word	0x08025564
 801f88c:	080255a7 	.word	0x080255a7
 801f890:	08025581 	.word	0x08025581

0801f894 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801f894:	b40c      	push	{r2, r3}
 801f896:	b507      	push	{r0, r1, r2, lr}
 801f898:	ab04      	add	r3, sp, #16
 801f89a:	f853 2b04 	ldr.w	r2, [r3], #4
 801f89e:	9301      	str	r3, [sp, #4]
 801f8a0:	f7ff ffd2 	bl	801f848 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801f8a4:	b003      	add	sp, #12
 801f8a6:	f85d eb04 	ldr.w	lr, [sp], #4
 801f8aa:	b002      	add	sp, #8
 801f8ac:	4770      	bx	lr
	...

0801f8b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
 801f8b0:	4b26      	ldr	r3, [pc, #152]	; (801f94c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x9c>)
 801f8b2:	b570      	push	{r4, r5, r6, lr}
 801f8b4:	681b      	ldr	r3, [r3, #0]
 801f8b6:	4605      	mov	r5, r0
 801f8b8:	460c      	mov	r4, r1
 801f8ba:	4616      	mov	r6, r2
 801f8bc:	b92b      	cbnz	r3, 801f8ca <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x1a>
 801f8be:	4b24      	ldr	r3, [pc, #144]	; (801f950 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa0>)
 801f8c0:	2116      	movs	r1, #22
 801f8c2:	4a24      	ldr	r2, [pc, #144]	; (801f954 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa4>)
 801f8c4:	4824      	ldr	r0, [pc, #144]	; (801f958 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa8>)
 801f8c6:	f001 fc77 	bl	80211b8 <__assert_func>
 801f8ca:	6898      	ldr	r0, [r3, #8]
 801f8cc:	6803      	ldr	r3, [r0, #0]
 801f8ce:	6a1b      	ldr	r3, [r3, #32]
 801f8d0:	4798      	blx	r3
 801f8d2:	2810      	cmp	r0, #16
 801f8d4:	d109      	bne.n	801f8ea <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x3a>
 801f8d6:	00e0      	lsls	r0, r4, #3
 801f8d8:	022c      	lsls	r4, r5, #8
 801f8da:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f8de:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801f8e2:	ea40 00d6 	orr.w	r0, r0, r6, lsr #3
 801f8e6:	4320      	orrs	r0, r4
 801f8e8:	bd70      	pop	{r4, r5, r6, pc}
 801f8ea:	2818      	cmp	r0, #24
 801f8ec:	d104      	bne.n	801f8f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>
 801f8ee:	ea46 2004 	orr.w	r0, r6, r4, lsl #8
 801f8f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 801f8f6:	bd70      	pop	{r4, r5, r6, pc}
 801f8f8:	2804      	cmp	r0, #4
 801f8fa:	f04f 01b6 	mov.w	r1, #182	; 0xb6
 801f8fe:	d109      	bne.n	801f914 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x64>
 801f900:	fb14 f401 	smulbb	r4, r4, r1
 801f904:	2036      	movs	r0, #54	; 0x36
 801f906:	fb10 4405 	smlabb	r4, r0, r5, r4
 801f90a:	2013      	movs	r0, #19
 801f90c:	fb10 4006 	smlabb	r0, r0, r6, r4
 801f910:	1300      	asrs	r0, r0, #12
 801f912:	bd70      	pop	{r4, r5, r6, pc}
 801f914:	2802      	cmp	r0, #2
 801f916:	d109      	bne.n	801f92c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x7c>
 801f918:	fb14 f401 	smulbb	r4, r4, r1
 801f91c:	2036      	movs	r0, #54	; 0x36
 801f91e:	fb10 4405 	smlabb	r4, r0, r5, r4
 801f922:	2013      	movs	r0, #19
 801f924:	fb10 4006 	smlabb	r0, r0, r6, r4
 801f928:	1380      	asrs	r0, r0, #14
 801f92a:	bd70      	pop	{r4, r5, r6, pc}
 801f92c:	2801      	cmp	r0, #1
 801f92e:	d109      	bne.n	801f944 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x94>
 801f930:	fb14 f401 	smulbb	r4, r4, r1
 801f934:	2036      	movs	r0, #54	; 0x36
 801f936:	fb10 4405 	smlabb	r4, r0, r5, r4
 801f93a:	2013      	movs	r0, #19
 801f93c:	fb10 4006 	smlabb	r0, r0, r6, r4
 801f940:	13c0      	asrs	r0, r0, #15
 801f942:	bd70      	pop	{r4, r5, r6, pc}
 801f944:	4b05      	ldr	r3, [pc, #20]	; (801f95c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xac>)
 801f946:	212f      	movs	r1, #47	; 0x2f
 801f948:	4a02      	ldr	r2, [pc, #8]	; (801f954 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa4>)
 801f94a:	e7bb      	b.n	801f8c4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x14>
 801f94c:	2000a32c 	.word	0x2000a32c
 801f950:	0802562c 	.word	0x0802562c
 801f954:	080256af 	.word	0x080256af
 801f958:	0802566f 	.word	0x0802566f
 801f95c:	08025693 	.word	0x08025693

0801f960 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801f960:	4b01      	ldr	r3, [pc, #4]	; (801f968 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801f962:	6018      	str	r0, [r3, #0]
 801f964:	4770      	bx	lr
 801f966:	bf00      	nop
 801f968:	2000a39c 	.word	0x2000a39c

0801f96c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801f96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f970:	4f24      	ldr	r7, [pc, #144]	; (801fa04 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801f972:	683b      	ldr	r3, [r7, #0]
 801f974:	2b00      	cmp	r3, #0
 801f976:	d042      	beq.n	801f9fe <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801f978:	4923      	ldr	r1, [pc, #140]	; (801fa08 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801f97a:	4d24      	ldr	r5, [pc, #144]	; (801fa0c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801f97c:	8808      	ldrh	r0, [r1, #0]
 801f97e:	882a      	ldrh	r2, [r5, #0]
 801f980:	4e23      	ldr	r6, [pc, #140]	; (801fa10 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801f982:	4410      	add	r0, r2
 801f984:	ea4f 1e02 	mov.w	lr, r2, lsl #4
 801f988:	4c22      	ldr	r4, [pc, #136]	; (801fa14 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801f98a:	1c41      	adds	r1, r0, #1
 801f98c:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801f990:	f021 0101 	bic.w	r1, r1, #1
 801f994:	eb03 0208 	add.w	r2, r3, r8
 801f998:	0409      	lsls	r1, r1, #16
 801f99a:	6032      	str	r2, [r6, #0]
 801f99c:	0c09      	lsrs	r1, r1, #16
 801f99e:	0049      	lsls	r1, r1, #1
 801f9a0:	eb08 0c01 	add.w	ip, r8, r1
 801f9a4:	eb03 020c 	add.w	r2, r3, ip
 801f9a8:	44f4      	add	ip, lr
 801f9aa:	6022      	str	r2, [r4, #0]
 801f9ac:	4463      	add	r3, ip
 801f9ae:	4a1a      	ldr	r2, [pc, #104]	; (801fa18 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801f9b0:	6013      	str	r3, [r2, #0]
 801f9b2:	2300      	movs	r3, #0
 801f9b4:	4a19      	ldr	r2, [pc, #100]	; (801fa1c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801f9b6:	8013      	strh	r3, [r2, #0]
 801f9b8:	4a19      	ldr	r2, [pc, #100]	; (801fa20 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801f9ba:	6812      	ldr	r2, [r2, #0]
 801f9bc:	eba2 0208 	sub.w	r2, r2, r8
 801f9c0:	1a52      	subs	r2, r2, r1
 801f9c2:	4918      	ldr	r1, [pc, #96]	; (801fa24 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801f9c4:	eba2 020e 	sub.w	r2, r2, lr
 801f9c8:	469e      	mov	lr, r3
 801f9ca:	600a      	str	r2, [r1, #0]
 801f9cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801f9d0:	4a15      	ldr	r2, [pc, #84]	; (801fa28 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801f9d2:	8013      	strh	r3, [r2, #0]
 801f9d4:	4283      	cmp	r3, r0
 801f9d6:	d007      	beq.n	801f9e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7c>
 801f9d8:	683a      	ldr	r2, [r7, #0]
 801f9da:	f842 e023 	str.w	lr, [r2, r3, lsl #2]
 801f9de:	6832      	ldr	r2, [r6, #0]
 801f9e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801f9e4:	3301      	adds	r3, #1
 801f9e6:	e7f5      	b.n	801f9d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x68>
 801f9e8:	2300      	movs	r3, #0
 801f9ea:	882d      	ldrh	r5, [r5, #0]
 801f9ec:	6820      	ldr	r0, [r4, #0]
 801f9ee:	4619      	mov	r1, r3
 801f9f0:	42ab      	cmp	r3, r5
 801f9f2:	d204      	bcs.n	801f9fe <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801f9f4:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 801f9f8:	3301      	adds	r3, #1
 801f9fa:	7391      	strb	r1, [r2, #14]
 801f9fc:	e7f8      	b.n	801f9f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x84>
 801f9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa02:	bf00      	nop
 801fa04:	2000a3a0 	.word	0x2000a3a0
 801fa08:	2000a3bc 	.word	0x2000a3bc
 801fa0c:	2000a3c0 	.word	0x2000a3c0
 801fa10:	2000a3b4 	.word	0x2000a3b4
 801fa14:	2000a3a4 	.word	0x2000a3a4
 801fa18:	2000a3ac 	.word	0x2000a3ac
 801fa1c:	2000a3be 	.word	0x2000a3be
 801fa20:	2000a3a8 	.word	0x2000a3a8
 801fa24:	2000a3b8 	.word	0x2000a3b8
 801fa28:	2000a3b0 	.word	0x2000a3b0

0801fa2c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801fa2c:	4b0f      	ldr	r3, [pc, #60]	; (801fa6c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>)
 801fa2e:	b510      	push	{r4, lr}
 801fa30:	681b      	ldr	r3, [r3, #0]
 801fa32:	b9d3      	cbnz	r3, 801fa6a <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x3e>
 801fa34:	b1c9      	cbz	r1, 801fa6a <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x3e>
 801fa36:	4b0e      	ldr	r3, [pc, #56]	; (801fa70 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801fa38:	2406      	movs	r4, #6
 801fa3a:	801a      	strh	r2, [r3, #0]
 801fa3c:	b292      	uxth	r2, r2
 801fa3e:	4b0d      	ldr	r3, [pc, #52]	; (801fa74 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801fa40:	881b      	ldrh	r3, [r3, #0]
 801fa42:	4413      	add	r3, r2
 801fa44:	0112      	lsls	r2, r2, #4
 801fa46:	fb04 2203 	mla	r2, r4, r3, r2
 801fa4a:	4291      	cmp	r1, r2
 801fa4c:	d805      	bhi.n	801fa5a <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x2e>
 801fa4e:	4b0a      	ldr	r3, [pc, #40]	; (801fa78 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801fa50:	2138      	movs	r1, #56	; 0x38
 801fa52:	4a0a      	ldr	r2, [pc, #40]	; (801fa7c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801fa54:	480a      	ldr	r0, [pc, #40]	; (801fa80 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801fa56:	f001 fbaf 	bl	80211b8 <__assert_func>
 801fa5a:	4b0a      	ldr	r3, [pc, #40]	; (801fa84 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801fa5c:	6019      	str	r1, [r3, #0]
 801fa5e:	4b0a      	ldr	r3, [pc, #40]	; (801fa88 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801fa60:	6018      	str	r0, [r3, #0]
 801fa62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fa66:	f7ff bf81 	b.w	801f96c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801fa6a:	bd10      	pop	{r4, pc}
 801fa6c:	2000a3ac 	.word	0x2000a3ac
 801fa70:	2000a3c0 	.word	0x2000a3c0
 801fa74:	2000a3bc 	.word	0x2000a3bc
 801fa78:	0802576f 	.word	0x0802576f
 801fa7c:	08025804 	.word	0x08025804
 801fa80:	0802574a 	.word	0x0802574a
 801fa84:	2000a3a8 	.word	0x2000a3a8
 801fa88:	2000a3a0 	.word	0x2000a3a0

0801fa8c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801fa8c:	b470      	push	{r4, r5, r6}
 801fa8e:	4c07      	ldr	r4, [pc, #28]	; (801faac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801fa90:	4605      	mov	r5, r0
 801fa92:	4610      	mov	r0, r2
 801fa94:	9a03      	ldr	r2, [sp, #12]
 801fa96:	6826      	ldr	r6, [r4, #0]
 801fa98:	b936      	cbnz	r6, 801faa8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801fa9a:	6025      	str	r5, [r4, #0]
 801fa9c:	4c04      	ldr	r4, [pc, #16]	; (801fab0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801fa9e:	8021      	strh	r1, [r4, #0]
 801faa0:	4619      	mov	r1, r3
 801faa2:	bc70      	pop	{r4, r5, r6}
 801faa4:	f7ff bfc2 	b.w	801fa2c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801faa8:	bc70      	pop	{r4, r5, r6}
 801faaa:	4770      	bx	lr
 801faac:	2000a3c4 	.word	0x2000a3c4
 801fab0:	2000a3bc 	.word	0x2000a3bc

0801fab4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801fab4:	b508      	push	{r3, lr}
 801fab6:	4b13      	ldr	r3, [pc, #76]	; (801fb04 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801fab8:	6819      	ldr	r1, [r3, #0]
 801faba:	b931      	cbnz	r1, 801faca <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801fabc:	4b12      	ldr	r3, [pc, #72]	; (801fb08 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801fabe:	f44f 710d 	mov.w	r1, #564	; 0x234
 801fac2:	4a12      	ldr	r2, [pc, #72]	; (801fb0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801fac4:	4812      	ldr	r0, [pc, #72]	; (801fb10 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801fac6:	f001 fb77 	bl	80211b8 <__assert_func>
 801faca:	4a12      	ldr	r2, [pc, #72]	; (801fb14 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801facc:	8803      	ldrh	r3, [r0, #0]
 801face:	8812      	ldrh	r2, [r2, #0]
 801fad0:	4293      	cmp	r3, r2
 801fad2:	da04      	bge.n	801fade <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801fad4:	2214      	movs	r2, #20
 801fad6:	fb02 1303 	mla	r3, r2, r3, r1
 801fada:	8918      	ldrh	r0, [r3, #8]
 801fadc:	bd08      	pop	{r3, pc}
 801fade:	490e      	ldr	r1, [pc, #56]	; (801fb18 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801fae0:	8809      	ldrh	r1, [r1, #0]
 801fae2:	4411      	add	r1, r2
 801fae4:	428b      	cmp	r3, r1
 801fae6:	da05      	bge.n	801faf4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x40>
 801fae8:	1a9b      	subs	r3, r3, r2
 801faea:	4a0c      	ldr	r2, [pc, #48]	; (801fb1c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801faec:	6812      	ldr	r2, [r2, #0]
 801faee:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801faf2:	e7f2      	b.n	801fada <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801faf4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801faf8:	4293      	cmp	r3, r2
 801fafa:	bf06      	itte	eq
 801fafc:	4b08      	ldreq	r3, [pc, #32]	; (801fb20 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801fafe:	8818      	ldrheq	r0, [r3, #0]
 801fb00:	2000      	movne	r0, #0
 801fb02:	bd08      	pop	{r3, pc}
 801fb04:	2000a3c4 	.word	0x2000a3c4
 801fb08:	080257c8 	.word	0x080257c8
 801fb0c:	080258b1 	.word	0x080258b1
 801fb10:	0802574a 	.word	0x0802574a
 801fb14:	2000a3bc 	.word	0x2000a3bc
 801fb18:	2000a3c0 	.word	0x2000a3c0
 801fb1c:	2000a3a4 	.word	0x2000a3a4
 801fb20:	2000a320 	.word	0x2000a320

0801fb24 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801fb24:	b508      	push	{r3, lr}
 801fb26:	4b13      	ldr	r3, [pc, #76]	; (801fb74 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801fb28:	6819      	ldr	r1, [r3, #0]
 801fb2a:	b931      	cbnz	r1, 801fb3a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801fb2c:	4b12      	ldr	r3, [pc, #72]	; (801fb78 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801fb2e:	f44f 7112 	mov.w	r1, #584	; 0x248
 801fb32:	4a12      	ldr	r2, [pc, #72]	; (801fb7c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801fb34:	4812      	ldr	r0, [pc, #72]	; (801fb80 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801fb36:	f001 fb3f 	bl	80211b8 <__assert_func>
 801fb3a:	4a12      	ldr	r2, [pc, #72]	; (801fb84 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801fb3c:	8803      	ldrh	r3, [r0, #0]
 801fb3e:	8812      	ldrh	r2, [r2, #0]
 801fb40:	4293      	cmp	r3, r2
 801fb42:	da04      	bge.n	801fb4e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801fb44:	2214      	movs	r2, #20
 801fb46:	fb02 1303 	mla	r3, r2, r3, r1
 801fb4a:	8958      	ldrh	r0, [r3, #10]
 801fb4c:	bd08      	pop	{r3, pc}
 801fb4e:	490e      	ldr	r1, [pc, #56]	; (801fb88 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801fb50:	8809      	ldrh	r1, [r1, #0]
 801fb52:	4411      	add	r1, r2
 801fb54:	428b      	cmp	r3, r1
 801fb56:	da05      	bge.n	801fb64 <_ZNK8touchgfx6Bitmap9getHeightEv+0x40>
 801fb58:	1a9b      	subs	r3, r3, r2
 801fb5a:	4a0c      	ldr	r2, [pc, #48]	; (801fb8c <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801fb5c:	6812      	ldr	r2, [r2, #0]
 801fb5e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801fb62:	e7f2      	b.n	801fb4a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801fb64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fb68:	4293      	cmp	r3, r2
 801fb6a:	bf06      	itte	eq
 801fb6c:	4b08      	ldreq	r3, [pc, #32]	; (801fb90 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801fb6e:	8818      	ldrheq	r0, [r3, #0]
 801fb70:	2000      	movne	r0, #0
 801fb72:	bd08      	pop	{r3, pc}
 801fb74:	2000a3c4 	.word	0x2000a3c4
 801fb78:	080257c8 	.word	0x080257c8
 801fb7c:	080258dd 	.word	0x080258dd
 801fb80:	0802574a 	.word	0x0802574a
 801fb84:	2000a3bc 	.word	0x2000a3bc
 801fb88:	2000a3c0 	.word	0x2000a3c0
 801fb8c:	2000a3a4 	.word	0x2000a3a4
 801fb90:	2000a322 	.word	0x2000a322

0801fb94 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801fb94:	4b22      	ldr	r3, [pc, #136]	; (801fc20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801fb96:	b510      	push	{r4, lr}
 801fb98:	681c      	ldr	r4, [r3, #0]
 801fb9a:	b934      	cbnz	r4, 801fbaa <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801fb9c:	4b21      	ldr	r3, [pc, #132]	; (801fc24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801fb9e:	f44f 7117 	mov.w	r1, #604	; 0x25c
 801fba2:	4a21      	ldr	r2, [pc, #132]	; (801fc28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801fba4:	4821      	ldr	r0, [pc, #132]	; (801fc2c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801fba6:	f001 fb07 	bl	80211b8 <__assert_func>
 801fbaa:	4a21      	ldr	r2, [pc, #132]	; (801fc30 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801fbac:	880b      	ldrh	r3, [r1, #0]
 801fbae:	8812      	ldrh	r2, [r2, #0]
 801fbb0:	4293      	cmp	r3, r2
 801fbb2:	da10      	bge.n	801fbd6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x42>
 801fbb4:	2214      	movs	r2, #20
 801fbb6:	fb02 4303 	mla	r3, r2, r3, r4
 801fbba:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801fbbe:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801fbc2:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 801fbc6:	8a5b      	ldrh	r3, [r3, #18]
 801fbc8:	8004      	strh	r4, [r0, #0]
 801fbca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801fbce:	8041      	strh	r1, [r0, #2]
 801fbd0:	8082      	strh	r2, [r0, #4]
 801fbd2:	80c3      	strh	r3, [r0, #6]
 801fbd4:	bd10      	pop	{r4, pc}
 801fbd6:	4917      	ldr	r1, [pc, #92]	; (801fc34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801fbd8:	8809      	ldrh	r1, [r1, #0]
 801fbda:	4411      	add	r1, r2
 801fbdc:	428b      	cmp	r3, r1
 801fbde:	da09      	bge.n	801fbf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801fbe0:	1a9b      	subs	r3, r3, r2
 801fbe2:	4a15      	ldr	r2, [pc, #84]	; (801fc38 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801fbe4:	6812      	ldr	r2, [r2, #0]
 801fbe6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801fbea:	681a      	ldr	r2, [r3, #0]
 801fbec:	6002      	str	r2, [r0, #0]
 801fbee:	685a      	ldr	r2, [r3, #4]
 801fbf0:	6042      	str	r2, [r0, #4]
 801fbf2:	bd10      	pop	{r4, pc}
 801fbf4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fbf8:	4293      	cmp	r3, r2
 801fbfa:	d10b      	bne.n	801fc14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801fbfc:	4b0f      	ldr	r3, [pc, #60]	; (801fc3c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801fbfe:	f9b3 1000 	ldrsh.w	r1, [r3]
 801fc02:	4b0f      	ldr	r3, [pc, #60]	; (801fc40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801fc04:	8081      	strh	r1, [r0, #4]
 801fc06:	f9b3 2000 	ldrsh.w	r2, [r3]
 801fc0a:	2300      	movs	r3, #0
 801fc0c:	80c2      	strh	r2, [r0, #6]
 801fc0e:	8003      	strh	r3, [r0, #0]
 801fc10:	8043      	strh	r3, [r0, #2]
 801fc12:	bd10      	pop	{r4, pc}
 801fc14:	2300      	movs	r3, #0
 801fc16:	8003      	strh	r3, [r0, #0]
 801fc18:	8043      	strh	r3, [r0, #2]
 801fc1a:	8083      	strh	r3, [r0, #4]
 801fc1c:	e7d9      	b.n	801fbd2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x3e>
 801fc1e:	bf00      	nop
 801fc20:	2000a3c4 	.word	0x2000a3c4
 801fc24:	080257c8 	.word	0x080257c8
 801fc28:	0802584a 	.word	0x0802584a
 801fc2c:	0802574a 	.word	0x0802574a
 801fc30:	2000a3bc 	.word	0x2000a3bc
 801fc34:	2000a3c0 	.word	0x2000a3c0
 801fc38:	2000a3a4 	.word	0x2000a3a4
 801fc3c:	2000a320 	.word	0x2000a320
 801fc40:	2000a322 	.word	0x2000a322

0801fc44 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801fc44:	4b16      	ldr	r3, [pc, #88]	; (801fca0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>)
 801fc46:	681b      	ldr	r3, [r3, #0]
 801fc48:	b333      	cbz	r3, 801fc98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x54>
 801fc4a:	4a16      	ldr	r2, [pc, #88]	; (801fca4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801fc4c:	8800      	ldrh	r0, [r0, #0]
 801fc4e:	8812      	ldrh	r2, [r2, #0]
 801fc50:	4290      	cmp	r0, r2
 801fc52:	da0f      	bge.n	801fc74 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x30>
 801fc54:	2214      	movs	r2, #20
 801fc56:	fb02 3300 	mla	r3, r2, r0, r3
 801fc5a:	8a19      	ldrh	r1, [r3, #16]
 801fc5c:	891a      	ldrh	r2, [r3, #8]
 801fc5e:	4291      	cmp	r1, r2
 801fc60:	db1c      	blt.n	801fc9c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801fc62:	8a58      	ldrh	r0, [r3, #18]
 801fc64:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801fc68:	895b      	ldrh	r3, [r3, #10]
 801fc6a:	4298      	cmp	r0, r3
 801fc6c:	bfac      	ite	ge
 801fc6e:	2000      	movge	r0, #0
 801fc70:	2001      	movlt	r0, #1
 801fc72:	4770      	bx	lr
 801fc74:	4b0c      	ldr	r3, [pc, #48]	; (801fca8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801fc76:	881b      	ldrh	r3, [r3, #0]
 801fc78:	4413      	add	r3, r2
 801fc7a:	4298      	cmp	r0, r3
 801fc7c:	da0c      	bge.n	801fc98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x54>
 801fc7e:	4b0b      	ldr	r3, [pc, #44]	; (801fcac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801fc80:	1a80      	subs	r0, r0, r2
 801fc82:	681b      	ldr	r3, [r3, #0]
 801fc84:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 801fc88:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801fc8c:	891a      	ldrh	r2, [r3, #8]
 801fc8e:	4291      	cmp	r1, r2
 801fc90:	db04      	blt.n	801fc9c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801fc92:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801fc96:	e7e7      	b.n	801fc68 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x24>
 801fc98:	2000      	movs	r0, #0
 801fc9a:	4770      	bx	lr
 801fc9c:	2001      	movs	r0, #1
 801fc9e:	4770      	bx	lr
 801fca0:	2000a3c4 	.word	0x2000a3c4
 801fca4:	2000a3bc 	.word	0x2000a3bc
 801fca8:	2000a3c0 	.word	0x2000a3c0
 801fcac:	2000a3a4 	.word	0x2000a3a4

0801fcb0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801fcb0:	b508      	push	{r3, lr}
 801fcb2:	4b11      	ldr	r3, [pc, #68]	; (801fcf8 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>)
 801fcb4:	6819      	ldr	r1, [r3, #0]
 801fcb6:	b931      	cbnz	r1, 801fcc6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801fcb8:	4b10      	ldr	r3, [pc, #64]	; (801fcfc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801fcba:	f44f 7120 	mov.w	r1, #640	; 0x280
 801fcbe:	4a10      	ldr	r2, [pc, #64]	; (801fd00 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801fcc0:	4810      	ldr	r0, [pc, #64]	; (801fd04 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801fcc2:	f001 fa79 	bl	80211b8 <__assert_func>
 801fcc6:	8803      	ldrh	r3, [r0, #0]
 801fcc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801fccc:	4293      	cmp	r3, r2
 801fcce:	d011      	beq.n	801fcf4 <_ZNK8touchgfx6Bitmap7getDataEv+0x44>
 801fcd0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fcd4:	4293      	cmp	r3, r2
 801fcd6:	d103      	bne.n	801fce0 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801fcd8:	4b0b      	ldr	r3, [pc, #44]	; (801fd08 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801fcda:	681b      	ldr	r3, [r3, #0]
 801fcdc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801fcde:	bd08      	pop	{r3, pc}
 801fce0:	4a0a      	ldr	r2, [pc, #40]	; (801fd0c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801fce2:	6812      	ldr	r2, [r2, #0]
 801fce4:	b112      	cbz	r2, 801fcec <_ZNK8touchgfx6Bitmap7getDataEv+0x3c>
 801fce6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801fcea:	b920      	cbnz	r0, 801fcf6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801fcec:	2214      	movs	r2, #20
 801fcee:	4353      	muls	r3, r2
 801fcf0:	58c8      	ldr	r0, [r1, r3]
 801fcf2:	bd08      	pop	{r3, pc}
 801fcf4:	2000      	movs	r0, #0
 801fcf6:	bd08      	pop	{r3, pc}
 801fcf8:	2000a3c4 	.word	0x2000a3c4
 801fcfc:	080257c8 	.word	0x080257c8
 801fd00:	08025880 	.word	0x08025880
 801fd04:	0802574a 	.word	0x0802574a
 801fd08:	2000a32c 	.word	0x2000a32c
 801fd0c:	2000a3a0 	.word	0x2000a3a0

0801fd10 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801fd10:	b508      	push	{r3, lr}
 801fd12:	4b1c      	ldr	r3, [pc, #112]	; (801fd84 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801fd14:	6819      	ldr	r1, [r3, #0]
 801fd16:	8803      	ldrh	r3, [r0, #0]
 801fd18:	b1a9      	cbz	r1, 801fd46 <_ZNK8touchgfx6Bitmap9getFormatEv+0x36>
 801fd1a:	4a1b      	ldr	r2, [pc, #108]	; (801fd88 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801fd1c:	8812      	ldrh	r2, [r2, #0]
 801fd1e:	4293      	cmp	r3, r2
 801fd20:	da05      	bge.n	801fd2e <_ZNK8touchgfx6Bitmap9getFormatEv+0x1e>
 801fd22:	2214      	movs	r2, #20
 801fd24:	fb02 1303 	mla	r3, r2, r3, r1
 801fd28:	7cd8      	ldrb	r0, [r3, #19]
 801fd2a:	0940      	lsrs	r0, r0, #5
 801fd2c:	bd08      	pop	{r3, pc}
 801fd2e:	4917      	ldr	r1, [pc, #92]	; (801fd8c <_ZNK8touchgfx6Bitmap9getFormatEv+0x7c>)
 801fd30:	8809      	ldrh	r1, [r1, #0]
 801fd32:	4411      	add	r1, r2
 801fd34:	428b      	cmp	r3, r1
 801fd36:	da06      	bge.n	801fd46 <_ZNK8touchgfx6Bitmap9getFormatEv+0x36>
 801fd38:	1a9b      	subs	r3, r3, r2
 801fd3a:	4a15      	ldr	r2, [pc, #84]	; (801fd90 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801fd3c:	6812      	ldr	r2, [r2, #0]
 801fd3e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801fd42:	7b18      	ldrb	r0, [r3, #12]
 801fd44:	bd08      	pop	{r3, pc}
 801fd46:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fd4a:	4293      	cmp	r3, r2
 801fd4c:	d10c      	bne.n	801fd68 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 801fd4e:	4b11      	ldr	r3, [pc, #68]	; (801fd94 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801fd50:	681b      	ldr	r3, [r3, #0]
 801fd52:	6898      	ldr	r0, [r3, #8]
 801fd54:	6803      	ldr	r3, [r0, #0]
 801fd56:	6a1b      	ldr	r3, [r3, #32]
 801fd58:	4798      	blx	r3
 801fd5a:	2804      	cmp	r0, #4
 801fd5c:	d00e      	beq.n	801fd7c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>
 801fd5e:	d805      	bhi.n	801fd6c <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801fd60:	2801      	cmp	r0, #1
 801fd62:	d00d      	beq.n	801fd80 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>
 801fd64:	2802      	cmp	r0, #2
 801fd66:	d007      	beq.n	801fd78 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>
 801fd68:	2000      	movs	r0, #0
 801fd6a:	bd08      	pop	{r3, pc}
 801fd6c:	2810      	cmp	r0, #16
 801fd6e:	d0fb      	beq.n	801fd68 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 801fd70:	2818      	cmp	r0, #24
 801fd72:	d1f9      	bne.n	801fd68 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 801fd74:	2001      	movs	r0, #1
 801fd76:	bd08      	pop	{r3, pc}
 801fd78:	2005      	movs	r0, #5
 801fd7a:	bd08      	pop	{r3, pc}
 801fd7c:	2006      	movs	r0, #6
 801fd7e:	bd08      	pop	{r3, pc}
 801fd80:	2003      	movs	r0, #3
 801fd82:	bd08      	pop	{r3, pc}
 801fd84:	2000a3c4 	.word	0x2000a3c4
 801fd88:	2000a3bc 	.word	0x2000a3bc
 801fd8c:	2000a3c0 	.word	0x2000a3c0
 801fd90:	2000a3a4 	.word	0x2000a3a4
 801fd94:	2000a32c 	.word	0x2000a32c

0801fd98 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801fd98:	2018      	movs	r0, #24
 801fd9a:	4770      	bx	lr

0801fd9c <_ZN8touchgfx8LCD24bpp4initEv>:
 801fd9c:	4770      	bx	lr
	...

0801fda0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt>:
 801fda0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fda4:	b086      	sub	sp, #24
 801fda6:	6808      	ldr	r0, [r1, #0]
 801fda8:	6849      	ldr	r1, [r1, #4]
 801fdaa:	4691      	mov	r9, r2
 801fdac:	ab04      	add	r3, sp, #16
 801fdae:	ac04      	add	r4, sp, #16
 801fdb0:	c303      	stmia	r3!, {r0, r1}
 801fdb2:	4620      	mov	r0, r4
 801fdb4:	f7fd ffc0 	bl	801dd38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fdb8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801fdbc:	4599      	cmp	r9, r3
 801fdbe:	d108      	bne.n	801fdd2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x32>
 801fdc0:	4b35      	ldr	r3, [pc, #212]	; (801fe98 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf8>)
 801fdc2:	781b      	ldrb	r3, [r3, #0]
 801fdc4:	b92b      	cbnz	r3, 801fdd2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x32>
 801fdc6:	4b35      	ldr	r3, [pc, #212]	; (801fe9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xfc>)
 801fdc8:	21f9      	movs	r1, #249	; 0xf9
 801fdca:	4a35      	ldr	r2, [pc, #212]	; (801fea0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x100>)
 801fdcc:	4835      	ldr	r0, [pc, #212]	; (801fea4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x104>)
 801fdce:	f001 f9f3 	bl	80211b8 <__assert_func>
 801fdd2:	4e35      	ldr	r6, [pc, #212]	; (801fea8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x108>)
 801fdd4:	6830      	ldr	r0, [r6, #0]
 801fdd6:	4637      	mov	r7, r6
 801fdd8:	6803      	ldr	r3, [r0, #0]
 801fdda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fddc:	4798      	blx	r3
 801fdde:	f010 0a01 	ands.w	sl, r0, #1
 801fde2:	d020      	beq.n	801fe26 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x86>
 801fde4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801fde8:	4599      	cmp	r9, r3
 801fdea:	d108      	bne.n	801fdfe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x5e>
 801fdec:	6830      	ldr	r0, [r6, #0]
 801fdee:	6803      	ldr	r3, [r0, #0]
 801fdf0:	e894 0006 	ldmia.w	r4, {r1, r2}
 801fdf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fdf6:	4798      	blx	r3
 801fdf8:	b006      	add	sp, #24
 801fdfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fdfe:	ad06      	add	r5, sp, #24
 801fe00:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 801fe04:	4628      	mov	r0, r5
 801fe06:	f7ff ff53 	bl	801fcb0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801fe0a:	6836      	ldr	r6, [r6, #0]
 801fe0c:	4680      	mov	r8, r0
 801fe0e:	4628      	mov	r0, r5
 801fe10:	6833      	ldr	r3, [r6, #0]
 801fe12:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 801fe14:	f7ff fe4e 	bl	801fab4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801fe18:	4643      	mov	r3, r8
 801fe1a:	9000      	str	r0, [sp, #0]
 801fe1c:	4630      	mov	r0, r6
 801fe1e:	e894 0006 	ldmia.w	r4, {r1, r2}
 801fe22:	47b8      	blx	r7
 801fe24:	e7e8      	b.n	801fdf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x58>
 801fe26:	6830      	ldr	r0, [r6, #0]
 801fe28:	ad06      	add	r5, sp, #24
 801fe2a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 801feac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x10c>
 801fe2e:	4656      	mov	r6, sl
 801fe30:	6803      	ldr	r3, [r0, #0]
 801fe32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe34:	4798      	blx	r3
 801fe36:	f8b8 4000 	ldrh.w	r4, [r8]
 801fe3a:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801fe3e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801fe42:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 801fe46:	fb02 3404 	mla	r4, r2, r4, r3
 801fe4a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fe4e:	4404      	add	r4, r0
 801fe50:	4628      	mov	r0, r5
 801fe52:	f7ff ff2d 	bl	801fcb0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801fe56:	4681      	mov	r9, r0
 801fe58:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801fe5c:	429e      	cmp	r6, r3
 801fe5e:	da17      	bge.n	801fe90 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf0>
 801fe60:	6838      	ldr	r0, [r7, #0]
 801fe62:	4649      	mov	r1, r9
 801fe64:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801fe68:	3601      	adds	r6, #1
 801fe6a:	6802      	ldr	r2, [r0, #0]
 801fe6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fe70:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801fe74:	4622      	mov	r2, r4
 801fe76:	47d0      	blx	sl
 801fe78:	f8b8 3000 	ldrh.w	r3, [r8]
 801fe7c:	4628      	mov	r0, r5
 801fe7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fe82:	441c      	add	r4, r3
 801fe84:	f7ff fe16 	bl	801fab4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801fe88:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fe8c:	4481      	add	r9, r0
 801fe8e:	e7e3      	b.n	801fe58 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xb8>
 801fe90:	4628      	mov	r0, r5
 801fe92:	f7ff ff0d 	bl	801fcb0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801fe96:	e7af      	b.n	801fdf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x58>
 801fe98:	2000a32b 	.word	0x2000a32b
 801fe9c:	0802595f 	.word	0x0802595f
 801fea0:	08025afc 	.word	0x08025afc
 801fea4:	0802599a 	.word	0x0802599a
 801fea8:	2000a32c 	.word	0x2000a32c
 801feac:	2000a326 	.word	0x2000a326

0801feb0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801feb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801feb4:	4615      	mov	r5, r2
 801feb6:	b087      	sub	sp, #28
 801feb8:	461c      	mov	r4, r3
 801feba:	b13b      	cbz	r3, 801fecc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801febc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801fec0:	b123      	cbz	r3, 801fecc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801fec2:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801fec6:	2b00      	cmp	r3, #0
 801fec8:	f040 8090 	bne.w	801ffec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x13c>
 801fecc:	b007      	add	sp, #28
 801fece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fed2:	f010 0f08 	tst.w	r0, #8
 801fed6:	d010      	beq.n	801fefa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x4a>
 801fed8:	6830      	ldr	r0, [r6, #0]
 801feda:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801fede:	6801      	ldr	r1, [r0, #0]
 801fee0:	9402      	str	r4, [sp, #8]
 801fee2:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801fee6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801feea:	9401      	str	r4, [sp, #4]
 801feec:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801fef0:	9400      	str	r4, [sp, #0]
 801fef2:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 801fef4:	4629      	mov	r1, r5
 801fef6:	47a0      	blx	r4
 801fef8:	e7e8      	b.n	801fecc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801fefa:	6830      	ldr	r0, [r6, #0]
 801fefc:	f9bd 7014 	ldrsh.w	r7, [sp, #20]
 801ff00:	6803      	ldr	r3, [r0, #0]
 801ff02:	f9bd 8016 	ldrsh.w	r8, [sp, #22]
 801ff06:	6a1b      	ldr	r3, [r3, #32]
 801ff08:	4798      	blx	r3
 801ff0a:	f8df e108 	ldr.w	lr, [pc, #264]	; 8020014 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 801ff0e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801ff12:	2cff      	cmp	r4, #255	; 0xff
 801ff14:	f8be 1000 	ldrh.w	r1, [lr]
 801ff18:	f3c5 2c07 	ubfx	ip, r5, #8, #8
 801ff1c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801ff20:	fb01 2303 	mla	r3, r1, r3, r2
 801ff24:	f3c5 4107 	ubfx	r1, r5, #16, #8
 801ff28:	b2ea      	uxtb	r2, r5
 801ff2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ff2e:	4418      	add	r0, r3
 801ff30:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 801ff34:	d037      	beq.n	801ffa6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf6>
 801ff36:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801ff3a:	b2a4      	uxth	r4, r4
 801ff3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ff40:	fb01 f504 	mul.w	r5, r1, r4
 801ff44:	2100      	movs	r1, #0
 801ff46:	fb0c fc04 	mul.w	ip, ip, r4
 801ff4a:	4354      	muls	r4, r2
 801ff4c:	4541      	cmp	r1, r8
 801ff4e:	da48      	bge.n	801ffe2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x132>
 801ff50:	4602      	mov	r2, r0
 801ff52:	f04f 0b00 	mov.w	fp, #0
 801ff56:	45bb      	cmp	fp, r7
 801ff58:	f102 0203 	add.w	r2, r2, #3
 801ff5c:	da1a      	bge.n	801ff94 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe4>
 801ff5e:	f812 ac03 	ldrb.w	sl, [r2, #-3]
 801ff62:	f10b 0b01 	add.w	fp, fp, #1
 801ff66:	fb09 4a0a 	mla	sl, r9, sl, r4
 801ff6a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ff6e:	f802 ac03 	strb.w	sl, [r2, #-3]
 801ff72:	f812 ac02 	ldrb.w	sl, [r2, #-2]
 801ff76:	fb09 ca0a 	mla	sl, r9, sl, ip
 801ff7a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ff7e:	f802 ac02 	strb.w	sl, [r2, #-2]
 801ff82:	f812 ac01 	ldrb.w	sl, [r2, #-1]
 801ff86:	fb09 5a0a 	mla	sl, r9, sl, r5
 801ff8a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ff8e:	f802 ac01 	strb.w	sl, [r2, #-1]
 801ff92:	e7e0      	b.n	801ff56 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xa6>
 801ff94:	f8be 2000 	ldrh.w	r2, [lr]
 801ff98:	3101      	adds	r1, #1
 801ff9a:	1bd2      	subs	r2, r2, r7
 801ff9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ffa0:	441a      	add	r2, r3
 801ffa2:	4410      	add	r0, r2
 801ffa4:	e7d2      	b.n	801ff4c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x9c>
 801ffa6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ffaa:	2400      	movs	r4, #0
 801ffac:	4544      	cmp	r4, r8
 801ffae:	da18      	bge.n	801ffe2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x132>
 801ffb0:	4605      	mov	r5, r0
 801ffb2:	f04f 0900 	mov.w	r9, #0
 801ffb6:	45b9      	cmp	r9, r7
 801ffb8:	f105 0503 	add.w	r5, r5, #3
 801ffbc:	da08      	bge.n	801ffd0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x120>
 801ffbe:	f805 2c03 	strb.w	r2, [r5, #-3]
 801ffc2:	f109 0901 	add.w	r9, r9, #1
 801ffc6:	f805 cc02 	strb.w	ip, [r5, #-2]
 801ffca:	f805 1c01 	strb.w	r1, [r5, #-1]
 801ffce:	e7f2      	b.n	801ffb6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x106>
 801ffd0:	f8be 5000 	ldrh.w	r5, [lr]
 801ffd4:	3401      	adds	r4, #1
 801ffd6:	1bed      	subs	r5, r5, r7
 801ffd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ffdc:	441d      	add	r5, r3
 801ffde:	4428      	add	r0, r5
 801ffe0:	e7e4      	b.n	801ffac <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xfc>
 801ffe2:	6830      	ldr	r0, [r6, #0]
 801ffe4:	6803      	ldr	r3, [r0, #0]
 801ffe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ffe8:	4798      	blx	r3
 801ffea:	e76f      	b.n	801fecc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801ffec:	6808      	ldr	r0, [r1, #0]
 801ffee:	ab04      	add	r3, sp, #16
 801fff0:	6849      	ldr	r1, [r1, #4]
 801fff2:	4e07      	ldr	r6, [pc, #28]	; (8020010 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x160>)
 801fff4:	c303      	stmia	r3!, {r0, r1}
 801fff6:	a804      	add	r0, sp, #16
 801fff8:	f7fd fe9e 	bl	801dd38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fffc:	6830      	ldr	r0, [r6, #0]
 801fffe:	6803      	ldr	r3, [r0, #0]
 8020000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020002:	4798      	blx	r3
 8020004:	2cff      	cmp	r4, #255	; 0xff
 8020006:	f47f af64 	bne.w	801fed2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x22>
 802000a:	f010 0f02 	tst.w	r0, #2
 802000e:	e762      	b.n	801fed6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x26>
 8020010:	2000a32c 	.word	0x2000a32c
 8020014:	2000a326 	.word	0x2000a326

08020018 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802001c:	b08d      	sub	sp, #52	; 0x34
 802001e:	460c      	mov	r4, r1
 8020020:	4617      	mov	r7, r2
 8020022:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 8020026:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 802002a:	2e00      	cmp	r6, #0
 802002c:	d04b      	beq.n	80200c6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 802002e:	6810      	ldr	r0, [r2, #0]
 8020030:	ad08      	add	r5, sp, #32
 8020032:	6851      	ldr	r1, [r2, #4]
 8020034:	c503      	stmia	r5!, {r0, r1}
 8020036:	6818      	ldr	r0, [r3, #0]
 8020038:	ad0a      	add	r5, sp, #40	; 0x28
 802003a:	6859      	ldr	r1, [r3, #4]
 802003c:	c503      	stmia	r5!, {r0, r1}
 802003e:	a808      	add	r0, sp, #32
 8020040:	f7fd fe7a 	bl	801dd38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020044:	4639      	mov	r1, r7
 8020046:	a80a      	add	r0, sp, #40	; 0x28
 8020048:	4f59      	ldr	r7, [pc, #356]	; (80201b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 802004a:	f7fd fe5d 	bl	801dd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802004e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020052:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8020056:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 802005a:	6838      	ldr	r0, [r7, #0]
 802005c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020060:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 8020064:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 8020068:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802006c:	440c      	add	r4, r1
 802006e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8020072:	440a      	add	r2, r1
 8020074:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8020078:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 802007c:	4413      	add	r3, r2
 802007e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8020082:	6803      	ldr	r3, [r0, #0]
 8020084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020086:	4798      	blx	r3
 8020088:	2eff      	cmp	r6, #255	; 0xff
 802008a:	f000 808a 	beq.w	80201a2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x18a>
 802008e:	0743      	lsls	r3, r0, #29
 8020090:	d405      	bmi.n	802009e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 8020092:	f1b9 0f00 	cmp.w	r9, #0
 8020096:	d019      	beq.n	80200cc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8020098:	f010 0f10 	tst.w	r0, #16
 802009c:	d016      	beq.n	80200cc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 802009e:	6838      	ldr	r0, [r7, #0]
 80200a0:	b2ad      	uxth	r5, r5
 80200a2:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80200a6:	6801      	ldr	r1, [r0, #0]
 80200a8:	9603      	str	r6, [sp, #12]
 80200aa:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 80200ae:	f8cd 9010 	str.w	r9, [sp, #16]
 80200b2:	9602      	str	r6, [sp, #8]
 80200b4:	fa1f f688 	uxth.w	r6, r8
 80200b8:	9500      	str	r5, [sp, #0]
 80200ba:	9601      	str	r6, [sp, #4]
 80200bc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80200c0:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 80200c2:	4621      	mov	r1, r4
 80200c4:	47a8      	blx	r5
 80200c6:	b00d      	add	sp, #52	; 0x34
 80200c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200cc:	6838      	ldr	r0, [r7, #0]
 80200ce:	6803      	ldr	r3, [r0, #0]
 80200d0:	6a1b      	ldr	r3, [r3, #32]
 80200d2:	4798      	blx	r3
 80200d4:	4a37      	ldr	r2, [pc, #220]	; (80201b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 80200d6:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 80200da:	2eff      	cmp	r6, #255	; 0xff
 80200dc:	8813      	ldrh	r3, [r2, #0]
 80200de:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 80200e2:	9206      	str	r2, [sp, #24]
 80200e4:	fb0e 1303 	mla	r3, lr, r3, r1
 80200e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80200ec:	4418      	add	r0, r3
 80200ee:	ea4f 0345 	mov.w	r3, r5, lsl #1
 80200f2:	d02e      	beq.n	8020152 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13a>
 80200f4:	442b      	add	r3, r5
 80200f6:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
 80200fa:	f04f 0e00 	mov.w	lr, #0
 80200fe:	ea23 7be3 	bic.w	fp, r3, r3, asr #31
 8020102:	9107      	str	r1, [sp, #28]
 8020104:	45c6      	cmp	lr, r8
 8020106:	da47      	bge.n	8020198 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x180>
 8020108:	4684      	mov	ip, r0
 802010a:	46a2      	mov	sl, r4
 802010c:	ebaa 0104 	sub.w	r1, sl, r4
 8020110:	428b      	cmp	r3, r1
 8020112:	dd0c      	ble.n	802012e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x116>
 8020114:	f89c 9000 	ldrb.w	r9, [ip]
 8020118:	9a07      	ldr	r2, [sp, #28]
 802011a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 802011e:	fb02 f909 	mul.w	r9, r2, r9
 8020122:	fb01 9106 	mla	r1, r1, r6, r9
 8020126:	1209      	asrs	r1, r1, #8
 8020128:	f80c 1b01 	strb.w	r1, [ip], #1
 802012c:	e7ee      	b.n	802010c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 802012e:	9a06      	ldr	r2, [sp, #24]
 8020130:	f10e 0e01 	add.w	lr, lr, #1
 8020134:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 8020138:	8811      	ldrh	r1, [r2, #0]
 802013a:	ebac 0c05 	sub.w	ip, ip, r5
 802013e:	1b49      	subs	r1, r1, r5
 8020140:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020144:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020148:	44dc      	add	ip, fp
 802014a:	4459      	add	r1, fp
 802014c:	4464      	add	r4, ip
 802014e:	4408      	add	r0, r1
 8020150:	e7d8      	b.n	8020104 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xec>
 8020152:	442b      	add	r3, r5
 8020154:	f04f 0e00 	mov.w	lr, #0
 8020158:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
 802015c:	45c6      	cmp	lr, r8
 802015e:	da1b      	bge.n	8020198 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x180>
 8020160:	1e46      	subs	r6, r0, #1
 8020162:	4621      	mov	r1, r4
 8020164:	eba1 0904 	sub.w	r9, r1, r4
 8020168:	454b      	cmp	r3, r9
 802016a:	dd04      	ble.n	8020176 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x15e>
 802016c:	f811 9b01 	ldrb.w	r9, [r1], #1
 8020170:	f806 9f01 	strb.w	r9, [r6, #1]!
 8020174:	e7f6      	b.n	8020164 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14c>
 8020176:	9a06      	ldr	r2, [sp, #24]
 8020178:	f10e 0e01 	add.w	lr, lr, #1
 802017c:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8020180:	8811      	ldrh	r1, [r2, #0]
 8020182:	1b76      	subs	r6, r6, r5
 8020184:	1b49      	subs	r1, r1, r5
 8020186:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802018a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802018e:	4466      	add	r6, ip
 8020190:	4461      	add	r1, ip
 8020192:	4434      	add	r4, r6
 8020194:	4408      	add	r0, r1
 8020196:	e7e1      	b.n	802015c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 8020198:	6838      	ldr	r0, [r7, #0]
 802019a:	6803      	ldr	r3, [r0, #0]
 802019c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802019e:	4798      	blx	r3
 80201a0:	e791      	b.n	80200c6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 80201a2:	f1b9 0f00 	cmp.w	r9, #0
 80201a6:	f47f af77 	bne.w	8020098 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 80201aa:	f010 0f01 	tst.w	r0, #1
 80201ae:	e775      	b.n	802009c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 80201b0:	2000a32c 	.word	0x2000a32c
 80201b4:	2000a326 	.word	0x2000a326

080201b8 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80201b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201bc:	ed2d 8b02 	vpush	{d8}
 80201c0:	b095      	sub	sp, #84	; 0x54
 80201c2:	681d      	ldr	r5, [r3, #0]
 80201c4:	f8bd 0090 	ldrh.w	r0, [sp, #144]	; 0x90
 80201c8:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80201ca:	9012      	str	r0, [sp, #72]	; 0x48
 80201cc:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
 80201d0:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80201d2:	9004      	str	r0, [sp, #16]
 80201d4:	f9b4 7000 	ldrsh.w	r7, [r4]
 80201d8:	9820      	ldr	r0, [sp, #128]	; 0x80
 80201da:	f9b6 8000 	ldrsh.w	r8, [r6]
 80201de:	eb05 0c07 	add.w	ip, r5, r7
 80201e2:	6800      	ldr	r0, [r0, #0]
 80201e4:	eba8 090c 	sub.w	r9, r8, ip
 80201e8:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 80201ec:	1b40      	subs	r0, r0, r5
 80201ee:	4548      	cmp	r0, r9
 80201f0:	f340 839f 	ble.w	8020932 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x77a>
 80201f4:	88b6      	ldrh	r6, [r6, #4]
 80201f6:	4446      	add	r6, r8
 80201f8:	b236      	sxth	r6, r6
 80201fa:	45b4      	cmp	ip, r6
 80201fc:	f300 8399 	bgt.w	8020932 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x77a>
 8020200:	f9b4 b002 	ldrsh.w	fp, [r4, #2]
 8020204:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 8020208:	695c      	ldr	r4, [r3, #20]
 802020a:	f8d1 a000 	ldr.w	sl, [r1]
 802020e:	445c      	add	r4, fp
 8020210:	6849      	ldr	r1, [r1, #4]
 8020212:	edd3 2a07 	vldr	s5, [r3, #28]
 8020216:	fb01 5404 	mla	r4, r1, r4, r5
 802021a:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 802021e:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8020222:	4281      	cmp	r1, r0
 8020224:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
 8020228:	443c      	add	r4, r7
 802022a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 802022e:	bfa8      	it	ge
 8020230:	4601      	movge	r1, r0
 8020232:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8020236:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802023a:	45e0      	cmp	r8, ip
 802023c:	ee06 1a90 	vmov	s13, r1
 8020240:	9103      	str	r1, [sp, #12]
 8020242:	44a2      	add	sl, r4
 8020244:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8020248:	edd2 6a0d 	vldr	s13, [r2, #52]	; 0x34
 802024c:	ee26 4a04 	vmul.f32	s8, s12, s8
 8020250:	ee66 3a23 	vmul.f32	s7, s12, s7
 8020254:	ee26 6a26 	vmul.f32	s12, s12, s13
 8020258:	eec3 6a22 	vdiv.f32	s13, s6, s5
 802025c:	ee37 5aa3 	vadd.f32	s10, s15, s7
 8020260:	ee77 4a06 	vadd.f32	s9, s14, s12
 8020264:	ee72 5a84 	vadd.f32	s11, s5, s8
 8020268:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802026c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8020270:	dc02      	bgt.n	8020278 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc0>
 8020272:	2300      	movs	r3, #0
 8020274:	9306      	str	r3, [sp, #24]
 8020276:	e02b      	b.n	80202d0 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x118>
 8020278:	9b03      	ldr	r3, [sp, #12]
 802027a:	9a03      	ldr	r2, [sp, #12]
 802027c:	fb99 f3f3 	sdiv	r3, r9, r3
 8020280:	ee06 3a90 	vmov	s13, r3
 8020284:	435a      	muls	r2, r3
 8020286:	2b00      	cmp	r3, #0
 8020288:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 802028c:	eba9 0102 	sub.w	r1, r9, r2
 8020290:	9106      	str	r1, [sp, #24]
 8020292:	eee4 5a26 	vfma.f32	s11, s8, s13
 8020296:	eea3 5aa6 	vfma.f32	s10, s7, s13
 802029a:	eee6 4a26 	vfma.f32	s9, s12, s13
 802029e:	dd12      	ble.n	80202c6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x10e>
 80202a0:	ee75 7ac4 	vsub.f32	s15, s11, s8
 80202a4:	ee34 7ac6 	vsub.f32	s14, s9, s12
 80202a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80202ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202b0:	bf14      	ite	ne
 80202b2:	eec3 6a27 	vdivne.f32	s13, s6, s15
 80202b6:	eef0 6a43 	vmoveq.f32	s13, s6
 80202ba:	ee75 7a63 	vsub.f32	s15, s10, s7
 80202be:	ee27 7a26 	vmul.f32	s14, s14, s13
 80202c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80202c6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80202ca:	1a80      	subs	r0, r0, r2
 80202cc:	4415      	add	r5, r2
 80202ce:	449a      	add	sl, r3
 80202d0:	19eb      	adds	r3, r5, r7
 80202d2:	4403      	add	r3, r0
 80202d4:	429e      	cmp	r6, r3
 80202d6:	bfbc      	itt	lt
 80202d8:	1bf0      	sublt	r0, r6, r7
 80202da:	1b40      	sublt	r0, r0, r5
 80202dc:	2800      	cmp	r0, #0
 80202de:	f340 8328 	ble.w	8020932 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x77a>
 80202e2:	9b03      	ldr	r3, [sp, #12]
 80202e4:	9a03      	ldr	r2, [sp, #12]
 80202e6:	fb90 f3f3 	sdiv	r3, r0, r3
 80202ea:	9305      	str	r3, [sp, #20]
 80202ec:	fb02 0313 	mls	r3, r2, r3, r0
 80202f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80202f2:	b91b      	cbnz	r3, 80202fc <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x144>
 80202f4:	9b05      	ldr	r3, [sp, #20]
 80202f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80202f8:	3b01      	subs	r3, #1
 80202fa:	9305      	str	r3, [sp, #20]
 80202fc:	f9be 3008 	ldrsh.w	r3, [lr, #8]
 8020300:	eddf 1ab2 	vldr	s3, [pc, #712]	; 80205cc <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x414>
 8020304:	9300      	str	r3, [sp, #0]
 8020306:	f9be 300c 	ldrsh.w	r3, [lr, #12]
 802030a:	ed9f 1ab1 	vldr	s2, [pc, #708]	; 80205d0 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x418>
 802030e:	9307      	str	r3, [sp, #28]
 8020310:	f8de 3000 	ldr.w	r3, [lr]
 8020314:	9308      	str	r3, [sp, #32]
 8020316:	9b00      	ldr	r3, [sp, #0]
 8020318:	009b      	lsls	r3, r3, #2
 802031a:	930e      	str	r3, [sp, #56]	; 0x38
 802031c:	3304      	adds	r3, #4
 802031e:	9310      	str	r3, [sp, #64]	; 0x40
 8020320:	9b00      	ldr	r3, [sp, #0]
 8020322:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020326:	9311      	str	r3, [sp, #68]	; 0x44
 8020328:	9b04      	ldr	r3, [sp, #16]
 802032a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802032e:	930f      	str	r3, [sp, #60]	; 0x3c
 8020330:	9b05      	ldr	r3, [sp, #20]
 8020332:	2b00      	cmp	r3, #0
 8020334:	dc03      	bgt.n	802033e <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x186>
 8020336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020338:	2b00      	cmp	r3, #0
 802033a:	f340 82fa 	ble.w	8020932 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x77a>
 802033e:	eec3 2a25 	vdiv.f32	s5, s6, s11
 8020342:	9903      	ldr	r1, [sp, #12]
 8020344:	9c05      	ldr	r4, [sp, #20]
 8020346:	eef0 6a67 	vmov.f32	s13, s15
 802034a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802034e:	ee16 2a90 	vmov	r2, s13
 8020352:	eef0 6a47 	vmov.f32	s13, s14
 8020356:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802035a:	ee25 2a22 	vmul.f32	s4, s10, s5
 802035e:	ee64 2aa2 	vmul.f32	s5, s9, s5
 8020362:	ee16 3a90 	vmov	r3, s13
 8020366:	ee72 7a67 	vsub.f32	s15, s4, s15
 802036a:	ee32 7ac7 	vsub.f32	s14, s5, s14
 802036e:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8020372:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8020376:	ee17 0a90 	vmov	r0, s15
 802037a:	fb90 f1f1 	sdiv	r1, r0, r1
 802037e:	ee17 0a10 	vmov	r0, s14
 8020382:	9109      	str	r1, [sp, #36]	; 0x24
 8020384:	9903      	ldr	r1, [sp, #12]
 8020386:	fb90 f1f1 	sdiv	r1, r0, r1
 802038a:	9803      	ldr	r0, [sp, #12]
 802038c:	910a      	str	r1, [sp, #40]	; 0x28
 802038e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020390:	2c00      	cmp	r4, #0
 8020392:	bfc8      	it	gt
 8020394:	4601      	movgt	r1, r0
 8020396:	9101      	str	r1, [sp, #4]
 8020398:	9906      	ldr	r1, [sp, #24]
 802039a:	2900      	cmp	r1, #0
 802039c:	dd0f      	ble.n	80203be <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x206>
 802039e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80203a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80203a4:	448a      	add	sl, r1
 80203a6:	9906      	ldr	r1, [sp, #24]
 80203a8:	fb00 2201 	mla	r2, r0, r1, r2
 80203ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80203ae:	fb00 3301 	mla	r3, r0, r1, r3
 80203b2:	9901      	ldr	r1, [sp, #4]
 80203b4:	9806      	ldr	r0, [sp, #24]
 80203b6:	1a09      	subs	r1, r1, r0
 80203b8:	9101      	str	r1, [sp, #4]
 80203ba:	2100      	movs	r1, #0
 80203bc:	9106      	str	r1, [sp, #24]
 80203be:	1411      	asrs	r1, r2, #16
 80203c0:	d42a      	bmi.n	8020418 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x260>
 80203c2:	9800      	ldr	r0, [sp, #0]
 80203c4:	4281      	cmp	r1, r0
 80203c6:	da27      	bge.n	8020418 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x260>
 80203c8:	1419      	asrs	r1, r3, #16
 80203ca:	d425      	bmi.n	8020418 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x260>
 80203cc:	9807      	ldr	r0, [sp, #28]
 80203ce:	4281      	cmp	r1, r0
 80203d0:	da22      	bge.n	8020418 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x260>
 80203d2:	9901      	ldr	r1, [sp, #4]
 80203d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80203d6:	3901      	subs	r1, #1
 80203d8:	fb01 2000 	mla	r0, r1, r0, r2
 80203dc:	1400      	asrs	r0, r0, #16
 80203de:	d41b      	bmi.n	8020418 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x260>
 80203e0:	9c00      	ldr	r4, [sp, #0]
 80203e2:	42a0      	cmp	r0, r4
 80203e4:	da18      	bge.n	8020418 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x260>
 80203e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80203e8:	fb01 3100 	mla	r1, r1, r0, r3
 80203ec:	1409      	asrs	r1, r1, #16
 80203ee:	d413      	bmi.n	8020418 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x260>
 80203f0:	9807      	ldr	r0, [sp, #28]
 80203f2:	4281      	cmp	r1, r0
 80203f4:	bfb4      	ite	lt
 80203f6:	2100      	movlt	r1, #0
 80203f8:	2101      	movge	r1, #1
 80203fa:	9102      	str	r1, [sp, #8]
 80203fc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80203fe:	3904      	subs	r1, #4
 8020400:	2907      	cmp	r1, #7
 8020402:	d87d      	bhi.n	8020500 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x348>
 8020404:	e8df f011 	tbh	[pc, r1, lsl #1]
 8020408:	000a006c 	.word	0x000a006c
 802040c:	007c007c 	.word	0x007c007c
 8020410:	007c007c 	.word	0x007c007c
 8020414:	013800e6 	.word	0x013800e6
 8020418:	2101      	movs	r1, #1
 802041a:	e7ee      	b.n	80203fa <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x242>
 802041c:	f10a 0e03 	add.w	lr, sl, #3
 8020420:	f04f 0800 	mov.w	r8, #0
 8020424:	9901      	ldr	r1, [sp, #4]
 8020426:	f1ae 0c03 	sub.w	ip, lr, #3
 802042a:	4541      	cmp	r1, r8
 802042c:	dc01      	bgt.n	8020432 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x27a>
 802042e:	460b      	mov	r3, r1
 8020430:	e061      	b.n	80204f6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x33e>
 8020432:	9c02      	ldr	r4, [sp, #8]
 8020434:	1410      	asrs	r0, r2, #16
 8020436:	1419      	asrs	r1, r3, #16
 8020438:	b14c      	cbz	r4, 802044e <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x296>
 802043a:	2800      	cmp	r0, #0
 802043c:	db47      	blt.n	80204ce <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x316>
 802043e:	9c00      	ldr	r4, [sp, #0]
 8020440:	42a0      	cmp	r0, r4
 8020442:	da44      	bge.n	80204ce <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x316>
 8020444:	2900      	cmp	r1, #0
 8020446:	db42      	blt.n	80204ce <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x316>
 8020448:	9c07      	ldr	r4, [sp, #28]
 802044a:	42a1      	cmp	r1, r4
 802044c:	da3f      	bge.n	80204ce <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x316>
 802044e:	9c00      	ldr	r4, [sp, #0]
 8020450:	f3c3 3603 	ubfx	r6, r3, #12, #4
 8020454:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8020456:	fb04 0101 	mla	r1, r4, r1, r0
 802045a:	9808      	ldr	r0, [sp, #32]
 802045c:	f1c6 0510 	rsb	r5, r6, #16
 8020460:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020464:	4401      	add	r1, r0
 8020466:	f3c2 3003 	ubfx	r0, r2, #12, #4
 802046a:	fb06 f400 	mul.w	r4, r6, r0
 802046e:	1a2d      	subs	r5, r5, r0
 8020470:	f101 39ff 	add.w	r9, r1, #4294967295
 8020474:	4439      	add	r1, r7
 8020476:	10e4      	asrs	r4, r4, #3
 8020478:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 802047c:	ebc4 0040 	rsb	r0, r4, r0, lsl #1
 8020480:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8020484:	950c      	str	r5, [sp, #48]	; 0x30
 8020486:	900d      	str	r0, [sp, #52]	; 0x34
 8020488:	f819 7f01 	ldrb.w	r7, [r9, #1]!
 802048c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802048e:	f899 0003 	ldrb.w	r0, [r9, #3]
 8020492:	f811 bb01 	ldrb.w	fp, [r1], #1
 8020496:	4368      	muls	r0, r5
 8020498:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802049a:	fb05 0707 	mla	r7, r5, r7, r0
 802049e:	9804      	ldr	r0, [sp, #16]
 80204a0:	fb06 770b 	mla	r7, r6, fp, r7
 80204a4:	f891 b002 	ldrb.w	fp, [r1, #2]
 80204a8:	28ff      	cmp	r0, #255	; 0xff
 80204aa:	fb04 7b0b 	mla	fp, r4, fp, r7
 80204ae:	f3cb 1b47 	ubfx	fp, fp, #5, #8
 80204b2:	d008      	beq.n	80204c6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x30e>
 80204b4:	fb00 fb0b 	mul.w	fp, r0, fp
 80204b8:	f89c 7000 	ldrb.w	r7, [ip]
 80204bc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80204be:	fb07 bb00 	mla	fp, r7, r0, fp
 80204c2:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80204c6:	f80c bb01 	strb.w	fp, [ip], #1
 80204ca:	45e6      	cmp	lr, ip
 80204cc:	d1dc      	bne.n	8020488 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2d0>
 80204ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80204d0:	f108 0801 	add.w	r8, r8, #1
 80204d4:	f10e 0e03 	add.w	lr, lr, #3
 80204d8:	440a      	add	r2, r1
 80204da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80204dc:	440b      	add	r3, r1
 80204de:	e7a1      	b.n	8020424 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x26c>
 80204e0:	9904      	ldr	r1, [sp, #16]
 80204e2:	29ff      	cmp	r1, #255	; 0xff
 80204e4:	f10a 0103 	add.w	r1, sl, #3
 80204e8:	d045      	beq.n	8020576 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x3be>
 80204ea:	2600      	movs	r6, #0
 80204ec:	9801      	ldr	r0, [sp, #4]
 80204ee:	1ecd      	subs	r5, r1, #3
 80204f0:	42b0      	cmp	r0, r6
 80204f2:	dc16      	bgt.n	8020522 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x36a>
 80204f4:	4603      	mov	r3, r0
 80204f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80204fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80204fe:	449a      	add	sl, r3
 8020500:	9b05      	ldr	r3, [sp, #20]
 8020502:	ee75 5a84 	vadd.f32	s11, s11, s8
 8020506:	ee35 5a23 	vadd.f32	s10, s10, s7
 802050a:	2b00      	cmp	r3, #0
 802050c:	ee74 4a86 	vadd.f32	s9, s9, s12
 8020510:	f340 820f 	ble.w	8020932 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x77a>
 8020514:	3b01      	subs	r3, #1
 8020516:	eeb0 7a62 	vmov.f32	s14, s5
 802051a:	eef0 7a42 	vmov.f32	s15, s4
 802051e:	9305      	str	r3, [sp, #20]
 8020520:	e706      	b.n	8020330 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x178>
 8020522:	9f02      	ldr	r7, [sp, #8]
 8020524:	1414      	asrs	r4, r2, #16
 8020526:	1418      	asrs	r0, r3, #16
 8020528:	b14f      	cbz	r7, 802053e <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x386>
 802052a:	2c00      	cmp	r4, #0
 802052c:	db1c      	blt.n	8020568 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x3b0>
 802052e:	9f00      	ldr	r7, [sp, #0]
 8020530:	42a7      	cmp	r7, r4
 8020532:	dd19      	ble.n	8020568 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x3b0>
 8020534:	2800      	cmp	r0, #0
 8020536:	db17      	blt.n	8020568 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x3b0>
 8020538:	9f07      	ldr	r7, [sp, #28]
 802053a:	42b8      	cmp	r0, r7
 802053c:	da14      	bge.n	8020568 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x3b0>
 802053e:	9f00      	ldr	r7, [sp, #0]
 8020540:	fb00 4007 	mla	r0, r0, r7, r4
 8020544:	9c08      	ldr	r4, [sp, #32]
 8020546:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802054a:	eb00 0e04 	add.w	lr, r0, r4
 802054e:	782f      	ldrb	r7, [r5, #0]
 8020550:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020552:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020556:	4347      	muls	r7, r0
 8020558:	9804      	ldr	r0, [sp, #16]
 802055a:	fb04 7400 	mla	r4, r4, r0, r7
 802055e:	0a24      	lsrs	r4, r4, #8
 8020560:	f805 4b01 	strb.w	r4, [r5], #1
 8020564:	428d      	cmp	r5, r1
 8020566:	d1f2      	bne.n	802054e <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x396>
 8020568:	9809      	ldr	r0, [sp, #36]	; 0x24
 802056a:	3601      	adds	r6, #1
 802056c:	3103      	adds	r1, #3
 802056e:	4402      	add	r2, r0
 8020570:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020572:	4403      	add	r3, r0
 8020574:	e7ba      	b.n	80204ec <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x334>
 8020576:	2400      	movs	r4, #0
 8020578:	9801      	ldr	r0, [sp, #4]
 802057a:	42a0      	cmp	r0, r4
 802057c:	ddba      	ble.n	80204f4 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x33c>
 802057e:	9e02      	ldr	r6, [sp, #8]
 8020580:	1415      	asrs	r5, r2, #16
 8020582:	1418      	asrs	r0, r3, #16
 8020584:	b14e      	cbz	r6, 802059a <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x3e2>
 8020586:	2d00      	cmp	r5, #0
 8020588:	db18      	blt.n	80205bc <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x404>
 802058a:	9e00      	ldr	r6, [sp, #0]
 802058c:	42ae      	cmp	r6, r5
 802058e:	dd15      	ble.n	80205bc <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x404>
 8020590:	2800      	cmp	r0, #0
 8020592:	db13      	blt.n	80205bc <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x404>
 8020594:	9e07      	ldr	r6, [sp, #28]
 8020596:	42b0      	cmp	r0, r6
 8020598:	da10      	bge.n	80205bc <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x404>
 802059a:	9e00      	ldr	r6, [sp, #0]
 802059c:	fb00 5006 	mla	r0, r0, r6, r5
 80205a0:	9d08      	ldr	r5, [sp, #32]
 80205a2:	9e08      	ldr	r6, [sp, #32]
 80205a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80205a8:	4405      	add	r5, r0
 80205aa:	5c30      	ldrb	r0, [r6, r0]
 80205ac:	f801 0c03 	strb.w	r0, [r1, #-3]
 80205b0:	7868      	ldrb	r0, [r5, #1]
 80205b2:	f801 0c02 	strb.w	r0, [r1, #-2]
 80205b6:	78a8      	ldrb	r0, [r5, #2]
 80205b8:	f801 0c01 	strb.w	r0, [r1, #-1]
 80205bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80205be:	3401      	adds	r4, #1
 80205c0:	3103      	adds	r1, #3
 80205c2:	4402      	add	r2, r0
 80205c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80205c6:	4403      	add	r3, r0
 80205c8:	e7d6      	b.n	8020578 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x3c0>
 80205ca:	bf00      	nop
 80205cc:	3d800000 	.word	0x3d800000
 80205d0:	437f0000 	.word	0x437f0000
 80205d4:	f10a 0003 	add.w	r0, sl, #3
 80205d8:	f04f 0e00 	mov.w	lr, #0
 80205dc:	9901      	ldr	r1, [sp, #4]
 80205de:	4571      	cmp	r1, lr
 80205e0:	f77f af25 	ble.w	802042e <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x276>
 80205e4:	9d02      	ldr	r5, [sp, #8]
 80205e6:	1414      	asrs	r4, r2, #16
 80205e8:	1419      	asrs	r1, r3, #16
 80205ea:	b14d      	cbz	r5, 8020600 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x448>
 80205ec:	2c00      	cmp	r4, #0
 80205ee:	db3b      	blt.n	8020668 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4b0>
 80205f0:	9d00      	ldr	r5, [sp, #0]
 80205f2:	42a5      	cmp	r5, r4
 80205f4:	dd38      	ble.n	8020668 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4b0>
 80205f6:	2900      	cmp	r1, #0
 80205f8:	db36      	blt.n	8020668 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4b0>
 80205fa:	9d07      	ldr	r5, [sp, #28]
 80205fc:	42a9      	cmp	r1, r5
 80205fe:	da33      	bge.n	8020668 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4b0>
 8020600:	9d00      	ldr	r5, [sp, #0]
 8020602:	fb01 4105 	mla	r1, r1, r5, r4
 8020606:	9c08      	ldr	r4, [sp, #32]
 8020608:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 802060c:	0e0e      	lsrs	r6, r1, #24
 802060e:	d02b      	beq.n	8020668 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4b0>
 8020610:	2eff      	cmp	r6, #255	; 0xff
 8020612:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8020616:	f3c1 2507 	ubfx	r5, r1, #8, #8
 802061a:	b2c9      	uxtb	r1, r1
 802061c:	d102      	bne.n	8020624 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x46c>
 802061e:	9f04      	ldr	r7, [sp, #16]
 8020620:	2fff      	cmp	r7, #255	; 0xff
 8020622:	d01b      	beq.n	802065c <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4a4>
 8020624:	9f04      	ldr	r7, [sp, #16]
 8020626:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 802062a:	437e      	muls	r6, r7
 802062c:	f5c6 3780 	rsb	r7, r6, #65536	; 0x10000
 8020630:	fb07 fc0c 	mul.w	ip, r7, ip
 8020634:	fb06 c101 	mla	r1, r6, r1, ip
 8020638:	f810 cc02 	ldrb.w	ip, [r0, #-2]
 802063c:	fb07 fc0c 	mul.w	ip, r7, ip
 8020640:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8020644:	fb06 c505 	mla	r5, r6, r5, ip
 8020648:	f810 cc01 	ldrb.w	ip, [r0, #-1]
 802064c:	fb07 f70c 	mul.w	r7, r7, ip
 8020650:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8020654:	fb06 7404 	mla	r4, r6, r4, r7
 8020658:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802065c:	f800 1c03 	strb.w	r1, [r0, #-3]
 8020660:	f800 5c02 	strb.w	r5, [r0, #-2]
 8020664:	f800 4c01 	strb.w	r4, [r0, #-1]
 8020668:	9909      	ldr	r1, [sp, #36]	; 0x24
 802066a:	f10e 0e01 	add.w	lr, lr, #1
 802066e:	3003      	adds	r0, #3
 8020670:	440a      	add	r2, r1
 8020672:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020674:	440b      	add	r3, r1
 8020676:	e7b1      	b.n	80205dc <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x424>
 8020678:	2100      	movs	r1, #0
 802067a:	f10a 0603 	add.w	r6, sl, #3
 802067e:	910c      	str	r1, [sp, #48]	; 0x30
 8020680:	9901      	ldr	r1, [sp, #4]
 8020682:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020684:	4281      	cmp	r1, r0
 8020686:	f77f aed2 	ble.w	802042e <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x276>
 802068a:	9c02      	ldr	r4, [sp, #8]
 802068c:	1410      	asrs	r0, r2, #16
 802068e:	1419      	asrs	r1, r3, #16
 8020690:	b16c      	cbz	r4, 80206ae <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4f6>
 8020692:	2800      	cmp	r0, #0
 8020694:	f2c0 8144 	blt.w	8020920 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x768>
 8020698:	9c00      	ldr	r4, [sp, #0]
 802069a:	4284      	cmp	r4, r0
 802069c:	f340 8140 	ble.w	8020920 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x768>
 80206a0:	2900      	cmp	r1, #0
 80206a2:	f2c0 813d 	blt.w	8020920 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x768>
 80206a6:	9c07      	ldr	r4, [sp, #28]
 80206a8:	42a1      	cmp	r1, r4
 80206aa:	f280 8139 	bge.w	8020920 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x768>
 80206ae:	9c00      	ldr	r4, [sp, #0]
 80206b0:	f3c2 3703 	ubfx	r7, r2, #12, #4
 80206b4:	fb01 0004 	mla	r0, r1, r4, r0
 80206b8:	9c08      	ldr	r4, [sp, #32]
 80206ba:	9908      	ldr	r1, [sp, #32]
 80206bc:	ee06 7a90 	vmov	s13, r7
 80206c0:	f854 9020 	ldr.w	r9, [r4, r0, lsl #2]
 80206c4:	f3c3 3703 	ubfx	r7, r3, #12, #4
 80206c8:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80206cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80206ce:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80206d2:	ee00 7a90 	vmov	s1, r7
 80206d6:	f851 c000 	ldr.w	ip, [r1, r0]
 80206da:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80206de:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80206e2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80206e4:	ee66 6aa1 	vmul.f32	s13, s13, s3
 80206e8:	ea4f 6518 	mov.w	r5, r8, lsr #24
 80206ec:	f851 e000 	ldr.w	lr, [r1, r0]
 80206f0:	ea4f 6119 	mov.w	r1, r9, lsr #24
 80206f4:	ee00 5a10 	vmov	s0, r5
 80206f8:	ea4f 601c 	mov.w	r0, ip, lsr #24
 80206fc:	ee07 1a90 	vmov	s15, r1
 8020700:	ea4f 641e 	mov.w	r4, lr, lsr #24
 8020704:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8020708:	ee07 0a10 	vmov	s14, r0
 802070c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020710:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020714:	ee60 0aa1 	vmul.f32	s1, s1, s3
 8020718:	ee30 0a67 	vsub.f32	s0, s0, s15
 802071c:	eee6 7a80 	vfma.f32	s15, s13, s0
 8020720:	ee00 4a10 	vmov	s0, r4
 8020724:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8020728:	ee30 0a47 	vsub.f32	s0, s0, s14
 802072c:	eea6 7a80 	vfma.f32	s14, s13, s0
 8020730:	ee37 7a67 	vsub.f32	s14, s14, s15
 8020734:	eee0 7a87 	vfma.f32	s15, s1, s14
 8020738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802073c:	ee17 7a90 	vmov	r7, s15
 8020740:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8020744:	970d      	str	r7, [sp, #52]	; 0x34
 8020746:	f000 80eb 	beq.w	8020920 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x768>
 802074a:	f409 477f 	and.w	r7, r9, #65280	; 0xff00
 802074e:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8020752:	434f      	muls	r7, r1
 8020754:	fb01 f909 	mul.w	r9, r1, r9
 8020758:	f408 417f 	and.w	r1, r8, #65280	; 0xff00
 802075c:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8020760:	0a3f      	lsrs	r7, r7, #8
 8020762:	4369      	muls	r1, r5
 8020764:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020768:	fb05 f808 	mul.w	r8, r5, r8
 802076c:	f40c 457f 	and.w	r5, ip, #65280	; 0xff00
 8020770:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020774:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020778:	4345      	muls	r5, r0
 802077a:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 802077e:	fb00 fc0c 	mul.w	ip, r0, ip
 8020782:	f40e 407f 	and.w	r0, lr, #65280	; 0xff00
 8020786:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802078a:	0a2d      	lsrs	r5, r5, #8
 802078c:	4360      	muls	r0, r4
 802078e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020792:	fb04 f40e 	mul.w	r4, r4, lr
 8020796:	ea49 0707 	orr.w	r7, r9, r7
 802079a:	0a00      	lsrs	r0, r0, #8
 802079c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80207a0:	0a24      	lsrs	r4, r4, #8
 80207a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80207a6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80207aa:	0a09      	lsrs	r1, r1, #8
 80207ac:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80207b0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80207b4:	ea4c 0505 	orr.w	r5, ip, r5
 80207b8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80207bc:	4304      	orrs	r4, r0
 80207be:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80207c2:	0c38      	lsrs	r0, r7, #16
 80207c4:	ea48 0101 	orr.w	r1, r8, r1
 80207c8:	ee07 0a10 	vmov	s14, r0
 80207cc:	0c28      	lsrs	r0, r5, #16
 80207ce:	ee07 0a90 	vmov	s15, r0
 80207d2:	0c08      	lsrs	r0, r1, #16
 80207d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80207d8:	ee00 0a10 	vmov	s0, r0
 80207dc:	0c20      	lsrs	r0, r4, #16
 80207de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80207e2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80207e6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80207ea:	eea6 7a80 	vfma.f32	s14, s13, s0
 80207ee:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
 80207f2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80207f6:	ee81 8a00 	vdiv.f32	s16, s2, s0
 80207fa:	ee00 0a10 	vmov	s0, r0
 80207fe:	f3c7 2007 	ubfx	r0, r7, #8, #8
 8020802:	b2ff      	uxtb	r7, r7
 8020804:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8020808:	ee30 0a67 	vsub.f32	s0, s0, s15
 802080c:	eee6 7a80 	vfma.f32	s15, s13, s0
 8020810:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020814:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8020818:	ee27 7a08 	vmul.f32	s14, s14, s16
 802081c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8020820:	ee07 0a10 	vmov	s14, r0
 8020824:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8020828:	b2ed      	uxtb	r5, r5
 802082a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802082e:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
 8020832:	ee07 0a90 	vmov	s15, r0
 8020836:	f3c1 2007 	ubfx	r0, r1, #8, #8
 802083a:	b2c9      	uxtb	r1, r1
 802083c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020840:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 8020844:	ee00 0a10 	vmov	s0, r0
 8020848:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802084c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8020850:	ee30 0a47 	vsub.f32	s0, s0, s14
 8020854:	eea6 7a80 	vfma.f32	s14, s13, s0
 8020858:	ee00 0a10 	vmov	s0, r0
 802085c:	980d      	ldr	r0, [sp, #52]	; 0x34
 802085e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8020862:	28ff      	cmp	r0, #255	; 0xff
 8020864:	ee30 0a67 	vsub.f32	s0, s0, s15
 8020868:	eee6 7a80 	vfma.f32	s15, s13, s0
 802086c:	ee00 1a10 	vmov	s0, r1
 8020870:	b2e1      	uxtb	r1, r4
 8020872:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8020876:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802087a:	eea0 7aa7 	vfma.f32	s14, s1, s15
 802087e:	ee27 7a08 	vmul.f32	s14, s14, s16
 8020882:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8020886:	ee07 5a10 	vmov	s14, r5
 802088a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802088e:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
 8020892:	ee07 7a90 	vmov	s15, r7
 8020896:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802089a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802089e:	ee30 0a67 	vsub.f32	s0, s0, s15
 80208a2:	eee6 7a80 	vfma.f32	s15, s13, s0
 80208a6:	ee00 1a10 	vmov	s0, r1
 80208aa:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80208ae:	ee30 0a47 	vsub.f32	s0, s0, s14
 80208b2:	eea6 7a80 	vfma.f32	s14, s13, s0
 80208b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80208ba:	eee0 7a87 	vfma.f32	s15, s1, s14
 80208be:	ee67 7a88 	vmul.f32	s15, s15, s16
 80208c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80208c6:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
 80208ca:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
 80208ce:	d102      	bne.n	80208d6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x71e>
 80208d0:	9804      	ldr	r0, [sp, #16]
 80208d2:	28ff      	cmp	r0, #255	; 0xff
 80208d4:	d01e      	beq.n	8020914 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x75c>
 80208d6:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80208da:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 80208de:	fb10 f504 	smulbb	r5, r0, r4
 80208e2:	f816 0c03 	ldrb.w	r0, [r6, #-3]
 80208e6:	f5c5 3480 	rsb	r4, r5, #65536	; 0x10000
 80208ea:	4369      	muls	r1, r5
 80208ec:	fb05 fe0e 	mul.w	lr, r5, lr
 80208f0:	fb04 1100 	mla	r1, r4, r0, r1
 80208f4:	f816 0c02 	ldrb.w	r0, [r6, #-2]
 80208f8:	fb05 f50b 	mul.w	r5, r5, fp
 80208fc:	fb04 ee00 	mla	lr, r4, r0, lr
 8020900:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8020904:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8020908:	fb04 5b00 	mla	fp, r4, r0, r5
 802090c:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 8020910:	f3cb 4b07 	ubfx	fp, fp, #16, #8
 8020914:	f806 1c03 	strb.w	r1, [r6, #-3]
 8020918:	f806 ec02 	strb.w	lr, [r6, #-2]
 802091c:	f806 bc01 	strb.w	fp, [r6, #-1]
 8020920:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020922:	3603      	adds	r6, #3
 8020924:	440a      	add	r2, r1
 8020926:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020928:	440b      	add	r3, r1
 802092a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802092c:	3101      	adds	r1, #1
 802092e:	910c      	str	r1, [sp, #48]	; 0x30
 8020930:	e6a6      	b.n	8020680 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4c8>
 8020932:	b015      	add	sp, #84	; 0x54
 8020934:	ecbd 8b02 	vpop	{d8}
 8020938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802093c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 802093c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020940:	b08b      	sub	sp, #44	; 0x2c
 8020942:	460d      	mov	r5, r1
 8020944:	4604      	mov	r4, r0
 8020946:	4699      	mov	r9, r3
 8020948:	6808      	ldr	r0, [r1, #0]
 802094a:	ab06      	add	r3, sp, #24
 802094c:	6849      	ldr	r1, [r1, #4]
 802094e:	c303      	stmia	r3!, {r0, r1}
 8020950:	6810      	ldr	r0, [r2, #0]
 8020952:	ab08      	add	r3, sp, #32
 8020954:	6851      	ldr	r1, [r2, #4]
 8020956:	c303      	stmia	r3!, {r0, r1}
 8020958:	a806      	add	r0, sp, #24
 802095a:	f7fd f9ed 	bl	801dd38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802095e:	4629      	mov	r1, r5
 8020960:	a808      	add	r0, sp, #32
 8020962:	4d59      	ldr	r5, [pc, #356]	; (8020ac8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8020964:	f7fd f9d0 	bl	801dd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020968:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802096c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8020970:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8020974:	6828      	ldr	r0, [r5, #0]
 8020976:	fb11 2103 	smlabb	r1, r1, r3, r2
 802097a:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 802097e:	f9bd 8026 	ldrsh.w	r8, [sp, #38]	; 0x26
 8020982:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020986:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 802098a:	440a      	add	r2, r1
 802098c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020990:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8020994:	4413      	add	r3, r2
 8020996:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 802099a:	6803      	ldr	r3, [r0, #0]
 802099c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802099e:	4798      	blx	r3
 80209a0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80209a4:	d118      	bne.n	80209d8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80209a6:	f010 0f20 	tst.w	r0, #32
 80209aa:	6828      	ldr	r0, [r5, #0]
 80209ac:	d017      	beq.n	80209de <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80209ae:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 80209b2:	b2b6      	uxth	r6, r6
 80209b4:	6801      	ldr	r1, [r0, #0]
 80209b6:	9502      	str	r5, [sp, #8]
 80209b8:	fa1f f588 	uxth.w	r5, r8
 80209bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80209c0:	9501      	str	r5, [sp, #4]
 80209c2:	9600      	str	r6, [sp, #0]
 80209c4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80209c8:	6c4d      	ldr	r5, [r1, #68]	; 0x44
 80209ca:	4621      	mov	r1, r4
 80209cc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80209d0:	47a8      	blx	r5
 80209d2:	b00b      	add	sp, #44	; 0x2c
 80209d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80209dc:	e7e5      	b.n	80209aa <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 80209de:	6803      	ldr	r3, [r0, #0]
 80209e0:	6a1b      	ldr	r3, [r3, #32]
 80209e2:	4798      	blx	r3
 80209e4:	4a39      	ldr	r2, [pc, #228]	; (8020acc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x190>)
 80209e6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80209ea:	f04f 0c00 	mov.w	ip, #0
 80209ee:	8813      	ldrh	r3, [r2, #0]
 80209f0:	4696      	mov	lr, r2
 80209f2:	f9bd 5022 	ldrsh.w	r5, [sp, #34]	; 0x22
 80209f6:	fb05 1303 	mla	r3, r5, r3, r1
 80209fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80209fe:	4418      	add	r0, r3
 8020a00:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8020a04:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8020a08:	009b      	lsls	r3, r3, #2
 8020a0a:	9105      	str	r1, [sp, #20]
 8020a0c:	4621      	mov	r1, r4
 8020a0e:	9304      	str	r3, [sp, #16]
 8020a10:	45c4      	cmp	ip, r8
 8020a12:	da52      	bge.n	8020aba <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 8020a14:	1cc2      	adds	r2, r0, #3
 8020a16:	1d0c      	adds	r4, r1, #4
 8020a18:	f04f 0a00 	mov.w	sl, #0
 8020a1c:	45b2      	cmp	sl, r6
 8020a1e:	da3a      	bge.n	8020a96 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x15a>
 8020a20:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 8020a24:	b185      	cbz	r5, 8020a48 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8020a26:	2dff      	cmp	r5, #255	; 0xff
 8020a28:	f814 7c04 	ldrb.w	r7, [r4, #-4]
 8020a2c:	d111      	bne.n	8020a52 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8020a2e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020a32:	d10e      	bne.n	8020a52 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8020a34:	f802 7c03 	strb.w	r7, [r2, #-3]
 8020a38:	f814 3c03 	ldrb.w	r3, [r4, #-3]
 8020a3c:	f802 3c02 	strb.w	r3, [r2, #-2]
 8020a40:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8020a44:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020a48:	f10a 0a01 	add.w	sl, sl, #1
 8020a4c:	3203      	adds	r2, #3
 8020a4e:	3404      	adds	r4, #4
 8020a50:	e7e4      	b.n	8020a1c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe0>
 8020a52:	fb19 f505 	smulbb	r5, r9, r5
 8020a56:	f812 bc03 	ldrb.w	fp, [r2, #-3]
 8020a5a:	f5c5 3380 	rsb	r3, r5, #65536	; 0x10000
 8020a5e:	fb03 fb0b 	mul.w	fp, r3, fp
 8020a62:	fb05 b707 	mla	r7, r5, r7, fp
 8020a66:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 8020a6a:	0c3f      	lsrs	r7, r7, #16
 8020a6c:	fb03 fb0b 	mul.w	fp, r3, fp
 8020a70:	f802 7c03 	strb.w	r7, [r2, #-3]
 8020a74:	f814 7c03 	ldrb.w	r7, [r4, #-3]
 8020a78:	fb05 b707 	mla	r7, r5, r7, fp
 8020a7c:	f812 bc01 	ldrb.w	fp, [r2, #-1]
 8020a80:	0c3f      	lsrs	r7, r7, #16
 8020a82:	fb03 f30b 	mul.w	r3, r3, fp
 8020a86:	f802 7c02 	strb.w	r7, [r2, #-2]
 8020a8a:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8020a8e:	fb05 3307 	mla	r3, r5, r7, r3
 8020a92:	0c1b      	lsrs	r3, r3, #16
 8020a94:	e7d6      	b.n	8020a44 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8020a96:	f8be 3000 	ldrh.w	r3, [lr]
 8020a9a:	f10c 0c01 	add.w	ip, ip, #1
 8020a9e:	9a05      	ldr	r2, [sp, #20]
 8020aa0:	1b9b      	subs	r3, r3, r6
 8020aa2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020aa6:	4413      	add	r3, r2
 8020aa8:	9a04      	ldr	r2, [sp, #16]
 8020aaa:	4418      	add	r0, r3
 8020aac:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020ab0:	1b9b      	subs	r3, r3, r6
 8020ab2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020ab6:	4419      	add	r1, r3
 8020ab8:	e7aa      	b.n	8020a10 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd4>
 8020aba:	4b03      	ldr	r3, [pc, #12]	; (8020ac8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8020abc:	6818      	ldr	r0, [r3, #0]
 8020abe:	6803      	ldr	r3, [r0, #0]
 8020ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020ac2:	4798      	blx	r3
 8020ac4:	e785      	b.n	80209d2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8020ac6:	bf00      	nop
 8020ac8:	2000a32c 	.word	0x2000a32c
 8020acc:	2000a326 	.word	0x2000a326

08020ad0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8020ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020ad4:	b085      	sub	sp, #20
 8020ad6:	4606      	mov	r6, r0
 8020ad8:	460c      	mov	r4, r1
 8020ada:	4691      	mov	r9, r2
 8020adc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8020ae0:	4698      	mov	r8, r3
 8020ae2:	b32d      	cbz	r5, 8020b30 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x60>
 8020ae4:	4608      	mov	r0, r1
 8020ae6:	f7fe ffe5 	bl	801fab4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020aea:	4607      	mov	r7, r0
 8020aec:	4620      	mov	r0, r4
 8020aee:	f7ff f819 	bl	801fb24 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020af2:	f8ad 000e 	strh.w	r0, [sp, #14]
 8020af6:	4620      	mov	r0, r4
 8020af8:	f8ad 9008 	strh.w	r9, [sp, #8]
 8020afc:	f8ad 800a 	strh.w	r8, [sp, #10]
 8020b00:	f8ad 700c 	strh.w	r7, [sp, #12]
 8020b04:	f7ff f904 	bl	801fd10 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020b08:	b928      	cbnz	r0, 8020b16 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x46>
 8020b0a:	4b12      	ldr	r3, [pc, #72]	; (8020b54 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x84>)
 8020b0c:	2146      	movs	r1, #70	; 0x46
 8020b0e:	4a12      	ldr	r2, [pc, #72]	; (8020b58 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>)
 8020b10:	4812      	ldr	r0, [pc, #72]	; (8020b5c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>)
 8020b12:	f000 fb51 	bl	80211b8 <__assert_func>
 8020b16:	4620      	mov	r0, r4
 8020b18:	f7ff f8fa 	bl	801fd10 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020b1c:	2802      	cmp	r0, #2
 8020b1e:	d10a      	bne.n	8020b36 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x66>
 8020b20:	4620      	mov	r0, r4
 8020b22:	f7ff f8c5 	bl	801fcb0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020b26:	462b      	mov	r3, r5
 8020b28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020b2a:	a902      	add	r1, sp, #8
 8020b2c:	f7ff ff06 	bl	802093c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020b30:	b005      	add	sp, #20
 8020b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020b36:	6833      	ldr	r3, [r6, #0]
 8020b38:	4620      	mov	r0, r4
 8020b3a:	691f      	ldr	r7, [r3, #16]
 8020b3c:	f7ff f8b8 	bl	801fcb0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020b40:	2300      	movs	r3, #0
 8020b42:	4601      	mov	r1, r0
 8020b44:	9500      	str	r5, [sp, #0]
 8020b46:	aa02      	add	r2, sp, #8
 8020b48:	9301      	str	r3, [sp, #4]
 8020b4a:	4630      	mov	r0, r6
 8020b4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020b4e:	47b8      	blx	r7
 8020b50:	e7ee      	b.n	8020b30 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x60>
 8020b52:	bf00      	nop
 8020b54:	0802590a 	.word	0x0802590a
 8020b58:	08025a78 	.word	0x08025a78
 8020b5c:	0802599a 	.word	0x0802599a

08020b60 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8020b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020b64:	4615      	mov	r5, r2
 8020b66:	461c      	mov	r4, r3
 8020b68:	460f      	mov	r7, r1
 8020b6a:	9a06      	ldr	r2, [sp, #24]
 8020b6c:	2d01      	cmp	r5, #1
 8020b6e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8020b72:	d012      	beq.n	8020b9a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3a>
 8020b74:	d305      	bcc.n	8020b82 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x22>
 8020b76:	2d02      	cmp	r5, #2
 8020b78:	d009      	beq.n	8020b8e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2e>
 8020b7a:	4b0d      	ldr	r3, [pc, #52]	; (8020bb0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x50>)
 8020b7c:	21ee      	movs	r1, #238	; 0xee
 8020b7e:	4a0d      	ldr	r2, [pc, #52]	; (8020bb4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x54>)
 8020b80:	e002      	b.n	8020b88 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x28>
 8020b82:	4b0d      	ldr	r3, [pc, #52]	; (8020bb8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 8020b84:	21e1      	movs	r1, #225	; 0xe1
 8020b86:	4a0b      	ldr	r2, [pc, #44]	; (8020bb4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x54>)
 8020b88:	480c      	ldr	r0, [pc, #48]	; (8020bbc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 8020b8a:	f000 fb15 	bl	80211b8 <__assert_func>
 8020b8e:	4621      	mov	r1, r4
 8020b90:	4638      	mov	r0, r7
 8020b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020b96:	f7ff bed1 	b.w	802093c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020b9a:	6805      	ldr	r5, [r0, #0]
 8020b9c:	2600      	movs	r6, #0
 8020b9e:	9306      	str	r3, [sp, #24]
 8020ba0:	4613      	mov	r3, r2
 8020ba2:	9607      	str	r6, [sp, #28]
 8020ba4:	4622      	mov	r2, r4
 8020ba6:	692d      	ldr	r5, [r5, #16]
 8020ba8:	46ac      	mov	ip, r5
 8020baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020bae:	4760      	bx	ip
 8020bb0:	08025a0d 	.word	0x08025a0d
 8020bb4:	08025b6b 	.word	0x08025b6b
 8020bb8:	080259cc 	.word	0x080259cc
 8020bbc:	0802599a 	.word	0x0802599a

08020bc0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8020bc0:	b138      	cbz	r0, 8020bd2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8020bc2:	2902      	cmp	r1, #2
 8020bc4:	d00b      	beq.n	8020bde <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1e>
 8020bc6:	2903      	cmp	r1, #3
 8020bc8:	d00c      	beq.n	8020be4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x24>
 8020bca:	2901      	cmp	r1, #1
 8020bcc:	d10d      	bne.n	8020bea <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2a>
 8020bce:	2001      	movs	r0, #1
 8020bd0:	4770      	bx	lr
 8020bd2:	2902      	cmp	r1, #2
 8020bd4:	d006      	beq.n	8020be4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x24>
 8020bd6:	2903      	cmp	r1, #3
 8020bd8:	d007      	beq.n	8020bea <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2a>
 8020bda:	2901      	cmp	r1, #1
 8020bdc:	d1f7      	bne.n	8020bce <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 8020bde:	4b05      	ldr	r3, [pc, #20]	; (8020bf4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8020be0:	8818      	ldrh	r0, [r3, #0]
 8020be2:	4770      	bx	lr
 8020be4:	f04f 30ff 	mov.w	r0, #4294967295
 8020be8:	4770      	bx	lr
 8020bea:	4b02      	ldr	r3, [pc, #8]	; (8020bf4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8020bec:	8818      	ldrh	r0, [r3, #0]
 8020bee:	4240      	negs	r0, r0
 8020bf0:	4770      	bx	lr
 8020bf2:	bf00      	nop
 8020bf4:	2000a326 	.word	0x2000a326

08020bf8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8020bf8:	b140      	cbz	r0, 8020c0c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x14>
 8020bfa:	2902      	cmp	r1, #2
 8020bfc:	d00c      	beq.n	8020c18 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 8020bfe:	2903      	cmp	r1, #3
 8020c00:	d00d      	beq.n	8020c1e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x26>
 8020c02:	2901      	cmp	r1, #1
 8020c04:	d10f      	bne.n	8020c26 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2e>
 8020c06:	4b09      	ldr	r3, [pc, #36]	; (8020c2c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8020c08:	8818      	ldrh	r0, [r3, #0]
 8020c0a:	4770      	bx	lr
 8020c0c:	2902      	cmp	r1, #2
 8020c0e:	d006      	beq.n	8020c1e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x26>
 8020c10:	2903      	cmp	r1, #3
 8020c12:	d008      	beq.n	8020c26 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2e>
 8020c14:	2901      	cmp	r1, #1
 8020c16:	d1f6      	bne.n	8020c06 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8020c18:	f04f 30ff 	mov.w	r0, #4294967295
 8020c1c:	4770      	bx	lr
 8020c1e:	4b03      	ldr	r3, [pc, #12]	; (8020c2c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8020c20:	8818      	ldrh	r0, [r3, #0]
 8020c22:	4240      	negs	r0, r0
 8020c24:	4770      	bx	lr
 8020c26:	2001      	movs	r0, #1
 8020c28:	4770      	bx	lr
 8020c2a:	bf00      	nop
 8020c2c:	2000a326 	.word	0x2000a326

08020c30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE>:
 8020c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c34:	b097      	sub	sp, #92	; 0x5c
 8020c36:	f8dd a094 	ldr.w	sl, [sp, #148]	; 0x94
 8020c3a:	9109      	str	r1, [sp, #36]	; 0x24
 8020c3c:	a912      	add	r1, sp, #72	; 0x48
 8020c3e:	f9bd 5080 	ldrsh.w	r5, [sp, #128]	; 0x80
 8020c42:	f8bd 6088 	ldrh.w	r6, [sp, #136]	; 0x88
 8020c46:	f8bd 808c 	ldrh.w	r8, [sp, #140]	; 0x8c
 8020c4a:	f89d 70a0 	ldrb.w	r7, [sp, #160]	; 0xa0
 8020c4e:	f89d 90a8 	ldrb.w	r9, [sp, #168]	; 0xa8
 8020c52:	e881 000c 	stmia.w	r1, {r2, r3}
 8020c56:	f89a 100d 	ldrb.w	r1, [sl, #13]
 8020c5a:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8020c5e:	f011 0f08 	tst.w	r1, #8
 8020c62:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8020c64:	9307      	str	r3, [sp, #28]
 8020c66:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8020c6a:	bf0c      	ite	eq
 8020c6c:	2000      	moveq	r0, #0
 8020c6e:	f44f 7080 	movne.w	r0, #256	; 0x100
 8020c72:	f011 0f10 	tst.w	r1, #16
 8020c76:	930b      	str	r3, [sp, #44]	; 0x2c
 8020c78:	f89a 3006 	ldrb.w	r3, [sl, #6]
 8020c7c:	bf0c      	ite	eq
 8020c7e:	2100      	moveq	r1, #0
 8020c80:	f44f 7180 	movne.w	r1, #256	; 0x100
 8020c84:	4303      	orrs	r3, r0
 8020c86:	930a      	str	r3, [sp, #40]	; 0x28
 8020c88:	f000 8158 	beq.w	8020f3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x30c>
 8020c8c:	f89a 3007 	ldrb.w	r3, [sl, #7]
 8020c90:	430b      	orrs	r3, r1
 8020c92:	9308      	str	r3, [sp, #32]
 8020c94:	f000 8152 	beq.w	8020f3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x30c>
 8020c98:	f99a 3009 	ldrsb.w	r3, [sl, #9]
 8020c9c:	2e00      	cmp	r6, #0
 8020c9e:	f000 80f9 	beq.w	8020e94 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x264>
 8020ca2:	1af6      	subs	r6, r6, r3
 8020ca4:	b2b6      	uxth	r6, r6
 8020ca6:	0433      	lsls	r3, r6, #16
 8020ca8:	d502      	bpl.n	8020cb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x80>
 8020caa:	1bad      	subs	r5, r5, r6
 8020cac:	2600      	movs	r6, #0
 8020cae:	b22d      	sxth	r5, r5
 8020cb0:	f9b2 1000 	ldrsh.w	r1, [r2]
 8020cb4:	a812      	add	r0, sp, #72	; 0x48
 8020cb6:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 8020cba:	428d      	cmp	r5, r1
 8020cbc:	b28b      	uxth	r3, r1
 8020cbe:	bfbf      	itttt	lt
 8020cc0:	18f6      	addlt	r6, r6, r3
 8020cc2:	1b75      	sublt	r5, r6, r5
 8020cc4:	b2ae      	uxthlt	r6, r5
 8020cc6:	460d      	movlt	r5, r1
 8020cc8:	8891      	ldrh	r1, [r2, #4]
 8020cca:	440b      	add	r3, r1
 8020ccc:	4629      	mov	r1, r5
 8020cce:	b21b      	sxth	r3, r3
 8020cd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8020cd2:	8853      	ldrh	r3, [r2, #2]
 8020cd4:	88d2      	ldrh	r2, [r2, #6]
 8020cd6:	4413      	add	r3, r2
 8020cd8:	9a07      	ldr	r2, [sp, #28]
 8020cda:	b21b      	sxth	r3, r3
 8020cdc:	930e      	str	r3, [sp, #56]	; 0x38
 8020cde:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8020ce2:	9306      	str	r3, [sp, #24]
 8020ce4:	4bb0      	ldr	r3, [pc, #704]	; (8020fa8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8020ce6:	f893 b000 	ldrb.w	fp, [r3]
 8020cea:	f10b 3eff 	add.w	lr, fp, #4294967295
 8020cee:	f1de 0300 	rsbs	r3, lr, #0
 8020cf2:	eb43 030e 	adc.w	r3, r3, lr
 8020cf6:	930c      	str	r3, [sp, #48]	; 0x30
 8020cf8:	464b      	mov	r3, r9
 8020cfa:	f7fc ff0f 	bl	801db1c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8020cfe:	4629      	mov	r1, r5
 8020d00:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8020d04:	464b      	mov	r3, r9
 8020d06:	9a07      	ldr	r2, [sp, #28]
 8020d08:	a812      	add	r0, sp, #72	; 0x48
 8020d0a:	f7fc ff22 	bl	801db52 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8020d0e:	a916      	add	r1, sp, #88	; 0x58
 8020d10:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8020d14:	a815      	add	r0, sp, #84	; 0x54
 8020d16:	f7fc ffdd 	bl	801dcd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8020d1a:	f1b9 0f00 	cmp.w	r9, #0
 8020d1e:	f040 80bc 	bne.w	8020e9a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x26a>
 8020d22:	f1bb 0f01 	cmp.w	fp, #1
 8020d26:	f040 80c0 	bne.w	8020eaa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x27a>
 8020d2a:	4aa0      	ldr	r2, [pc, #640]	; (8020fac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8020d2c:	2f04      	cmp	r7, #4
 8020d2e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8020d32:	8811      	ldrh	r1, [r2, #0]
 8020d34:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8020d38:	fb01 2303 	mla	r3, r1, r3, r2
 8020d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020d3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020d42:	441a      	add	r2, r3
 8020d44:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8020d48:	fa43 f307 	asr.w	r3, r3, r7
 8020d4c:	9208      	str	r2, [sp, #32]
 8020d4e:	b2db      	uxtb	r3, r3
 8020d50:	930d      	str	r3, [sp, #52]	; 0x34
 8020d52:	ea6f 0303 	mvn.w	r3, r3
 8020d56:	b2db      	uxtb	r3, r3
 8020d58:	9310      	str	r3, [sp, #64]	; 0x40
 8020d5a:	f1c7 0308 	rsb	r3, r7, #8
 8020d5e:	b2db      	uxtb	r3, r3
 8020d60:	9309      	str	r3, [sp, #36]	; 0x24
 8020d62:	d104      	bne.n	8020d6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8020d64:	f89a 300d 	ldrb.w	r3, [sl, #13]
 8020d68:	07da      	lsls	r2, r3, #31
 8020d6a:	f100 8116 	bmi.w	8020f9a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x36a>
 8020d6e:	b91e      	cbnz	r6, 8020d78 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 8020d70:	f1b8 0f00 	cmp.w	r8, #0
 8020d74:	f000 80e5 	beq.w	8020f42 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x312>
 8020d78:	fb14 6308 	smlabb	r3, r4, r8, r6
 8020d7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020d7e:	fb13 f307 	smulbb	r3, r3, r7
 8020d82:	b29b      	uxth	r3, r3
 8020d84:	f003 0207 	and.w	r2, r3, #7
 8020d88:	1a8a      	subs	r2, r1, r2
 8020d8a:	9926      	ldr	r1, [sp, #152]	; 0x98
 8020d8c:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 8020d90:	b2d2      	uxtb	r2, r2
 8020d92:	9326      	str	r3, [sp, #152]	; 0x98
 8020d94:	9b06      	ldr	r3, [sp, #24]
 8020d96:	eba3 0808 	sub.w	r8, r3, r8
 8020d9a:	fa1f f388 	uxth.w	r3, r8
 8020d9e:	9306      	str	r3, [sp, #24]
 8020da0:	4649      	mov	r1, r9
 8020da2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020da4:	f7ff ff0c 	bl	8020bc0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8020da8:	4649      	mov	r1, r9
 8020daa:	4682      	mov	sl, r0
 8020dac:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020dae:	f7ff ff23 	bl	8020bf8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8020db2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020db4:	9907      	ldr	r1, [sp, #28]
 8020db6:	1bad      	subs	r5, r5, r6
 8020db8:	eb0a 094a 	add.w	r9, sl, sl, lsl #1
 8020dbc:	f89d c09c 	ldrb.w	ip, [sp, #156]	; 0x9c
 8020dc0:	eba3 0801 	sub.w	r8, r3, r1
 8020dc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020dc6:	1b5d      	subs	r5, r3, r5
 8020dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020dca:	429d      	cmp	r5, r3
 8020dcc:	bfd4      	ite	le
 8020dce:	ebc6 0605 	rsble	r6, r6, r5
 8020dd2:	ebc6 0603 	rsbgt	r6, r6, r3
 8020dd6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020dd8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8020ddc:	fb0a 0016 	mls	r0, sl, r6, r0
 8020de0:	1ba4      	subs	r4, r4, r6
 8020de2:	9307      	str	r3, [sp, #28]
 8020de4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020de6:	437c      	muls	r4, r7
 8020de8:	f3c3 2e07 	ubfx	lr, r3, #8, #8
 8020dec:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8020df0:	930c      	str	r3, [sp, #48]	; 0x30
 8020df2:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8020df6:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8020dfa:	fb09 f303 	mul.w	r3, r9, r3
 8020dfe:	930a      	str	r3, [sp, #40]	; 0x28
 8020e00:	9b06      	ldr	r3, [sp, #24]
 8020e02:	f8cd c018 	str.w	ip, [sp, #24]
 8020e06:	4598      	cmp	r8, r3
 8020e08:	bfa8      	it	ge
 8020e0a:	4698      	movge	r8, r3
 8020e0c:	9b07      	ldr	r3, [sp, #28]
 8020e0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8020e10:	1be3      	subs	r3, r4, r7
 8020e12:	9311      	str	r3, [sp, #68]	; 0x44
 8020e14:	f1b8 0f00 	cmp.w	r8, #0
 8020e18:	f340 8090 	ble.w	8020f3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x30c>
 8020e1c:	46b3      	mov	fp, r6
 8020e1e:	9908      	ldr	r1, [sp, #32]
 8020e20:	f1bb 0f00 	cmp.w	fp, #0
 8020e24:	f340 809c 	ble.w	8020f60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x330>
 8020e28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020e2a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020e2c:	781b      	ldrb	r3, [r3, #0]
 8020e2e:	4093      	lsls	r3, r2
 8020e30:	4003      	ands	r3, r0
 8020e32:	d027      	beq.n	8020e84 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x254>
 8020e34:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020e36:	4303      	orrs	r3, r0
 8020e38:	2bff      	cmp	r3, #255	; 0xff
 8020e3a:	d103      	bne.n	8020e44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x214>
 8020e3c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020e3e:	28ff      	cmp	r0, #255	; 0xff
 8020e40:	f000 8081 	beq.w	8020f46 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x316>
 8020e44:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 8020e48:	9d06      	ldr	r5, [sp, #24]
 8020e4a:	fb13 f300 	smulbb	r3, r3, r0
 8020e4e:	7808      	ldrb	r0, [r1, #0]
 8020e50:	f5c3 3a80 	rsb	sl, r3, #65536	; 0x10000
 8020e54:	fb0a f000 	mul.w	r0, sl, r0
 8020e58:	fb03 0005 	mla	r0, r3, r5, r0
 8020e5c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020e5e:	0c00      	lsrs	r0, r0, #16
 8020e60:	7008      	strb	r0, [r1, #0]
 8020e62:	7848      	ldrb	r0, [r1, #1]
 8020e64:	fb0a f000 	mul.w	r0, sl, r0
 8020e68:	fb03 0005 	mla	r0, r3, r5, r0
 8020e6c:	0c00      	lsrs	r0, r0, #16
 8020e6e:	7048      	strb	r0, [r1, #1]
 8020e70:	7888      	ldrb	r0, [r1, #2]
 8020e72:	fb0a fa00 	mul.w	sl, sl, r0
 8020e76:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020e78:	fb03 aa00 	mla	sl, r3, r0, sl
 8020e7c:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
 8020e80:	f881 a002 	strb.w	sl, [r1, #2]
 8020e84:	2a00      	cmp	r2, #0
 8020e86:	d066      	beq.n	8020f56 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x326>
 8020e88:	1bd2      	subs	r2, r2, r7
 8020e8a:	b2d2      	uxtb	r2, r2
 8020e8c:	4449      	add	r1, r9
 8020e8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020e92:	e7c5      	b.n	8020e20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x1f0>
 8020e94:	441d      	add	r5, r3
 8020e96:	b22d      	sxth	r5, r5
 8020e98:	e70a      	b.n	8020cb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x80>
 8020e9a:	f1b9 0f01 	cmp.w	r9, #1
 8020e9e:	f47f af44 	bne.w	8020d2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0xfa>
 8020ea2:	f1bb 0f01 	cmp.w	fp, #1
 8020ea6:	f47f af40 	bne.w	8020d2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0xfa>
 8020eaa:	f8df b104 	ldr.w	fp, [pc, #260]	; 8020fb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8020eae:	f8db 0000 	ldr.w	r0, [fp]
 8020eb2:	6803      	ldr	r3, [r0, #0]
 8020eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020eb6:	4798      	blx	r3
 8020eb8:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8020ebc:	465a      	mov	r2, fp
 8020ebe:	d006      	beq.n	8020ece <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x29e>
 8020ec0:	2f04      	cmp	r7, #4
 8020ec2:	bf0a      	itet	eq
 8020ec4:	f89a 300d 	ldrbeq.w	r3, [sl, #13]
 8020ec8:	2300      	movne	r3, #0
 8020eca:	f003 0301 	andeq.w	r3, r3, #1
 8020ece:	05c0      	lsls	r0, r0, #23
 8020ed0:	d55e      	bpl.n	8020f90 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x360>
 8020ed2:	2f08      	cmp	r7, #8
 8020ed4:	d15c      	bne.n	8020f90 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x360>
 8020ed6:	2b00      	cmp	r3, #0
 8020ed8:	bf0c      	ite	eq
 8020eda:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8020ede:	2180      	movne	r1, #128	; 0x80
 8020ee0:	2e00      	cmp	r6, #0
 8020ee2:	f47f af22 	bne.w	8020d2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0xfa>
 8020ee6:	f1b8 0f00 	cmp.w	r8, #0
 8020eea:	f47f af1e 	bne.w	8020d2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0xfa>
 8020eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ef0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020ef2:	18eb      	adds	r3, r5, r3
 8020ef4:	4298      	cmp	r0, r3
 8020ef6:	f6ff af18 	blt.w	8020d2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0xfa>
 8020efa:	9807      	ldr	r0, [sp, #28]
 8020efc:	9b08      	ldr	r3, [sp, #32]
 8020efe:	4403      	add	r3, r0
 8020f00:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020f02:	4298      	cmp	r0, r3
 8020f04:	f6ff af11 	blt.w	8020d2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0xfa>
 8020f08:	6810      	ldr	r0, [r2, #0]
 8020f0a:	2f08      	cmp	r7, #8
 8020f0c:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8020f10:	6805      	ldr	r5, [r0, #0]
 8020f12:	bf18      	it	ne
 8020f14:	3401      	addne	r4, #1
 8020f16:	9105      	str	r1, [sp, #20]
 8020f18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020f1a:	bf18      	it	ne
 8020f1c:	f024 0401 	bicne.w	r4, r4, #1
 8020f20:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8020f24:	9104      	str	r1, [sp, #16]
 8020f26:	bf18      	it	ne
 8020f28:	b2a4      	uxthne	r4, r4
 8020f2a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8020f2c:	9402      	str	r4, [sp, #8]
 8020f2e:	9103      	str	r1, [sp, #12]
 8020f30:	9906      	ldr	r1, [sp, #24]
 8020f32:	9400      	str	r4, [sp, #0]
 8020f34:	9101      	str	r1, [sp, #4]
 8020f36:	9926      	ldr	r1, [sp, #152]	; 0x98
 8020f38:	6cac      	ldr	r4, [r5, #72]	; 0x48
 8020f3a:	47a0      	blx	r4
 8020f3c:	b017      	add	sp, #92	; 0x5c
 8020f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020f44:	e72c      	b.n	8020da0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x170>
 8020f46:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8020f4a:	f881 c000 	strb.w	ip, [r1]
 8020f4e:	f881 e001 	strb.w	lr, [r1, #1]
 8020f52:	708b      	strb	r3, [r1, #2]
 8020f54:	e796      	b.n	8020e84 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x254>
 8020f56:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020f5a:	3301      	adds	r3, #1
 8020f5c:	9326      	str	r3, [sp, #152]	; 0x98
 8020f5e:	e795      	b.n	8020e8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x25c>
 8020f60:	b16c      	cbz	r4, 8020f7e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 8020f62:	4294      	cmp	r4, r2
 8020f64:	dd08      	ble.n	8020f78 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8020f66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020f68:	2108      	movs	r1, #8
 8020f6a:	1a9b      	subs	r3, r3, r2
 8020f6c:	fb93 f3f1 	sdiv	r3, r3, r1
 8020f70:	9926      	ldr	r1, [sp, #152]	; 0x98
 8020f72:	3301      	adds	r3, #1
 8020f74:	4419      	add	r1, r3
 8020f76:	9126      	str	r1, [sp, #152]	; 0x98
 8020f78:	1b12      	subs	r2, r2, r4
 8020f7a:	f002 0207 	and.w	r2, r2, #7
 8020f7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020f80:	f108 38ff 	add.w	r8, r8, #4294967295
 8020f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020f86:	440b      	add	r3, r1
 8020f88:	9908      	ldr	r1, [sp, #32]
 8020f8a:	4419      	add	r1, r3
 8020f8c:	9108      	str	r1, [sp, #32]
 8020f8e:	e741      	b.n	8020e14 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 8020f90:	2b00      	cmp	r3, #0
 8020f92:	f43f aeca 	beq.w	8020d2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0xfa>
 8020f96:	2180      	movs	r1, #128	; 0x80
 8020f98:	e7a2      	b.n	8020ee0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2b0>
 8020f9a:	07e3      	lsls	r3, r4, #31
 8020f9c:	f57f aee7 	bpl.w	8020d6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8020fa0:	3401      	adds	r4, #1
 8020fa2:	b2a4      	uxth	r4, r4
 8020fa4:	e6e3      	b.n	8020d6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8020fa6:	bf00      	nop
 8020fa8:	2000a324 	.word	0x2000a324
 8020fac:	2000a326 	.word	0x2000a326
 8020fb0:	2000a32c 	.word	0x2000a32c

08020fb4 <CRC_Lock>:
 8020fb4:	4a13      	ldr	r2, [pc, #76]	; (8021004 <CRC_Lock+0x50>)
 8020fb6:	6813      	ldr	r3, [r2, #0]
 8020fb8:	f023 0301 	bic.w	r3, r3, #1
 8020fbc:	6013      	str	r3, [r2, #0]
 8020fbe:	4b12      	ldr	r3, [pc, #72]	; (8021008 <CRC_Lock+0x54>)
 8020fc0:	681b      	ldr	r3, [r3, #0]
 8020fc2:	b9a3      	cbnz	r3, 8020fee <CRC_Lock+0x3a>
 8020fc4:	4b11      	ldr	r3, [pc, #68]	; (802100c <CRC_Lock+0x58>)
 8020fc6:	681b      	ldr	r3, [r3, #0]
 8020fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020fcc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8020fd0:	d10d      	bne.n	8020fee <CRC_Lock+0x3a>
 8020fd2:	4b0f      	ldr	r3, [pc, #60]	; (8021010 <CRC_Lock+0x5c>)
 8020fd4:	2201      	movs	r2, #1
 8020fd6:	601a      	str	r2, [r3, #0]
 8020fd8:	681a      	ldr	r2, [r3, #0]
 8020fda:	2a00      	cmp	r2, #0
 8020fdc:	d1fc      	bne.n	8020fd8 <CRC_Lock+0x24>
 8020fde:	4b0d      	ldr	r3, [pc, #52]	; (8021014 <CRC_Lock+0x60>)
 8020fe0:	6018      	str	r0, [r3, #0]
 8020fe2:	6818      	ldr	r0, [r3, #0]
 8020fe4:	4288      	cmp	r0, r1
 8020fe6:	bf14      	ite	ne
 8020fe8:	2000      	movne	r0, #0
 8020fea:	2001      	moveq	r0, #1
 8020fec:	4770      	bx	lr
 8020fee:	4b0a      	ldr	r3, [pc, #40]	; (8021018 <CRC_Lock+0x64>)
 8020ff0:	2201      	movs	r2, #1
 8020ff2:	601a      	str	r2, [r3, #0]
 8020ff4:	681a      	ldr	r2, [r3, #0]
 8020ff6:	2a00      	cmp	r2, #0
 8020ff8:	d1fc      	bne.n	8020ff4 <CRC_Lock+0x40>
 8020ffa:	4b08      	ldr	r3, [pc, #32]	; (802101c <CRC_Lock+0x68>)
 8020ffc:	6018      	str	r0, [r3, #0]
 8020ffe:	6818      	ldr	r0, [r3, #0]
 8021000:	4281      	cmp	r1, r0
 8021002:	e7f0      	b.n	8020fe6 <CRC_Lock+0x32>
 8021004:	e0002000 	.word	0xe0002000
 8021008:	e0042000 	.word	0xe0042000
 802100c:	5c001000 	.word	0x5c001000
 8021010:	58024c08 	.word	0x58024c08
 8021014:	58024c00 	.word	0x58024c00
 8021018:	40023008 	.word	0x40023008
 802101c:	40023000 	.word	0x40023000

08021020 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8021020:	6101      	str	r1, [r0, #16]
 8021022:	4770      	bx	lr

08021024 <_ZN8touchgfx8Gestures4tickEv>:
 8021024:	7b83      	ldrb	r3, [r0, #14]
 8021026:	b14b      	cbz	r3, 802103c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8021028:	8903      	ldrh	r3, [r0, #8]
 802102a:	3301      	adds	r3, #1
 802102c:	b29b      	uxth	r3, r3
 802102e:	2b07      	cmp	r3, #7
 8021030:	8103      	strh	r3, [r0, #8]
 8021032:	bf81      	itttt	hi
 8021034:	2300      	movhi	r3, #0
 8021036:	8143      	strhhi	r3, [r0, #10]
 8021038:	8183      	strhhi	r3, [r0, #12]
 802103a:	7383      	strbhi	r3, [r0, #14]
 802103c:	4770      	bx	lr
	...

08021040 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8021040:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8021044:	4604      	mov	r4, r0
 8021046:	4698      	mov	r8, r3
 8021048:	8880      	ldrh	r0, [r0, #4]
 802104a:	4617      	mov	r7, r2
 802104c:	4b1d      	ldr	r3, [pc, #116]	; (80210c4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802104e:	460e      	mov	r6, r1
 8021050:	f8ad 0006 	strh.w	r0, [sp, #6]
 8021054:	eba8 0000 	sub.w	r0, r8, r0
 8021058:	9300      	str	r3, [sp, #0]
 802105a:	2300      	movs	r3, #0
 802105c:	b280      	uxth	r0, r0
 802105e:	8aa2      	ldrh	r2, [r4, #20]
 8021060:	f88d 3004 	strb.w	r3, [sp, #4]
 8021064:	b203      	sxth	r3, r0
 8021066:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802106a:	88e1      	ldrh	r1, [r4, #6]
 802106c:	2b00      	cmp	r3, #0
 802106e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8021072:	f8ad 1008 	strh.w	r1, [sp, #8]
 8021076:	bfb8      	it	lt
 8021078:	4240      	neglt	r0, r0
 802107a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802107e:	bfb8      	it	lt
 8021080:	b203      	sxthlt	r3, r0
 8021082:	4293      	cmp	r3, r2
 8021084:	dc0c      	bgt.n	80210a0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 8021086:	1a69      	subs	r1, r5, r1
 8021088:	b289      	uxth	r1, r1
 802108a:	b20b      	sxth	r3, r1
 802108c:	2b00      	cmp	r3, #0
 802108e:	bfbc      	itt	lt
 8021090:	4249      	neglt	r1, r1
 8021092:	b20b      	sxthlt	r3, r1
 8021094:	429a      	cmp	r2, r3
 8021096:	db03      	blt.n	80210a0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 8021098:	2000      	movs	r0, #0
 802109a:	b004      	add	sp, #16
 802109c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80210a0:	6920      	ldr	r0, [r4, #16]
 80210a2:	4669      	mov	r1, sp
 80210a4:	eba8 0606 	sub.w	r6, r8, r6
 80210a8:	1bef      	subs	r7, r5, r7
 80210aa:	6803      	ldr	r3, [r0, #0]
 80210ac:	685b      	ldr	r3, [r3, #4]
 80210ae:	4798      	blx	r3
 80210b0:	2300      	movs	r3, #0
 80210b2:	2001      	movs	r0, #1
 80210b4:	8166      	strh	r6, [r4, #10]
 80210b6:	8123      	strh	r3, [r4, #8]
 80210b8:	81a7      	strh	r7, [r4, #12]
 80210ba:	f8a4 8004 	strh.w	r8, [r4, #4]
 80210be:	80e5      	strh	r5, [r4, #6]
 80210c0:	73a0      	strb	r0, [r4, #14]
 80210c2:	e7ea      	b.n	802109a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x5a>
 80210c4:	08022e6c 	.word	0x08022e6c

080210c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80210c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80210ca:	461e      	mov	r6, r3
 80210cc:	1e4b      	subs	r3, r1, #1
 80210ce:	b085      	sub	sp, #20
 80210d0:	4604      	mov	r4, r0
 80210d2:	2b01      	cmp	r3, #1
 80210d4:	460d      	mov	r5, r1
 80210d6:	4617      	mov	r7, r2
 80210d8:	d845      	bhi.n	8021166 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x9e>
 80210da:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80210de:	1cd3      	adds	r3, r2, #3
 80210e0:	b29b      	uxth	r3, r3
 80210e2:	2b06      	cmp	r3, #6
 80210e4:	d913      	bls.n	802110e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x46>
 80210e6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80210ea:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80210ee:	4820      	ldr	r0, [pc, #128]	; (8021170 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 80210f0:	f8ad 100c 	strh.w	r1, [sp, #12]
 80210f4:	a901      	add	r1, sp, #4
 80210f6:	9001      	str	r0, [sp, #4]
 80210f8:	2000      	movs	r0, #0
 80210fa:	f8ad 200a 	strh.w	r2, [sp, #10]
 80210fe:	f88d 0008 	strb.w	r0, [sp, #8]
 8021102:	6920      	ldr	r0, [r4, #16]
 8021104:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021108:	6803      	ldr	r3, [r0, #0]
 802110a:	689b      	ldr	r3, [r3, #8]
 802110c:	4798      	blx	r3
 802110e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021112:	1cd3      	adds	r3, r2, #3
 8021114:	b29b      	uxth	r3, r3
 8021116:	2b06      	cmp	r3, #6
 8021118:	d913      	bls.n	8021142 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 802111a:	4815      	ldr	r0, [pc, #84]	; (8021170 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 802111c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021120:	9001      	str	r0, [sp, #4]
 8021122:	2001      	movs	r0, #1
 8021124:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8021128:	f88d 0008 	strb.w	r0, [sp, #8]
 802112c:	6920      	ldr	r0, [r4, #16]
 802112e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8021132:	a901      	add	r1, sp, #4
 8021134:	f8ad 200a 	strh.w	r2, [sp, #10]
 8021138:	f8ad 300e 	strh.w	r3, [sp, #14]
 802113c:	6803      	ldr	r3, [r0, #0]
 802113e:	689b      	ldr	r3, [r3, #8]
 8021140:	4798      	blx	r3
 8021142:	4b0c      	ldr	r3, [pc, #48]	; (8021174 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xac>)
 8021144:	a901      	add	r1, sp, #4
 8021146:	6920      	ldr	r0, [r4, #16]
 8021148:	9301      	str	r3, [sp, #4]
 802114a:	2300      	movs	r3, #0
 802114c:	f88d 5008 	strb.w	r5, [sp, #8]
 8021150:	f8ad 700a 	strh.w	r7, [sp, #10]
 8021154:	f8ad 600c 	strh.w	r6, [sp, #12]
 8021158:	f8ad 300e 	strh.w	r3, [sp, #14]
 802115c:	6803      	ldr	r3, [r0, #0]
 802115e:	681b      	ldr	r3, [r3, #0]
 8021160:	4798      	blx	r3
 8021162:	b005      	add	sp, #20
 8021164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021166:	2900      	cmp	r1, #0
 8021168:	d1eb      	bne.n	8021142 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 802116a:	80a2      	strh	r2, [r4, #4]
 802116c:	80c6      	strh	r6, [r0, #6]
 802116e:	e7e8      	b.n	8021142 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 8021170:	080254d8 	.word	0x080254d8
 8021174:	08022e80 	.word	0x08022e80

08021178 <__cxa_pure_virtual>:
 8021178:	b508      	push	{r3, lr}
 802117a:	f000 f811 	bl	80211a0 <_ZSt9terminatev>

0802117e <_ZdlPvj>:
 802117e:	f000 b800 	b.w	8021182 <_ZdlPv>

08021182 <_ZdlPv>:
 8021182:	f000 b87b 	b.w	802127c <free>

08021186 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8021186:	b508      	push	{r3, lr}
 8021188:	4780      	blx	r0
 802118a:	f000 f80e 	bl	80211aa <abort>
	...

08021190 <_ZSt13get_terminatev>:
 8021190:	4b02      	ldr	r3, [pc, #8]	; (802119c <_ZSt13get_terminatev+0xc>)
 8021192:	6818      	ldr	r0, [r3, #0]
 8021194:	f3bf 8f5b 	dmb	ish
 8021198:	4770      	bx	lr
 802119a:	bf00      	nop
 802119c:	20000058 	.word	0x20000058

080211a0 <_ZSt9terminatev>:
 80211a0:	b508      	push	{r3, lr}
 80211a2:	f7ff fff5 	bl	8021190 <_ZSt13get_terminatev>
 80211a6:	f7ff ffee 	bl	8021186 <_ZN10__cxxabiv111__terminateEPFvvE>

080211aa <abort>:
 80211aa:	b508      	push	{r3, lr}
 80211ac:	2006      	movs	r0, #6
 80211ae:	f000 fc29 	bl	8021a04 <raise>
 80211b2:	2001      	movs	r0, #1
 80211b4:	f7f1 ff76 	bl	80130a4 <_exit>

080211b8 <__assert_func>:
 80211b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80211ba:	461c      	mov	r4, r3
 80211bc:	4b09      	ldr	r3, [pc, #36]	; (80211e4 <__assert_func+0x2c>)
 80211be:	681b      	ldr	r3, [r3, #0]
 80211c0:	4605      	mov	r5, r0
 80211c2:	68d8      	ldr	r0, [r3, #12]
 80211c4:	b152      	cbz	r2, 80211dc <__assert_func+0x24>
 80211c6:	4b08      	ldr	r3, [pc, #32]	; (80211e8 <__assert_func+0x30>)
 80211c8:	9100      	str	r1, [sp, #0]
 80211ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80211ce:	4907      	ldr	r1, [pc, #28]	; (80211ec <__assert_func+0x34>)
 80211d0:	462b      	mov	r3, r5
 80211d2:	4622      	mov	r2, r4
 80211d4:	f000 f814 	bl	8021200 <fiprintf>
 80211d8:	f7ff ffe7 	bl	80211aa <abort>
 80211dc:	4b04      	ldr	r3, [pc, #16]	; (80211f0 <__assert_func+0x38>)
 80211de:	461a      	mov	r2, r3
 80211e0:	e7f2      	b.n	80211c8 <__assert_func+0x10>
 80211e2:	bf00      	nop
 80211e4:	2000005c 	.word	0x2000005c
 80211e8:	08025c02 	.word	0x08025c02
 80211ec:	08025c0f 	.word	0x08025c0f
 80211f0:	08025c3d 	.word	0x08025c3d

080211f4 <atexit>:
 80211f4:	2300      	movs	r3, #0
 80211f6:	4601      	mov	r1, r0
 80211f8:	461a      	mov	r2, r3
 80211fa:	4618      	mov	r0, r3
 80211fc:	f000 bcde 	b.w	8021bbc <__register_exitproc>

08021200 <fiprintf>:
 8021200:	b40e      	push	{r1, r2, r3}
 8021202:	b503      	push	{r0, r1, lr}
 8021204:	4601      	mov	r1, r0
 8021206:	ab03      	add	r3, sp, #12
 8021208:	4805      	ldr	r0, [pc, #20]	; (8021220 <fiprintf+0x20>)
 802120a:	f853 2b04 	ldr.w	r2, [r3], #4
 802120e:	6800      	ldr	r0, [r0, #0]
 8021210:	9301      	str	r3, [sp, #4]
 8021212:	f000 f921 	bl	8021458 <_vfiprintf_r>
 8021216:	b002      	add	sp, #8
 8021218:	f85d eb04 	ldr.w	lr, [sp], #4
 802121c:	b003      	add	sp, #12
 802121e:	4770      	bx	lr
 8021220:	2000005c 	.word	0x2000005c

08021224 <__libc_init_array>:
 8021224:	b570      	push	{r4, r5, r6, lr}
 8021226:	4e0d      	ldr	r6, [pc, #52]	; (802125c <__libc_init_array+0x38>)
 8021228:	4c0d      	ldr	r4, [pc, #52]	; (8021260 <__libc_init_array+0x3c>)
 802122a:	1ba4      	subs	r4, r4, r6
 802122c:	10a4      	asrs	r4, r4, #2
 802122e:	2500      	movs	r5, #0
 8021230:	42a5      	cmp	r5, r4
 8021232:	d109      	bne.n	8021248 <__libc_init_array+0x24>
 8021234:	4e0b      	ldr	r6, [pc, #44]	; (8021264 <__libc_init_array+0x40>)
 8021236:	4c0c      	ldr	r4, [pc, #48]	; (8021268 <__libc_init_array+0x44>)
 8021238:	f000 ffb0 	bl	802219c <_init>
 802123c:	1ba4      	subs	r4, r4, r6
 802123e:	10a4      	asrs	r4, r4, #2
 8021240:	2500      	movs	r5, #0
 8021242:	42a5      	cmp	r5, r4
 8021244:	d105      	bne.n	8021252 <__libc_init_array+0x2e>
 8021246:	bd70      	pop	{r4, r5, r6, pc}
 8021248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802124c:	4798      	blx	r3
 802124e:	3501      	adds	r5, #1
 8021250:	e7ee      	b.n	8021230 <__libc_init_array+0xc>
 8021252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8021256:	4798      	blx	r3
 8021258:	3501      	adds	r5, #1
 802125a:	e7f2      	b.n	8021242 <__libc_init_array+0x1e>
 802125c:	080cda20 	.word	0x080cda20
 8021260:	080cda20 	.word	0x080cda20
 8021264:	080cda20 	.word	0x080cda20
 8021268:	080cda30 	.word	0x080cda30

0802126c <malloc>:
 802126c:	4b02      	ldr	r3, [pc, #8]	; (8021278 <malloc+0xc>)
 802126e:	4601      	mov	r1, r0
 8021270:	6818      	ldr	r0, [r3, #0]
 8021272:	f000 b86d 	b.w	8021350 <_malloc_r>
 8021276:	bf00      	nop
 8021278:	2000005c 	.word	0x2000005c

0802127c <free>:
 802127c:	4b02      	ldr	r3, [pc, #8]	; (8021288 <free+0xc>)
 802127e:	4601      	mov	r1, r0
 8021280:	6818      	ldr	r0, [r3, #0]
 8021282:	f000 b817 	b.w	80212b4 <_free_r>
 8021286:	bf00      	nop
 8021288:	2000005c 	.word	0x2000005c

0802128c <memcpy>:
 802128c:	b510      	push	{r4, lr}
 802128e:	1e43      	subs	r3, r0, #1
 8021290:	440a      	add	r2, r1
 8021292:	4291      	cmp	r1, r2
 8021294:	d100      	bne.n	8021298 <memcpy+0xc>
 8021296:	bd10      	pop	{r4, pc}
 8021298:	f811 4b01 	ldrb.w	r4, [r1], #1
 802129c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80212a0:	e7f7      	b.n	8021292 <memcpy+0x6>

080212a2 <memset>:
 80212a2:	4402      	add	r2, r0
 80212a4:	4603      	mov	r3, r0
 80212a6:	4293      	cmp	r3, r2
 80212a8:	d100      	bne.n	80212ac <memset+0xa>
 80212aa:	4770      	bx	lr
 80212ac:	f803 1b01 	strb.w	r1, [r3], #1
 80212b0:	e7f9      	b.n	80212a6 <memset+0x4>
	...

080212b4 <_free_r>:
 80212b4:	b538      	push	{r3, r4, r5, lr}
 80212b6:	4605      	mov	r5, r0
 80212b8:	2900      	cmp	r1, #0
 80212ba:	d045      	beq.n	8021348 <_free_r+0x94>
 80212bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80212c0:	1f0c      	subs	r4, r1, #4
 80212c2:	2b00      	cmp	r3, #0
 80212c4:	bfb8      	it	lt
 80212c6:	18e4      	addlt	r4, r4, r3
 80212c8:	f000 feba 	bl	8022040 <__malloc_lock>
 80212cc:	4a1f      	ldr	r2, [pc, #124]	; (802134c <_free_r+0x98>)
 80212ce:	6813      	ldr	r3, [r2, #0]
 80212d0:	4610      	mov	r0, r2
 80212d2:	b933      	cbnz	r3, 80212e2 <_free_r+0x2e>
 80212d4:	6063      	str	r3, [r4, #4]
 80212d6:	6014      	str	r4, [r2, #0]
 80212d8:	4628      	mov	r0, r5
 80212da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80212de:	f000 beb0 	b.w	8022042 <__malloc_unlock>
 80212e2:	42a3      	cmp	r3, r4
 80212e4:	d90c      	bls.n	8021300 <_free_r+0x4c>
 80212e6:	6821      	ldr	r1, [r4, #0]
 80212e8:	1862      	adds	r2, r4, r1
 80212ea:	4293      	cmp	r3, r2
 80212ec:	bf04      	itt	eq
 80212ee:	681a      	ldreq	r2, [r3, #0]
 80212f0:	685b      	ldreq	r3, [r3, #4]
 80212f2:	6063      	str	r3, [r4, #4]
 80212f4:	bf04      	itt	eq
 80212f6:	1852      	addeq	r2, r2, r1
 80212f8:	6022      	streq	r2, [r4, #0]
 80212fa:	6004      	str	r4, [r0, #0]
 80212fc:	e7ec      	b.n	80212d8 <_free_r+0x24>
 80212fe:	4613      	mov	r3, r2
 8021300:	685a      	ldr	r2, [r3, #4]
 8021302:	b10a      	cbz	r2, 8021308 <_free_r+0x54>
 8021304:	42a2      	cmp	r2, r4
 8021306:	d9fa      	bls.n	80212fe <_free_r+0x4a>
 8021308:	6819      	ldr	r1, [r3, #0]
 802130a:	1858      	adds	r0, r3, r1
 802130c:	42a0      	cmp	r0, r4
 802130e:	d10b      	bne.n	8021328 <_free_r+0x74>
 8021310:	6820      	ldr	r0, [r4, #0]
 8021312:	4401      	add	r1, r0
 8021314:	1858      	adds	r0, r3, r1
 8021316:	4282      	cmp	r2, r0
 8021318:	6019      	str	r1, [r3, #0]
 802131a:	d1dd      	bne.n	80212d8 <_free_r+0x24>
 802131c:	6810      	ldr	r0, [r2, #0]
 802131e:	6852      	ldr	r2, [r2, #4]
 8021320:	605a      	str	r2, [r3, #4]
 8021322:	4401      	add	r1, r0
 8021324:	6019      	str	r1, [r3, #0]
 8021326:	e7d7      	b.n	80212d8 <_free_r+0x24>
 8021328:	d902      	bls.n	8021330 <_free_r+0x7c>
 802132a:	230c      	movs	r3, #12
 802132c:	602b      	str	r3, [r5, #0]
 802132e:	e7d3      	b.n	80212d8 <_free_r+0x24>
 8021330:	6820      	ldr	r0, [r4, #0]
 8021332:	1821      	adds	r1, r4, r0
 8021334:	428a      	cmp	r2, r1
 8021336:	bf04      	itt	eq
 8021338:	6811      	ldreq	r1, [r2, #0]
 802133a:	6852      	ldreq	r2, [r2, #4]
 802133c:	6062      	str	r2, [r4, #4]
 802133e:	bf04      	itt	eq
 8021340:	1809      	addeq	r1, r1, r0
 8021342:	6021      	streq	r1, [r4, #0]
 8021344:	605c      	str	r4, [r3, #4]
 8021346:	e7c7      	b.n	80212d8 <_free_r+0x24>
 8021348:	bd38      	pop	{r3, r4, r5, pc}
 802134a:	bf00      	nop
 802134c:	2000a3c8 	.word	0x2000a3c8

08021350 <_malloc_r>:
 8021350:	b570      	push	{r4, r5, r6, lr}
 8021352:	1ccd      	adds	r5, r1, #3
 8021354:	f025 0503 	bic.w	r5, r5, #3
 8021358:	3508      	adds	r5, #8
 802135a:	2d0c      	cmp	r5, #12
 802135c:	bf38      	it	cc
 802135e:	250c      	movcc	r5, #12
 8021360:	2d00      	cmp	r5, #0
 8021362:	4606      	mov	r6, r0
 8021364:	db01      	blt.n	802136a <_malloc_r+0x1a>
 8021366:	42a9      	cmp	r1, r5
 8021368:	d903      	bls.n	8021372 <_malloc_r+0x22>
 802136a:	230c      	movs	r3, #12
 802136c:	6033      	str	r3, [r6, #0]
 802136e:	2000      	movs	r0, #0
 8021370:	bd70      	pop	{r4, r5, r6, pc}
 8021372:	f000 fe65 	bl	8022040 <__malloc_lock>
 8021376:	4a21      	ldr	r2, [pc, #132]	; (80213fc <_malloc_r+0xac>)
 8021378:	6814      	ldr	r4, [r2, #0]
 802137a:	4621      	mov	r1, r4
 802137c:	b991      	cbnz	r1, 80213a4 <_malloc_r+0x54>
 802137e:	4c20      	ldr	r4, [pc, #128]	; (8021400 <_malloc_r+0xb0>)
 8021380:	6823      	ldr	r3, [r4, #0]
 8021382:	b91b      	cbnz	r3, 802138c <_malloc_r+0x3c>
 8021384:	4630      	mov	r0, r6
 8021386:	f000 fb05 	bl	8021994 <_sbrk_r>
 802138a:	6020      	str	r0, [r4, #0]
 802138c:	4629      	mov	r1, r5
 802138e:	4630      	mov	r0, r6
 8021390:	f000 fb00 	bl	8021994 <_sbrk_r>
 8021394:	1c43      	adds	r3, r0, #1
 8021396:	d124      	bne.n	80213e2 <_malloc_r+0x92>
 8021398:	230c      	movs	r3, #12
 802139a:	6033      	str	r3, [r6, #0]
 802139c:	4630      	mov	r0, r6
 802139e:	f000 fe50 	bl	8022042 <__malloc_unlock>
 80213a2:	e7e4      	b.n	802136e <_malloc_r+0x1e>
 80213a4:	680b      	ldr	r3, [r1, #0]
 80213a6:	1b5b      	subs	r3, r3, r5
 80213a8:	d418      	bmi.n	80213dc <_malloc_r+0x8c>
 80213aa:	2b0b      	cmp	r3, #11
 80213ac:	d90f      	bls.n	80213ce <_malloc_r+0x7e>
 80213ae:	600b      	str	r3, [r1, #0]
 80213b0:	50cd      	str	r5, [r1, r3]
 80213b2:	18cc      	adds	r4, r1, r3
 80213b4:	4630      	mov	r0, r6
 80213b6:	f000 fe44 	bl	8022042 <__malloc_unlock>
 80213ba:	f104 000b 	add.w	r0, r4, #11
 80213be:	1d23      	adds	r3, r4, #4
 80213c0:	f020 0007 	bic.w	r0, r0, #7
 80213c4:	1ac3      	subs	r3, r0, r3
 80213c6:	d0d3      	beq.n	8021370 <_malloc_r+0x20>
 80213c8:	425a      	negs	r2, r3
 80213ca:	50e2      	str	r2, [r4, r3]
 80213cc:	e7d0      	b.n	8021370 <_malloc_r+0x20>
 80213ce:	428c      	cmp	r4, r1
 80213d0:	684b      	ldr	r3, [r1, #4]
 80213d2:	bf16      	itet	ne
 80213d4:	6063      	strne	r3, [r4, #4]
 80213d6:	6013      	streq	r3, [r2, #0]
 80213d8:	460c      	movne	r4, r1
 80213da:	e7eb      	b.n	80213b4 <_malloc_r+0x64>
 80213dc:	460c      	mov	r4, r1
 80213de:	6849      	ldr	r1, [r1, #4]
 80213e0:	e7cc      	b.n	802137c <_malloc_r+0x2c>
 80213e2:	1cc4      	adds	r4, r0, #3
 80213e4:	f024 0403 	bic.w	r4, r4, #3
 80213e8:	42a0      	cmp	r0, r4
 80213ea:	d005      	beq.n	80213f8 <_malloc_r+0xa8>
 80213ec:	1a21      	subs	r1, r4, r0
 80213ee:	4630      	mov	r0, r6
 80213f0:	f000 fad0 	bl	8021994 <_sbrk_r>
 80213f4:	3001      	adds	r0, #1
 80213f6:	d0cf      	beq.n	8021398 <_malloc_r+0x48>
 80213f8:	6025      	str	r5, [r4, #0]
 80213fa:	e7db      	b.n	80213b4 <_malloc_r+0x64>
 80213fc:	2000a3c8 	.word	0x2000a3c8
 8021400:	2000a3cc 	.word	0x2000a3cc

08021404 <__sfputc_r>:
 8021404:	6893      	ldr	r3, [r2, #8]
 8021406:	3b01      	subs	r3, #1
 8021408:	2b00      	cmp	r3, #0
 802140a:	b410      	push	{r4}
 802140c:	6093      	str	r3, [r2, #8]
 802140e:	da08      	bge.n	8021422 <__sfputc_r+0x1e>
 8021410:	6994      	ldr	r4, [r2, #24]
 8021412:	42a3      	cmp	r3, r4
 8021414:	db01      	blt.n	802141a <__sfputc_r+0x16>
 8021416:	290a      	cmp	r1, #10
 8021418:	d103      	bne.n	8021422 <__sfputc_r+0x1e>
 802141a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802141e:	f000 bb0d 	b.w	8021a3c <__swbuf_r>
 8021422:	6813      	ldr	r3, [r2, #0]
 8021424:	1c58      	adds	r0, r3, #1
 8021426:	6010      	str	r0, [r2, #0]
 8021428:	7019      	strb	r1, [r3, #0]
 802142a:	4608      	mov	r0, r1
 802142c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021430:	4770      	bx	lr

08021432 <__sfputs_r>:
 8021432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021434:	4606      	mov	r6, r0
 8021436:	460f      	mov	r7, r1
 8021438:	4614      	mov	r4, r2
 802143a:	18d5      	adds	r5, r2, r3
 802143c:	42ac      	cmp	r4, r5
 802143e:	d101      	bne.n	8021444 <__sfputs_r+0x12>
 8021440:	2000      	movs	r0, #0
 8021442:	e007      	b.n	8021454 <__sfputs_r+0x22>
 8021444:	463a      	mov	r2, r7
 8021446:	f814 1b01 	ldrb.w	r1, [r4], #1
 802144a:	4630      	mov	r0, r6
 802144c:	f7ff ffda 	bl	8021404 <__sfputc_r>
 8021450:	1c43      	adds	r3, r0, #1
 8021452:	d1f3      	bne.n	802143c <__sfputs_r+0xa>
 8021454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021458 <_vfiprintf_r>:
 8021458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802145c:	460c      	mov	r4, r1
 802145e:	b09d      	sub	sp, #116	; 0x74
 8021460:	4617      	mov	r7, r2
 8021462:	461d      	mov	r5, r3
 8021464:	4606      	mov	r6, r0
 8021466:	b118      	cbz	r0, 8021470 <_vfiprintf_r+0x18>
 8021468:	6983      	ldr	r3, [r0, #24]
 802146a:	b90b      	cbnz	r3, 8021470 <_vfiprintf_r+0x18>
 802146c:	f000 fcfa 	bl	8021e64 <__sinit>
 8021470:	4b7c      	ldr	r3, [pc, #496]	; (8021664 <_vfiprintf_r+0x20c>)
 8021472:	429c      	cmp	r4, r3
 8021474:	d158      	bne.n	8021528 <_vfiprintf_r+0xd0>
 8021476:	6874      	ldr	r4, [r6, #4]
 8021478:	89a3      	ldrh	r3, [r4, #12]
 802147a:	0718      	lsls	r0, r3, #28
 802147c:	d55e      	bpl.n	802153c <_vfiprintf_r+0xe4>
 802147e:	6923      	ldr	r3, [r4, #16]
 8021480:	2b00      	cmp	r3, #0
 8021482:	d05b      	beq.n	802153c <_vfiprintf_r+0xe4>
 8021484:	2300      	movs	r3, #0
 8021486:	9309      	str	r3, [sp, #36]	; 0x24
 8021488:	2320      	movs	r3, #32
 802148a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802148e:	2330      	movs	r3, #48	; 0x30
 8021490:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021494:	9503      	str	r5, [sp, #12]
 8021496:	f04f 0b01 	mov.w	fp, #1
 802149a:	46b8      	mov	r8, r7
 802149c:	4645      	mov	r5, r8
 802149e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80214a2:	b10b      	cbz	r3, 80214a8 <_vfiprintf_r+0x50>
 80214a4:	2b25      	cmp	r3, #37	; 0x25
 80214a6:	d154      	bne.n	8021552 <_vfiprintf_r+0xfa>
 80214a8:	ebb8 0a07 	subs.w	sl, r8, r7
 80214ac:	d00b      	beq.n	80214c6 <_vfiprintf_r+0x6e>
 80214ae:	4653      	mov	r3, sl
 80214b0:	463a      	mov	r2, r7
 80214b2:	4621      	mov	r1, r4
 80214b4:	4630      	mov	r0, r6
 80214b6:	f7ff ffbc 	bl	8021432 <__sfputs_r>
 80214ba:	3001      	adds	r0, #1
 80214bc:	f000 80c2 	beq.w	8021644 <_vfiprintf_r+0x1ec>
 80214c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80214c2:	4453      	add	r3, sl
 80214c4:	9309      	str	r3, [sp, #36]	; 0x24
 80214c6:	f898 3000 	ldrb.w	r3, [r8]
 80214ca:	2b00      	cmp	r3, #0
 80214cc:	f000 80ba 	beq.w	8021644 <_vfiprintf_r+0x1ec>
 80214d0:	2300      	movs	r3, #0
 80214d2:	f04f 32ff 	mov.w	r2, #4294967295
 80214d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80214da:	9304      	str	r3, [sp, #16]
 80214dc:	9307      	str	r3, [sp, #28]
 80214de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80214e2:	931a      	str	r3, [sp, #104]	; 0x68
 80214e4:	46a8      	mov	r8, r5
 80214e6:	2205      	movs	r2, #5
 80214e8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80214ec:	485e      	ldr	r0, [pc, #376]	; (8021668 <_vfiprintf_r+0x210>)
 80214ee:	f7de fe8f 	bl	8000210 <memchr>
 80214f2:	9b04      	ldr	r3, [sp, #16]
 80214f4:	bb78      	cbnz	r0, 8021556 <_vfiprintf_r+0xfe>
 80214f6:	06d9      	lsls	r1, r3, #27
 80214f8:	bf44      	itt	mi
 80214fa:	2220      	movmi	r2, #32
 80214fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8021500:	071a      	lsls	r2, r3, #28
 8021502:	bf44      	itt	mi
 8021504:	222b      	movmi	r2, #43	; 0x2b
 8021506:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802150a:	782a      	ldrb	r2, [r5, #0]
 802150c:	2a2a      	cmp	r2, #42	; 0x2a
 802150e:	d02a      	beq.n	8021566 <_vfiprintf_r+0x10e>
 8021510:	9a07      	ldr	r2, [sp, #28]
 8021512:	46a8      	mov	r8, r5
 8021514:	2000      	movs	r0, #0
 8021516:	250a      	movs	r5, #10
 8021518:	4641      	mov	r1, r8
 802151a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802151e:	3b30      	subs	r3, #48	; 0x30
 8021520:	2b09      	cmp	r3, #9
 8021522:	d969      	bls.n	80215f8 <_vfiprintf_r+0x1a0>
 8021524:	b360      	cbz	r0, 8021580 <_vfiprintf_r+0x128>
 8021526:	e024      	b.n	8021572 <_vfiprintf_r+0x11a>
 8021528:	4b50      	ldr	r3, [pc, #320]	; (802166c <_vfiprintf_r+0x214>)
 802152a:	429c      	cmp	r4, r3
 802152c:	d101      	bne.n	8021532 <_vfiprintf_r+0xda>
 802152e:	68b4      	ldr	r4, [r6, #8]
 8021530:	e7a2      	b.n	8021478 <_vfiprintf_r+0x20>
 8021532:	4b4f      	ldr	r3, [pc, #316]	; (8021670 <_vfiprintf_r+0x218>)
 8021534:	429c      	cmp	r4, r3
 8021536:	bf08      	it	eq
 8021538:	68f4      	ldreq	r4, [r6, #12]
 802153a:	e79d      	b.n	8021478 <_vfiprintf_r+0x20>
 802153c:	4621      	mov	r1, r4
 802153e:	4630      	mov	r0, r6
 8021540:	f000 face 	bl	8021ae0 <__swsetup_r>
 8021544:	2800      	cmp	r0, #0
 8021546:	d09d      	beq.n	8021484 <_vfiprintf_r+0x2c>
 8021548:	f04f 30ff 	mov.w	r0, #4294967295
 802154c:	b01d      	add	sp, #116	; 0x74
 802154e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021552:	46a8      	mov	r8, r5
 8021554:	e7a2      	b.n	802149c <_vfiprintf_r+0x44>
 8021556:	4a44      	ldr	r2, [pc, #272]	; (8021668 <_vfiprintf_r+0x210>)
 8021558:	1a80      	subs	r0, r0, r2
 802155a:	fa0b f000 	lsl.w	r0, fp, r0
 802155e:	4318      	orrs	r0, r3
 8021560:	9004      	str	r0, [sp, #16]
 8021562:	4645      	mov	r5, r8
 8021564:	e7be      	b.n	80214e4 <_vfiprintf_r+0x8c>
 8021566:	9a03      	ldr	r2, [sp, #12]
 8021568:	1d11      	adds	r1, r2, #4
 802156a:	6812      	ldr	r2, [r2, #0]
 802156c:	9103      	str	r1, [sp, #12]
 802156e:	2a00      	cmp	r2, #0
 8021570:	db01      	blt.n	8021576 <_vfiprintf_r+0x11e>
 8021572:	9207      	str	r2, [sp, #28]
 8021574:	e004      	b.n	8021580 <_vfiprintf_r+0x128>
 8021576:	4252      	negs	r2, r2
 8021578:	f043 0302 	orr.w	r3, r3, #2
 802157c:	9207      	str	r2, [sp, #28]
 802157e:	9304      	str	r3, [sp, #16]
 8021580:	f898 3000 	ldrb.w	r3, [r8]
 8021584:	2b2e      	cmp	r3, #46	; 0x2e
 8021586:	d10e      	bne.n	80215a6 <_vfiprintf_r+0x14e>
 8021588:	f898 3001 	ldrb.w	r3, [r8, #1]
 802158c:	2b2a      	cmp	r3, #42	; 0x2a
 802158e:	d138      	bne.n	8021602 <_vfiprintf_r+0x1aa>
 8021590:	9b03      	ldr	r3, [sp, #12]
 8021592:	1d1a      	adds	r2, r3, #4
 8021594:	681b      	ldr	r3, [r3, #0]
 8021596:	9203      	str	r2, [sp, #12]
 8021598:	2b00      	cmp	r3, #0
 802159a:	bfb8      	it	lt
 802159c:	f04f 33ff 	movlt.w	r3, #4294967295
 80215a0:	f108 0802 	add.w	r8, r8, #2
 80215a4:	9305      	str	r3, [sp, #20]
 80215a6:	4d33      	ldr	r5, [pc, #204]	; (8021674 <_vfiprintf_r+0x21c>)
 80215a8:	f898 1000 	ldrb.w	r1, [r8]
 80215ac:	2203      	movs	r2, #3
 80215ae:	4628      	mov	r0, r5
 80215b0:	f7de fe2e 	bl	8000210 <memchr>
 80215b4:	b140      	cbz	r0, 80215c8 <_vfiprintf_r+0x170>
 80215b6:	2340      	movs	r3, #64	; 0x40
 80215b8:	1b40      	subs	r0, r0, r5
 80215ba:	fa03 f000 	lsl.w	r0, r3, r0
 80215be:	9b04      	ldr	r3, [sp, #16]
 80215c0:	4303      	orrs	r3, r0
 80215c2:	f108 0801 	add.w	r8, r8, #1
 80215c6:	9304      	str	r3, [sp, #16]
 80215c8:	f898 1000 	ldrb.w	r1, [r8]
 80215cc:	482a      	ldr	r0, [pc, #168]	; (8021678 <_vfiprintf_r+0x220>)
 80215ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80215d2:	2206      	movs	r2, #6
 80215d4:	f108 0701 	add.w	r7, r8, #1
 80215d8:	f7de fe1a 	bl	8000210 <memchr>
 80215dc:	2800      	cmp	r0, #0
 80215de:	d037      	beq.n	8021650 <_vfiprintf_r+0x1f8>
 80215e0:	4b26      	ldr	r3, [pc, #152]	; (802167c <_vfiprintf_r+0x224>)
 80215e2:	bb1b      	cbnz	r3, 802162c <_vfiprintf_r+0x1d4>
 80215e4:	9b03      	ldr	r3, [sp, #12]
 80215e6:	3307      	adds	r3, #7
 80215e8:	f023 0307 	bic.w	r3, r3, #7
 80215ec:	3308      	adds	r3, #8
 80215ee:	9303      	str	r3, [sp, #12]
 80215f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80215f2:	444b      	add	r3, r9
 80215f4:	9309      	str	r3, [sp, #36]	; 0x24
 80215f6:	e750      	b.n	802149a <_vfiprintf_r+0x42>
 80215f8:	fb05 3202 	mla	r2, r5, r2, r3
 80215fc:	2001      	movs	r0, #1
 80215fe:	4688      	mov	r8, r1
 8021600:	e78a      	b.n	8021518 <_vfiprintf_r+0xc0>
 8021602:	2300      	movs	r3, #0
 8021604:	f108 0801 	add.w	r8, r8, #1
 8021608:	9305      	str	r3, [sp, #20]
 802160a:	4619      	mov	r1, r3
 802160c:	250a      	movs	r5, #10
 802160e:	4640      	mov	r0, r8
 8021610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021614:	3a30      	subs	r2, #48	; 0x30
 8021616:	2a09      	cmp	r2, #9
 8021618:	d903      	bls.n	8021622 <_vfiprintf_r+0x1ca>
 802161a:	2b00      	cmp	r3, #0
 802161c:	d0c3      	beq.n	80215a6 <_vfiprintf_r+0x14e>
 802161e:	9105      	str	r1, [sp, #20]
 8021620:	e7c1      	b.n	80215a6 <_vfiprintf_r+0x14e>
 8021622:	fb05 2101 	mla	r1, r5, r1, r2
 8021626:	2301      	movs	r3, #1
 8021628:	4680      	mov	r8, r0
 802162a:	e7f0      	b.n	802160e <_vfiprintf_r+0x1b6>
 802162c:	ab03      	add	r3, sp, #12
 802162e:	9300      	str	r3, [sp, #0]
 8021630:	4622      	mov	r2, r4
 8021632:	4b13      	ldr	r3, [pc, #76]	; (8021680 <_vfiprintf_r+0x228>)
 8021634:	a904      	add	r1, sp, #16
 8021636:	4630      	mov	r0, r6
 8021638:	f3af 8000 	nop.w
 802163c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8021640:	4681      	mov	r9, r0
 8021642:	d1d5      	bne.n	80215f0 <_vfiprintf_r+0x198>
 8021644:	89a3      	ldrh	r3, [r4, #12]
 8021646:	065b      	lsls	r3, r3, #25
 8021648:	f53f af7e 	bmi.w	8021548 <_vfiprintf_r+0xf0>
 802164c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802164e:	e77d      	b.n	802154c <_vfiprintf_r+0xf4>
 8021650:	ab03      	add	r3, sp, #12
 8021652:	9300      	str	r3, [sp, #0]
 8021654:	4622      	mov	r2, r4
 8021656:	4b0a      	ldr	r3, [pc, #40]	; (8021680 <_vfiprintf_r+0x228>)
 8021658:	a904      	add	r1, sp, #16
 802165a:	4630      	mov	r0, r6
 802165c:	f000 f888 	bl	8021770 <_printf_i>
 8021660:	e7ec      	b.n	802163c <_vfiprintf_r+0x1e4>
 8021662:	bf00      	nop
 8021664:	08025c98 	.word	0x08025c98
 8021668:	08025c44 	.word	0x08025c44
 802166c:	08025cb8 	.word	0x08025cb8
 8021670:	08025c78 	.word	0x08025c78
 8021674:	08025c4a 	.word	0x08025c4a
 8021678:	08025c4e 	.word	0x08025c4e
 802167c:	00000000 	.word	0x00000000
 8021680:	08021433 	.word	0x08021433

08021684 <_printf_common>:
 8021684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021688:	4691      	mov	r9, r2
 802168a:	461f      	mov	r7, r3
 802168c:	688a      	ldr	r2, [r1, #8]
 802168e:	690b      	ldr	r3, [r1, #16]
 8021690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8021694:	4293      	cmp	r3, r2
 8021696:	bfb8      	it	lt
 8021698:	4613      	movlt	r3, r2
 802169a:	f8c9 3000 	str.w	r3, [r9]
 802169e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80216a2:	4606      	mov	r6, r0
 80216a4:	460c      	mov	r4, r1
 80216a6:	b112      	cbz	r2, 80216ae <_printf_common+0x2a>
 80216a8:	3301      	adds	r3, #1
 80216aa:	f8c9 3000 	str.w	r3, [r9]
 80216ae:	6823      	ldr	r3, [r4, #0]
 80216b0:	0699      	lsls	r1, r3, #26
 80216b2:	bf42      	ittt	mi
 80216b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80216b8:	3302      	addmi	r3, #2
 80216ba:	f8c9 3000 	strmi.w	r3, [r9]
 80216be:	6825      	ldr	r5, [r4, #0]
 80216c0:	f015 0506 	ands.w	r5, r5, #6
 80216c4:	d107      	bne.n	80216d6 <_printf_common+0x52>
 80216c6:	f104 0a19 	add.w	sl, r4, #25
 80216ca:	68e3      	ldr	r3, [r4, #12]
 80216cc:	f8d9 2000 	ldr.w	r2, [r9]
 80216d0:	1a9b      	subs	r3, r3, r2
 80216d2:	42ab      	cmp	r3, r5
 80216d4:	dc28      	bgt.n	8021728 <_printf_common+0xa4>
 80216d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80216da:	6822      	ldr	r2, [r4, #0]
 80216dc:	3300      	adds	r3, #0
 80216de:	bf18      	it	ne
 80216e0:	2301      	movne	r3, #1
 80216e2:	0692      	lsls	r2, r2, #26
 80216e4:	d42d      	bmi.n	8021742 <_printf_common+0xbe>
 80216e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80216ea:	4639      	mov	r1, r7
 80216ec:	4630      	mov	r0, r6
 80216ee:	47c0      	blx	r8
 80216f0:	3001      	adds	r0, #1
 80216f2:	d020      	beq.n	8021736 <_printf_common+0xb2>
 80216f4:	6823      	ldr	r3, [r4, #0]
 80216f6:	68e5      	ldr	r5, [r4, #12]
 80216f8:	f8d9 2000 	ldr.w	r2, [r9]
 80216fc:	f003 0306 	and.w	r3, r3, #6
 8021700:	2b04      	cmp	r3, #4
 8021702:	bf08      	it	eq
 8021704:	1aad      	subeq	r5, r5, r2
 8021706:	68a3      	ldr	r3, [r4, #8]
 8021708:	6922      	ldr	r2, [r4, #16]
 802170a:	bf0c      	ite	eq
 802170c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021710:	2500      	movne	r5, #0
 8021712:	4293      	cmp	r3, r2
 8021714:	bfc4      	itt	gt
 8021716:	1a9b      	subgt	r3, r3, r2
 8021718:	18ed      	addgt	r5, r5, r3
 802171a:	f04f 0900 	mov.w	r9, #0
 802171e:	341a      	adds	r4, #26
 8021720:	454d      	cmp	r5, r9
 8021722:	d11a      	bne.n	802175a <_printf_common+0xd6>
 8021724:	2000      	movs	r0, #0
 8021726:	e008      	b.n	802173a <_printf_common+0xb6>
 8021728:	2301      	movs	r3, #1
 802172a:	4652      	mov	r2, sl
 802172c:	4639      	mov	r1, r7
 802172e:	4630      	mov	r0, r6
 8021730:	47c0      	blx	r8
 8021732:	3001      	adds	r0, #1
 8021734:	d103      	bne.n	802173e <_printf_common+0xba>
 8021736:	f04f 30ff 	mov.w	r0, #4294967295
 802173a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802173e:	3501      	adds	r5, #1
 8021740:	e7c3      	b.n	80216ca <_printf_common+0x46>
 8021742:	18e1      	adds	r1, r4, r3
 8021744:	1c5a      	adds	r2, r3, #1
 8021746:	2030      	movs	r0, #48	; 0x30
 8021748:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802174c:	4422      	add	r2, r4
 802174e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8021752:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8021756:	3302      	adds	r3, #2
 8021758:	e7c5      	b.n	80216e6 <_printf_common+0x62>
 802175a:	2301      	movs	r3, #1
 802175c:	4622      	mov	r2, r4
 802175e:	4639      	mov	r1, r7
 8021760:	4630      	mov	r0, r6
 8021762:	47c0      	blx	r8
 8021764:	3001      	adds	r0, #1
 8021766:	d0e6      	beq.n	8021736 <_printf_common+0xb2>
 8021768:	f109 0901 	add.w	r9, r9, #1
 802176c:	e7d8      	b.n	8021720 <_printf_common+0x9c>
	...

08021770 <_printf_i>:
 8021770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021774:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8021778:	460c      	mov	r4, r1
 802177a:	7e09      	ldrb	r1, [r1, #24]
 802177c:	b085      	sub	sp, #20
 802177e:	296e      	cmp	r1, #110	; 0x6e
 8021780:	4617      	mov	r7, r2
 8021782:	4606      	mov	r6, r0
 8021784:	4698      	mov	r8, r3
 8021786:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021788:	f000 80b3 	beq.w	80218f2 <_printf_i+0x182>
 802178c:	d822      	bhi.n	80217d4 <_printf_i+0x64>
 802178e:	2963      	cmp	r1, #99	; 0x63
 8021790:	d036      	beq.n	8021800 <_printf_i+0x90>
 8021792:	d80a      	bhi.n	80217aa <_printf_i+0x3a>
 8021794:	2900      	cmp	r1, #0
 8021796:	f000 80b9 	beq.w	802190c <_printf_i+0x19c>
 802179a:	2958      	cmp	r1, #88	; 0x58
 802179c:	f000 8083 	beq.w	80218a6 <_printf_i+0x136>
 80217a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80217a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80217a8:	e032      	b.n	8021810 <_printf_i+0xa0>
 80217aa:	2964      	cmp	r1, #100	; 0x64
 80217ac:	d001      	beq.n	80217b2 <_printf_i+0x42>
 80217ae:	2969      	cmp	r1, #105	; 0x69
 80217b0:	d1f6      	bne.n	80217a0 <_printf_i+0x30>
 80217b2:	6820      	ldr	r0, [r4, #0]
 80217b4:	6813      	ldr	r3, [r2, #0]
 80217b6:	0605      	lsls	r5, r0, #24
 80217b8:	f103 0104 	add.w	r1, r3, #4
 80217bc:	d52a      	bpl.n	8021814 <_printf_i+0xa4>
 80217be:	681b      	ldr	r3, [r3, #0]
 80217c0:	6011      	str	r1, [r2, #0]
 80217c2:	2b00      	cmp	r3, #0
 80217c4:	da03      	bge.n	80217ce <_printf_i+0x5e>
 80217c6:	222d      	movs	r2, #45	; 0x2d
 80217c8:	425b      	negs	r3, r3
 80217ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80217ce:	486f      	ldr	r0, [pc, #444]	; (802198c <_printf_i+0x21c>)
 80217d0:	220a      	movs	r2, #10
 80217d2:	e039      	b.n	8021848 <_printf_i+0xd8>
 80217d4:	2973      	cmp	r1, #115	; 0x73
 80217d6:	f000 809d 	beq.w	8021914 <_printf_i+0x1a4>
 80217da:	d808      	bhi.n	80217ee <_printf_i+0x7e>
 80217dc:	296f      	cmp	r1, #111	; 0x6f
 80217de:	d020      	beq.n	8021822 <_printf_i+0xb2>
 80217e0:	2970      	cmp	r1, #112	; 0x70
 80217e2:	d1dd      	bne.n	80217a0 <_printf_i+0x30>
 80217e4:	6823      	ldr	r3, [r4, #0]
 80217e6:	f043 0320 	orr.w	r3, r3, #32
 80217ea:	6023      	str	r3, [r4, #0]
 80217ec:	e003      	b.n	80217f6 <_printf_i+0x86>
 80217ee:	2975      	cmp	r1, #117	; 0x75
 80217f0:	d017      	beq.n	8021822 <_printf_i+0xb2>
 80217f2:	2978      	cmp	r1, #120	; 0x78
 80217f4:	d1d4      	bne.n	80217a0 <_printf_i+0x30>
 80217f6:	2378      	movs	r3, #120	; 0x78
 80217f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80217fc:	4864      	ldr	r0, [pc, #400]	; (8021990 <_printf_i+0x220>)
 80217fe:	e055      	b.n	80218ac <_printf_i+0x13c>
 8021800:	6813      	ldr	r3, [r2, #0]
 8021802:	1d19      	adds	r1, r3, #4
 8021804:	681b      	ldr	r3, [r3, #0]
 8021806:	6011      	str	r1, [r2, #0]
 8021808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802180c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021810:	2301      	movs	r3, #1
 8021812:	e08c      	b.n	802192e <_printf_i+0x1be>
 8021814:	681b      	ldr	r3, [r3, #0]
 8021816:	6011      	str	r1, [r2, #0]
 8021818:	f010 0f40 	tst.w	r0, #64	; 0x40
 802181c:	bf18      	it	ne
 802181e:	b21b      	sxthne	r3, r3
 8021820:	e7cf      	b.n	80217c2 <_printf_i+0x52>
 8021822:	6813      	ldr	r3, [r2, #0]
 8021824:	6825      	ldr	r5, [r4, #0]
 8021826:	1d18      	adds	r0, r3, #4
 8021828:	6010      	str	r0, [r2, #0]
 802182a:	0628      	lsls	r0, r5, #24
 802182c:	d501      	bpl.n	8021832 <_printf_i+0xc2>
 802182e:	681b      	ldr	r3, [r3, #0]
 8021830:	e002      	b.n	8021838 <_printf_i+0xc8>
 8021832:	0668      	lsls	r0, r5, #25
 8021834:	d5fb      	bpl.n	802182e <_printf_i+0xbe>
 8021836:	881b      	ldrh	r3, [r3, #0]
 8021838:	4854      	ldr	r0, [pc, #336]	; (802198c <_printf_i+0x21c>)
 802183a:	296f      	cmp	r1, #111	; 0x6f
 802183c:	bf14      	ite	ne
 802183e:	220a      	movne	r2, #10
 8021840:	2208      	moveq	r2, #8
 8021842:	2100      	movs	r1, #0
 8021844:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8021848:	6865      	ldr	r5, [r4, #4]
 802184a:	60a5      	str	r5, [r4, #8]
 802184c:	2d00      	cmp	r5, #0
 802184e:	f2c0 8095 	blt.w	802197c <_printf_i+0x20c>
 8021852:	6821      	ldr	r1, [r4, #0]
 8021854:	f021 0104 	bic.w	r1, r1, #4
 8021858:	6021      	str	r1, [r4, #0]
 802185a:	2b00      	cmp	r3, #0
 802185c:	d13d      	bne.n	80218da <_printf_i+0x16a>
 802185e:	2d00      	cmp	r5, #0
 8021860:	f040 808e 	bne.w	8021980 <_printf_i+0x210>
 8021864:	4665      	mov	r5, ip
 8021866:	2a08      	cmp	r2, #8
 8021868:	d10b      	bne.n	8021882 <_printf_i+0x112>
 802186a:	6823      	ldr	r3, [r4, #0]
 802186c:	07db      	lsls	r3, r3, #31
 802186e:	d508      	bpl.n	8021882 <_printf_i+0x112>
 8021870:	6923      	ldr	r3, [r4, #16]
 8021872:	6862      	ldr	r2, [r4, #4]
 8021874:	429a      	cmp	r2, r3
 8021876:	bfde      	ittt	le
 8021878:	2330      	movle	r3, #48	; 0x30
 802187a:	f805 3c01 	strble.w	r3, [r5, #-1]
 802187e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8021882:	ebac 0305 	sub.w	r3, ip, r5
 8021886:	6123      	str	r3, [r4, #16]
 8021888:	f8cd 8000 	str.w	r8, [sp]
 802188c:	463b      	mov	r3, r7
 802188e:	aa03      	add	r2, sp, #12
 8021890:	4621      	mov	r1, r4
 8021892:	4630      	mov	r0, r6
 8021894:	f7ff fef6 	bl	8021684 <_printf_common>
 8021898:	3001      	adds	r0, #1
 802189a:	d14d      	bne.n	8021938 <_printf_i+0x1c8>
 802189c:	f04f 30ff 	mov.w	r0, #4294967295
 80218a0:	b005      	add	sp, #20
 80218a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80218a6:	4839      	ldr	r0, [pc, #228]	; (802198c <_printf_i+0x21c>)
 80218a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80218ac:	6813      	ldr	r3, [r2, #0]
 80218ae:	6821      	ldr	r1, [r4, #0]
 80218b0:	1d1d      	adds	r5, r3, #4
 80218b2:	681b      	ldr	r3, [r3, #0]
 80218b4:	6015      	str	r5, [r2, #0]
 80218b6:	060a      	lsls	r2, r1, #24
 80218b8:	d50b      	bpl.n	80218d2 <_printf_i+0x162>
 80218ba:	07ca      	lsls	r2, r1, #31
 80218bc:	bf44      	itt	mi
 80218be:	f041 0120 	orrmi.w	r1, r1, #32
 80218c2:	6021      	strmi	r1, [r4, #0]
 80218c4:	b91b      	cbnz	r3, 80218ce <_printf_i+0x15e>
 80218c6:	6822      	ldr	r2, [r4, #0]
 80218c8:	f022 0220 	bic.w	r2, r2, #32
 80218cc:	6022      	str	r2, [r4, #0]
 80218ce:	2210      	movs	r2, #16
 80218d0:	e7b7      	b.n	8021842 <_printf_i+0xd2>
 80218d2:	064d      	lsls	r5, r1, #25
 80218d4:	bf48      	it	mi
 80218d6:	b29b      	uxthmi	r3, r3
 80218d8:	e7ef      	b.n	80218ba <_printf_i+0x14a>
 80218da:	4665      	mov	r5, ip
 80218dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80218e0:	fb02 3311 	mls	r3, r2, r1, r3
 80218e4:	5cc3      	ldrb	r3, [r0, r3]
 80218e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80218ea:	460b      	mov	r3, r1
 80218ec:	2900      	cmp	r1, #0
 80218ee:	d1f5      	bne.n	80218dc <_printf_i+0x16c>
 80218f0:	e7b9      	b.n	8021866 <_printf_i+0xf6>
 80218f2:	6813      	ldr	r3, [r2, #0]
 80218f4:	6825      	ldr	r5, [r4, #0]
 80218f6:	6961      	ldr	r1, [r4, #20]
 80218f8:	1d18      	adds	r0, r3, #4
 80218fa:	6010      	str	r0, [r2, #0]
 80218fc:	0628      	lsls	r0, r5, #24
 80218fe:	681b      	ldr	r3, [r3, #0]
 8021900:	d501      	bpl.n	8021906 <_printf_i+0x196>
 8021902:	6019      	str	r1, [r3, #0]
 8021904:	e002      	b.n	802190c <_printf_i+0x19c>
 8021906:	066a      	lsls	r2, r5, #25
 8021908:	d5fb      	bpl.n	8021902 <_printf_i+0x192>
 802190a:	8019      	strh	r1, [r3, #0]
 802190c:	2300      	movs	r3, #0
 802190e:	6123      	str	r3, [r4, #16]
 8021910:	4665      	mov	r5, ip
 8021912:	e7b9      	b.n	8021888 <_printf_i+0x118>
 8021914:	6813      	ldr	r3, [r2, #0]
 8021916:	1d19      	adds	r1, r3, #4
 8021918:	6011      	str	r1, [r2, #0]
 802191a:	681d      	ldr	r5, [r3, #0]
 802191c:	6862      	ldr	r2, [r4, #4]
 802191e:	2100      	movs	r1, #0
 8021920:	4628      	mov	r0, r5
 8021922:	f7de fc75 	bl	8000210 <memchr>
 8021926:	b108      	cbz	r0, 802192c <_printf_i+0x1bc>
 8021928:	1b40      	subs	r0, r0, r5
 802192a:	6060      	str	r0, [r4, #4]
 802192c:	6863      	ldr	r3, [r4, #4]
 802192e:	6123      	str	r3, [r4, #16]
 8021930:	2300      	movs	r3, #0
 8021932:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021936:	e7a7      	b.n	8021888 <_printf_i+0x118>
 8021938:	6923      	ldr	r3, [r4, #16]
 802193a:	462a      	mov	r2, r5
 802193c:	4639      	mov	r1, r7
 802193e:	4630      	mov	r0, r6
 8021940:	47c0      	blx	r8
 8021942:	3001      	adds	r0, #1
 8021944:	d0aa      	beq.n	802189c <_printf_i+0x12c>
 8021946:	6823      	ldr	r3, [r4, #0]
 8021948:	079b      	lsls	r3, r3, #30
 802194a:	d413      	bmi.n	8021974 <_printf_i+0x204>
 802194c:	68e0      	ldr	r0, [r4, #12]
 802194e:	9b03      	ldr	r3, [sp, #12]
 8021950:	4298      	cmp	r0, r3
 8021952:	bfb8      	it	lt
 8021954:	4618      	movlt	r0, r3
 8021956:	e7a3      	b.n	80218a0 <_printf_i+0x130>
 8021958:	2301      	movs	r3, #1
 802195a:	464a      	mov	r2, r9
 802195c:	4639      	mov	r1, r7
 802195e:	4630      	mov	r0, r6
 8021960:	47c0      	blx	r8
 8021962:	3001      	adds	r0, #1
 8021964:	d09a      	beq.n	802189c <_printf_i+0x12c>
 8021966:	3501      	adds	r5, #1
 8021968:	68e3      	ldr	r3, [r4, #12]
 802196a:	9a03      	ldr	r2, [sp, #12]
 802196c:	1a9b      	subs	r3, r3, r2
 802196e:	42ab      	cmp	r3, r5
 8021970:	dcf2      	bgt.n	8021958 <_printf_i+0x1e8>
 8021972:	e7eb      	b.n	802194c <_printf_i+0x1dc>
 8021974:	2500      	movs	r5, #0
 8021976:	f104 0919 	add.w	r9, r4, #25
 802197a:	e7f5      	b.n	8021968 <_printf_i+0x1f8>
 802197c:	2b00      	cmp	r3, #0
 802197e:	d1ac      	bne.n	80218da <_printf_i+0x16a>
 8021980:	7803      	ldrb	r3, [r0, #0]
 8021982:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021986:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802198a:	e76c      	b.n	8021866 <_printf_i+0xf6>
 802198c:	08025c55 	.word	0x08025c55
 8021990:	08025c66 	.word	0x08025c66

08021994 <_sbrk_r>:
 8021994:	b538      	push	{r3, r4, r5, lr}
 8021996:	4c06      	ldr	r4, [pc, #24]	; (80219b0 <_sbrk_r+0x1c>)
 8021998:	2300      	movs	r3, #0
 802199a:	4605      	mov	r5, r0
 802199c:	4608      	mov	r0, r1
 802199e:	6023      	str	r3, [r4, #0]
 80219a0:	f7f1 fbf8 	bl	8013194 <_sbrk>
 80219a4:	1c43      	adds	r3, r0, #1
 80219a6:	d102      	bne.n	80219ae <_sbrk_r+0x1a>
 80219a8:	6823      	ldr	r3, [r4, #0]
 80219aa:	b103      	cbz	r3, 80219ae <_sbrk_r+0x1a>
 80219ac:	602b      	str	r3, [r5, #0]
 80219ae:	bd38      	pop	{r3, r4, r5, pc}
 80219b0:	2000a4e8 	.word	0x2000a4e8

080219b4 <_raise_r>:
 80219b4:	291f      	cmp	r1, #31
 80219b6:	b538      	push	{r3, r4, r5, lr}
 80219b8:	4604      	mov	r4, r0
 80219ba:	460d      	mov	r5, r1
 80219bc:	d904      	bls.n	80219c8 <_raise_r+0x14>
 80219be:	2316      	movs	r3, #22
 80219c0:	6003      	str	r3, [r0, #0]
 80219c2:	f04f 30ff 	mov.w	r0, #4294967295
 80219c6:	bd38      	pop	{r3, r4, r5, pc}
 80219c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80219ca:	b112      	cbz	r2, 80219d2 <_raise_r+0x1e>
 80219cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80219d0:	b94b      	cbnz	r3, 80219e6 <_raise_r+0x32>
 80219d2:	4620      	mov	r0, r4
 80219d4:	f000 f830 	bl	8021a38 <_getpid_r>
 80219d8:	462a      	mov	r2, r5
 80219da:	4601      	mov	r1, r0
 80219dc:	4620      	mov	r0, r4
 80219de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80219e2:	f000 b817 	b.w	8021a14 <_kill_r>
 80219e6:	2b01      	cmp	r3, #1
 80219e8:	d00a      	beq.n	8021a00 <_raise_r+0x4c>
 80219ea:	1c59      	adds	r1, r3, #1
 80219ec:	d103      	bne.n	80219f6 <_raise_r+0x42>
 80219ee:	2316      	movs	r3, #22
 80219f0:	6003      	str	r3, [r0, #0]
 80219f2:	2001      	movs	r0, #1
 80219f4:	e7e7      	b.n	80219c6 <_raise_r+0x12>
 80219f6:	2400      	movs	r4, #0
 80219f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80219fc:	4628      	mov	r0, r5
 80219fe:	4798      	blx	r3
 8021a00:	2000      	movs	r0, #0
 8021a02:	e7e0      	b.n	80219c6 <_raise_r+0x12>

08021a04 <raise>:
 8021a04:	4b02      	ldr	r3, [pc, #8]	; (8021a10 <raise+0xc>)
 8021a06:	4601      	mov	r1, r0
 8021a08:	6818      	ldr	r0, [r3, #0]
 8021a0a:	f7ff bfd3 	b.w	80219b4 <_raise_r>
 8021a0e:	bf00      	nop
 8021a10:	2000005c 	.word	0x2000005c

08021a14 <_kill_r>:
 8021a14:	b538      	push	{r3, r4, r5, lr}
 8021a16:	4c07      	ldr	r4, [pc, #28]	; (8021a34 <_kill_r+0x20>)
 8021a18:	2300      	movs	r3, #0
 8021a1a:	4605      	mov	r5, r0
 8021a1c:	4608      	mov	r0, r1
 8021a1e:	4611      	mov	r1, r2
 8021a20:	6023      	str	r3, [r4, #0]
 8021a22:	f7f1 fb2d 	bl	8013080 <_kill>
 8021a26:	1c43      	adds	r3, r0, #1
 8021a28:	d102      	bne.n	8021a30 <_kill_r+0x1c>
 8021a2a:	6823      	ldr	r3, [r4, #0]
 8021a2c:	b103      	cbz	r3, 8021a30 <_kill_r+0x1c>
 8021a2e:	602b      	str	r3, [r5, #0]
 8021a30:	bd38      	pop	{r3, r4, r5, pc}
 8021a32:	bf00      	nop
 8021a34:	2000a4e8 	.word	0x2000a4e8

08021a38 <_getpid_r>:
 8021a38:	f7f1 bb1a 	b.w	8013070 <_getpid>

08021a3c <__swbuf_r>:
 8021a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a3e:	460e      	mov	r6, r1
 8021a40:	4614      	mov	r4, r2
 8021a42:	4605      	mov	r5, r0
 8021a44:	b118      	cbz	r0, 8021a4e <__swbuf_r+0x12>
 8021a46:	6983      	ldr	r3, [r0, #24]
 8021a48:	b90b      	cbnz	r3, 8021a4e <__swbuf_r+0x12>
 8021a4a:	f000 fa0b 	bl	8021e64 <__sinit>
 8021a4e:	4b21      	ldr	r3, [pc, #132]	; (8021ad4 <__swbuf_r+0x98>)
 8021a50:	429c      	cmp	r4, r3
 8021a52:	d12a      	bne.n	8021aaa <__swbuf_r+0x6e>
 8021a54:	686c      	ldr	r4, [r5, #4]
 8021a56:	69a3      	ldr	r3, [r4, #24]
 8021a58:	60a3      	str	r3, [r4, #8]
 8021a5a:	89a3      	ldrh	r3, [r4, #12]
 8021a5c:	071a      	lsls	r2, r3, #28
 8021a5e:	d52e      	bpl.n	8021abe <__swbuf_r+0x82>
 8021a60:	6923      	ldr	r3, [r4, #16]
 8021a62:	b363      	cbz	r3, 8021abe <__swbuf_r+0x82>
 8021a64:	6923      	ldr	r3, [r4, #16]
 8021a66:	6820      	ldr	r0, [r4, #0]
 8021a68:	1ac0      	subs	r0, r0, r3
 8021a6a:	6963      	ldr	r3, [r4, #20]
 8021a6c:	b2f6      	uxtb	r6, r6
 8021a6e:	4283      	cmp	r3, r0
 8021a70:	4637      	mov	r7, r6
 8021a72:	dc04      	bgt.n	8021a7e <__swbuf_r+0x42>
 8021a74:	4621      	mov	r1, r4
 8021a76:	4628      	mov	r0, r5
 8021a78:	f000 f98a 	bl	8021d90 <_fflush_r>
 8021a7c:	bb28      	cbnz	r0, 8021aca <__swbuf_r+0x8e>
 8021a7e:	68a3      	ldr	r3, [r4, #8]
 8021a80:	3b01      	subs	r3, #1
 8021a82:	60a3      	str	r3, [r4, #8]
 8021a84:	6823      	ldr	r3, [r4, #0]
 8021a86:	1c5a      	adds	r2, r3, #1
 8021a88:	6022      	str	r2, [r4, #0]
 8021a8a:	701e      	strb	r6, [r3, #0]
 8021a8c:	6963      	ldr	r3, [r4, #20]
 8021a8e:	3001      	adds	r0, #1
 8021a90:	4283      	cmp	r3, r0
 8021a92:	d004      	beq.n	8021a9e <__swbuf_r+0x62>
 8021a94:	89a3      	ldrh	r3, [r4, #12]
 8021a96:	07db      	lsls	r3, r3, #31
 8021a98:	d519      	bpl.n	8021ace <__swbuf_r+0x92>
 8021a9a:	2e0a      	cmp	r6, #10
 8021a9c:	d117      	bne.n	8021ace <__swbuf_r+0x92>
 8021a9e:	4621      	mov	r1, r4
 8021aa0:	4628      	mov	r0, r5
 8021aa2:	f000 f975 	bl	8021d90 <_fflush_r>
 8021aa6:	b190      	cbz	r0, 8021ace <__swbuf_r+0x92>
 8021aa8:	e00f      	b.n	8021aca <__swbuf_r+0x8e>
 8021aaa:	4b0b      	ldr	r3, [pc, #44]	; (8021ad8 <__swbuf_r+0x9c>)
 8021aac:	429c      	cmp	r4, r3
 8021aae:	d101      	bne.n	8021ab4 <__swbuf_r+0x78>
 8021ab0:	68ac      	ldr	r4, [r5, #8]
 8021ab2:	e7d0      	b.n	8021a56 <__swbuf_r+0x1a>
 8021ab4:	4b09      	ldr	r3, [pc, #36]	; (8021adc <__swbuf_r+0xa0>)
 8021ab6:	429c      	cmp	r4, r3
 8021ab8:	bf08      	it	eq
 8021aba:	68ec      	ldreq	r4, [r5, #12]
 8021abc:	e7cb      	b.n	8021a56 <__swbuf_r+0x1a>
 8021abe:	4621      	mov	r1, r4
 8021ac0:	4628      	mov	r0, r5
 8021ac2:	f000 f80d 	bl	8021ae0 <__swsetup_r>
 8021ac6:	2800      	cmp	r0, #0
 8021ac8:	d0cc      	beq.n	8021a64 <__swbuf_r+0x28>
 8021aca:	f04f 37ff 	mov.w	r7, #4294967295
 8021ace:	4638      	mov	r0, r7
 8021ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021ad2:	bf00      	nop
 8021ad4:	08025c98 	.word	0x08025c98
 8021ad8:	08025cb8 	.word	0x08025cb8
 8021adc:	08025c78 	.word	0x08025c78

08021ae0 <__swsetup_r>:
 8021ae0:	4b32      	ldr	r3, [pc, #200]	; (8021bac <__swsetup_r+0xcc>)
 8021ae2:	b570      	push	{r4, r5, r6, lr}
 8021ae4:	681d      	ldr	r5, [r3, #0]
 8021ae6:	4606      	mov	r6, r0
 8021ae8:	460c      	mov	r4, r1
 8021aea:	b125      	cbz	r5, 8021af6 <__swsetup_r+0x16>
 8021aec:	69ab      	ldr	r3, [r5, #24]
 8021aee:	b913      	cbnz	r3, 8021af6 <__swsetup_r+0x16>
 8021af0:	4628      	mov	r0, r5
 8021af2:	f000 f9b7 	bl	8021e64 <__sinit>
 8021af6:	4b2e      	ldr	r3, [pc, #184]	; (8021bb0 <__swsetup_r+0xd0>)
 8021af8:	429c      	cmp	r4, r3
 8021afa:	d10f      	bne.n	8021b1c <__swsetup_r+0x3c>
 8021afc:	686c      	ldr	r4, [r5, #4]
 8021afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021b02:	b29a      	uxth	r2, r3
 8021b04:	0715      	lsls	r5, r2, #28
 8021b06:	d42c      	bmi.n	8021b62 <__swsetup_r+0x82>
 8021b08:	06d0      	lsls	r0, r2, #27
 8021b0a:	d411      	bmi.n	8021b30 <__swsetup_r+0x50>
 8021b0c:	2209      	movs	r2, #9
 8021b0e:	6032      	str	r2, [r6, #0]
 8021b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021b14:	81a3      	strh	r3, [r4, #12]
 8021b16:	f04f 30ff 	mov.w	r0, #4294967295
 8021b1a:	e03e      	b.n	8021b9a <__swsetup_r+0xba>
 8021b1c:	4b25      	ldr	r3, [pc, #148]	; (8021bb4 <__swsetup_r+0xd4>)
 8021b1e:	429c      	cmp	r4, r3
 8021b20:	d101      	bne.n	8021b26 <__swsetup_r+0x46>
 8021b22:	68ac      	ldr	r4, [r5, #8]
 8021b24:	e7eb      	b.n	8021afe <__swsetup_r+0x1e>
 8021b26:	4b24      	ldr	r3, [pc, #144]	; (8021bb8 <__swsetup_r+0xd8>)
 8021b28:	429c      	cmp	r4, r3
 8021b2a:	bf08      	it	eq
 8021b2c:	68ec      	ldreq	r4, [r5, #12]
 8021b2e:	e7e6      	b.n	8021afe <__swsetup_r+0x1e>
 8021b30:	0751      	lsls	r1, r2, #29
 8021b32:	d512      	bpl.n	8021b5a <__swsetup_r+0x7a>
 8021b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021b36:	b141      	cbz	r1, 8021b4a <__swsetup_r+0x6a>
 8021b38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021b3c:	4299      	cmp	r1, r3
 8021b3e:	d002      	beq.n	8021b46 <__swsetup_r+0x66>
 8021b40:	4630      	mov	r0, r6
 8021b42:	f7ff fbb7 	bl	80212b4 <_free_r>
 8021b46:	2300      	movs	r3, #0
 8021b48:	6363      	str	r3, [r4, #52]	; 0x34
 8021b4a:	89a3      	ldrh	r3, [r4, #12]
 8021b4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021b50:	81a3      	strh	r3, [r4, #12]
 8021b52:	2300      	movs	r3, #0
 8021b54:	6063      	str	r3, [r4, #4]
 8021b56:	6923      	ldr	r3, [r4, #16]
 8021b58:	6023      	str	r3, [r4, #0]
 8021b5a:	89a3      	ldrh	r3, [r4, #12]
 8021b5c:	f043 0308 	orr.w	r3, r3, #8
 8021b60:	81a3      	strh	r3, [r4, #12]
 8021b62:	6923      	ldr	r3, [r4, #16]
 8021b64:	b94b      	cbnz	r3, 8021b7a <__swsetup_r+0x9a>
 8021b66:	89a3      	ldrh	r3, [r4, #12]
 8021b68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021b70:	d003      	beq.n	8021b7a <__swsetup_r+0x9a>
 8021b72:	4621      	mov	r1, r4
 8021b74:	4630      	mov	r0, r6
 8021b76:	f000 fa23 	bl	8021fc0 <__smakebuf_r>
 8021b7a:	89a2      	ldrh	r2, [r4, #12]
 8021b7c:	f012 0301 	ands.w	r3, r2, #1
 8021b80:	d00c      	beq.n	8021b9c <__swsetup_r+0xbc>
 8021b82:	2300      	movs	r3, #0
 8021b84:	60a3      	str	r3, [r4, #8]
 8021b86:	6963      	ldr	r3, [r4, #20]
 8021b88:	425b      	negs	r3, r3
 8021b8a:	61a3      	str	r3, [r4, #24]
 8021b8c:	6923      	ldr	r3, [r4, #16]
 8021b8e:	b953      	cbnz	r3, 8021ba6 <__swsetup_r+0xc6>
 8021b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021b94:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8021b98:	d1ba      	bne.n	8021b10 <__swsetup_r+0x30>
 8021b9a:	bd70      	pop	{r4, r5, r6, pc}
 8021b9c:	0792      	lsls	r2, r2, #30
 8021b9e:	bf58      	it	pl
 8021ba0:	6963      	ldrpl	r3, [r4, #20]
 8021ba2:	60a3      	str	r3, [r4, #8]
 8021ba4:	e7f2      	b.n	8021b8c <__swsetup_r+0xac>
 8021ba6:	2000      	movs	r0, #0
 8021ba8:	e7f7      	b.n	8021b9a <__swsetup_r+0xba>
 8021baa:	bf00      	nop
 8021bac:	2000005c 	.word	0x2000005c
 8021bb0:	08025c98 	.word	0x08025c98
 8021bb4:	08025cb8 	.word	0x08025cb8
 8021bb8:	08025c78 	.word	0x08025c78

08021bbc <__register_exitproc>:
 8021bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021bc0:	4d2c      	ldr	r5, [pc, #176]	; (8021c74 <__register_exitproc+0xb8>)
 8021bc2:	682c      	ldr	r4, [r5, #0]
 8021bc4:	4607      	mov	r7, r0
 8021bc6:	460e      	mov	r6, r1
 8021bc8:	4691      	mov	r9, r2
 8021bca:	4698      	mov	r8, r3
 8021bcc:	b934      	cbnz	r4, 8021bdc <__register_exitproc+0x20>
 8021bce:	4b2a      	ldr	r3, [pc, #168]	; (8021c78 <__register_exitproc+0xbc>)
 8021bd0:	4c2a      	ldr	r4, [pc, #168]	; (8021c7c <__register_exitproc+0xc0>)
 8021bd2:	602c      	str	r4, [r5, #0]
 8021bd4:	b113      	cbz	r3, 8021bdc <__register_exitproc+0x20>
 8021bd6:	681b      	ldr	r3, [r3, #0]
 8021bd8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8021bdc:	6863      	ldr	r3, [r4, #4]
 8021bde:	2b1f      	cmp	r3, #31
 8021be0:	dd3d      	ble.n	8021c5e <__register_exitproc+0xa2>
 8021be2:	4b27      	ldr	r3, [pc, #156]	; (8021c80 <__register_exitproc+0xc4>)
 8021be4:	b91b      	cbnz	r3, 8021bee <__register_exitproc+0x32>
 8021be6:	f04f 30ff 	mov.w	r0, #4294967295
 8021bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021bee:	208c      	movs	r0, #140	; 0x8c
 8021bf0:	f7ff fb3c 	bl	802126c <malloc>
 8021bf4:	4604      	mov	r4, r0
 8021bf6:	2800      	cmp	r0, #0
 8021bf8:	d0f5      	beq.n	8021be6 <__register_exitproc+0x2a>
 8021bfa:	2300      	movs	r3, #0
 8021bfc:	682a      	ldr	r2, [r5, #0]
 8021bfe:	6002      	str	r2, [r0, #0]
 8021c00:	6043      	str	r3, [r0, #4]
 8021c02:	6028      	str	r0, [r5, #0]
 8021c04:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8021c08:	b30f      	cbz	r7, 8021c4e <__register_exitproc+0x92>
 8021c0a:	f44f 7084 	mov.w	r0, #264	; 0x108
 8021c0e:	f7ff fb2d 	bl	802126c <malloc>
 8021c12:	2800      	cmp	r0, #0
 8021c14:	d0e7      	beq.n	8021be6 <__register_exitproc+0x2a>
 8021c16:	2300      	movs	r3, #0
 8021c18:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8021c1c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8021c20:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8021c24:	6862      	ldr	r2, [r4, #4]
 8021c26:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8021c2a:	2301      	movs	r3, #1
 8021c2c:	4093      	lsls	r3, r2
 8021c2e:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8021c32:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8021c36:	431a      	orrs	r2, r3
 8021c38:	2f02      	cmp	r7, #2
 8021c3a:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8021c3e:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 8021c42:	bf02      	ittt	eq
 8021c44:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8021c48:	4313      	orreq	r3, r2
 8021c4a:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8021c4e:	6863      	ldr	r3, [r4, #4]
 8021c50:	1c5a      	adds	r2, r3, #1
 8021c52:	3302      	adds	r3, #2
 8021c54:	6062      	str	r2, [r4, #4]
 8021c56:	2000      	movs	r0, #0
 8021c58:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8021c5c:	e7c5      	b.n	8021bea <__register_exitproc+0x2e>
 8021c5e:	2f00      	cmp	r7, #0
 8021c60:	d0f5      	beq.n	8021c4e <__register_exitproc+0x92>
 8021c62:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8021c66:	2800      	cmp	r0, #0
 8021c68:	d1dc      	bne.n	8021c24 <__register_exitproc+0x68>
 8021c6a:	4b05      	ldr	r3, [pc, #20]	; (8021c80 <__register_exitproc+0xc4>)
 8021c6c:	2b00      	cmp	r3, #0
 8021c6e:	d0ba      	beq.n	8021be6 <__register_exitproc+0x2a>
 8021c70:	e7cb      	b.n	8021c0a <__register_exitproc+0x4e>
 8021c72:	bf00      	nop
 8021c74:	2000a45c 	.word	0x2000a45c
 8021c78:	00000000 	.word	0x00000000
 8021c7c:	2000a3d0 	.word	0x2000a3d0
 8021c80:	0802126d 	.word	0x0802126d

08021c84 <__sflush_r>:
 8021c84:	898a      	ldrh	r2, [r1, #12]
 8021c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021c8a:	4605      	mov	r5, r0
 8021c8c:	0710      	lsls	r0, r2, #28
 8021c8e:	460c      	mov	r4, r1
 8021c90:	d458      	bmi.n	8021d44 <__sflush_r+0xc0>
 8021c92:	684b      	ldr	r3, [r1, #4]
 8021c94:	2b00      	cmp	r3, #0
 8021c96:	dc05      	bgt.n	8021ca4 <__sflush_r+0x20>
 8021c98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021c9a:	2b00      	cmp	r3, #0
 8021c9c:	dc02      	bgt.n	8021ca4 <__sflush_r+0x20>
 8021c9e:	2000      	movs	r0, #0
 8021ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021ca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021ca6:	2e00      	cmp	r6, #0
 8021ca8:	d0f9      	beq.n	8021c9e <__sflush_r+0x1a>
 8021caa:	2300      	movs	r3, #0
 8021cac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021cb0:	682f      	ldr	r7, [r5, #0]
 8021cb2:	6a21      	ldr	r1, [r4, #32]
 8021cb4:	602b      	str	r3, [r5, #0]
 8021cb6:	d032      	beq.n	8021d1e <__sflush_r+0x9a>
 8021cb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021cba:	89a3      	ldrh	r3, [r4, #12]
 8021cbc:	075a      	lsls	r2, r3, #29
 8021cbe:	d505      	bpl.n	8021ccc <__sflush_r+0x48>
 8021cc0:	6863      	ldr	r3, [r4, #4]
 8021cc2:	1ac0      	subs	r0, r0, r3
 8021cc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021cc6:	b10b      	cbz	r3, 8021ccc <__sflush_r+0x48>
 8021cc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021cca:	1ac0      	subs	r0, r0, r3
 8021ccc:	2300      	movs	r3, #0
 8021cce:	4602      	mov	r2, r0
 8021cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021cd2:	6a21      	ldr	r1, [r4, #32]
 8021cd4:	4628      	mov	r0, r5
 8021cd6:	47b0      	blx	r6
 8021cd8:	1c43      	adds	r3, r0, #1
 8021cda:	89a3      	ldrh	r3, [r4, #12]
 8021cdc:	d106      	bne.n	8021cec <__sflush_r+0x68>
 8021cde:	6829      	ldr	r1, [r5, #0]
 8021ce0:	291d      	cmp	r1, #29
 8021ce2:	d848      	bhi.n	8021d76 <__sflush_r+0xf2>
 8021ce4:	4a29      	ldr	r2, [pc, #164]	; (8021d8c <__sflush_r+0x108>)
 8021ce6:	40ca      	lsrs	r2, r1
 8021ce8:	07d6      	lsls	r6, r2, #31
 8021cea:	d544      	bpl.n	8021d76 <__sflush_r+0xf2>
 8021cec:	2200      	movs	r2, #0
 8021cee:	6062      	str	r2, [r4, #4]
 8021cf0:	04d9      	lsls	r1, r3, #19
 8021cf2:	6922      	ldr	r2, [r4, #16]
 8021cf4:	6022      	str	r2, [r4, #0]
 8021cf6:	d504      	bpl.n	8021d02 <__sflush_r+0x7e>
 8021cf8:	1c42      	adds	r2, r0, #1
 8021cfa:	d101      	bne.n	8021d00 <__sflush_r+0x7c>
 8021cfc:	682b      	ldr	r3, [r5, #0]
 8021cfe:	b903      	cbnz	r3, 8021d02 <__sflush_r+0x7e>
 8021d00:	6560      	str	r0, [r4, #84]	; 0x54
 8021d02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021d04:	602f      	str	r7, [r5, #0]
 8021d06:	2900      	cmp	r1, #0
 8021d08:	d0c9      	beq.n	8021c9e <__sflush_r+0x1a>
 8021d0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021d0e:	4299      	cmp	r1, r3
 8021d10:	d002      	beq.n	8021d18 <__sflush_r+0x94>
 8021d12:	4628      	mov	r0, r5
 8021d14:	f7ff face 	bl	80212b4 <_free_r>
 8021d18:	2000      	movs	r0, #0
 8021d1a:	6360      	str	r0, [r4, #52]	; 0x34
 8021d1c:	e7c0      	b.n	8021ca0 <__sflush_r+0x1c>
 8021d1e:	2301      	movs	r3, #1
 8021d20:	4628      	mov	r0, r5
 8021d22:	47b0      	blx	r6
 8021d24:	1c41      	adds	r1, r0, #1
 8021d26:	d1c8      	bne.n	8021cba <__sflush_r+0x36>
 8021d28:	682b      	ldr	r3, [r5, #0]
 8021d2a:	2b00      	cmp	r3, #0
 8021d2c:	d0c5      	beq.n	8021cba <__sflush_r+0x36>
 8021d2e:	2b1d      	cmp	r3, #29
 8021d30:	d001      	beq.n	8021d36 <__sflush_r+0xb2>
 8021d32:	2b16      	cmp	r3, #22
 8021d34:	d101      	bne.n	8021d3a <__sflush_r+0xb6>
 8021d36:	602f      	str	r7, [r5, #0]
 8021d38:	e7b1      	b.n	8021c9e <__sflush_r+0x1a>
 8021d3a:	89a3      	ldrh	r3, [r4, #12]
 8021d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021d40:	81a3      	strh	r3, [r4, #12]
 8021d42:	e7ad      	b.n	8021ca0 <__sflush_r+0x1c>
 8021d44:	690f      	ldr	r7, [r1, #16]
 8021d46:	2f00      	cmp	r7, #0
 8021d48:	d0a9      	beq.n	8021c9e <__sflush_r+0x1a>
 8021d4a:	0793      	lsls	r3, r2, #30
 8021d4c:	680e      	ldr	r6, [r1, #0]
 8021d4e:	bf08      	it	eq
 8021d50:	694b      	ldreq	r3, [r1, #20]
 8021d52:	600f      	str	r7, [r1, #0]
 8021d54:	bf18      	it	ne
 8021d56:	2300      	movne	r3, #0
 8021d58:	eba6 0807 	sub.w	r8, r6, r7
 8021d5c:	608b      	str	r3, [r1, #8]
 8021d5e:	f1b8 0f00 	cmp.w	r8, #0
 8021d62:	dd9c      	ble.n	8021c9e <__sflush_r+0x1a>
 8021d64:	4643      	mov	r3, r8
 8021d66:	463a      	mov	r2, r7
 8021d68:	6a21      	ldr	r1, [r4, #32]
 8021d6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021d6c:	4628      	mov	r0, r5
 8021d6e:	47b0      	blx	r6
 8021d70:	2800      	cmp	r0, #0
 8021d72:	dc06      	bgt.n	8021d82 <__sflush_r+0xfe>
 8021d74:	89a3      	ldrh	r3, [r4, #12]
 8021d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021d7a:	81a3      	strh	r3, [r4, #12]
 8021d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8021d80:	e78e      	b.n	8021ca0 <__sflush_r+0x1c>
 8021d82:	4407      	add	r7, r0
 8021d84:	eba8 0800 	sub.w	r8, r8, r0
 8021d88:	e7e9      	b.n	8021d5e <__sflush_r+0xda>
 8021d8a:	bf00      	nop
 8021d8c:	20400001 	.word	0x20400001

08021d90 <_fflush_r>:
 8021d90:	b538      	push	{r3, r4, r5, lr}
 8021d92:	690b      	ldr	r3, [r1, #16]
 8021d94:	4605      	mov	r5, r0
 8021d96:	460c      	mov	r4, r1
 8021d98:	b1db      	cbz	r3, 8021dd2 <_fflush_r+0x42>
 8021d9a:	b118      	cbz	r0, 8021da4 <_fflush_r+0x14>
 8021d9c:	6983      	ldr	r3, [r0, #24]
 8021d9e:	b90b      	cbnz	r3, 8021da4 <_fflush_r+0x14>
 8021da0:	f000 f860 	bl	8021e64 <__sinit>
 8021da4:	4b0c      	ldr	r3, [pc, #48]	; (8021dd8 <_fflush_r+0x48>)
 8021da6:	429c      	cmp	r4, r3
 8021da8:	d109      	bne.n	8021dbe <_fflush_r+0x2e>
 8021daa:	686c      	ldr	r4, [r5, #4]
 8021dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021db0:	b17b      	cbz	r3, 8021dd2 <_fflush_r+0x42>
 8021db2:	4621      	mov	r1, r4
 8021db4:	4628      	mov	r0, r5
 8021db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021dba:	f7ff bf63 	b.w	8021c84 <__sflush_r>
 8021dbe:	4b07      	ldr	r3, [pc, #28]	; (8021ddc <_fflush_r+0x4c>)
 8021dc0:	429c      	cmp	r4, r3
 8021dc2:	d101      	bne.n	8021dc8 <_fflush_r+0x38>
 8021dc4:	68ac      	ldr	r4, [r5, #8]
 8021dc6:	e7f1      	b.n	8021dac <_fflush_r+0x1c>
 8021dc8:	4b05      	ldr	r3, [pc, #20]	; (8021de0 <_fflush_r+0x50>)
 8021dca:	429c      	cmp	r4, r3
 8021dcc:	bf08      	it	eq
 8021dce:	68ec      	ldreq	r4, [r5, #12]
 8021dd0:	e7ec      	b.n	8021dac <_fflush_r+0x1c>
 8021dd2:	2000      	movs	r0, #0
 8021dd4:	bd38      	pop	{r3, r4, r5, pc}
 8021dd6:	bf00      	nop
 8021dd8:	08025c98 	.word	0x08025c98
 8021ddc:	08025cb8 	.word	0x08025cb8
 8021de0:	08025c78 	.word	0x08025c78

08021de4 <std>:
 8021de4:	2300      	movs	r3, #0
 8021de6:	b510      	push	{r4, lr}
 8021de8:	4604      	mov	r4, r0
 8021dea:	e9c0 3300 	strd	r3, r3, [r0]
 8021dee:	6083      	str	r3, [r0, #8]
 8021df0:	8181      	strh	r1, [r0, #12]
 8021df2:	6643      	str	r3, [r0, #100]	; 0x64
 8021df4:	81c2      	strh	r2, [r0, #14]
 8021df6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021dfa:	6183      	str	r3, [r0, #24]
 8021dfc:	4619      	mov	r1, r3
 8021dfe:	2208      	movs	r2, #8
 8021e00:	305c      	adds	r0, #92	; 0x5c
 8021e02:	f7ff fa4e 	bl	80212a2 <memset>
 8021e06:	4b05      	ldr	r3, [pc, #20]	; (8021e1c <std+0x38>)
 8021e08:	6263      	str	r3, [r4, #36]	; 0x24
 8021e0a:	4b05      	ldr	r3, [pc, #20]	; (8021e20 <std+0x3c>)
 8021e0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8021e0e:	4b05      	ldr	r3, [pc, #20]	; (8021e24 <std+0x40>)
 8021e10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021e12:	4b05      	ldr	r3, [pc, #20]	; (8021e28 <std+0x44>)
 8021e14:	6224      	str	r4, [r4, #32]
 8021e16:	6323      	str	r3, [r4, #48]	; 0x30
 8021e18:	bd10      	pop	{r4, pc}
 8021e1a:	bf00      	nop
 8021e1c:	08022045 	.word	0x08022045
 8021e20:	08022067 	.word	0x08022067
 8021e24:	0802209f 	.word	0x0802209f
 8021e28:	080220c3 	.word	0x080220c3

08021e2c <_cleanup_r>:
 8021e2c:	4901      	ldr	r1, [pc, #4]	; (8021e34 <_cleanup_r+0x8>)
 8021e2e:	f000 b885 	b.w	8021f3c <_fwalk_reent>
 8021e32:	bf00      	nop
 8021e34:	08021d91 	.word	0x08021d91

08021e38 <__sfmoreglue>:
 8021e38:	b570      	push	{r4, r5, r6, lr}
 8021e3a:	1e4a      	subs	r2, r1, #1
 8021e3c:	2568      	movs	r5, #104	; 0x68
 8021e3e:	4355      	muls	r5, r2
 8021e40:	460e      	mov	r6, r1
 8021e42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8021e46:	f7ff fa83 	bl	8021350 <_malloc_r>
 8021e4a:	4604      	mov	r4, r0
 8021e4c:	b140      	cbz	r0, 8021e60 <__sfmoreglue+0x28>
 8021e4e:	2100      	movs	r1, #0
 8021e50:	e9c0 1600 	strd	r1, r6, [r0]
 8021e54:	300c      	adds	r0, #12
 8021e56:	60a0      	str	r0, [r4, #8]
 8021e58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021e5c:	f7ff fa21 	bl	80212a2 <memset>
 8021e60:	4620      	mov	r0, r4
 8021e62:	bd70      	pop	{r4, r5, r6, pc}

08021e64 <__sinit>:
 8021e64:	6983      	ldr	r3, [r0, #24]
 8021e66:	b510      	push	{r4, lr}
 8021e68:	4604      	mov	r4, r0
 8021e6a:	bb33      	cbnz	r3, 8021eba <__sinit+0x56>
 8021e6c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8021e70:	6503      	str	r3, [r0, #80]	; 0x50
 8021e72:	4b12      	ldr	r3, [pc, #72]	; (8021ebc <__sinit+0x58>)
 8021e74:	4a12      	ldr	r2, [pc, #72]	; (8021ec0 <__sinit+0x5c>)
 8021e76:	681b      	ldr	r3, [r3, #0]
 8021e78:	6282      	str	r2, [r0, #40]	; 0x28
 8021e7a:	4298      	cmp	r0, r3
 8021e7c:	bf04      	itt	eq
 8021e7e:	2301      	moveq	r3, #1
 8021e80:	6183      	streq	r3, [r0, #24]
 8021e82:	f000 f81f 	bl	8021ec4 <__sfp>
 8021e86:	6060      	str	r0, [r4, #4]
 8021e88:	4620      	mov	r0, r4
 8021e8a:	f000 f81b 	bl	8021ec4 <__sfp>
 8021e8e:	60a0      	str	r0, [r4, #8]
 8021e90:	4620      	mov	r0, r4
 8021e92:	f000 f817 	bl	8021ec4 <__sfp>
 8021e96:	2200      	movs	r2, #0
 8021e98:	60e0      	str	r0, [r4, #12]
 8021e9a:	2104      	movs	r1, #4
 8021e9c:	6860      	ldr	r0, [r4, #4]
 8021e9e:	f7ff ffa1 	bl	8021de4 <std>
 8021ea2:	2201      	movs	r2, #1
 8021ea4:	2109      	movs	r1, #9
 8021ea6:	68a0      	ldr	r0, [r4, #8]
 8021ea8:	f7ff ff9c 	bl	8021de4 <std>
 8021eac:	2202      	movs	r2, #2
 8021eae:	2112      	movs	r1, #18
 8021eb0:	68e0      	ldr	r0, [r4, #12]
 8021eb2:	f7ff ff97 	bl	8021de4 <std>
 8021eb6:	2301      	movs	r3, #1
 8021eb8:	61a3      	str	r3, [r4, #24]
 8021eba:	bd10      	pop	{r4, pc}
 8021ebc:	08025c40 	.word	0x08025c40
 8021ec0:	08021e2d 	.word	0x08021e2d

08021ec4 <__sfp>:
 8021ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ec6:	4b1b      	ldr	r3, [pc, #108]	; (8021f34 <__sfp+0x70>)
 8021ec8:	681e      	ldr	r6, [r3, #0]
 8021eca:	69b3      	ldr	r3, [r6, #24]
 8021ecc:	4607      	mov	r7, r0
 8021ece:	b913      	cbnz	r3, 8021ed6 <__sfp+0x12>
 8021ed0:	4630      	mov	r0, r6
 8021ed2:	f7ff ffc7 	bl	8021e64 <__sinit>
 8021ed6:	3648      	adds	r6, #72	; 0x48
 8021ed8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021edc:	3b01      	subs	r3, #1
 8021ede:	d503      	bpl.n	8021ee8 <__sfp+0x24>
 8021ee0:	6833      	ldr	r3, [r6, #0]
 8021ee2:	b133      	cbz	r3, 8021ef2 <__sfp+0x2e>
 8021ee4:	6836      	ldr	r6, [r6, #0]
 8021ee6:	e7f7      	b.n	8021ed8 <__sfp+0x14>
 8021ee8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021eec:	b16d      	cbz	r5, 8021f0a <__sfp+0x46>
 8021eee:	3468      	adds	r4, #104	; 0x68
 8021ef0:	e7f4      	b.n	8021edc <__sfp+0x18>
 8021ef2:	2104      	movs	r1, #4
 8021ef4:	4638      	mov	r0, r7
 8021ef6:	f7ff ff9f 	bl	8021e38 <__sfmoreglue>
 8021efa:	6030      	str	r0, [r6, #0]
 8021efc:	2800      	cmp	r0, #0
 8021efe:	d1f1      	bne.n	8021ee4 <__sfp+0x20>
 8021f00:	230c      	movs	r3, #12
 8021f02:	603b      	str	r3, [r7, #0]
 8021f04:	4604      	mov	r4, r0
 8021f06:	4620      	mov	r0, r4
 8021f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021f0a:	4b0b      	ldr	r3, [pc, #44]	; (8021f38 <__sfp+0x74>)
 8021f0c:	6665      	str	r5, [r4, #100]	; 0x64
 8021f0e:	e9c4 5500 	strd	r5, r5, [r4]
 8021f12:	60a5      	str	r5, [r4, #8]
 8021f14:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8021f18:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8021f1c:	2208      	movs	r2, #8
 8021f1e:	4629      	mov	r1, r5
 8021f20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021f24:	f7ff f9bd 	bl	80212a2 <memset>
 8021f28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021f2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021f30:	e7e9      	b.n	8021f06 <__sfp+0x42>
 8021f32:	bf00      	nop
 8021f34:	08025c40 	.word	0x08025c40
 8021f38:	ffff0001 	.word	0xffff0001

08021f3c <_fwalk_reent>:
 8021f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021f40:	4680      	mov	r8, r0
 8021f42:	4689      	mov	r9, r1
 8021f44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021f48:	2600      	movs	r6, #0
 8021f4a:	b914      	cbnz	r4, 8021f52 <_fwalk_reent+0x16>
 8021f4c:	4630      	mov	r0, r6
 8021f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021f52:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8021f56:	3f01      	subs	r7, #1
 8021f58:	d501      	bpl.n	8021f5e <_fwalk_reent+0x22>
 8021f5a:	6824      	ldr	r4, [r4, #0]
 8021f5c:	e7f5      	b.n	8021f4a <_fwalk_reent+0xe>
 8021f5e:	89ab      	ldrh	r3, [r5, #12]
 8021f60:	2b01      	cmp	r3, #1
 8021f62:	d907      	bls.n	8021f74 <_fwalk_reent+0x38>
 8021f64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021f68:	3301      	adds	r3, #1
 8021f6a:	d003      	beq.n	8021f74 <_fwalk_reent+0x38>
 8021f6c:	4629      	mov	r1, r5
 8021f6e:	4640      	mov	r0, r8
 8021f70:	47c8      	blx	r9
 8021f72:	4306      	orrs	r6, r0
 8021f74:	3568      	adds	r5, #104	; 0x68
 8021f76:	e7ee      	b.n	8021f56 <_fwalk_reent+0x1a>

08021f78 <__swhatbuf_r>:
 8021f78:	b570      	push	{r4, r5, r6, lr}
 8021f7a:	460e      	mov	r6, r1
 8021f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021f80:	2900      	cmp	r1, #0
 8021f82:	b096      	sub	sp, #88	; 0x58
 8021f84:	4614      	mov	r4, r2
 8021f86:	461d      	mov	r5, r3
 8021f88:	da07      	bge.n	8021f9a <__swhatbuf_r+0x22>
 8021f8a:	2300      	movs	r3, #0
 8021f8c:	602b      	str	r3, [r5, #0]
 8021f8e:	89b3      	ldrh	r3, [r6, #12]
 8021f90:	061a      	lsls	r2, r3, #24
 8021f92:	d410      	bmi.n	8021fb6 <__swhatbuf_r+0x3e>
 8021f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021f98:	e00e      	b.n	8021fb8 <__swhatbuf_r+0x40>
 8021f9a:	466a      	mov	r2, sp
 8021f9c:	f000 f8b8 	bl	8022110 <_fstat_r>
 8021fa0:	2800      	cmp	r0, #0
 8021fa2:	dbf2      	blt.n	8021f8a <__swhatbuf_r+0x12>
 8021fa4:	9a01      	ldr	r2, [sp, #4]
 8021fa6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8021faa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021fae:	425a      	negs	r2, r3
 8021fb0:	415a      	adcs	r2, r3
 8021fb2:	602a      	str	r2, [r5, #0]
 8021fb4:	e7ee      	b.n	8021f94 <__swhatbuf_r+0x1c>
 8021fb6:	2340      	movs	r3, #64	; 0x40
 8021fb8:	2000      	movs	r0, #0
 8021fba:	6023      	str	r3, [r4, #0]
 8021fbc:	b016      	add	sp, #88	; 0x58
 8021fbe:	bd70      	pop	{r4, r5, r6, pc}

08021fc0 <__smakebuf_r>:
 8021fc0:	898b      	ldrh	r3, [r1, #12]
 8021fc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021fc4:	079d      	lsls	r5, r3, #30
 8021fc6:	4606      	mov	r6, r0
 8021fc8:	460c      	mov	r4, r1
 8021fca:	d507      	bpl.n	8021fdc <__smakebuf_r+0x1c>
 8021fcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021fd0:	6023      	str	r3, [r4, #0]
 8021fd2:	6123      	str	r3, [r4, #16]
 8021fd4:	2301      	movs	r3, #1
 8021fd6:	6163      	str	r3, [r4, #20]
 8021fd8:	b002      	add	sp, #8
 8021fda:	bd70      	pop	{r4, r5, r6, pc}
 8021fdc:	ab01      	add	r3, sp, #4
 8021fde:	466a      	mov	r2, sp
 8021fe0:	f7ff ffca 	bl	8021f78 <__swhatbuf_r>
 8021fe4:	9900      	ldr	r1, [sp, #0]
 8021fe6:	4605      	mov	r5, r0
 8021fe8:	4630      	mov	r0, r6
 8021fea:	f7ff f9b1 	bl	8021350 <_malloc_r>
 8021fee:	b948      	cbnz	r0, 8022004 <__smakebuf_r+0x44>
 8021ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021ff4:	059a      	lsls	r2, r3, #22
 8021ff6:	d4ef      	bmi.n	8021fd8 <__smakebuf_r+0x18>
 8021ff8:	f023 0303 	bic.w	r3, r3, #3
 8021ffc:	f043 0302 	orr.w	r3, r3, #2
 8022000:	81a3      	strh	r3, [r4, #12]
 8022002:	e7e3      	b.n	8021fcc <__smakebuf_r+0xc>
 8022004:	4b0d      	ldr	r3, [pc, #52]	; (802203c <__smakebuf_r+0x7c>)
 8022006:	62b3      	str	r3, [r6, #40]	; 0x28
 8022008:	89a3      	ldrh	r3, [r4, #12]
 802200a:	6020      	str	r0, [r4, #0]
 802200c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022010:	81a3      	strh	r3, [r4, #12]
 8022012:	9b00      	ldr	r3, [sp, #0]
 8022014:	6163      	str	r3, [r4, #20]
 8022016:	9b01      	ldr	r3, [sp, #4]
 8022018:	6120      	str	r0, [r4, #16]
 802201a:	b15b      	cbz	r3, 8022034 <__smakebuf_r+0x74>
 802201c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022020:	4630      	mov	r0, r6
 8022022:	f000 f887 	bl	8022134 <_isatty_r>
 8022026:	b128      	cbz	r0, 8022034 <__smakebuf_r+0x74>
 8022028:	89a3      	ldrh	r3, [r4, #12]
 802202a:	f023 0303 	bic.w	r3, r3, #3
 802202e:	f043 0301 	orr.w	r3, r3, #1
 8022032:	81a3      	strh	r3, [r4, #12]
 8022034:	89a3      	ldrh	r3, [r4, #12]
 8022036:	431d      	orrs	r5, r3
 8022038:	81a5      	strh	r5, [r4, #12]
 802203a:	e7cd      	b.n	8021fd8 <__smakebuf_r+0x18>
 802203c:	08021e2d 	.word	0x08021e2d

08022040 <__malloc_lock>:
 8022040:	4770      	bx	lr

08022042 <__malloc_unlock>:
 8022042:	4770      	bx	lr

08022044 <__sread>:
 8022044:	b510      	push	{r4, lr}
 8022046:	460c      	mov	r4, r1
 8022048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802204c:	f000 f894 	bl	8022178 <_read_r>
 8022050:	2800      	cmp	r0, #0
 8022052:	bfab      	itete	ge
 8022054:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022056:	89a3      	ldrhlt	r3, [r4, #12]
 8022058:	181b      	addge	r3, r3, r0
 802205a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802205e:	bfac      	ite	ge
 8022060:	6563      	strge	r3, [r4, #84]	; 0x54
 8022062:	81a3      	strhlt	r3, [r4, #12]
 8022064:	bd10      	pop	{r4, pc}

08022066 <__swrite>:
 8022066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802206a:	461f      	mov	r7, r3
 802206c:	898b      	ldrh	r3, [r1, #12]
 802206e:	05db      	lsls	r3, r3, #23
 8022070:	4605      	mov	r5, r0
 8022072:	460c      	mov	r4, r1
 8022074:	4616      	mov	r6, r2
 8022076:	d505      	bpl.n	8022084 <__swrite+0x1e>
 8022078:	2302      	movs	r3, #2
 802207a:	2200      	movs	r2, #0
 802207c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022080:	f000 f868 	bl	8022154 <_lseek_r>
 8022084:	89a3      	ldrh	r3, [r4, #12]
 8022086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802208a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802208e:	81a3      	strh	r3, [r4, #12]
 8022090:	4632      	mov	r2, r6
 8022092:	463b      	mov	r3, r7
 8022094:	4628      	mov	r0, r5
 8022096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802209a:	f000 b817 	b.w	80220cc <_write_r>

0802209e <__sseek>:
 802209e:	b510      	push	{r4, lr}
 80220a0:	460c      	mov	r4, r1
 80220a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80220a6:	f000 f855 	bl	8022154 <_lseek_r>
 80220aa:	1c43      	adds	r3, r0, #1
 80220ac:	89a3      	ldrh	r3, [r4, #12]
 80220ae:	bf15      	itete	ne
 80220b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80220b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80220b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80220ba:	81a3      	strheq	r3, [r4, #12]
 80220bc:	bf18      	it	ne
 80220be:	81a3      	strhne	r3, [r4, #12]
 80220c0:	bd10      	pop	{r4, pc}

080220c2 <__sclose>:
 80220c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80220c6:	f000 b813 	b.w	80220f0 <_close_r>
	...

080220cc <_write_r>:
 80220cc:	b538      	push	{r3, r4, r5, lr}
 80220ce:	4c07      	ldr	r4, [pc, #28]	; (80220ec <_write_r+0x20>)
 80220d0:	4605      	mov	r5, r0
 80220d2:	4608      	mov	r0, r1
 80220d4:	4611      	mov	r1, r2
 80220d6:	2200      	movs	r2, #0
 80220d8:	6022      	str	r2, [r4, #0]
 80220da:	461a      	mov	r2, r3
 80220dc:	f7f1 f809 	bl	80130f2 <_write>
 80220e0:	1c43      	adds	r3, r0, #1
 80220e2:	d102      	bne.n	80220ea <_write_r+0x1e>
 80220e4:	6823      	ldr	r3, [r4, #0]
 80220e6:	b103      	cbz	r3, 80220ea <_write_r+0x1e>
 80220e8:	602b      	str	r3, [r5, #0]
 80220ea:	bd38      	pop	{r3, r4, r5, pc}
 80220ec:	2000a4e8 	.word	0x2000a4e8

080220f0 <_close_r>:
 80220f0:	b538      	push	{r3, r4, r5, lr}
 80220f2:	4c06      	ldr	r4, [pc, #24]	; (802210c <_close_r+0x1c>)
 80220f4:	2300      	movs	r3, #0
 80220f6:	4605      	mov	r5, r0
 80220f8:	4608      	mov	r0, r1
 80220fa:	6023      	str	r3, [r4, #0]
 80220fc:	f7f1 f815 	bl	801312a <_close>
 8022100:	1c43      	adds	r3, r0, #1
 8022102:	d102      	bne.n	802210a <_close_r+0x1a>
 8022104:	6823      	ldr	r3, [r4, #0]
 8022106:	b103      	cbz	r3, 802210a <_close_r+0x1a>
 8022108:	602b      	str	r3, [r5, #0]
 802210a:	bd38      	pop	{r3, r4, r5, pc}
 802210c:	2000a4e8 	.word	0x2000a4e8

08022110 <_fstat_r>:
 8022110:	b538      	push	{r3, r4, r5, lr}
 8022112:	4c07      	ldr	r4, [pc, #28]	; (8022130 <_fstat_r+0x20>)
 8022114:	2300      	movs	r3, #0
 8022116:	4605      	mov	r5, r0
 8022118:	4608      	mov	r0, r1
 802211a:	4611      	mov	r1, r2
 802211c:	6023      	str	r3, [r4, #0]
 802211e:	f7f1 f810 	bl	8013142 <_fstat>
 8022122:	1c43      	adds	r3, r0, #1
 8022124:	d102      	bne.n	802212c <_fstat_r+0x1c>
 8022126:	6823      	ldr	r3, [r4, #0]
 8022128:	b103      	cbz	r3, 802212c <_fstat_r+0x1c>
 802212a:	602b      	str	r3, [r5, #0]
 802212c:	bd38      	pop	{r3, r4, r5, pc}
 802212e:	bf00      	nop
 8022130:	2000a4e8 	.word	0x2000a4e8

08022134 <_isatty_r>:
 8022134:	b538      	push	{r3, r4, r5, lr}
 8022136:	4c06      	ldr	r4, [pc, #24]	; (8022150 <_isatty_r+0x1c>)
 8022138:	2300      	movs	r3, #0
 802213a:	4605      	mov	r5, r0
 802213c:	4608      	mov	r0, r1
 802213e:	6023      	str	r3, [r4, #0]
 8022140:	f7f1 f80f 	bl	8013162 <_isatty>
 8022144:	1c43      	adds	r3, r0, #1
 8022146:	d102      	bne.n	802214e <_isatty_r+0x1a>
 8022148:	6823      	ldr	r3, [r4, #0]
 802214a:	b103      	cbz	r3, 802214e <_isatty_r+0x1a>
 802214c:	602b      	str	r3, [r5, #0]
 802214e:	bd38      	pop	{r3, r4, r5, pc}
 8022150:	2000a4e8 	.word	0x2000a4e8

08022154 <_lseek_r>:
 8022154:	b538      	push	{r3, r4, r5, lr}
 8022156:	4c07      	ldr	r4, [pc, #28]	; (8022174 <_lseek_r+0x20>)
 8022158:	4605      	mov	r5, r0
 802215a:	4608      	mov	r0, r1
 802215c:	4611      	mov	r1, r2
 802215e:	2200      	movs	r2, #0
 8022160:	6022      	str	r2, [r4, #0]
 8022162:	461a      	mov	r2, r3
 8022164:	f7f1 f808 	bl	8013178 <_lseek>
 8022168:	1c43      	adds	r3, r0, #1
 802216a:	d102      	bne.n	8022172 <_lseek_r+0x1e>
 802216c:	6823      	ldr	r3, [r4, #0]
 802216e:	b103      	cbz	r3, 8022172 <_lseek_r+0x1e>
 8022170:	602b      	str	r3, [r5, #0]
 8022172:	bd38      	pop	{r3, r4, r5, pc}
 8022174:	2000a4e8 	.word	0x2000a4e8

08022178 <_read_r>:
 8022178:	b538      	push	{r3, r4, r5, lr}
 802217a:	4c07      	ldr	r4, [pc, #28]	; (8022198 <_read_r+0x20>)
 802217c:	4605      	mov	r5, r0
 802217e:	4608      	mov	r0, r1
 8022180:	4611      	mov	r1, r2
 8022182:	2200      	movs	r2, #0
 8022184:	6022      	str	r2, [r4, #0]
 8022186:	461a      	mov	r2, r3
 8022188:	f7f0 ff96 	bl	80130b8 <_read>
 802218c:	1c43      	adds	r3, r0, #1
 802218e:	d102      	bne.n	8022196 <_read_r+0x1e>
 8022190:	6823      	ldr	r3, [r4, #0]
 8022192:	b103      	cbz	r3, 8022196 <_read_r+0x1e>
 8022194:	602b      	str	r3, [r5, #0]
 8022196:	bd38      	pop	{r3, r4, r5, pc}
 8022198:	2000a4e8 	.word	0x2000a4e8

0802219c <_init>:
 802219c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802219e:	bf00      	nop
 80221a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80221a2:	bc08      	pop	{r3}
 80221a4:	469e      	mov	lr, r3
 80221a6:	4770      	bx	lr

080221a8 <_fini>:
 80221a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80221aa:	bf00      	nop
 80221ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80221ae:	bc08      	pop	{r3}
 80221b0:	469e      	mov	lr, r3
 80221b2:	4770      	bx	lr
